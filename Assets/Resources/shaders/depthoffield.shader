Shader "Hidden/Post FX/Depth Of Field" {
	Properties {
		_MainTex ("", 2D) = "black" {}
	}
	SubShader {
		Pass {
			Name "CoC Calculation"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 3938
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Distance;
					uniform 	float _LensCoeff;
					uniform 	float _RcpMaxCoC;
					UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					float u_xlat1;
					void main()
					{
					    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0 = _ZBufferParams.z * u_xlat10_0.x + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat1 = u_xlat0 + (-_Distance);
					    u_xlat0 = max(u_xlat0, 9.99999975e-06);
					    u_xlat1 = u_xlat1 * _LensCoeff;
					    u_xlat0 = u_xlat1 / u_xlat0;
					    u_xlat0 = u_xlat0 * 0.5;
					    u_xlat0 = u_xlat0 * _RcpMaxCoC + 0.5;
					    SV_Target0 = vec4(u_xlat0);
					    SV_Target0 = clamp(SV_Target0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 98
					; Schema: 0
					                                                OpCapability Shader 
					                                         %1 = OpExtInstImport "GLSL.std.450" 
					                                                OpMemoryModel Logical GLSL450 
					                                                OpEntryPoint Fragment %4 "main" %22 %95 
					                                                OpExecutionMode %4 OriginUpperLeft 
					                                                OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                OpDecorate %12 DescriptorSet 12 
					                                                OpDecorate %12 Binding 12 
					                                                OpDecorate %16 DescriptorSet 16 
					                                                OpDecorate %16 Binding 16 
					                                                OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                OpDecorate vs_TEXCOORD0 Location 22 
					                                                OpDecorate %23 RelaxedPrecision 
					                                                OpDecorate %24 RelaxedPrecision 
					                                                OpMemberDecorate %30 0 Offset 30 
					                                                OpMemberDecorate %30 1 Offset 30 
					                                                OpMemberDecorate %30 2 Offset 30 
					                                                OpMemberDecorate %30 3 Offset 30 
					                                                OpDecorate %30 Block 
					                                                OpDecorate %32 DescriptorSet 32 
					                                                OpDecorate %32 Binding 32 
					                                                OpDecorate %75 RelaxedPrecision 
					                                                OpDecorate %80 RelaxedPrecision 
					                                                OpDecorate %95 RelaxedPrecision 
					                                                OpDecorate %95 Location 95 
					                                         %2 = OpTypeVoid 
					                                         %3 = OpTypeFunction %2 
					                                         %6 = OpTypeFloat 32 
					                                         %7 = OpTypeVector %6 4 
					                                         %8 = OpTypePointer Private %7 
					                          Private f32_4* %9 = OpVariable Private 
					                                        %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                        %11 = OpTypePointer UniformConstant %10 
					   UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                        %14 = OpTypeSampler 
					                                        %15 = OpTypePointer UniformConstant %14 
					               UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                        %18 = OpTypeSampledImage %10 
					                                        %20 = OpTypeVector %6 2 
					                                        %21 = OpTypePointer Input %20 
					                  Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                        %25 = OpTypeInt 32 0 
					                                    u32 %26 = OpConstant 0 
					                                        %28 = OpTypePointer Private %6 
					                                        %30 = OpTypeStruct %7 %6 %6 %6 
					                                        %31 = OpTypePointer Uniform %30 
					Uniform struct {f32_4; f32; f32; f32;}* %32 = OpVariable Uniform 
					                                        %33 = OpTypeInt 32 1 
					                                    i32 %34 = OpConstant 0 
					                                    u32 %35 = OpConstant 2 
					                                        %36 = OpTypePointer Uniform %6 
					                                    u32 %42 = OpConstant 3 
					                                    f32 %47 = OpConstant 3,674022E-40 
					                           Private f32* %52 = OpVariable Private 
					                                    i32 %55 = OpConstant 1 
					                                    f32 %62 = OpConstant 3,674022E-40 
					                                    i32 %66 = OpConstant 2 
					                           Private f32* %75 = OpVariable Private 
					                                    f32 %78 = OpConstant 3,674022E-40 
					                                    i32 %81 = OpConstant 3 
					                                    f32 %90 = OpConstant 3,674022E-40 
					                                        %94 = OpTypePointer Output %7 
					                          Output f32_4* %95 = OpVariable Output 
					                                    void %4 = OpFunction None %3 
					                                         %5 = OpLabel 
					                    read_only Texture2D %13 = OpLoad %12 
					                                sampler %17 = OpLoad %16 
					             read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                  f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                  f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                    f32 %27 = OpCompositeExtract %24 0 
					                           Private f32* %29 = OpAccessChain %9 %26 
					                                                OpStore %29 %27 
					                           Uniform f32* %37 = OpAccessChain %32 %34 %35 
					                                    f32 %38 = OpLoad %37 
					                           Private f32* %39 = OpAccessChain %9 %26 
					                                    f32 %40 = OpLoad %39 
					                                    f32 %41 = OpFMul %38 %40 
					                           Uniform f32* %43 = OpAccessChain %32 %34 %42 
					                                    f32 %44 = OpLoad %43 
					                                    f32 %45 = OpFAdd %41 %44 
					                           Private f32* %46 = OpAccessChain %9 %26 
					                                                OpStore %46 %45 
					                           Private f32* %48 = OpAccessChain %9 %26 
					                                    f32 %49 = OpLoad %48 
					                                    f32 %50 = OpFDiv %47 %49 
					                           Private f32* %51 = OpAccessChain %9 %26 
					                                                OpStore %51 %50 
					                           Private f32* %53 = OpAccessChain %9 %26 
					                                    f32 %54 = OpLoad %53 
					                           Uniform f32* %56 = OpAccessChain %32 %55 
					                                    f32 %57 = OpLoad %56 
					                                    f32 %58 = OpFNegate %57 
					                                    f32 %59 = OpFAdd %54 %58 
					                                                OpStore %52 %59 
					                           Private f32* %60 = OpAccessChain %9 %26 
					                                    f32 %61 = OpLoad %60 
					                                    f32 %63 = OpExtInst %1 40 %61 %62 
					                           Private f32* %64 = OpAccessChain %9 %26 
					                                                OpStore %64 %63 
					                                    f32 %65 = OpLoad %52 
					                           Uniform f32* %67 = OpAccessChain %32 %66 
					                                    f32 %68 = OpLoad %67 
					                                    f32 %69 = OpFMul %65 %68 
					                                                OpStore %52 %69 
					                                    f32 %70 = OpLoad %52 
					                           Private f32* %71 = OpAccessChain %9 %26 
					                                    f32 %72 = OpLoad %71 
					                                    f32 %73 = OpFDiv %70 %72 
					                           Private f32* %74 = OpAccessChain %9 %26 
					                                                OpStore %74 %73 
					                           Private f32* %76 = OpAccessChain %9 %26 
					                                    f32 %77 = OpLoad %76 
					                                    f32 %79 = OpFMul %77 %78 
					                                                OpStore %75 %79 
					                                    f32 %80 = OpLoad %75 
					                           Uniform f32* %82 = OpAccessChain %32 %81 
					                                    f32 %83 = OpLoad %82 
					                                    f32 %84 = OpFMul %80 %83 
					                                    f32 %85 = OpFAdd %84 %78 
					                           Private f32* %86 = OpAccessChain %9 %26 
					                                                OpStore %86 %85 
					                                  f32_4 %87 = OpLoad %9 
					                                  f32_4 %88 = OpVectorShuffle %87 %87 0 0 0 0 
					                                                OpStore %9 %88 
					                                  f32_4 %89 = OpLoad %9 
					                                  f32_4 %91 = OpCompositeConstruct %90 %90 %90 %90 
					                                  f32_4 %92 = OpCompositeConstruct %47 %47 %47 %47 
					                                  f32_4 %93 = OpExtInst %1 43 %89 %91 %92 
					                                                OpStore %9 %93 
					                                  f32_4 %96 = OpLoad %9 
					                                                OpStore %95 %96 
					                                                OpReturn
					                                                OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float _Distance;
						float _LensCoeff;
						float _RcpMaxCoC;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					float u_xlat1;
					void main()
					{
					    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0 = _ZBufferParams.z * u_xlat10_0.x + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat1 = u_xlat0 + (-_Distance);
					    u_xlat0 = max(u_xlat0, 9.99999975e-06);
					    u_xlat1 = u_xlat1 * _LensCoeff;
					    u_xlat0 = u_xlat1 / u_xlat0;
					    u_xlat0 = u_xlat0 * 0.5;
					    u_xlat0 = u_xlat0 * _RcpMaxCoC + 0.5;
					    SV_Target0 = vec4(u_xlat0);
					    SV_Target0 = clamp(SV_Target0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "CoC Temporal Filter"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 89058
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(binding = 0, std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(binding = 1, std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(binding = 2, std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL4x
					#ifdef VERTEX
					#version 420
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shading_language_420pack : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 420
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shading_language_420pack : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	vec3 _TaaParams;
					UNITY_LOCATION(0) uniform  sampler2D _CoCTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraMotionVectorsTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec2 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					bool u_xlatb11;
					vec2 u_xlat13;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.yy * vec2(-0.0, -1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_TaaParams.xxyz.yz);
					    u_xlat15 = texture(_CoCTex, u_xlat1.xy).x;
					    u_xlat1 = (-_MainTex_TexelSize.xyyy) * vec4(1.0, 0.0, 0.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1.x = texture(_CoCTex, u_xlat1.xy).x;
					    u_xlat0.z = texture(_CoCTex, u_xlat1.zw).x;
					    u_xlatb6 = u_xlat1.x<u_xlat15;
					    u_xlat2.z = (u_xlatb6) ? u_xlat1.x : u_xlat15;
					    u_xlat1.x = max(u_xlat15, u_xlat1.x);
					    u_xlat1.x = max(u_xlat0.z, u_xlat1.x);
					    u_xlatb11 = u_xlat0.z<u_xlat2.z;
					    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(1.0, 0.0);
					    u_xlat13.xy = (-u_xlat3.xy);
					    u_xlat2.xy = mix(vec2(0.0, 0.0), u_xlat13.xy, vec2(bvec2(u_xlatb6)));
					    u_xlat0.xyz = (bool(u_xlatb11)) ? u_xlat0.xyz : u_xlat2.xyz;
					    u_xlat2.xy = _MainTex_TexelSize.yy * vec2(0.0, 1.0);
					    u_xlat4 = _MainTex_TexelSize.yyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2.z = texture(_CoCTex, u_xlat4.xy).x;
					    u_xlat6 = texture(_CoCTex, u_xlat4.zw).x;
					    u_xlatb11 = u_xlat2.z<u_xlat0.z;
					    u_xlat1.x = max(u_xlat1.x, u_xlat2.z);
					    u_xlat1.x = max(u_xlat6, u_xlat1.x);
					    u_xlat0.xyz = (bool(u_xlatb11)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlatb11 = u_xlat6<u_xlat0.z;
					    u_xlat10 = min(u_xlat6, u_xlat0.z);
					    u_xlat0.xy = (bool(u_xlatb11)) ? u_xlat3.xy : u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat10_0.xy = texture(_CameraMotionVectorsTexture, u_xlat0.xy).xy;
					    u_xlat0.xy = (-u_xlat10_0.xy) + vs_TEXCOORD0.xy;
					    u_xlat10_0.x = texture(_MainTex, u_xlat0.xy).x;
					    u_xlat0.x = max(u_xlat10, u_xlat10_0.x);
					    u_xlat0.x = min(u_xlat1.x, u_xlat0.x);
					    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
					    SV_Target0 = vec4(_TaaParams.z, _TaaParams.z, _TaaParams.z, _TaaParams.z) * u_xlat0.xxxx + vec4(u_xlat15);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 267
					; Schema: 0
					                                              OpCapability Shader 
					                                       %1 = OpExtInstImport "GLSL.std.450" 
					                                              OpMemoryModel Logical GLSL450 
					                                              OpEntryPoint Fragment %4 "main" %30 %256 
					                                              OpExecutionMode %4 OriginUpperLeft 
					                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                              OpMemberDecorate %11 0 Offset 11 
					                                              OpMemberDecorate %11 1 RelaxedPrecision 
					                                              OpMemberDecorate %11 1 Offset 11 
					                                              OpDecorate %11 Block 
					                                              OpDecorate %13 DescriptorSet 13 
					                                              OpDecorate %13 Binding 13 
					                                              OpDecorate %28 RelaxedPrecision 
					                                              OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                              OpDecorate vs_TEXCOORD0 Location 30 
					                                              OpDecorate %31 RelaxedPrecision 
					                                              OpDecorate %35 RelaxedPrecision 
					                                              OpDecorate %36 RelaxedPrecision 
					                                              OpDecorate %37 RelaxedPrecision 
					                                              OpDecorate %38 RelaxedPrecision 
					                                              OpDecorate %43 RelaxedPrecision 
					                                              OpDecorate %43 DescriptorSet 43 
					                                              OpDecorate %43 Binding 43 
					                                              OpDecorate %44 RelaxedPrecision 
					                                              OpDecorate %47 RelaxedPrecision 
					                                              OpDecorate %47 DescriptorSet 47 
					                                              OpDecorate %47 Binding 47 
					                                              OpDecorate %48 RelaxedPrecision 
					                                              OpDecorate %51 RelaxedPrecision 
					                                              OpDecorate %52 RelaxedPrecision 
					                                              OpDecorate %66 RelaxedPrecision 
					                                              OpDecorate %67 RelaxedPrecision 
					                                              OpDecorate %70 RelaxedPrecision 
					                                              OpDecorate %71 RelaxedPrecision 
					                                              OpDecorate %77 RelaxedPrecision 
					                                              OpDecorate %78 RelaxedPrecision 
					                                              OpDecorate %98 RelaxedPrecision 
					                                              OpDecorate %104 RelaxedPrecision 
					                                              OpDecorate %152 RelaxedPrecision 
					                                              OpDecorate %153 RelaxedPrecision 
					                                              OpDecorate %155 RelaxedPrecision 
					                                              OpDecorate %156 RelaxedPrecision 
					                                              OpDecorate %163 RelaxedPrecision 
					                                              OpDecorate %164 RelaxedPrecision 
					                                              OpDecorate %177 RelaxedPrecision 
					                                              OpDecorate %180 RelaxedPrecision 
					                                              OpDecorate %213 RelaxedPrecision 
					                                              OpDecorate %217 RelaxedPrecision 
					                                              OpDecorate %218 RelaxedPrecision 
					                                              OpDecorate %218 DescriptorSet 218 
					                                              OpDecorate %218 Binding 218 
					                                              OpDecorate %219 RelaxedPrecision 
					                                              OpDecorate %220 RelaxedPrecision 
					                                              OpDecorate %220 DescriptorSet 220 
					                                              OpDecorate %220 Binding 220 
					                                              OpDecorate %221 RelaxedPrecision 
					                                              OpDecorate %226 RelaxedPrecision 
					                                              OpDecorate %227 RelaxedPrecision 
					                                              OpDecorate %228 RelaxedPrecision 
					                                              OpDecorate %229 RelaxedPrecision 
					                                              OpDecorate %230 RelaxedPrecision 
					                                              OpDecorate %233 RelaxedPrecision 
					                                              OpDecorate %233 DescriptorSet 233 
					                                              OpDecorate %233 Binding 233 
					                                              OpDecorate %234 RelaxedPrecision 
					                                              OpDecorate %235 RelaxedPrecision 
					                                              OpDecorate %235 DescriptorSet 235 
					                                              OpDecorate %235 Binding 235 
					                                              OpDecorate %236 RelaxedPrecision 
					                                              OpDecorate %241 RelaxedPrecision 
					                                              OpDecorate %243 RelaxedPrecision 
					                                              OpDecorate %246 RelaxedPrecision 
					                                              OpDecorate %248 RelaxedPrecision 
					                                              OpDecorate %249 RelaxedPrecision 
					                                              OpDecorate %250 RelaxedPrecision 
					                                              OpDecorate %253 RelaxedPrecision 
					                                              OpDecorate %256 RelaxedPrecision 
					                                              OpDecorate %256 Location 256 
					                                              OpDecorate %258 RelaxedPrecision 
					                                              OpDecorate %259 RelaxedPrecision 
					                                              OpDecorate %260 RelaxedPrecision 
					                                              OpDecorate %261 RelaxedPrecision 
					                                              OpDecorate %262 RelaxedPrecision 
					                                              OpDecorate %264 RelaxedPrecision 
					                                              OpDecorate %265 RelaxedPrecision 
					                                       %2 = OpTypeVoid 
					                                       %3 = OpTypeFunction %2 
					                                       %6 = OpTypeFloat 32 
					                                       %7 = OpTypeVector %6 3 
					                                       %8 = OpTypePointer Private %7 
					                        Private f32_3* %9 = OpVariable Private 
					                                      %10 = OpTypeVector %6 4 
					                                      %11 = OpTypeStruct %10 %7 
					                                      %12 = OpTypePointer Uniform %11 
					      Uniform struct {f32_4; f32_3;}* %13 = OpVariable Uniform 
					                                      %14 = OpTypeInt 32 1 
					                                  i32 %15 = OpConstant 0 
					                                      %16 = OpTypeVector %6 2 
					                                      %17 = OpTypePointer Uniform %10 
					                                  f32 %21 = OpConstant 3,674022E-40 
					                                  f32 %22 = OpConstant 3,674022E-40 
					                                f32_2 %23 = OpConstantComposite %21 %22 
					                                      %27 = OpTypePointer Private %16 
					                       Private f32_2* %28 = OpVariable Private 
					                                      %29 = OpTypePointer Input %16 
					                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                  i32 %32 = OpConstant 1 
					                                      %33 = OpTypePointer Uniform %7 
					                                      %39 = OpTypePointer Private %6 
					                         Private f32* %40 = OpVariable Private 
					                                      %41 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                      %42 = OpTypePointer UniformConstant %41 
					 UniformConstant read_only Texture2D* %43 = OpVariable UniformConstant 
					                                      %45 = OpTypeSampler 
					                                      %46 = OpTypePointer UniformConstant %45 
					             UniformConstant sampler* %47 = OpVariable UniformConstant 
					                                      %49 = OpTypeSampledImage %41 
					                                      %53 = OpTypeInt 32 0 
					                                  u32 %54 = OpConstant 0 
					                                      %56 = OpTypePointer Private %10 
					                       Private f32_4* %57 = OpVariable Private 
					                                  f32 %62 = OpConstant 3,674022E-40 
					                                  f32 %63 = OpConstant 3,674022E-40 
					                                f32_4 %64 = OpConstantComposite %62 %63 %63 %62 
					                         Private f32* %69 = OpVariable Private 
					                                  u32 %84 = OpConstant 2 
					                                      %86 = OpTypeBool 
					                                      %87 = OpTypePointer Private %86 
					                        Private bool* %88 = OpVariable Private 
					                       Private f32_3* %92 = OpVariable Private 
					                         Private f32* %98 = OpVariable Private 
					                       Private bool* %106 = OpVariable Private 
					                      Private f32_2* %112 = OpVariable Private 
					                               f32_2 %116 = OpConstantComposite %62 %63 
					                      Private f32_2* %118 = OpVariable Private 
					                               f32_2 %121 = OpConstantComposite %63 %63 
					                                     %124 = OpTypeVector %86 2 
					                               f32_2 %126 = OpConstantComposite %62 %62 
					                                     %132 = OpTypePointer Function %7 
					                               f32_2 %143 = OpConstantComposite %63 %62 
					                               f32_4 %150 = OpConstantComposite %63 %62 %62 %63 
					                        Private f32* %194 = OpVariable Private 
					                                     %200 = OpTypePointer Function %16 
					                      Private f32_2* %217 = OpVariable Private 
					UniformConstant read_only Texture2D* %218 = OpVariable UniformConstant 
					            UniformConstant sampler* %220 = OpVariable UniformConstant 
					UniformConstant read_only Texture2D* %233 = OpVariable UniformConstant 
					            UniformConstant sampler* %235 = OpVariable UniformConstant 
					                        Private f32* %243 = OpVariable Private 
					                                     %255 = OpTypePointer Output %10 
					                       Output f32_4* %256 = OpVariable Output 
					                                  void %4 = OpFunction None %3 
					                                       %5 = OpLabel 
					                     Function f32_3* %133 = OpVariable Function 
					                     Function f32_3* %183 = OpVariable Function 
					                     Function f32_2* %201 = OpVariable Function 
					                       Uniform f32_4* %18 = OpAccessChain %13 %15 
					                                f32_4 %19 = OpLoad %18 
					                                f32_2 %20 = OpVectorShuffle %19 %19 1 1 
					                                f32_2 %24 = OpFMul %20 %23 
					                                f32_3 %25 = OpLoad %9 
					                                f32_3 %26 = OpVectorShuffle %25 %24 3 4 2 
					                                              OpStore %9 %26 
					                                f32_2 %31 = OpLoad vs_TEXCOORD0 
					                       Uniform f32_3* %34 = OpAccessChain %13 %32 
					                                f32_3 %35 = OpLoad %34 
					                                f32_2 %36 = OpVectorShuffle %35 %35 0 1 
					                                f32_2 %37 = OpFNegate %36 
					                                f32_2 %38 = OpFAdd %31 %37 
					                                              OpStore %28 %38 
					                  read_only Texture2D %44 = OpLoad %43 
					                              sampler %48 = OpLoad %47 
					           read_only Texture2DSampled %50 = OpSampledImage %44 %48 
					                                f32_2 %51 = OpLoad %28 
					                                f32_4 %52 = OpImageSampleImplicitLod %50 %51 
					                                  f32 %55 = OpCompositeExtract %52 0 
					                                              OpStore %40 %55 
					                       Uniform f32_4* %58 = OpAccessChain %13 %15 
					                                f32_4 %59 = OpLoad %58 
					                                f32_4 %60 = OpVectorShuffle %59 %59 0 1 1 1 
					                                f32_4 %61 = OpFNegate %60 
					                                f32_4 %65 = OpFMul %61 %64 
					                                f32_2 %66 = OpLoad vs_TEXCOORD0 
					                                f32_4 %67 = OpVectorShuffle %66 %66 0 1 0 1 
					                                f32_4 %68 = OpFAdd %65 %67 
					                                              OpStore %57 %68 
					                  read_only Texture2D %70 = OpLoad %43 
					                              sampler %71 = OpLoad %47 
					           read_only Texture2DSampled %72 = OpSampledImage %70 %71 
					                                f32_4 %73 = OpLoad %57 
					                                f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                                f32_4 %75 = OpImageSampleImplicitLod %72 %74 
					                                  f32 %76 = OpCompositeExtract %75 0 
					                                              OpStore %69 %76 
					                  read_only Texture2D %77 = OpLoad %43 
					                              sampler %78 = OpLoad %47 
					           read_only Texture2DSampled %79 = OpSampledImage %77 %78 
					                                f32_4 %80 = OpLoad %57 
					                                f32_2 %81 = OpVectorShuffle %80 %80 2 3 
					                                f32_4 %82 = OpImageSampleImplicitLod %79 %81 
					                                  f32 %83 = OpCompositeExtract %82 0 
					                         Private f32* %85 = OpAccessChain %9 %84 
					                                              OpStore %85 %83 
					                                  f32 %89 = OpLoad %69 
					                                  f32 %90 = OpLoad %40 
					                                 bool %91 = OpFOrdLessThan %89 %90 
					                                              OpStore %88 %91 
					                                 bool %93 = OpLoad %88 
					                                  f32 %94 = OpLoad %69 
					                                  f32 %95 = OpLoad %40 
					                                  f32 %96 = OpSelect %93 %94 %95 
					                         Private f32* %97 = OpAccessChain %92 %84 
					                                              OpStore %97 %96 
					                                  f32 %99 = OpLoad %40 
					                                 f32 %100 = OpLoad %69 
					                                 f32 %101 = OpExtInst %1 40 %99 %100 
					                                              OpStore %98 %101 
					                        Private f32* %102 = OpAccessChain %9 %84 
					                                 f32 %103 = OpLoad %102 
					                                 f32 %104 = OpLoad %98 
					                                 f32 %105 = OpExtInst %1 40 %103 %104 
					                                              OpStore %98 %105 
					                        Private f32* %107 = OpAccessChain %9 %84 
					                                 f32 %108 = OpLoad %107 
					                        Private f32* %109 = OpAccessChain %92 %84 
					                                 f32 %110 = OpLoad %109 
					                                bool %111 = OpFOrdLessThan %108 %110 
					                                              OpStore %106 %111 
					                      Uniform f32_4* %113 = OpAccessChain %13 %15 
					                               f32_4 %114 = OpLoad %113 
					                               f32_2 %115 = OpVectorShuffle %114 %114 0 1 
					                               f32_2 %117 = OpFMul %115 %116 
					                                              OpStore %112 %117 
					                               f32_2 %119 = OpLoad %112 
					                               f32_2 %120 = OpFNegate %119 
					                                              OpStore %118 %120 
					                               f32_2 %122 = OpLoad %118 
					                                bool %123 = OpLoad %88 
					                              bool_2 %125 = OpCompositeConstruct %123 %123 
					                               f32_2 %127 = OpSelect %125 %126 %121 
					                               f32_2 %128 = OpExtInst %1 46 %121 %122 %127 
					                               f32_3 %129 = OpLoad %92 
					                               f32_3 %130 = OpVectorShuffle %129 %128 3 4 2 
					                                              OpStore %92 %130 
					                                bool %131 = OpLoad %106 
					                                              OpSelectionMerge %135 None 
					                                              OpBranchConditional %131 %134 %137 
					                                     %134 = OpLabel 
					                               f32_3 %136 = OpLoad %9 
					                                              OpStore %133 %136 
					                                              OpBranch %135 
					                                     %137 = OpLabel 
					                               f32_3 %138 = OpLoad %92 
					                                              OpStore %133 %138 
					                                              OpBranch %135 
					                                     %135 = OpLabel 
					                               f32_3 %139 = OpLoad %133 
					                                              OpStore %9 %139 
					                      Uniform f32_4* %140 = OpAccessChain %13 %15 
					                               f32_4 %141 = OpLoad %140 
					                               f32_2 %142 = OpVectorShuffle %141 %141 1 1 
					                               f32_2 %144 = OpFMul %142 %143 
					                               f32_3 %145 = OpLoad %92 
					                               f32_3 %146 = OpVectorShuffle %145 %144 3 4 2 
					                                              OpStore %92 %146 
					                      Uniform f32_4* %147 = OpAccessChain %13 %15 
					                               f32_4 %148 = OpLoad %147 
					                               f32_4 %149 = OpVectorShuffle %148 %148 1 1 0 1 
					                               f32_4 %151 = OpFMul %149 %150 
					                               f32_2 %152 = OpLoad vs_TEXCOORD0 
					                               f32_4 %153 = OpVectorShuffle %152 %152 0 1 0 1 
					                               f32_4 %154 = OpFAdd %151 %153 
					                                              OpStore %57 %154 
					                 read_only Texture2D %155 = OpLoad %43 
					                             sampler %156 = OpLoad %47 
					          read_only Texture2DSampled %157 = OpSampledImage %155 %156 
					                               f32_4 %158 = OpLoad %57 
					                               f32_2 %159 = OpVectorShuffle %158 %158 0 1 
					                               f32_4 %160 = OpImageSampleImplicitLod %157 %159 
					                                 f32 %161 = OpCompositeExtract %160 0 
					                        Private f32* %162 = OpAccessChain %92 %84 
					                                              OpStore %162 %161 
					                 read_only Texture2D %163 = OpLoad %43 
					                             sampler %164 = OpLoad %47 
					          read_only Texture2DSampled %165 = OpSampledImage %163 %164 
					                               f32_4 %166 = OpLoad %57 
					                               f32_2 %167 = OpVectorShuffle %166 %166 2 3 
					                               f32_4 %168 = OpImageSampleImplicitLod %165 %167 
					                                 f32 %169 = OpCompositeExtract %168 0 
					                                              OpStore %69 %169 
					                        Private f32* %170 = OpAccessChain %92 %84 
					                                 f32 %171 = OpLoad %170 
					                        Private f32* %172 = OpAccessChain %9 %84 
					                                 f32 %173 = OpLoad %172 
					                                bool %174 = OpFOrdLessThan %171 %173 
					                                              OpStore %88 %174 
					                        Private f32* %175 = OpAccessChain %92 %84 
					                                 f32 %176 = OpLoad %175 
					                                 f32 %177 = OpLoad %98 
					                                 f32 %178 = OpExtInst %1 40 %176 %177 
					                                              OpStore %98 %178 
					                                 f32 %179 = OpLoad %69 
					                                 f32 %180 = OpLoad %98 
					                                 f32 %181 = OpExtInst %1 40 %179 %180 
					                                              OpStore %98 %181 
					                                bool %182 = OpLoad %88 
					                                              OpSelectionMerge %185 None 
					                                              OpBranchConditional %182 %184 %187 
					                                     %184 = OpLabel 
					                               f32_3 %186 = OpLoad %92 
					                                              OpStore %183 %186 
					                                              OpBranch %185 
					                                     %187 = OpLabel 
					                               f32_3 %188 = OpLoad %9 
					                                              OpStore %183 %188 
					                                              OpBranch %185 
					                                     %185 = OpLabel 
					                               f32_3 %189 = OpLoad %183 
					                                              OpStore %9 %189 
					                                 f32 %190 = OpLoad %69 
					                        Private f32* %191 = OpAccessChain %9 %84 
					                                 f32 %192 = OpLoad %191 
					                                bool %193 = OpFOrdLessThan %190 %192 
					                                              OpStore %88 %193 
					                                 f32 %195 = OpLoad %69 
					                        Private f32* %196 = OpAccessChain %9 %84 
					                                 f32 %197 = OpLoad %196 
					                                 f32 %198 = OpExtInst %1 37 %195 %197 
					                                              OpStore %194 %198 
					                                bool %199 = OpLoad %88 
					                                              OpSelectionMerge %203 None 
					                                              OpBranchConditional %199 %202 %205 
					                                     %202 = OpLabel 
					                               f32_2 %204 = OpLoad %112 
					                                              OpStore %201 %204 
					                                              OpBranch %203 
					                                     %205 = OpLabel 
					                               f32_3 %206 = OpLoad %9 
					                               f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                                              OpStore %201 %207 
					                                              OpBranch %203 
					                                     %203 = OpLabel 
					                               f32_2 %208 = OpLoad %201 
					                               f32_3 %209 = OpLoad %9 
					                               f32_3 %210 = OpVectorShuffle %209 %208 3 4 2 
					                                              OpStore %9 %210 
					                               f32_3 %211 = OpLoad %9 
					                               f32_2 %212 = OpVectorShuffle %211 %211 0 1 
					                               f32_2 %213 = OpLoad vs_TEXCOORD0 
					                               f32_2 %214 = OpFAdd %212 %213 
					                               f32_3 %215 = OpLoad %9 
					                               f32_3 %216 = OpVectorShuffle %215 %214 3 4 2 
					                                              OpStore %9 %216 
					                 read_only Texture2D %219 = OpLoad %218 
					                             sampler %221 = OpLoad %220 
					          read_only Texture2DSampled %222 = OpSampledImage %219 %221 
					                               f32_3 %223 = OpLoad %9 
					                               f32_2 %224 = OpVectorShuffle %223 %223 0 1 
					                               f32_4 %225 = OpImageSampleImplicitLod %222 %224 
					                               f32_2 %226 = OpVectorShuffle %225 %225 0 1 
					                                              OpStore %217 %226 
					                               f32_2 %227 = OpLoad %217 
					                               f32_2 %228 = OpFNegate %227 
					                               f32_2 %229 = OpLoad vs_TEXCOORD0 
					                               f32_2 %230 = OpFAdd %228 %229 
					                               f32_3 %231 = OpLoad %9 
					                               f32_3 %232 = OpVectorShuffle %231 %230 3 4 2 
					                                              OpStore %9 %232 
					                 read_only Texture2D %234 = OpLoad %233 
					                             sampler %236 = OpLoad %235 
					          read_only Texture2DSampled %237 = OpSampledImage %234 %236 
					                               f32_3 %238 = OpLoad %9 
					                               f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                               f32_4 %240 = OpImageSampleImplicitLod %237 %239 
					                                 f32 %241 = OpCompositeExtract %240 0 
					                        Private f32* %242 = OpAccessChain %217 %54 
					                                              OpStore %242 %241 
					                                 f32 %244 = OpLoad %194 
					                        Private f32* %245 = OpAccessChain %217 %54 
					                                 f32 %246 = OpLoad %245 
					                                 f32 %247 = OpExtInst %1 40 %244 %246 
					                                              OpStore %243 %247 
					                                 f32 %248 = OpLoad %98 
					                                 f32 %249 = OpLoad %243 
					                                 f32 %250 = OpExtInst %1 37 %248 %249 
					                                              OpStore %98 %250 
					                                 f32 %251 = OpLoad %40 
					                                 f32 %252 = OpFNegate %251 
					                                 f32 %253 = OpLoad %98 
					                                 f32 %254 = OpFAdd %252 %253 
					                                              OpStore %98 %254 
					                      Uniform f32_3* %257 = OpAccessChain %13 %32 
					                               f32_3 %258 = OpLoad %257 
					                               f32_4 %259 = OpVectorShuffle %258 %258 2 2 2 2 
					                                 f32 %260 = OpLoad %98 
					                               f32_4 %261 = OpCompositeConstruct %260 %260 %260 %260 
					                               f32_4 %262 = OpFMul %259 %261 
					                                 f32 %263 = OpLoad %40 
					                               f32_4 %264 = OpCompositeConstruct %263 %263 %263 %263 
					                               f32_4 %265 = OpFAdd %262 %264 
					                                              OpStore %256 %265 
					                                              OpReturn
					                                              OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(binding = 0, std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
						vec3 _TaaParams;
					};
					layout(location = 1) uniform  sampler2D _CoCTex;
					layout(location = 2) uniform  sampler2D _CameraMotionVectorsTexture;
					layout(location = 3) uniform  sampler2D _MainTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec2 u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					bool u_xlatb11;
					vec2 u_xlat13;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.yy * vec2(-0.0, -1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_TaaParams.xxyz.yz);
					    u_xlat15 = texture(_CoCTex, u_xlat1.xy).x;
					    u_xlat1 = (-_MainTex_TexelSize.xyyy) * vec4(1.0, 0.0, 0.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1.x = texture(_CoCTex, u_xlat1.xy).x;
					    u_xlat0.z = texture(_CoCTex, u_xlat1.zw).x;
					    u_xlatb6 = u_xlat1.x<u_xlat15;
					    u_xlat2.z = (u_xlatb6) ? u_xlat1.x : u_xlat15;
					    u_xlat1.x = max(u_xlat15, u_xlat1.x);
					    u_xlat1.x = max(u_xlat0.z, u_xlat1.x);
					    u_xlatb11 = u_xlat0.z<u_xlat2.z;
					    u_xlat3.xy = _MainTex_TexelSize.xy * vec2(1.0, 0.0);
					    u_xlat13.xy = (-u_xlat3.xy);
					    u_xlat2.xy = mix(vec2(0.0, 0.0), u_xlat13.xy, vec2(bvec2(u_xlatb6)));
					    u_xlat0.xyz = (bool(u_xlatb11)) ? u_xlat0.xyz : u_xlat2.xyz;
					    u_xlat2.xy = _MainTex_TexelSize.yy * vec2(0.0, 1.0);
					    u_xlat4 = _MainTex_TexelSize.yyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2.z = texture(_CoCTex, u_xlat4.xy).x;
					    u_xlat6 = texture(_CoCTex, u_xlat4.zw).x;
					    u_xlatb11 = u_xlat2.z<u_xlat0.z;
					    u_xlat1.x = max(u_xlat1.x, u_xlat2.z);
					    u_xlat1.x = max(u_xlat6, u_xlat1.x);
					    u_xlat0.xyz = (bool(u_xlatb11)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlatb11 = u_xlat6<u_xlat0.z;
					    u_xlat10 = min(u_xlat6, u_xlat0.z);
					    u_xlat0.xy = (bool(u_xlatb11)) ? u_xlat3.xy : u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat10_0.xy = texture(_CameraMotionVectorsTexture, u_xlat0.xy).xy;
					    u_xlat0.xy = (-u_xlat10_0.xy) + vs_TEXCOORD0.xy;
					    u_xlat10_0.x = texture(_MainTex, u_xlat0.xy).x;
					    u_xlat0.x = max(u_xlat10, u_xlat10_0.x);
					    u_xlat0.x = min(u_xlat1.x, u_xlat0.x);
					    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
					    SV_Target0 = vec4(_TaaParams.z, _TaaParams.z, _TaaParams.z, _TaaParams.z) * u_xlat0.xxxx + vec4(u_xlat15);
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL4x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Downsample and Prefilter"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 147082
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(binding = 0, std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(binding = 1, std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(binding = 2, std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL4x
					#ifdef VERTEX
					#version 420
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shading_language_420pack : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 420
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shading_language_420pack : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _CoCTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 1) in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec3 u_xlat10_0;
					float u_xlat1;
					vec3 u_xlat16_1;
					vec3 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat16_2;
					float u_xlat10_2;
					vec4 u_xlat3;
					float u_xlat16_3;
					vec4 u_xlat4;
					bool u_xlatb6;
					float u_xlat16_7;
					vec3 u_xlat10_7;
					float u_xlat16_8;
					float u_xlat10_8;
					float u_xlat16_13;
					float u_xlat10_13;
					float u_xlat15;
					float u_xlat16_15;
					float u_xlat16_16;
					float u_xlat10_16;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1.xyz = texture(_MainTex, u_xlat0.zw).xyz;
					    u_xlat10_0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
					    u_xlat16_15 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_15 = max(u_xlat16_15, u_xlat10_1.x);
					    u_xlat16_15 = u_xlat16_15 + 1.0;
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_16 = texture(_CoCTex, u_xlat2.zw).x;
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.xy).x;
					    u_xlat16_2 = u_xlat10_2 * 2.0 + -1.0;
					    u_xlat16_16 = u_xlat10_16 * 2.0 + -1.0;
					    u_xlat16_15 = abs(u_xlat16_16) / u_xlat16_15;
					    u_xlat16_1.xyz = vec3(u_xlat16_15) * u_xlat10_1.xyz;
					    u_xlat16_7 = max(u_xlat10_0.z, u_xlat10_0.y);
					    u_xlat16_7 = max(u_xlat10_0.x, u_xlat16_7);
					    u_xlat16_7 = u_xlat16_7 + 1.0;
					    u_xlat16_7 = abs(u_xlat16_2) / u_xlat16_7;
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(u_xlat16_7) + u_xlat16_1.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_7;
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat10_7.xyz = texture(_MainTex, u_xlat3.zw).xyz;
					    u_xlat16_3 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_3 = max(u_xlat10_1.x, u_xlat16_3);
					    u_xlat16_3 = u_xlat16_3 + 1.0;
					    u_xlat4 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_8 = texture(_CoCTex, u_xlat4.xy).x;
					    u_xlat10_13 = texture(_CoCTex, u_xlat4.zw).x;
					    u_xlat16_13 = u_xlat10_13 * 2.0 + -1.0;
					    u_xlat16_8 = u_xlat10_8 * 2.0 + -1.0;
					    u_xlat16_3 = abs(u_xlat16_8) / u_xlat16_3;
					    u_xlat16_8 = min(u_xlat16_13, u_xlat16_8);
					    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(u_xlat16_3) + u_xlat16_0.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_3;
					    u_xlat16_1.x = max(u_xlat10_7.z, u_xlat10_7.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_7.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = abs(u_xlat16_13) / u_xlat16_1.x;
					    u_xlat16_0.xyz = u_xlat10_7.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_1.x;
					    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-06);
					    u_xlat16_0.xyz = u_xlat16_0.xyz / vec3(u_xlat16_15);
					    u_xlat16_15 = min(u_xlat16_16, u_xlat16_8);
					    u_xlat16_1.x = max(u_xlat16_16, u_xlat16_8);
					    u_xlat1 = max(u_xlat16_1.x, u_xlat16_2);
					    u_xlat15 = min(u_xlat16_15, u_xlat16_2);
					    u_xlatb6 = u_xlat1<(-u_xlat15);
					    u_xlat15 = (u_xlatb6) ? u_xlat15 : u_xlat1;
					    u_xlat15 = u_xlat15 * _MaxCoC;
					    u_xlat1 = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat1 = abs(u_xlat15) * u_xlat1;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    SV_Target0.w = u_xlat15;
					    u_xlat15 = u_xlat1 * -2.0 + 3.0;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat15 = u_xlat15 * u_xlat1;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 340
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %26 %79 %337 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpMemberDecorate %10 0 Offset 10 
					                                             OpMemberDecorate %10 1 Offset 10 
					                                             OpDecorate %10 Block 
					                                             OpDecorate %12 DescriptorSet 12 
					                                             OpDecorate %12 Binding 12 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 26 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %32 RelaxedPrecision 
					                                             OpDecorate %35 RelaxedPrecision 
					                                             OpDecorate %35 DescriptorSet 35 
					                                             OpDecorate %35 Binding 35 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %39 DescriptorSet 39 
					                                             OpDecorate %39 Binding 39 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %47 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %67 RelaxedPrecision 
					                                             OpDecorate %68 RelaxedPrecision 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 79 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %84 DescriptorSet 84 
					                                             OpDecorate %84 Binding 84 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %86 DescriptorSet 86 
					                                             OpDecorate %86 Binding 86 
					                                             OpDecorate %87 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %111 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %113 RelaxedPrecision 
					                                             OpDecorate %114 RelaxedPrecision 
					                                             OpDecorate %115 RelaxedPrecision 
					                                             OpDecorate %116 RelaxedPrecision 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %118 RelaxedPrecision 
					                                             OpDecorate %119 RelaxedPrecision 
					                                             OpDecorate %120 RelaxedPrecision 
					                                             OpDecorate %122 RelaxedPrecision 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %125 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %128 RelaxedPrecision 
					                                             OpDecorate %129 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate %132 RelaxedPrecision 
					                                             OpDecorate %133 RelaxedPrecision 
					                                             OpDecorate %134 RelaxedPrecision 
					                                             OpDecorate %135 RelaxedPrecision 
					                                             OpDecorate %136 RelaxedPrecision 
					                                             OpDecorate %137 RelaxedPrecision 
					                                             OpDecorate %138 RelaxedPrecision 
					                                             OpDecorate %139 RelaxedPrecision 
					                                             OpDecorate %140 RelaxedPrecision 
					                                             OpDecorate %141 RelaxedPrecision 
					                                             OpDecorate %142 RelaxedPrecision 
					                                             OpDecorate %143 RelaxedPrecision 
					                                             OpDecorate %144 RelaxedPrecision 
					                                             OpDecorate %145 RelaxedPrecision 
					                                             OpDecorate %153 RelaxedPrecision 
					                                             OpDecorate %154 RelaxedPrecision 
					                                             OpDecorate %156 RelaxedPrecision 
					                                             OpDecorate %157 RelaxedPrecision 
					                                             OpDecorate %158 RelaxedPrecision 
					                                             OpDecorate %163 RelaxedPrecision 
					                                             OpDecorate %164 RelaxedPrecision 
					                                             OpDecorate %165 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %171 RelaxedPrecision 
					                                             OpDecorate %172 RelaxedPrecision 
					                                             OpDecorate %174 RelaxedPrecision 
					                                             OpDecorate %176 RelaxedPrecision 
					                                             OpDecorate %177 RelaxedPrecision 
					                                             OpDecorate %179 RelaxedPrecision 
					                                             OpDecorate %180 RelaxedPrecision 
					                                             OpDecorate %181 RelaxedPrecision 
					                                             OpDecorate %182 RelaxedPrecision 
					                                             OpDecorate %183 RelaxedPrecision 
					                                             OpDecorate %188 RelaxedPrecision 
					                                             OpDecorate %189 RelaxedPrecision 
					                                             OpDecorate %191 RelaxedPrecision 
					                                             OpDecorate %192 RelaxedPrecision 
					                                             OpDecorate %193 RelaxedPrecision 
					                                             OpDecorate %198 RelaxedPrecision 
					                                             OpDecorate %199 RelaxedPrecision 
					                                             OpDecorate %200 RelaxedPrecision 
					                                             OpDecorate %201 RelaxedPrecision 
					                                             OpDecorate %206 RelaxedPrecision 
					                                             OpDecorate %207 RelaxedPrecision 
					                                             OpDecorate %208 RelaxedPrecision 
					                                             OpDecorate %209 RelaxedPrecision 
					                                             OpDecorate %210 RelaxedPrecision 
					                                             OpDecorate %211 RelaxedPrecision 
					                                             OpDecorate %212 RelaxedPrecision 
					                                             OpDecorate %213 RelaxedPrecision 
					                                             OpDecorate %214 RelaxedPrecision 
					                                             OpDecorate %215 RelaxedPrecision 
					                                             OpDecorate %216 RelaxedPrecision 
					                                             OpDecorate %217 RelaxedPrecision 
					                                             OpDecorate %218 RelaxedPrecision 
					                                             OpDecorate %219 RelaxedPrecision 
					                                             OpDecorate %220 RelaxedPrecision 
					                                             OpDecorate %221 RelaxedPrecision 
					                                             OpDecorate %222 RelaxedPrecision 
					                                             OpDecorate %223 RelaxedPrecision 
					                                             OpDecorate %224 RelaxedPrecision 
					                                             OpDecorate %225 RelaxedPrecision 
					                                             OpDecorate %226 RelaxedPrecision 
					                                             OpDecorate %227 RelaxedPrecision 
					                                             OpDecorate %228 RelaxedPrecision 
					                                             OpDecorate %230 RelaxedPrecision 
					                                             OpDecorate %231 RelaxedPrecision 
					                                             OpDecorate %232 RelaxedPrecision 
					                                             OpDecorate %235 RelaxedPrecision 
					                                             OpDecorate %237 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %240 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %242 RelaxedPrecision 
					                                             OpDecorate %243 RelaxedPrecision 
					                                             OpDecorate %244 RelaxedPrecision 
					                                             OpDecorate %245 RelaxedPrecision 
					                                             OpDecorate %246 RelaxedPrecision 
					                                             OpDecorate %247 RelaxedPrecision 
					                                             OpDecorate %248 RelaxedPrecision 
					                                             OpDecorate %249 RelaxedPrecision 
					                                             OpDecorate %250 RelaxedPrecision 
					                                             OpDecorate %251 RelaxedPrecision 
					                                             OpDecorate %252 RelaxedPrecision 
					                                             OpDecorate %253 RelaxedPrecision 
					                                             OpDecorate %254 RelaxedPrecision 
					                                             OpDecorate %256 RelaxedPrecision 
					                                             OpDecorate %257 RelaxedPrecision 
					                                             OpDecorate %258 RelaxedPrecision 
					                                             OpDecorate %261 RelaxedPrecision 
					                                             OpDecorate %263 RelaxedPrecision 
					                                             OpDecorate %265 RelaxedPrecision 
					                                             OpDecorate %266 RelaxedPrecision 
					                                             OpDecorate %267 RelaxedPrecision 
					                                             OpDecorate %268 RelaxedPrecision 
					                                             OpDecorate %269 RelaxedPrecision 
					                                             OpDecorate %270 RelaxedPrecision 
					                                             OpDecorate %271 RelaxedPrecision 
					                                             OpDecorate %272 RelaxedPrecision 
					                                             OpDecorate %273 RelaxedPrecision 
					                                             OpDecorate %274 RelaxedPrecision 
					                                             OpDecorate %275 RelaxedPrecision 
					                                             OpDecorate %276 RelaxedPrecision 
					                                             OpDecorate %277 RelaxedPrecision 
					                                             OpDecorate %278 RelaxedPrecision 
					                                             OpDecorate %279 RelaxedPrecision 
					                                             OpDecorate %280 RelaxedPrecision 
					                                             OpDecorate %284 RelaxedPrecision 
					                                             OpDecorate %285 RelaxedPrecision 
					                                             OpDecorate %286 RelaxedPrecision 
					                                             OpDecorate %289 RelaxedPrecision 
					                                             OpDecorate %290 RelaxedPrecision 
					                                             OpDecorate %293 RelaxedPrecision 
					                                             OpDecorate %331 RelaxedPrecision 
					                                             OpDecorate %332 RelaxedPrecision 
					                                             OpDecorate %333 RelaxedPrecision 
					                                             OpDecorate %337 RelaxedPrecision 
					                                             OpDecorate %337 Location 337 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypeStruct %7 %6 
					                                     %11 = OpTypePointer Uniform %10 
					       Uniform struct {f32_4; f32;}* %12 = OpVariable Uniform 
					                                     %13 = OpTypeInt 32 1 
					                                 i32 %14 = OpConstant 0 
					                                     %15 = OpTypePointer Uniform %7 
					                                 f32 %20 = OpConstant 3,674022E-40 
					                                 f32 %21 = OpConstant 3,674022E-40 
					                               f32_4 %22 = OpConstantComposite %20 %20 %21 %20 
					                                     %24 = OpTypeVector %6 2 
					                                     %25 = OpTypePointer Input %24 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %30 = OpTypeVector %6 3 
					                                     %31 = OpTypePointer Private %30 
					                      Private f32_3* %32 = OpVariable Private 
					                                     %33 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %34 = OpTypePointer UniformConstant %33 
					UniformConstant read_only Texture2D* %35 = OpVariable UniformConstant 
					                                     %37 = OpTypeSampler 
					                                     %38 = OpTypePointer UniformConstant %37 
					            UniformConstant sampler* %39 = OpVariable UniformConstant 
					                                     %41 = OpTypeSampledImage %33 
					                      Private f32_3* %47 = OpVariable Private 
					                                     %55 = OpTypePointer Private %6 
					                        Private f32* %56 = OpVariable Private 
					                                     %57 = OpTypeInt 32 0 
					                                 u32 %58 = OpConstant 2 
					                                 u32 %61 = OpConstant 1 
					                                 u32 %65 = OpConstant 0 
					                                 f32 %71 = OpConstant 3,674022E-40 
					                      Private f32_4* %73 = OpVariable Private 
					               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                        Private f32* %83 = OpVariable Private 
					UniformConstant read_only Texture2D* %84 = OpVariable UniformConstant 
					            UniformConstant sampler* %86 = OpVariable UniformConstant 
					                        Private f32* %93 = OpVariable Private 
					                       Private f32* %101 = OpVariable Private 
					                                f32 %103 = OpConstant 3,674022E-40 
					                                f32 %105 = OpConstant 3,674022E-40 
					                       Private f32* %107 = OpVariable Private 
					                     Private f32_3* %115 = OpVariable Private 
					                       Private f32* %120 = OpVariable Private 
					                     Private f32_3* %136 = OpVariable Private 
					                     Private f32_4* %147 = OpVariable Private 
					                              f32_4 %151 = OpConstantComposite %21 %20 %20 %20 
					                     Private f32_3* %156 = OpVariable Private 
					                     Private f32_3* %164 = OpVariable Private 
					                       Private f32* %172 = OpVariable Private 
					                       Private f32* %191 = OpVariable Private 
					                       Private f32* %199 = OpVariable Private 
					                       Private f32* %207 = OpVariable Private 
					                       Private f32* %211 = OpVariable Private 
					                       Private f32* %219 = OpVariable Private 
					                                f32 %262 = OpConstant 3,674022E-40 
					                                    %281 = OpTypeBool 
					                                    %282 = OpTypePointer Private %281 
					                      Private bool* %283 = OpVariable Private 
					                     Private f32_4* %292 = OpVariable Private 
					                                i32 %294 = OpConstant 1 
					                                    %295 = OpTypePointer Uniform %6 
					                                u32 %299 = OpConstant 3 
					                       Private f32* %301 = OpVariable Private 
					                                f32 %315 = OpConstant 3,674022E-40 
					                                f32 %318 = OpConstant 3,674022E-40 
					                                f32 %320 = OpConstant 3,674022E-40 
					                                    %336 = OpTypePointer Output %7 
					                      Output f32_4* %337 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                      Uniform f32_4* %16 = OpAccessChain %12 %14 
					                               f32_4 %17 = OpLoad %16 
					                               f32_4 %18 = OpVectorShuffle %17 %17 0 1 0 1 
					                               f32_4 %19 = OpFNegate %18 
					                               f32_4 %23 = OpFMul %19 %22 
					                               f32_2 %27 = OpLoad vs_TEXCOORD0 
					                               f32_4 %28 = OpVectorShuffle %27 %27 0 1 0 1 
					                               f32_4 %29 = OpFAdd %23 %28 
					                                             OpStore %9 %29 
					                 read_only Texture2D %36 = OpLoad %35 
					                             sampler %40 = OpLoad %39 
					          read_only Texture2DSampled %42 = OpSampledImage %36 %40 
					                               f32_4 %43 = OpLoad %9 
					                               f32_2 %44 = OpVectorShuffle %43 %43 2 3 
					                               f32_4 %45 = OpImageSampleImplicitLod %42 %44 
					                               f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
					                                             OpStore %32 %46 
					                 read_only Texture2D %48 = OpLoad %35 
					                             sampler %49 = OpLoad %39 
					          read_only Texture2DSampled %50 = OpSampledImage %48 %49 
					                               f32_4 %51 = OpLoad %9 
					                               f32_2 %52 = OpVectorShuffle %51 %51 0 1 
					                               f32_4 %53 = OpImageSampleImplicitLod %50 %52 
					                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                             OpStore %47 %54 
					                        Private f32* %59 = OpAccessChain %32 %58 
					                                 f32 %60 = OpLoad %59 
					                        Private f32* %62 = OpAccessChain %32 %61 
					                                 f32 %63 = OpLoad %62 
					                                 f32 %64 = OpExtInst %1 40 %60 %63 
					                                             OpStore %56 %64 
					                        Private f32* %66 = OpAccessChain %32 %65 
					                                 f32 %67 = OpLoad %66 
					                                 f32 %68 = OpLoad %56 
					                                 f32 %69 = OpExtInst %1 40 %67 %68 
					                                             OpStore %56 %69 
					                                 f32 %70 = OpLoad %56 
					                                 f32 %72 = OpFAdd %70 %71 
					                                             OpStore %56 %72 
					                      Uniform f32_4* %74 = OpAccessChain %12 %14 
					                               f32_4 %75 = OpLoad %74 
					                               f32_4 %76 = OpVectorShuffle %75 %75 0 1 0 1 
					                               f32_4 %77 = OpFNegate %76 
					                               f32_4 %78 = OpFMul %77 %22 
					                               f32_2 %80 = OpLoad vs_TEXCOORD1 
					                               f32_4 %81 = OpVectorShuffle %80 %80 0 1 0 1 
					                               f32_4 %82 = OpFAdd %78 %81 
					                                             OpStore %73 %82 
					                 read_only Texture2D %85 = OpLoad %84 
					                             sampler %87 = OpLoad %86 
					          read_only Texture2DSampled %88 = OpSampledImage %85 %87 
					                               f32_4 %89 = OpLoad %73 
					                               f32_2 %90 = OpVectorShuffle %89 %89 2 3 
					                               f32_4 %91 = OpImageSampleImplicitLod %88 %90 
					                                 f32 %92 = OpCompositeExtract %91 0 
					                                             OpStore %83 %92 
					                 read_only Texture2D %94 = OpLoad %84 
					                             sampler %95 = OpLoad %86 
					          read_only Texture2DSampled %96 = OpSampledImage %94 %95 
					                               f32_4 %97 = OpLoad %73 
					                               f32_2 %98 = OpVectorShuffle %97 %97 0 1 
					                               f32_4 %99 = OpImageSampleImplicitLod %96 %98 
					                                f32 %100 = OpCompositeExtract %99 0 
					                                             OpStore %93 %100 
					                                f32 %102 = OpLoad %93 
					                                f32 %104 = OpFMul %102 %103 
					                                f32 %106 = OpFAdd %104 %105 
					                                             OpStore %101 %106 
					                                f32 %108 = OpLoad %83 
					                                f32 %109 = OpFMul %108 %103 
					                                f32 %110 = OpFAdd %109 %105 
					                                             OpStore %107 %110 
					                                f32 %111 = OpLoad %107 
					                                f32 %112 = OpExtInst %1 4 %111 
					                                f32 %113 = OpLoad %56 
					                                f32 %114 = OpFDiv %112 %113 
					                                             OpStore %56 %114 
					                              f32_3 %116 = OpLoad %32 
					                                f32 %117 = OpLoad %56 
					                              f32_3 %118 = OpCompositeConstruct %117 %117 %117 
					                              f32_3 %119 = OpFMul %116 %118 
					                                             OpStore %115 %119 
					                       Private f32* %121 = OpAccessChain %47 %58 
					                                f32 %122 = OpLoad %121 
					                       Private f32* %123 = OpAccessChain %47 %61 
					                                f32 %124 = OpLoad %123 
					                                f32 %125 = OpExtInst %1 40 %122 %124 
					                                             OpStore %120 %125 
					                       Private f32* %126 = OpAccessChain %47 %65 
					                                f32 %127 = OpLoad %126 
					                                f32 %128 = OpLoad %120 
					                                f32 %129 = OpExtInst %1 40 %127 %128 
					                                             OpStore %120 %129 
					                                f32 %130 = OpLoad %120 
					                                f32 %131 = OpFAdd %130 %71 
					                                             OpStore %120 %131 
					                                f32 %132 = OpLoad %101 
					                                f32 %133 = OpExtInst %1 4 %132 
					                                f32 %134 = OpLoad %120 
					                                f32 %135 = OpFDiv %133 %134 
					                                             OpStore %120 %135 
					                              f32_3 %137 = OpLoad %47 
					                                f32 %138 = OpLoad %120 
					                              f32_3 %139 = OpCompositeConstruct %138 %138 %138 
					                              f32_3 %140 = OpFMul %137 %139 
					                              f32_3 %141 = OpLoad %115 
					                              f32_3 %142 = OpFAdd %140 %141 
					                                             OpStore %136 %142 
					                                f32 %143 = OpLoad %56 
					                                f32 %144 = OpLoad %120 
					                                f32 %145 = OpFAdd %143 %144 
					                       Private f32* %146 = OpAccessChain %115 %65 
					                                             OpStore %146 %145 
					                     Uniform f32_4* %148 = OpAccessChain %12 %14 
					                              f32_4 %149 = OpLoad %148 
					                              f32_4 %150 = OpVectorShuffle %149 %149 0 1 0 1 
					                              f32_4 %152 = OpFMul %150 %151 
					                              f32_2 %153 = OpLoad vs_TEXCOORD0 
					                              f32_4 %154 = OpVectorShuffle %153 %153 0 1 0 1 
					                              f32_4 %155 = OpFAdd %152 %154 
					                                             OpStore %147 %155 
					                read_only Texture2D %157 = OpLoad %35 
					                            sampler %158 = OpLoad %39 
					         read_only Texture2DSampled %159 = OpSampledImage %157 %158 
					                              f32_4 %160 = OpLoad %147 
					                              f32_2 %161 = OpVectorShuffle %160 %160 0 1 
					                              f32_4 %162 = OpImageSampleImplicitLod %159 %161 
					                              f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
					                                             OpStore %156 %163 
					                read_only Texture2D %165 = OpLoad %35 
					                            sampler %166 = OpLoad %39 
					         read_only Texture2DSampled %167 = OpSampledImage %165 %166 
					                              f32_4 %168 = OpLoad %147 
					                              f32_2 %169 = OpVectorShuffle %168 %168 2 3 
					                              f32_4 %170 = OpImageSampleImplicitLod %167 %169 
					                              f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                             OpStore %164 %171 
					                       Private f32* %173 = OpAccessChain %156 %58 
					                                f32 %174 = OpLoad %173 
					                       Private f32* %175 = OpAccessChain %156 %61 
					                                f32 %176 = OpLoad %175 
					                                f32 %177 = OpExtInst %1 40 %174 %176 
					                                             OpStore %172 %177 
					                       Private f32* %178 = OpAccessChain %156 %65 
					                                f32 %179 = OpLoad %178 
					                                f32 %180 = OpLoad %172 
					                                f32 %181 = OpExtInst %1 40 %179 %180 
					                                             OpStore %172 %181 
					                                f32 %182 = OpLoad %172 
					                                f32 %183 = OpFAdd %182 %71 
					                                             OpStore %172 %183 
					                     Uniform f32_4* %184 = OpAccessChain %12 %14 
					                              f32_4 %185 = OpLoad %184 
					                              f32_4 %186 = OpVectorShuffle %185 %185 0 1 0 1 
					                              f32_4 %187 = OpFMul %186 %151 
					                              f32_2 %188 = OpLoad vs_TEXCOORD1 
					                              f32_4 %189 = OpVectorShuffle %188 %188 0 1 0 1 
					                              f32_4 %190 = OpFAdd %187 %189 
					                                             OpStore %147 %190 
					                read_only Texture2D %192 = OpLoad %84 
					                            sampler %193 = OpLoad %86 
					         read_only Texture2DSampled %194 = OpSampledImage %192 %193 
					                              f32_4 %195 = OpLoad %147 
					                              f32_2 %196 = OpVectorShuffle %195 %195 0 1 
					                              f32_4 %197 = OpImageSampleImplicitLod %194 %196 
					                                f32 %198 = OpCompositeExtract %197 0 
					                                             OpStore %191 %198 
					                read_only Texture2D %200 = OpLoad %84 
					                            sampler %201 = OpLoad %86 
					         read_only Texture2DSampled %202 = OpSampledImage %200 %201 
					                              f32_4 %203 = OpLoad %147 
					                              f32_2 %204 = OpVectorShuffle %203 %203 2 3 
					                              f32_4 %205 = OpImageSampleImplicitLod %202 %204 
					                                f32 %206 = OpCompositeExtract %205 0 
					                                             OpStore %199 %206 
					                                f32 %208 = OpLoad %199 
					                                f32 %209 = OpFMul %208 %103 
					                                f32 %210 = OpFAdd %209 %105 
					                                             OpStore %207 %210 
					                                f32 %212 = OpLoad %191 
					                                f32 %213 = OpFMul %212 %103 
					                                f32 %214 = OpFAdd %213 %105 
					                                             OpStore %211 %214 
					                                f32 %215 = OpLoad %211 
					                                f32 %216 = OpExtInst %1 4 %215 
					                                f32 %217 = OpLoad %172 
					                                f32 %218 = OpFDiv %216 %217 
					                                             OpStore %172 %218 
					                                f32 %220 = OpLoad %207 
					                                f32 %221 = OpLoad %211 
					                                f32 %222 = OpExtInst %1 37 %220 %221 
					                                             OpStore %219 %222 
					                              f32_3 %223 = OpLoad %156 
					                                f32 %224 = OpLoad %172 
					                              f32_3 %225 = OpCompositeConstruct %224 %224 %224 
					                              f32_3 %226 = OpFMul %223 %225 
					                              f32_3 %227 = OpLoad %136 
					                              f32_3 %228 = OpFAdd %226 %227 
					                                             OpStore %136 %228 
					                       Private f32* %229 = OpAccessChain %115 %65 
					                                f32 %230 = OpLoad %229 
					                                f32 %231 = OpLoad %172 
					                                f32 %232 = OpFAdd %230 %231 
					                       Private f32* %233 = OpAccessChain %115 %65 
					                                             OpStore %233 %232 
					                       Private f32* %234 = OpAccessChain %164 %58 
					                                f32 %235 = OpLoad %234 
					                       Private f32* %236 = OpAccessChain %164 %61 
					                                f32 %237 = OpLoad %236 
					                                f32 %238 = OpExtInst %1 40 %235 %237 
					                                             OpStore %172 %238 
					                       Private f32* %239 = OpAccessChain %164 %65 
					                                f32 %240 = OpLoad %239 
					                                f32 %241 = OpLoad %172 
					                                f32 %242 = OpExtInst %1 40 %240 %241 
					                                             OpStore %172 %242 
					                                f32 %243 = OpLoad %172 
					                                f32 %244 = OpFAdd %243 %71 
					                                             OpStore %172 %244 
					                                f32 %245 = OpLoad %207 
					                                f32 %246 = OpExtInst %1 4 %245 
					                                f32 %247 = OpLoad %172 
					                                f32 %248 = OpFDiv %246 %247 
					                                             OpStore %172 %248 
					                              f32_3 %249 = OpLoad %164 
					                                f32 %250 = OpLoad %172 
					                              f32_3 %251 = OpCompositeConstruct %250 %250 %250 
					                              f32_3 %252 = OpFMul %249 %251 
					                              f32_3 %253 = OpLoad %136 
					                              f32_3 %254 = OpFAdd %252 %253 
					                                             OpStore %136 %254 
					                       Private f32* %255 = OpAccessChain %115 %65 
					                                f32 %256 = OpLoad %255 
					                                f32 %257 = OpLoad %172 
					                                f32 %258 = OpFAdd %256 %257 
					                       Private f32* %259 = OpAccessChain %115 %65 
					                                             OpStore %259 %258 
					                       Private f32* %260 = OpAccessChain %115 %65 
					                                f32 %261 = OpLoad %260 
					                                f32 %263 = OpExtInst %1 40 %261 %262 
					                       Private f32* %264 = OpAccessChain %115 %65 
					                                             OpStore %264 %263 
					                              f32_3 %265 = OpLoad %136 
					                              f32_3 %266 = OpLoad %115 
					                              f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
					                              f32_3 %268 = OpFDiv %265 %267 
					                                             OpStore %136 %268 
					                                f32 %269 = OpLoad %107 
					                                f32 %270 = OpLoad %219 
					                                f32 %271 = OpExtInst %1 37 %269 %270 
					                                             OpStore %172 %271 
					                                f32 %272 = OpLoad %107 
					                                f32 %273 = OpLoad %219 
					                                f32 %274 = OpExtInst %1 40 %272 %273 
					                                             OpStore %219 %274 
					                                f32 %275 = OpLoad %101 
					                                f32 %276 = OpLoad %219 
					                                f32 %277 = OpExtInst %1 40 %275 %276 
					                                             OpStore %219 %277 
					                                f32 %278 = OpLoad %101 
					                                f32 %279 = OpLoad %172 
					                                f32 %280 = OpExtInst %1 37 %278 %279 
					                                             OpStore %172 %280 
					                                f32 %284 = OpLoad %219 
					                                f32 %285 = OpLoad %172 
					                                f32 %286 = OpFNegate %285 
					                               bool %287 = OpFOrdLessThan %284 %286 
					                                             OpStore %283 %287 
					                               bool %288 = OpLoad %283 
					                                f32 %289 = OpLoad %172 
					                                f32 %290 = OpLoad %219 
					                                f32 %291 = OpSelect %288 %289 %290 
					                                             OpStore %172 %291 
					                                f32 %293 = OpLoad %172 
					                       Uniform f32* %296 = OpAccessChain %12 %294 
					                                f32 %297 = OpLoad %296 
					                                f32 %298 = OpFMul %293 %297 
					                       Private f32* %300 = OpAccessChain %292 %299 
					                                             OpStore %300 %298 
					                       Uniform f32* %302 = OpAccessChain %12 %14 %61 
					                                f32 %303 = OpLoad %302 
					                       Uniform f32* %304 = OpAccessChain %12 %14 %61 
					                                f32 %305 = OpLoad %304 
					                                f32 %306 = OpFAdd %303 %305 
					                                             OpStore %301 %306 
					                                f32 %307 = OpLoad %301 
					                                f32 %308 = OpFDiv %71 %307 
					                                             OpStore %301 %308 
					                                f32 %309 = OpLoad %301 
					                       Private f32* %310 = OpAccessChain %292 %299 
					                                f32 %311 = OpLoad %310 
					                                f32 %312 = OpExtInst %1 4 %311 
					                                f32 %313 = OpFMul %309 %312 
					                                             OpStore %301 %313 
					                                f32 %314 = OpLoad %301 
					                                f32 %316 = OpExtInst %1 43 %314 %315 %71 
					                                             OpStore %301 %316 
					                                f32 %317 = OpLoad %301 
					                                f32 %319 = OpFMul %317 %318 
					                                f32 %321 = OpFAdd %319 %320 
					                       Private f32* %322 = OpAccessChain %73 %65 
					                                             OpStore %322 %321 
					                                f32 %323 = OpLoad %301 
					                                f32 %324 = OpLoad %301 
					                                f32 %325 = OpFMul %323 %324 
					                                             OpStore %301 %325 
					                                f32 %326 = OpLoad %301 
					                       Private f32* %327 = OpAccessChain %73 %65 
					                                f32 %328 = OpLoad %327 
					                                f32 %329 = OpFMul %326 %328 
					                                             OpStore %301 %329 
					                                f32 %330 = OpLoad %301 
					                              f32_3 %331 = OpCompositeConstruct %330 %330 %330 
					                              f32_3 %332 = OpLoad %136 
					                              f32_3 %333 = OpFMul %331 %332 
					                              f32_4 %334 = OpLoad %292 
					                              f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
					                                             OpStore %292 %335 
					                              f32_4 %338 = OpLoad %292 
					                                             OpStore %337 %338 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!vs_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(binding = 0, std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(binding = 1, std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(binding = 2, std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(location = 0) in  vec4 in_POSITION0;
					layout(location = 1) in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!!!GL4x
					#ifdef VERTEX
					#version 420
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shading_language_420pack : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					layout(location = 0) out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					layout(location = 1) out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 420
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_shading_language_420pack : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _CoCTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 1) in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec3 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec3 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat16_2;
					float u_xlat10_2;
					vec4 u_xlat3;
					float u_xlat16_3;
					vec4 u_xlat4;
					bool u_xlatb6;
					float u_xlat16_7;
					vec3 u_xlat10_7;
					float u_xlat16_8;
					float u_xlat10_8;
					float u_xlat16_13;
					float u_xlat10_13;
					float u_xlat15;
					float u_xlat16_15;
					float u_xlat16_16;
					float u_xlat10_16;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1.xyz = texture(_MainTex, u_xlat0.zw).xyz;
					    u_xlat10_0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
					    u_xlat16_15 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_15 = max(u_xlat16_15, u_xlat10_1.x);
					    u_xlat16_15 = u_xlat16_15 + 1.0;
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_16 = texture(_CoCTex, u_xlat2.zw).x;
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.xy).x;
					    u_xlat16_2 = u_xlat10_2 * 2.0 + -1.0;
					    u_xlat16_16 = u_xlat10_16 * 2.0 + -1.0;
					    u_xlat16_15 = abs(u_xlat16_16) / u_xlat16_15;
					    u_xlat16_1.xyz = vec3(u_xlat16_15) * u_xlat10_1.xyz;
					    u_xlat16_7 = max(u_xlat10_0.z, u_xlat10_0.y);
					    u_xlat16_7 = max(u_xlat10_0.x, u_xlat16_7);
					    u_xlat16_7 = u_xlat16_7 + 1.0;
					    u_xlat16_7 = abs(u_xlat16_2) / u_xlat16_7;
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(u_xlat16_7) + u_xlat16_1.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_7;
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat10_7.xyz = texture(_MainTex, u_xlat3.zw).xyz;
					    u_xlat16_3 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_3 = max(u_xlat10_1.x, u_xlat16_3);
					    u_xlat16_3 = u_xlat16_3 + 1.0;
					    u_xlat4 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_8 = texture(_CoCTex, u_xlat4.xy).x;
					    u_xlat10_13 = texture(_CoCTex, u_xlat4.zw).x;
					    u_xlat16_13 = u_xlat10_13 * 2.0 + -1.0;
					    u_xlat16_8 = u_xlat10_8 * 2.0 + -1.0;
					    u_xlat16_3 = abs(u_xlat16_8) / u_xlat16_3;
					    u_xlat16_8 = min(u_xlat16_13, u_xlat16_8);
					    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(u_xlat16_3) + u_xlat16_0.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_3;
					    u_xlat16_1.x = max(u_xlat10_7.z, u_xlat10_7.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_7.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = abs(u_xlat16_13) / u_xlat16_1.x;
					    u_xlat16_0.xyz = u_xlat10_7.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_1.x;
					    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-06);
					    u_xlat16_0.xyz = u_xlat16_0.xyz / vec3(u_xlat16_15);
					    u_xlat16_15 = min(u_xlat16_16, u_xlat16_8);
					    u_xlat16_1.x = max(u_xlat16_16, u_xlat16_8);
					    u_xlat1.x = max(u_xlat16_1.x, u_xlat16_2);
					    u_xlat15 = min(u_xlat16_15, u_xlat16_2);
					    u_xlatb6 = u_xlat1.x<(-u_xlat15);
					    u_xlat15 = (u_xlatb6) ? u_xlat15 : u_xlat1.x;
					    u_xlat15 = u_xlat15 * _MaxCoC;
					    u_xlat1.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = abs(u_xlat15) * u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    SV_Target0.w = u_xlat15;
					    u_xlat15 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 367
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %26 %79 %364 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpMemberDecorate %10 0 Offset 10 
					                                             OpMemberDecorate %10 1 Offset 10 
					                                             OpDecorate %10 Block 
					                                             OpDecorate %12 DescriptorSet 12 
					                                             OpDecorate %12 Binding 12 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 26 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %32 RelaxedPrecision 
					                                             OpDecorate %35 RelaxedPrecision 
					                                             OpDecorate %35 DescriptorSet 35 
					                                             OpDecorate %35 Binding 35 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %39 DescriptorSet 39 
					                                             OpDecorate %39 Binding 39 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %47 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %67 RelaxedPrecision 
					                                             OpDecorate %68 RelaxedPrecision 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 79 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %84 DescriptorSet 84 
					                                             OpDecorate %84 Binding 84 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %86 DescriptorSet 86 
					                                             OpDecorate %86 Binding 86 
					                                             OpDecorate %87 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %111 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %113 RelaxedPrecision 
					                                             OpDecorate %114 RelaxedPrecision 
					                                             OpDecorate %115 RelaxedPrecision 
					                                             OpDecorate %116 RelaxedPrecision 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %118 RelaxedPrecision 
					                                             OpDecorate %119 RelaxedPrecision 
					                                             OpDecorate %120 RelaxedPrecision 
					                                             OpDecorate %122 RelaxedPrecision 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %125 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %128 RelaxedPrecision 
					                                             OpDecorate %129 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate %132 RelaxedPrecision 
					                                             OpDecorate %133 RelaxedPrecision 
					                                             OpDecorate %134 RelaxedPrecision 
					                                             OpDecorate %135 RelaxedPrecision 
					                                             OpDecorate %136 RelaxedPrecision 
					                                             OpDecorate %137 RelaxedPrecision 
					                                             OpDecorate %138 RelaxedPrecision 
					                                             OpDecorate %139 RelaxedPrecision 
					                                             OpDecorate %140 RelaxedPrecision 
					                                             OpDecorate %141 RelaxedPrecision 
					                                             OpDecorate %142 RelaxedPrecision 
					                                             OpDecorate %143 RelaxedPrecision 
					                                             OpDecorate %144 RelaxedPrecision 
					                                             OpDecorate %145 RelaxedPrecision 
					                                             OpDecorate %153 RelaxedPrecision 
					                                             OpDecorate %154 RelaxedPrecision 
					                                             OpDecorate %156 RelaxedPrecision 
					                                             OpDecorate %157 RelaxedPrecision 
					                                             OpDecorate %158 RelaxedPrecision 
					                                             OpDecorate %163 RelaxedPrecision 
					                                             OpDecorate %164 RelaxedPrecision 
					                                             OpDecorate %165 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %171 RelaxedPrecision 
					                                             OpDecorate %172 RelaxedPrecision 
					                                             OpDecorate %174 RelaxedPrecision 
					                                             OpDecorate %176 RelaxedPrecision 
					                                             OpDecorate %177 RelaxedPrecision 
					                                             OpDecorate %179 RelaxedPrecision 
					                                             OpDecorate %180 RelaxedPrecision 
					                                             OpDecorate %181 RelaxedPrecision 
					                                             OpDecorate %182 RelaxedPrecision 
					                                             OpDecorate %183 RelaxedPrecision 
					                                             OpDecorate %188 RelaxedPrecision 
					                                             OpDecorate %189 RelaxedPrecision 
					                                             OpDecorate %191 RelaxedPrecision 
					                                             OpDecorate %192 RelaxedPrecision 
					                                             OpDecorate %193 RelaxedPrecision 
					                                             OpDecorate %198 RelaxedPrecision 
					                                             OpDecorate %199 RelaxedPrecision 
					                                             OpDecorate %200 RelaxedPrecision 
					                                             OpDecorate %201 RelaxedPrecision 
					                                             OpDecorate %206 RelaxedPrecision 
					                                             OpDecorate %207 RelaxedPrecision 
					                                             OpDecorate %208 RelaxedPrecision 
					                                             OpDecorate %209 RelaxedPrecision 
					                                             OpDecorate %210 RelaxedPrecision 
					                                             OpDecorate %211 RelaxedPrecision 
					                                             OpDecorate %212 RelaxedPrecision 
					                                             OpDecorate %213 RelaxedPrecision 
					                                             OpDecorate %214 RelaxedPrecision 
					                                             OpDecorate %215 RelaxedPrecision 
					                                             OpDecorate %216 RelaxedPrecision 
					                                             OpDecorate %217 RelaxedPrecision 
					                                             OpDecorate %218 RelaxedPrecision 
					                                             OpDecorate %219 RelaxedPrecision 
					                                             OpDecorate %220 RelaxedPrecision 
					                                             OpDecorate %221 RelaxedPrecision 
					                                             OpDecorate %222 RelaxedPrecision 
					                                             OpDecorate %223 RelaxedPrecision 
					                                             OpDecorate %224 RelaxedPrecision 
					                                             OpDecorate %225 RelaxedPrecision 
					                                             OpDecorate %226 RelaxedPrecision 
					                                             OpDecorate %227 RelaxedPrecision 
					                                             OpDecorate %228 RelaxedPrecision 
					                                             OpDecorate %230 RelaxedPrecision 
					                                             OpDecorate %231 RelaxedPrecision 
					                                             OpDecorate %232 RelaxedPrecision 
					                                             OpDecorate %235 RelaxedPrecision 
					                                             OpDecorate %237 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %240 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %242 RelaxedPrecision 
					                                             OpDecorate %243 RelaxedPrecision 
					                                             OpDecorate %244 RelaxedPrecision 
					                                             OpDecorate %245 RelaxedPrecision 
					                                             OpDecorate %246 RelaxedPrecision 
					                                             OpDecorate %247 RelaxedPrecision 
					                                             OpDecorate %248 RelaxedPrecision 
					                                             OpDecorate %249 RelaxedPrecision 
					                                             OpDecorate %250 RelaxedPrecision 
					                                             OpDecorate %251 RelaxedPrecision 
					                                             OpDecorate %252 RelaxedPrecision 
					                                             OpDecorate %253 RelaxedPrecision 
					                                             OpDecorate %254 RelaxedPrecision 
					                                             OpDecorate %256 RelaxedPrecision 
					                                             OpDecorate %257 RelaxedPrecision 
					                                             OpDecorate %258 RelaxedPrecision 
					                                             OpDecorate %261 RelaxedPrecision 
					                                             OpDecorate %263 RelaxedPrecision 
					                                             OpDecorate %265 RelaxedPrecision 
					                                             OpDecorate %266 RelaxedPrecision 
					                                             OpDecorate %267 RelaxedPrecision 
					                                             OpDecorate %268 RelaxedPrecision 
					                                             OpDecorate %269 RelaxedPrecision 
					                                             OpDecorate %270 RelaxedPrecision 
					                                             OpDecorate %271 RelaxedPrecision 
					                                             OpDecorate %272 RelaxedPrecision 
					                                             OpDecorate %273 RelaxedPrecision 
					                                             OpDecorate %274 RelaxedPrecision 
					                                             OpDecorate %275 RelaxedPrecision 
					                                             OpDecorate %276 RelaxedPrecision 
					                                             OpDecorate %277 RelaxedPrecision 
					                                             OpDecorate %278 RelaxedPrecision 
					                                             OpDecorate %279 RelaxedPrecision 
					                                             OpDecorate %280 RelaxedPrecision 
					                                             OpDecorate %284 RelaxedPrecision 
					                                             OpDecorate %285 RelaxedPrecision 
					                                             OpDecorate %286 RelaxedPrecision 
					                                             OpDecorate %289 RelaxedPrecision 
					                                             OpDecorate %290 RelaxedPrecision 
					                                             OpDecorate %293 RelaxedPrecision 
					                                             OpDecorate %331 RelaxedPrecision 
					                                             OpDecorate %332 RelaxedPrecision 
					                                             OpDecorate %333 RelaxedPrecision 
					                                             OpDecorate %364 RelaxedPrecision 
					                                             OpDecorate %364 Location 364 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypeStruct %7 %6 
					                                     %11 = OpTypePointer Uniform %10 
					       Uniform struct {f32_4; f32;}* %12 = OpVariable Uniform 
					                                     %13 = OpTypeInt 32 1 
					                                 i32 %14 = OpConstant 0 
					                                     %15 = OpTypePointer Uniform %7 
					                                 f32 %20 = OpConstant 3,674022E-40 
					                                 f32 %21 = OpConstant 3,674022E-40 
					                               f32_4 %22 = OpConstantComposite %20 %20 %21 %20 
					                                     %24 = OpTypeVector %6 2 
					                                     %25 = OpTypePointer Input %24 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %30 = OpTypeVector %6 3 
					                                     %31 = OpTypePointer Private %30 
					                      Private f32_3* %32 = OpVariable Private 
					                                     %33 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %34 = OpTypePointer UniformConstant %33 
					UniformConstant read_only Texture2D* %35 = OpVariable UniformConstant 
					                                     %37 = OpTypeSampler 
					                                     %38 = OpTypePointer UniformConstant %37 
					            UniformConstant sampler* %39 = OpVariable UniformConstant 
					                                     %41 = OpTypeSampledImage %33 
					                      Private f32_3* %47 = OpVariable Private 
					                                     %55 = OpTypePointer Private %6 
					                        Private f32* %56 = OpVariable Private 
					                                     %57 = OpTypeInt 32 0 
					                                 u32 %58 = OpConstant 2 
					                                 u32 %61 = OpConstant 1 
					                                 u32 %65 = OpConstant 0 
					                                 f32 %71 = OpConstant 3,674022E-40 
					                      Private f32_4* %73 = OpVariable Private 
					               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                        Private f32* %83 = OpVariable Private 
					UniformConstant read_only Texture2D* %84 = OpVariable UniformConstant 
					            UniformConstant sampler* %86 = OpVariable UniformConstant 
					                        Private f32* %93 = OpVariable Private 
					                       Private f32* %101 = OpVariable Private 
					                                f32 %103 = OpConstant 3,674022E-40 
					                                f32 %105 = OpConstant 3,674022E-40 
					                       Private f32* %107 = OpVariable Private 
					                     Private f32_3* %115 = OpVariable Private 
					                       Private f32* %120 = OpVariable Private 
					                     Private f32_3* %136 = OpVariable Private 
					                     Private f32_4* %147 = OpVariable Private 
					                              f32_4 %151 = OpConstantComposite %21 %20 %20 %20 
					                     Private f32_3* %156 = OpVariable Private 
					                     Private f32_3* %164 = OpVariable Private 
					                       Private f32* %172 = OpVariable Private 
					                       Private f32* %191 = OpVariable Private 
					                       Private f32* %199 = OpVariable Private 
					                       Private f32* %207 = OpVariable Private 
					                       Private f32* %211 = OpVariable Private 
					                       Private f32* %219 = OpVariable Private 
					                                f32 %262 = OpConstant 3,674022E-40 
					                                    %281 = OpTypeBool 
					                                    %282 = OpTypePointer Private %281 
					                      Private bool* %283 = OpVariable Private 
					                     Private f32_4* %292 = OpVariable Private 
					                                i32 %294 = OpConstant 1 
					                                    %295 = OpTypePointer Uniform %6 
					                                u32 %299 = OpConstant 3 
					                       Private f32* %301 = OpVariable Private 
					                                f32 %315 = OpConstant 3,674022E-40 
					                                f32 %318 = OpConstant 3,674022E-40 
					                                f32 %320 = OpConstant 3,674022E-40 
					                                f32 %338 = OpConstant 3,674022E-40 
					                              f32_3 %339 = OpConstantComposite %338 %338 %338 
					                                f32 %341 = OpConstant 3,674022E-40 
					                              f32_3 %342 = OpConstantComposite %341 %341 %341 
					                                f32 %351 = OpConstant 3,674022E-40 
					                              f32_3 %352 = OpConstantComposite %351 %351 %351 
					                                    %363 = OpTypePointer Output %7 
					                      Output f32_4* %364 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                      Uniform f32_4* %16 = OpAccessChain %12 %14 
					                               f32_4 %17 = OpLoad %16 
					                               f32_4 %18 = OpVectorShuffle %17 %17 0 1 0 1 
					                               f32_4 %19 = OpFNegate %18 
					                               f32_4 %23 = OpFMul %19 %22 
					                               f32_2 %27 = OpLoad vs_TEXCOORD0 
					                               f32_4 %28 = OpVectorShuffle %27 %27 0 1 0 1 
					                               f32_4 %29 = OpFAdd %23 %28 
					                                             OpStore %9 %29 
					                 read_only Texture2D %36 = OpLoad %35 
					                             sampler %40 = OpLoad %39 
					          read_only Texture2DSampled %42 = OpSampledImage %36 %40 
					                               f32_4 %43 = OpLoad %9 
					                               f32_2 %44 = OpVectorShuffle %43 %43 2 3 
					                               f32_4 %45 = OpImageSampleImplicitLod %42 %44 
					                               f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
					                                             OpStore %32 %46 
					                 read_only Texture2D %48 = OpLoad %35 
					                             sampler %49 = OpLoad %39 
					          read_only Texture2DSampled %50 = OpSampledImage %48 %49 
					                               f32_4 %51 = OpLoad %9 
					                               f32_2 %52 = OpVectorShuffle %51 %51 0 1 
					                               f32_4 %53 = OpImageSampleImplicitLod %50 %52 
					                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                             OpStore %47 %54 
					                        Private f32* %59 = OpAccessChain %32 %58 
					                                 f32 %60 = OpLoad %59 
					                        Private f32* %62 = OpAccessChain %32 %61 
					                                 f32 %63 = OpLoad %62 
					                                 f32 %64 = OpExtInst %1 40 %60 %63 
					                                             OpStore %56 %64 
					                        Private f32* %66 = OpAccessChain %32 %65 
					                                 f32 %67 = OpLoad %66 
					                                 f32 %68 = OpLoad %56 
					                                 f32 %69 = OpExtInst %1 40 %67 %68 
					                                             OpStore %56 %69 
					                                 f32 %70 = OpLoad %56 
					                                 f32 %72 = OpFAdd %70 %71 
					                                             OpStore %56 %72 
					                      Uniform f32_4* %74 = OpAccessChain %12 %14 
					                               f32_4 %75 = OpLoad %74 
					                               f32_4 %76 = OpVectorShuffle %75 %75 0 1 0 1 
					                               f32_4 %77 = OpFNegate %76 
					                               f32_4 %78 = OpFMul %77 %22 
					                               f32_2 %80 = OpLoad vs_TEXCOORD1 
					                               f32_4 %81 = OpVectorShuffle %80 %80 0 1 0 1 
					                               f32_4 %82 = OpFAdd %78 %81 
					                                             OpStore %73 %82 
					                 read_only Texture2D %85 = OpLoad %84 
					                             sampler %87 = OpLoad %86 
					          read_only Texture2DSampled %88 = OpSampledImage %85 %87 
					                               f32_4 %89 = OpLoad %73 
					                               f32_2 %90 = OpVectorShuffle %89 %89 2 3 
					                               f32_4 %91 = OpImageSampleImplicitLod %88 %90 
					                                 f32 %92 = OpCompositeExtract %91 0 
					                                             OpStore %83 %92 
					                 read_only Texture2D %94 = OpLoad %84 
					                             sampler %95 = OpLoad %86 
					          read_only Texture2DSampled %96 = OpSampledImage %94 %95 
					                               f32_4 %97 = OpLoad %73 
					                               f32_2 %98 = OpVectorShuffle %97 %97 0 1 
					                               f32_4 %99 = OpImageSampleImplicitLod %96 %98 
					                                f32 %100 = OpCompositeExtract %99 0 
					                                             OpStore %93 %100 
					                                f32 %102 = OpLoad %93 
					                                f32 %104 = OpFMul %102 %103 
					                                f32 %106 = OpFAdd %104 %105 
					                                             OpStore %101 %106 
					                                f32 %108 = OpLoad %83 
					                                f32 %109 = OpFMul %108 %103 
					                                f32 %110 = OpFAdd %109 %105 
					                                             OpStore %107 %110 
					                                f32 %111 = OpLoad %107 
					                                f32 %112 = OpExtInst %1 4 %111 
					                                f32 %113 = OpLoad %56 
					                                f32 %114 = OpFDiv %112 %113 
					                                             OpStore %56 %114 
					                              f32_3 %116 = OpLoad %32 
					                                f32 %117 = OpLoad %56 
					                              f32_3 %118 = OpCompositeConstruct %117 %117 %117 
					                              f32_3 %119 = OpFMul %116 %118 
					                                             OpStore %115 %119 
					                       Private f32* %121 = OpAccessChain %47 %58 
					                                f32 %122 = OpLoad %121 
					                       Private f32* %123 = OpAccessChain %47 %61 
					                                f32 %124 = OpLoad %123 
					                                f32 %125 = OpExtInst %1 40 %122 %124 
					                                             OpStore %120 %125 
					                       Private f32* %126 = OpAccessChain %47 %65 
					                                f32 %127 = OpLoad %126 
					                                f32 %128 = OpLoad %120 
					                                f32 %129 = OpExtInst %1 40 %127 %128 
					                                             OpStore %120 %129 
					                                f32 %130 = OpLoad %120 
					                                f32 %131 = OpFAdd %130 %71 
					                                             OpStore %120 %131 
					                                f32 %132 = OpLoad %101 
					                                f32 %133 = OpExtInst %1 4 %132 
					                                f32 %134 = OpLoad %120 
					                                f32 %135 = OpFDiv %133 %134 
					                                             OpStore %120 %135 
					                              f32_3 %137 = OpLoad %47 
					                                f32 %138 = OpLoad %120 
					                              f32_3 %139 = OpCompositeConstruct %138 %138 %138 
					                              f32_3 %140 = OpFMul %137 %139 
					                              f32_3 %141 = OpLoad %115 
					                              f32_3 %142 = OpFAdd %140 %141 
					                                             OpStore %136 %142 
					                                f32 %143 = OpLoad %56 
					                                f32 %144 = OpLoad %120 
					                                f32 %145 = OpFAdd %143 %144 
					                       Private f32* %146 = OpAccessChain %115 %65 
					                                             OpStore %146 %145 
					                     Uniform f32_4* %148 = OpAccessChain %12 %14 
					                              f32_4 %149 = OpLoad %148 
					                              f32_4 %150 = OpVectorShuffle %149 %149 0 1 0 1 
					                              f32_4 %152 = OpFMul %150 %151 
					                              f32_2 %153 = OpLoad vs_TEXCOORD0 
					                              f32_4 %154 = OpVectorShuffle %153 %153 0 1 0 1 
					                              f32_4 %155 = OpFAdd %152 %154 
					                                             OpStore %147 %155 
					                read_only Texture2D %157 = OpLoad %35 
					                            sampler %158 = OpLoad %39 
					         read_only Texture2DSampled %159 = OpSampledImage %157 %158 
					                              f32_4 %160 = OpLoad %147 
					                              f32_2 %161 = OpVectorShuffle %160 %160 0 1 
					                              f32_4 %162 = OpImageSampleImplicitLod %159 %161 
					                              f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
					                                             OpStore %156 %163 
					                read_only Texture2D %165 = OpLoad %35 
					                            sampler %166 = OpLoad %39 
					         read_only Texture2DSampled %167 = OpSampledImage %165 %166 
					                              f32_4 %168 = OpLoad %147 
					                              f32_2 %169 = OpVectorShuffle %168 %168 2 3 
					                              f32_4 %170 = OpImageSampleImplicitLod %167 %169 
					                              f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                             OpStore %164 %171 
					                       Private f32* %173 = OpAccessChain %156 %58 
					                                f32 %174 = OpLoad %173 
					                       Private f32* %175 = OpAccessChain %156 %61 
					                                f32 %176 = OpLoad %175 
					                                f32 %177 = OpExtInst %1 40 %174 %176 
					                                             OpStore %172 %177 
					                       Private f32* %178 = OpAccessChain %156 %65 
					                                f32 %179 = OpLoad %178 
					                                f32 %180 = OpLoad %172 
					                                f32 %181 = OpExtInst %1 40 %179 %180 
					                                             OpStore %172 %181 
					                                f32 %182 = OpLoad %172 
					                                f32 %183 = OpFAdd %182 %71 
					                                             OpStore %172 %183 
					                     Uniform f32_4* %184 = OpAccessChain %12 %14 
					                              f32_4 %185 = OpLoad %184 
					                              f32_4 %186 = OpVectorShuffle %185 %185 0 1 0 1 
					                              f32_4 %187 = OpFMul %186 %151 
					                              f32_2 %188 = OpLoad vs_TEXCOORD1 
					                              f32_4 %189 = OpVectorShuffle %188 %188 0 1 0 1 
					                              f32_4 %190 = OpFAdd %187 %189 
					                                             OpStore %147 %190 
					                read_only Texture2D %192 = OpLoad %84 
					                            sampler %193 = OpLoad %86 
					         read_only Texture2DSampled %194 = OpSampledImage %192 %193 
					                              f32_4 %195 = OpLoad %147 
					                              f32_2 %196 = OpVectorShuffle %195 %195 0 1 
					                              f32_4 %197 = OpImageSampleImplicitLod %194 %196 
					                                f32 %198 = OpCompositeExtract %197 0 
					                                             OpStore %191 %198 
					                read_only Texture2D %200 = OpLoad %84 
					                            sampler %201 = OpLoad %86 
					         read_only Texture2DSampled %202 = OpSampledImage %200 %201 
					                              f32_4 %203 = OpLoad %147 
					                              f32_2 %204 = OpVectorShuffle %203 %203 2 3 
					                              f32_4 %205 = OpImageSampleImplicitLod %202 %204 
					                                f32 %206 = OpCompositeExtract %205 0 
					                                             OpStore %199 %206 
					                                f32 %208 = OpLoad %199 
					                                f32 %209 = OpFMul %208 %103 
					                                f32 %210 = OpFAdd %209 %105 
					                                             OpStore %207 %210 
					                                f32 %212 = OpLoad %191 
					                                f32 %213 = OpFMul %212 %103 
					                                f32 %214 = OpFAdd %213 %105 
					                                             OpStore %211 %214 
					                                f32 %215 = OpLoad %211 
					                                f32 %216 = OpExtInst %1 4 %215 
					                                f32 %217 = OpLoad %172 
					                                f32 %218 = OpFDiv %216 %217 
					                                             OpStore %172 %218 
					                                f32 %220 = OpLoad %207 
					                                f32 %221 = OpLoad %211 
					                                f32 %222 = OpExtInst %1 37 %220 %221 
					                                             OpStore %219 %222 
					                              f32_3 %223 = OpLoad %156 
					                                f32 %224 = OpLoad %172 
					                              f32_3 %225 = OpCompositeConstruct %224 %224 %224 
					                              f32_3 %226 = OpFMul %223 %225 
					                              f32_3 %227 = OpLoad %136 
					                              f32_3 %228 = OpFAdd %226 %227 
					                                             OpStore %136 %228 
					                       Private f32* %229 = OpAccessChain %115 %65 
					                                f32 %230 = OpLoad %229 
					                                f32 %231 = OpLoad %172 
					                                f32 %232 = OpFAdd %230 %231 
					                       Private f32* %233 = OpAccessChain %115 %65 
					                                             OpStore %233 %232 
					                       Private f32* %234 = OpAccessChain %164 %58 
					                                f32 %235 = OpLoad %234 
					                       Private f32* %236 = OpAccessChain %164 %61 
					                                f32 %237 = OpLoad %236 
					                                f32 %238 = OpExtInst %1 40 %235 %237 
					                                             OpStore %172 %238 
					                       Private f32* %239 = OpAccessChain %164 %65 
					                                f32 %240 = OpLoad %239 
					                                f32 %241 = OpLoad %172 
					                                f32 %242 = OpExtInst %1 40 %240 %241 
					                                             OpStore %172 %242 
					                                f32 %243 = OpLoad %172 
					                                f32 %244 = OpFAdd %243 %71 
					                                             OpStore %172 %244 
					                                f32 %245 = OpLoad %207 
					                                f32 %246 = OpExtInst %1 4 %245 
					                                f32 %247 = OpLoad %172 
					                                f32 %248 = OpFDiv %246 %247 
					                                             OpStore %172 %248 
					                              f32_3 %249 = OpLoad %164 
					                                f32 %250 = OpLoad %172 
					                              f32_3 %251 = OpCompositeConstruct %250 %250 %250 
					                              f32_3 %252 = OpFMul %249 %251 
					                              f32_3 %253 = OpLoad %136 
					                              f32_3 %254 = OpFAdd %252 %253 
					                                             OpStore %136 %254 
					                       Private f32* %255 = OpAccessChain %115 %65 
					                                f32 %256 = OpLoad %255 
					                                f32 %257 = OpLoad %172 
					                                f32 %258 = OpFAdd %256 %257 
					                       Private f32* %259 = OpAccessChain %115 %65 
					                                             OpStore %259 %258 
					                       Private f32* %260 = OpAccessChain %115 %65 
					                                f32 %261 = OpLoad %260 
					                                f32 %263 = OpExtInst %1 40 %261 %262 
					                       Private f32* %264 = OpAccessChain %115 %65 
					                                             OpStore %264 %263 
					                              f32_3 %265 = OpLoad %136 
					                              f32_3 %266 = OpLoad %115 
					                              f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
					                              f32_3 %268 = OpFDiv %265 %267 
					                                             OpStore %136 %268 
					                                f32 %269 = OpLoad %107 
					                                f32 %270 = OpLoad %219 
					                                f32 %271 = OpExtInst %1 37 %269 %270 
					                                             OpStore %172 %271 
					                                f32 %272 = OpLoad %107 
					                                f32 %273 = OpLoad %219 
					                                f32 %274 = OpExtInst %1 40 %272 %273 
					                                             OpStore %219 %274 
					                                f32 %275 = OpLoad %101 
					                                f32 %276 = OpLoad %219 
					                                f32 %277 = OpExtInst %1 40 %275 %276 
					                                             OpStore %219 %277 
					                                f32 %278 = OpLoad %101 
					                                f32 %279 = OpLoad %172 
					                                f32 %280 = OpExtInst %1 37 %278 %279 
					                                             OpStore %172 %280 
					                                f32 %284 = OpLoad %219 
					                                f32 %285 = OpLoad %172 
					                                f32 %286 = OpFNegate %285 
					                               bool %287 = OpFOrdLessThan %284 %286 
					                                             OpStore %283 %287 
					                               bool %288 = OpLoad %283 
					                                f32 %289 = OpLoad %172 
					                                f32 %290 = OpLoad %219 
					                                f32 %291 = OpSelect %288 %289 %290 
					                                             OpStore %172 %291 
					                                f32 %293 = OpLoad %172 
					                       Uniform f32* %296 = OpAccessChain %12 %294 
					                                f32 %297 = OpLoad %296 
					                                f32 %298 = OpFMul %293 %297 
					                       Private f32* %300 = OpAccessChain %292 %299 
					                                             OpStore %300 %298 
					                       Uniform f32* %302 = OpAccessChain %12 %14 %61 
					                                f32 %303 = OpLoad %302 
					                       Uniform f32* %304 = OpAccessChain %12 %14 %61 
					                                f32 %305 = OpLoad %304 
					                                f32 %306 = OpFAdd %303 %305 
					                                             OpStore %301 %306 
					                                f32 %307 = OpLoad %301 
					                                f32 %308 = OpFDiv %71 %307 
					                                             OpStore %301 %308 
					                                f32 %309 = OpLoad %301 
					                       Private f32* %310 = OpAccessChain %292 %299 
					                                f32 %311 = OpLoad %310 
					                                f32 %312 = OpExtInst %1 4 %311 
					                                f32 %313 = OpFMul %309 %312 
					                                             OpStore %301 %313 
					                                f32 %314 = OpLoad %301 
					                                f32 %316 = OpExtInst %1 43 %314 %315 %71 
					                                             OpStore %301 %316 
					                                f32 %317 = OpLoad %301 
					                                f32 %319 = OpFMul %317 %318 
					                                f32 %321 = OpFAdd %319 %320 
					                       Private f32* %322 = OpAccessChain %73 %65 
					                                             OpStore %322 %321 
					                                f32 %323 = OpLoad %301 
					                                f32 %324 = OpLoad %301 
					                                f32 %325 = OpFMul %323 %324 
					                                             OpStore %301 %325 
					                                f32 %326 = OpLoad %301 
					                       Private f32* %327 = OpAccessChain %73 %65 
					                                f32 %328 = OpLoad %327 
					                                f32 %329 = OpFMul %326 %328 
					                                             OpStore %301 %329 
					                                f32 %330 = OpLoad %301 
					                              f32_3 %331 = OpCompositeConstruct %330 %330 %330 
					                              f32_3 %332 = OpLoad %136 
					                              f32_3 %333 = OpFMul %331 %332 
					                              f32_4 %334 = OpLoad %9 
					                              f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
					                                             OpStore %9 %335 
					                              f32_4 %336 = OpLoad %9 
					                              f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
					                              f32_3 %340 = OpFMul %337 %339 
					                              f32_3 %343 = OpFAdd %340 %342 
					                              f32_4 %344 = OpLoad %73 
					                              f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
					                                             OpStore %73 %345 
					                              f32_4 %346 = OpLoad %9 
					                              f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
					                              f32_4 %348 = OpLoad %73 
					                              f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
					                              f32_3 %350 = OpFMul %347 %349 
					                              f32_3 %353 = OpFAdd %350 %352 
					                              f32_4 %354 = OpLoad %73 
					                              f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
					                                             OpStore %73 %355 
					                              f32_4 %356 = OpLoad %9 
					                              f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
					                              f32_4 %358 = OpLoad %73 
					                              f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
					                              f32_3 %360 = OpFMul %357 %359 
					                              f32_4 %361 = OpLoad %292 
					                              f32_4 %362 = OpVectorShuffle %361 %360 4 5 6 3 
					                                             OpStore %292 %362 
					                              f32_4 %365 = OpLoad %292 
					                                             OpStore %364 %365 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(binding = 0, std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						vec4 unused_0_4;
					};
					layout(location = 1) uniform  sampler2D _MainTex;
					layout(location = 2) uniform  sampler2D _CoCTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 1) in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec3 u_xlat10_0;
					float u_xlat1;
					vec3 u_xlat16_1;
					vec3 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat16_2;
					float u_xlat10_2;
					vec4 u_xlat3;
					float u_xlat16_3;
					vec4 u_xlat4;
					bool u_xlatb6;
					float u_xlat16_7;
					vec3 u_xlat10_7;
					float u_xlat16_8;
					float u_xlat10_8;
					float u_xlat16_13;
					float u_xlat10_13;
					float u_xlat15;
					float u_xlat16_15;
					float u_xlat16_16;
					float u_xlat10_16;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1.xyz = texture(_MainTex, u_xlat0.zw).xyz;
					    u_xlat10_0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
					    u_xlat16_15 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_15 = max(u_xlat16_15, u_xlat10_1.x);
					    u_xlat16_15 = u_xlat16_15 + 1.0;
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_16 = texture(_CoCTex, u_xlat2.zw).x;
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.xy).x;
					    u_xlat16_2 = u_xlat10_2 * 2.0 + -1.0;
					    u_xlat16_16 = u_xlat10_16 * 2.0 + -1.0;
					    u_xlat16_15 = abs(u_xlat16_16) / u_xlat16_15;
					    u_xlat16_1.xyz = vec3(u_xlat16_15) * u_xlat10_1.xyz;
					    u_xlat16_7 = max(u_xlat10_0.z, u_xlat10_0.y);
					    u_xlat16_7 = max(u_xlat10_0.x, u_xlat16_7);
					    u_xlat16_7 = u_xlat16_7 + 1.0;
					    u_xlat16_7 = abs(u_xlat16_2) / u_xlat16_7;
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(u_xlat16_7) + u_xlat16_1.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_7;
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat10_7.xyz = texture(_MainTex, u_xlat3.zw).xyz;
					    u_xlat16_3 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_3 = max(u_xlat10_1.x, u_xlat16_3);
					    u_xlat16_3 = u_xlat16_3 + 1.0;
					    u_xlat4 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_8 = texture(_CoCTex, u_xlat4.xy).x;
					    u_xlat10_13 = texture(_CoCTex, u_xlat4.zw).x;
					    u_xlat16_13 = u_xlat10_13 * 2.0 + -1.0;
					    u_xlat16_8 = u_xlat10_8 * 2.0 + -1.0;
					    u_xlat16_3 = abs(u_xlat16_8) / u_xlat16_3;
					    u_xlat16_8 = min(u_xlat16_13, u_xlat16_8);
					    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(u_xlat16_3) + u_xlat16_0.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_3;
					    u_xlat16_1.x = max(u_xlat10_7.z, u_xlat10_7.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_7.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = abs(u_xlat16_13) / u_xlat16_1.x;
					    u_xlat16_0.xyz = u_xlat10_7.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_1.x;
					    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-06);
					    u_xlat16_0.xyz = u_xlat16_0.xyz / vec3(u_xlat16_15);
					    u_xlat16_15 = min(u_xlat16_16, u_xlat16_8);
					    u_xlat16_1.x = max(u_xlat16_16, u_xlat16_8);
					    u_xlat1 = max(u_xlat16_1.x, u_xlat16_2);
					    u_xlat15 = min(u_xlat16_15, u_xlat16_2);
					    u_xlatb6 = u_xlat1<(-u_xlat15);
					    u_xlat15 = (u_xlatb6) ? u_xlat15 : u_xlat1;
					    u_xlat15 = u_xlat15 * _MaxCoC;
					    u_xlat1 = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat1 = abs(u_xlat15) * u_xlat1;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    SV_Target0.w = u_xlat15;
					    u_xlat15 = u_xlat1 * -2.0 + 3.0;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat15 = u_xlat15 * u_xlat1;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL4x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!ps_5_0
					
					#version 430
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(binding = 0, std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						vec4 unused_0_4;
					};
					layout(location = 1) uniform  sampler2D _MainTex;
					layout(location = 2) uniform  sampler2D _CoCTex;
					layout(location = 0) in  vec2 vs_TEXCOORD0;
					layout(location = 1) in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec3 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec3 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat16_2;
					float u_xlat10_2;
					vec4 u_xlat3;
					float u_xlat16_3;
					vec4 u_xlat4;
					bool u_xlatb6;
					float u_xlat16_7;
					vec3 u_xlat10_7;
					float u_xlat16_8;
					float u_xlat10_8;
					float u_xlat16_13;
					float u_xlat10_13;
					float u_xlat15;
					float u_xlat16_15;
					float u_xlat16_16;
					float u_xlat10_16;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1.xyz = texture(_MainTex, u_xlat0.zw).xyz;
					    u_xlat10_0.xyz = texture(_MainTex, u_xlat0.xy).xyz;
					    u_xlat16_15 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_15 = max(u_xlat16_15, u_xlat10_1.x);
					    u_xlat16_15 = u_xlat16_15 + 1.0;
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_16 = texture(_CoCTex, u_xlat2.zw).x;
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.xy).x;
					    u_xlat16_2 = u_xlat10_2 * 2.0 + -1.0;
					    u_xlat16_16 = u_xlat10_16 * 2.0 + -1.0;
					    u_xlat16_15 = abs(u_xlat16_16) / u_xlat16_15;
					    u_xlat16_1.xyz = vec3(u_xlat16_15) * u_xlat10_1.xyz;
					    u_xlat16_7 = max(u_xlat10_0.z, u_xlat10_0.y);
					    u_xlat16_7 = max(u_xlat10_0.x, u_xlat16_7);
					    u_xlat16_7 = u_xlat16_7 + 1.0;
					    u_xlat16_7 = abs(u_xlat16_2) / u_xlat16_7;
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(u_xlat16_7) + u_xlat16_1.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_7;
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1.xyz = texture(_MainTex, u_xlat3.xy).xyz;
					    u_xlat10_7.xyz = texture(_MainTex, u_xlat3.zw).xyz;
					    u_xlat16_3 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_3 = max(u_xlat10_1.x, u_xlat16_3);
					    u_xlat16_3 = u_xlat16_3 + 1.0;
					    u_xlat4 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_8 = texture(_CoCTex, u_xlat4.xy).x;
					    u_xlat10_13 = texture(_CoCTex, u_xlat4.zw).x;
					    u_xlat16_13 = u_xlat10_13 * 2.0 + -1.0;
					    u_xlat16_8 = u_xlat10_8 * 2.0 + -1.0;
					    u_xlat16_3 = abs(u_xlat16_8) / u_xlat16_3;
					    u_xlat16_8 = min(u_xlat16_13, u_xlat16_8);
					    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(u_xlat16_3) + u_xlat16_0.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_3;
					    u_xlat16_1.x = max(u_xlat10_7.z, u_xlat10_7.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_7.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = abs(u_xlat16_13) / u_xlat16_1.x;
					    u_xlat16_0.xyz = u_xlat10_7.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_15 = u_xlat16_15 + u_xlat16_1.x;
					    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-06);
					    u_xlat16_0.xyz = u_xlat16_0.xyz / vec3(u_xlat16_15);
					    u_xlat16_15 = min(u_xlat16_16, u_xlat16_8);
					    u_xlat16_1.x = max(u_xlat16_16, u_xlat16_8);
					    u_xlat1.x = max(u_xlat16_1.x, u_xlat16_2);
					    u_xlat15 = min(u_xlat16_15, u_xlat16_2);
					    u_xlatb6 = u_xlat1.x<(-u_xlat15);
					    u_xlat15 = (u_xlatb6) ? u_xlat15 : u_xlat1.x;
					    u_xlat15 = u_xlat15 * _MaxCoC;
					    u_xlat1.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = abs(u_xlat15) * u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    SV_Target0.w = u_xlat15;
					    u_xlat15 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!!!GL4x"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Bokeh Filter (small)"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 262090
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[16];
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					uniform 	float _RcpAspect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.545454562, 0.0);
						ImmCB_0_0_0[2] = vec2(0.168554723, 0.518758118);
						ImmCB_0_0_0[3] = vec2(-0.441282034, 0.320610106);
						ImmCB_0_0_0[4] = vec2(-0.441281974, -0.320610195);
						ImmCB_0_0_0[5] = vec2(0.168554798, -0.518758118);
						ImmCB_0_0_0[6] = vec2(1.0, 0.0);
						ImmCB_0_0_0[7] = vec2(0.809017003, 0.587785244);
						ImmCB_0_0_0[8] = vec2(0.309016973, 0.95105654);
						ImmCB_0_0_0[9] = vec2(-0.309017032, 0.95105648);
						ImmCB_0_0_0[10] = vec2(-0.809017062, 0.587785184);
						ImmCB_0_0_0[11] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[12] = vec2(-0.809016943, -0.587785363);
						ImmCB_0_0_0[13] = vec2(-0.309016645, -0.9510566);
						ImmCB_0_0_0[14] = vec2(0.309017122, -0.95105648);
						ImmCB_0_0_0[15] = vec2(0.809016943, -0.587785304);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.196349546;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 322
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %304 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %24 RelaxedPrecision 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpMemberDecorate %29 0 Offset 29 
					                                             OpMemberDecorate %29 1 Offset 29 
					                                             OpMemberDecorate %29 2 Offset 29 
					                                             OpDecorate %29 Block 
					                                             OpDecorate %31 DescriptorSet 31 
					                                             OpDecorate %31 Binding 31 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %154 RelaxedPrecision 
					                                             OpDecorate %158 RelaxedPrecision 
					                                             OpDecorate %159 RelaxedPrecision 
					                                             OpDecorate %160 RelaxedPrecision 
					                                             OpDecorate %165 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %168 RelaxedPrecision 
					                                             OpDecorate %169 RelaxedPrecision 
					                                             OpDecorate %172 RelaxedPrecision 
					                                             OpDecorate %173 RelaxedPrecision 
					                                             OpDecorate %179 RelaxedPrecision 
					                                             OpDecorate %197 RelaxedPrecision 
					                                             OpDecorate %198 RelaxedPrecision 
					                                             OpDecorate %213 RelaxedPrecision 
					                                             OpDecorate %214 RelaxedPrecision 
					                                             OpDecorate %225 RelaxedPrecision 
					                                             OpDecorate %226 RelaxedPrecision 
					                                             OpDecorate %228 RelaxedPrecision 
					                                             OpDecorate %229 RelaxedPrecision 
					                                             OpDecorate %234 RelaxedPrecision 
					                                             OpDecorate %235 RelaxedPrecision 
					                                             OpDecorate %236 RelaxedPrecision 
					                                             OpDecorate %237 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %239 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %242 RelaxedPrecision 
					                                             OpDecorate %247 RelaxedPrecision 
					                                             OpDecorate %248 RelaxedPrecision 
					                                             OpDecorate %249 RelaxedPrecision 
					                                             OpDecorate %254 RelaxedPrecision 
					                                             OpDecorate %259 RelaxedPrecision 
					                                             OpDecorate %261 RelaxedPrecision 
					                                             OpDecorate %263 RelaxedPrecision 
					                                             OpDecorate %264 RelaxedPrecision 
					                                             OpDecorate %265 RelaxedPrecision 
					                                             OpDecorate %266 RelaxedPrecision 
					                                             OpDecorate %267 RelaxedPrecision 
					                                             OpDecorate %268 RelaxedPrecision 
					                                             OpDecorate %269 RelaxedPrecision 
					                                             OpDecorate %273 RelaxedPrecision 
					                                             OpDecorate %277 RelaxedPrecision 
					                                             OpDecorate %279 RelaxedPrecision 
					                                             OpDecorate %280 RelaxedPrecision 
					                                             OpDecorate %281 RelaxedPrecision 
					                                             OpDecorate %282 RelaxedPrecision 
					                                             OpDecorate %283 RelaxedPrecision 
					                                             OpDecorate %284 RelaxedPrecision 
					                                             OpDecorate %285 RelaxedPrecision 
					                                             OpDecorate %288 RelaxedPrecision 
					                                             OpDecorate %290 RelaxedPrecision 
					                                             OpDecorate %292 RelaxedPrecision 
					                                             OpDecorate %293 RelaxedPrecision 
					                                             OpDecorate %294 RelaxedPrecision 
					                                             OpDecorate %295 RelaxedPrecision 
					                                             OpDecorate %296 RelaxedPrecision 
					                                             OpDecorate %297 RelaxedPrecision 
					                                             OpDecorate %298 RelaxedPrecision 
					                                             OpDecorate %299 RelaxedPrecision 
					                                             OpDecorate %300 RelaxedPrecision 
					                                             OpDecorate %304 RelaxedPrecision 
					                                             OpDecorate %304 Location 304 
					                                             OpDecorate %305 RelaxedPrecision 
					                                             OpDecorate %306 RelaxedPrecision 
					                                             OpDecorate %307 RelaxedPrecision 
					                                             OpDecorate %308 RelaxedPrecision 
					                                             OpDecorate %309 RelaxedPrecision 
					                                             OpDecorate %310 RelaxedPrecision 
					                                             OpDecorate %311 RelaxedPrecision 
					                                             OpDecorate %312 RelaxedPrecision 
					                                             OpDecorate %315 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %29 = OpTypeStruct %23 %6 %6 
					                                     %30 = OpTypePointer Uniform %29 
					  Uniform struct {f32_4; f32; f32;}* %31 = OpVariable Uniform 
					                                     %32 = OpTypeInt 32 1 
					                                 i32 %33 = OpConstant 0 
					                                 u32 %34 = OpConstant 1 
					                                     %35 = OpTypePointer Uniform %6 
					                                     %41 = OpTypePointer Private %23 
					                      Private f32_4* %42 = OpVariable Private 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                                 u32 %44 = OpConstant 0 
					                                 u32 %47 = OpConstant 2 
					                      Private f32_4* %50 = OpVariable Private 
					                                     %55 = OpTypePointer Function %32 
					                                 i32 %63 = OpConstant 16 
					                                     %64 = OpTypeBool 
					                                     %66 = OpTypeVector %6 3 
					                                     %67 = OpTypePointer Private %66 
					                      Private f32_3* %68 = OpVariable Private 
					                                 i32 %69 = OpConstant 1 
					                                     %78 = OpTypeVector %25 4 
					                                 u32 %79 = OpConstant 16 
					                                     %80 = OpTypeArray %78 %79 
					                               u32_4 %81 = OpConstantComposite %44 %44 %44 %44 
					                                 u32 %82 = OpConstant 1057727209 
					                               u32_4 %83 = OpConstantComposite %82 %44 %44 %44 
					                                 u32 %84 = OpConstant 1043110300 
					                                 u32 %85 = OpConstant 1057279317 
					                               u32_4 %86 = OpConstantComposite %84 %85 %44 %44 
					                                 u32 %87 = OpConstant 3202478008 
					                                 u32 %88 = OpConstant 1050945282 
					                               u32_4 %89 = OpConstantComposite %87 %88 %44 %44 
					                                 u32 %90 = OpConstant 3202478006 
					                                 u32 %91 = OpConstant 3198428933 
					                               u32_4 %92 = OpConstantComposite %90 %91 %44 %44 
					                                 u32 %93 = OpConstant 1043110305 
					                                 u32 %94 = OpConstant 3204762965 
					                               u32_4 %95 = OpConstantComposite %93 %94 %44 %44 
					                                 u32 %96 = OpConstant 1065353216 
					                               u32_4 %97 = OpConstantComposite %96 %44 %44 %44 
					                                 u32 %98 = OpConstant 1062149053 
					                                 u32 %99 = OpConstant 1058437400 
					                              u32_4 %100 = OpConstantComposite %98 %99 %44 %44 
					                                u32 %101 = OpConstant 1050556281 
					                                u32 %102 = OpConstant 1064532081 
					                              u32_4 %103 = OpConstantComposite %101 %102 %44 %44 
					                                u32 %104 = OpConstant 3198039931 
					                                u32 %105 = OpConstant 1064532080 
					                              u32_4 %106 = OpConstantComposite %104 %105 %44 %44 
					                                u32 %107 = OpConstant 3209632702 
					                                u32 %108 = OpConstant 1058437399 
					                              u32_4 %109 = OpConstantComposite %107 %108 %44 %44 
					                                u32 %110 = OpConstant 3212836864 
					                              u32_4 %111 = OpConstantComposite %110 %44 %44 %44 
					                                u32 %112 = OpConstant 3209632700 
					                                u32 %113 = OpConstant 3205921050 
					                              u32_4 %114 = OpConstantComposite %112 %113 %44 %44 
					                                u32 %115 = OpConstant 3198039918 
					                                u32 %116 = OpConstant 3212015730 
					                              u32_4 %117 = OpConstantComposite %115 %116 %44 %44 
					                                u32 %118 = OpConstant 1050556286 
					                                u32 %119 = OpConstant 3212015728 
					                              u32_4 %120 = OpConstantComposite %118 %119 %44 %44 
					                                u32 %121 = OpConstant 1062149052 
					                                u32 %122 = OpConstant 3205921049 
					                              u32_4 %123 = OpConstantComposite %121 %122 %44 %44 
					                          u32_4[16] %124 = OpConstantComposite %81 %83 %86 %89 %92 %95 %97 %100 %103 %106 %109 %111 %114 %117 %120 %123 
					                                    %126 = OpTypeVector %25 2 
					                                    %127 = OpTypePointer Function %80 
					                                    %129 = OpTypePointer Function %78 
					                       Private f32* %137 = OpVariable Private 
					                                i32 %147 = OpConstant 2 
					                     Private f32_4* %158 = OpVariable Private 
					                     Private f32_4* %165 = OpVariable Private 
					                       Private f32* %175 = OpVariable Private 
					                                f32 %183 = OpConstant 3,674022E-40 
					                       Private f32* %187 = OpVariable Private 
					                                f32 %192 = OpConstant 3,674022E-40 
					                                    %210 = OpTypePointer Private %64 
					                      Private bool* %211 = OpVariable Private 
					                       Private f32* %218 = OpVariable Private 
					                       Private f32* %221 = OpVariable Private 
					                     Private f32_4* %237 = OpVariable Private 
					                      Private bool* %252 = OpVariable Private 
					                       Private f32* %259 = OpVariable Private 
					                       Private f32* %288 = OpVariable Private 
					                                f32 %291 = OpConstant 3,674022E-40 
					                                    %303 = OpTypePointer Output %23 
					                      Output f32_4* %304 = OpVariable Output 
					                                    %316 = OpTypePointer Output %6 
					                                    %319 = OpTypePointer Private %32 
					                       Private i32* %320 = OpVariable Private 
					                      Private bool* %321 = OpVariable Private 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                       Function i32* %56 = OpVariable Function 
					                Function u32_4[16]* %128 = OpVariable Function 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD0 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                        Uniform f32* %36 = OpAccessChain %31 %33 %34 
					                                 f32 %37 = OpLoad %36 
					                        Uniform f32* %38 = OpAccessChain %31 %33 %34 
					                                 f32 %39 = OpLoad %38 
					                                 f32 %40 = OpFAdd %37 %39 
					                                             OpStore %28 %40 
					                        Private f32* %45 = OpAccessChain %42 %44 
					                                             OpStore %45 %43 
					                        Private f32* %46 = OpAccessChain %42 %34 
					                                             OpStore %46 %43 
					                        Private f32* %48 = OpAccessChain %42 %47 
					                                             OpStore %48 %43 
					                        Private f32* %49 = OpAccessChain %42 %26 
					                                             OpStore %49 %43 
					                        Private f32* %51 = OpAccessChain %50 %44 
					                                             OpStore %51 %43 
					                        Private f32* %52 = OpAccessChain %50 %34 
					                                             OpStore %52 %43 
					                        Private f32* %53 = OpAccessChain %50 %47 
					                                             OpStore %53 %43 
					                        Private f32* %54 = OpAccessChain %50 %26 
					                                             OpStore %54 %43 
					                                             OpStore %56 %33 
					                                             OpBranch %57 
					                                     %57 = OpLabel 
					                                             OpLoopMerge %59 %60 None 
					                                             OpBranch %61 
					                                     %61 = OpLabel 
					                                 i32 %62 = OpLoad %56 
					                                bool %65 = OpSLessThan %62 %63 
					                                             OpBranchConditional %65 %58 %59 
					                                     %58 = OpLabel 
					                        Uniform f32* %70 = OpAccessChain %31 %69 
					                                 f32 %71 = OpLoad %70 
					                        Uniform f32* %72 = OpAccessChain %31 %69 
					                                 f32 %73 = OpLoad %72 
					                               f32_2 %74 = OpCompositeConstruct %71 %73 
					                                 f32 %75 = OpCompositeExtract %74 0 
					                                 f32 %76 = OpCompositeExtract %74 1 
					                               f32_2 %77 = OpCompositeConstruct %75 %76 
					                                i32 %125 = OpLoad %56 
					                                             OpStore %128 %124 
					                    Function u32_4* %130 = OpAccessChain %128 %125 
					                              u32_4 %131 = OpLoad %130 
					                              u32_2 %132 = OpVectorShuffle %131 %131 0 1 
					                              f32_2 %133 = OpBitcast %132 
					                              f32_2 %134 = OpFMul %77 %133 
					                              f32_3 %135 = OpLoad %68 
					                              f32_3 %136 = OpVectorShuffle %135 %134 0 3 4 
					                                             OpStore %68 %136 
					                              f32_3 %138 = OpLoad %68 
					                              f32_2 %139 = OpVectorShuffle %138 %138 1 2 
					                              f32_3 %140 = OpLoad %68 
					                              f32_2 %141 = OpVectorShuffle %140 %140 1 2 
					                                f32 %142 = OpDot %139 %141 
					                                             OpStore %137 %142 
					                                f32 %143 = OpLoad %137 
					                                f32 %144 = OpExtInst %1 31 %143 
					                                             OpStore %137 %144 
					                       Private f32* %145 = OpAccessChain %68 %34 
					                                f32 %146 = OpLoad %145 
					                       Uniform f32* %148 = OpAccessChain %31 %147 
					                                f32 %149 = OpLoad %148 
					                                f32 %150 = OpFMul %146 %149 
					                       Private f32* %151 = OpAccessChain %68 %44 
					                                             OpStore %151 %150 
					                              f32_3 %152 = OpLoad %68 
					                              f32_2 %153 = OpVectorShuffle %152 %152 0 2 
					                              f32_2 %154 = OpLoad vs_TEXCOORD0 
					                              f32_2 %155 = OpFAdd %153 %154 
					                              f32_3 %156 = OpLoad %68 
					                              f32_3 %157 = OpVectorShuffle %156 %155 3 4 2 
					                                             OpStore %68 %157 
					                read_only Texture2D %159 = OpLoad %11 
					                            sampler %160 = OpLoad %15 
					         read_only Texture2DSampled %161 = OpSampledImage %159 %160 
					                              f32_3 %162 = OpLoad %68 
					                              f32_2 %163 = OpVectorShuffle %162 %162 0 1 
					                              f32_4 %164 = OpImageSampleImplicitLod %161 %163 
					                                             OpStore %158 %164 
					                                f32 %166 = OpLoad %8 
					                       Private f32* %167 = OpAccessChain %158 %26 
					                                f32 %168 = OpLoad %167 
					                                f32 %169 = OpExtInst %1 37 %166 %168 
					                       Private f32* %170 = OpAccessChain %165 %44 
					                                             OpStore %170 %169 
					                       Private f32* %171 = OpAccessChain %165 %44 
					                                f32 %172 = OpLoad %171 
					                                f32 %173 = OpExtInst %1 40 %172 %43 
					                       Private f32* %174 = OpAccessChain %165 %44 
					                                             OpStore %174 %173 
					                                f32 %176 = OpLoad %137 
					                                f32 %177 = OpFNegate %176 
					                       Private f32* %178 = OpAccessChain %165 %44 
					                                f32 %179 = OpLoad %178 
					                                f32 %180 = OpFAdd %177 %179 
					                                             OpStore %175 %180 
					                       Uniform f32* %181 = OpAccessChain %31 %33 %34 
					                                f32 %182 = OpLoad %181 
					                                f32 %184 = OpFMul %182 %183 
					                                f32 %185 = OpLoad %175 
					                                f32 %186 = OpFAdd %184 %185 
					                                             OpStore %175 %186 
					                                f32 %188 = OpLoad %175 
					                                f32 %189 = OpLoad %28 
					                                f32 %190 = OpFDiv %188 %189 
					                                             OpStore %187 %190 
					                                f32 %191 = OpLoad %187 
					                                f32 %193 = OpExtInst %1 43 %191 %43 %192 
					                                             OpStore %187 %193 
					                                f32 %194 = OpLoad %137 
					                                f32 %195 = OpFNegate %194 
					                       Private f32* %196 = OpAccessChain %158 %26 
					                                f32 %197 = OpLoad %196 
					                                f32 %198 = OpFNegate %197 
					                                f32 %199 = OpFAdd %195 %198 
					                                             OpStore %137 %199 
					                       Uniform f32* %200 = OpAccessChain %31 %33 %34 
					                                f32 %201 = OpLoad %200 
					                                f32 %202 = OpFMul %201 %183 
					                                f32 %203 = OpLoad %137 
					                                f32 %204 = OpFAdd %202 %203 
					                                             OpStore %137 %204 
					                                f32 %205 = OpLoad %137 
					                                f32 %206 = OpLoad %28 
					                                f32 %207 = OpFDiv %205 %206 
					                                             OpStore %137 %207 
					                                f32 %208 = OpLoad %137 
					                                f32 %209 = OpExtInst %1 43 %208 %43 %192 
					                                             OpStore %137 %209 
					                       Private f32* %212 = OpAccessChain %158 %26 
					                                f32 %213 = OpLoad %212 
					                                f32 %214 = OpFNegate %213 
					                       Uniform f32* %215 = OpAccessChain %31 %33 %34 
					                                f32 %216 = OpLoad %215 
					                               bool %217 = OpFOrdGreaterThanEqual %214 %216 
					                                             OpStore %211 %217 
					                               bool %219 = OpLoad %211 
					                                f32 %220 = OpSelect %219 %192 %43 
					                                             OpStore %218 %220 
					                                f32 %222 = OpLoad %137 
					                                f32 %223 = OpLoad %218 
					                                f32 %224 = OpFMul %222 %223 
					                                             OpStore %221 %224 
					                              f32_4 %225 = OpLoad %158 
					                              f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                f32 %227 = OpLoad %187 
					                              f32_3 %228 = OpCompositeConstruct %227 %227 %227 
					                              f32_3 %229 = OpFMul %226 %228 
					                              f32_4 %230 = OpLoad %165 
					                              f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
					                                             OpStore %165 %231 
					                                f32 %232 = OpLoad %187 
					                       Private f32* %233 = OpAccessChain %165 %26 
					                                             OpStore %233 %232 
					                              f32_4 %234 = OpLoad %165 
					                              f32_4 %235 = OpLoad %42 
					                              f32_4 %236 = OpFAdd %234 %235 
					                                             OpStore %42 %236 
					                              f32_4 %238 = OpLoad %158 
					                              f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                f32 %240 = OpLoad %221 
					                              f32_3 %241 = OpCompositeConstruct %240 %240 %240 
					                              f32_3 %242 = OpFMul %239 %241 
					                              f32_4 %243 = OpLoad %237 
					                              f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
					                                             OpStore %237 %244 
					                                f32 %245 = OpLoad %221 
					                       Private f32* %246 = OpAccessChain %237 %26 
					                                             OpStore %246 %245 
					                              f32_4 %247 = OpLoad %237 
					                              f32_4 %248 = OpLoad %50 
					                              f32_4 %249 = OpFAdd %247 %248 
					                                             OpStore %50 %249 
					                                             OpBranch %60 
					                                     %60 = OpLabel 
					                                i32 %250 = OpLoad %56 
					                                i32 %251 = OpIAdd %250 %69 
					                                             OpStore %56 %251 
					                                             OpBranch %57 
					                                     %59 = OpLabel 
					                       Private f32* %253 = OpAccessChain %42 %26 
					                                f32 %254 = OpLoad %253 
					                               bool %255 = OpFOrdEqual %254 %43 
					                                             OpStore %252 %255 
					                               bool %256 = OpLoad %252 
					                                f32 %257 = OpSelect %256 %192 %43 
					                       Private f32* %258 = OpAccessChain %165 %44 
					                                             OpStore %258 %257 
					                       Private f32* %260 = OpAccessChain %42 %26 
					                                f32 %261 = OpLoad %260 
					                       Private f32* %262 = OpAccessChain %165 %44 
					                                f32 %263 = OpLoad %262 
					                                f32 %264 = OpFAdd %261 %263 
					                                             OpStore %259 %264 
					                              f32_4 %265 = OpLoad %42 
					                              f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
					                                f32 %267 = OpLoad %259 
					                              f32_3 %268 = OpCompositeConstruct %267 %267 %267 
					                              f32_3 %269 = OpFDiv %266 %268 
					                              f32_4 %270 = OpLoad %42 
					                              f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
					                                             OpStore %42 %271 
					                       Private f32* %272 = OpAccessChain %50 %26 
					                                f32 %273 = OpLoad %272 
					                               bool %274 = OpFOrdEqual %273 %43 
					                                             OpStore %252 %274 
					                               bool %275 = OpLoad %252 
					                                f32 %276 = OpSelect %275 %192 %43 
					                                             OpStore %259 %276 
					                                f32 %277 = OpLoad %259 
					                       Private f32* %278 = OpAccessChain %50 %26 
					                                f32 %279 = OpLoad %278 
					                                f32 %280 = OpFAdd %277 %279 
					                                             OpStore %259 %280 
					                              f32_4 %281 = OpLoad %50 
					                              f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                f32 %283 = OpLoad %259 
					                              f32_3 %284 = OpCompositeConstruct %283 %283 %283 
					                              f32_3 %285 = OpFDiv %282 %284 
					                              f32_4 %286 = OpLoad %50 
					                              f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
					                                             OpStore %50 %287 
					                       Private f32* %289 = OpAccessChain %50 %26 
					                                f32 %290 = OpLoad %289 
					                                f32 %292 = OpFMul %290 %291 
					                                             OpStore %288 %292 
					                                f32 %293 = OpLoad %288 
					                                f32 %294 = OpExtInst %1 37 %293 %192 
					                                             OpStore %259 %294 
					                              f32_4 %295 = OpLoad %42 
					                              f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
					                              f32_3 %297 = OpFNegate %296 
					                              f32_4 %298 = OpLoad %50 
					                              f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
					                              f32_3 %300 = OpFAdd %297 %299 
					                              f32_4 %301 = OpLoad %50 
					                              f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
					                                             OpStore %50 %302 
					                                f32 %305 = OpLoad %259 
					                              f32_3 %306 = OpCompositeConstruct %305 %305 %305 
					                              f32_4 %307 = OpLoad %50 
					                              f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
					                              f32_3 %309 = OpFMul %306 %308 
					                              f32_4 %310 = OpLoad %42 
					                              f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                              f32_3 %312 = OpFAdd %309 %311 
					                              f32_4 %313 = OpLoad %304 
					                              f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
					                                             OpStore %304 %314 
					                                f32 %315 = OpLoad %259 
					                        Output f32* %317 = OpAccessChain %304 %26 
					                                             OpStore %317 %315 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec2 ImmCB_0_0_0[16];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						float _RcpAspect;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.545454562, 0.0);
						ImmCB_0_0_0[2] = vec2(0.168554723, 0.518758118);
						ImmCB_0_0_0[3] = vec2(-0.441282034, 0.320610106);
						ImmCB_0_0_0[4] = vec2(-0.441281974, -0.320610195);
						ImmCB_0_0_0[5] = vec2(0.168554798, -0.518758118);
						ImmCB_0_0_0[6] = vec2(1.0, 0.0);
						ImmCB_0_0_0[7] = vec2(0.809017003, 0.587785244);
						ImmCB_0_0_0[8] = vec2(0.309016973, 0.95105654);
						ImmCB_0_0_0[9] = vec2(-0.309017032, 0.95105648);
						ImmCB_0_0_0[10] = vec2(-0.809017062, 0.587785184);
						ImmCB_0_0_0[11] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[12] = vec2(-0.809016943, -0.587785363);
						ImmCB_0_0_0[13] = vec2(-0.309016645, -0.9510566);
						ImmCB_0_0_0[14] = vec2(0.309017122, -0.95105648);
						ImmCB_0_0_0[15] = vec2(0.809016943, -0.587785304);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.196349546;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Bokeh Filter (medium)"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 318241
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[22];
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					uniform 	float _RcpAspect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.533333361, 0.0);
						ImmCB_0_0_0[2] = vec2(0.332527906, 0.41697681);
						ImmCB_0_0_0[3] = vec2(-0.118677847, 0.519961596);
						ImmCB_0_0_0[4] = vec2(-0.480516732, 0.231404707);
						ImmCB_0_0_0[5] = vec2(-0.480516732, -0.231404677);
						ImmCB_0_0_0[6] = vec2(-0.118677631, -0.519961655);
						ImmCB_0_0_0[7] = vec2(0.332527846, -0.416976899);
						ImmCB_0_0_0[8] = vec2(1.0, 0.0);
						ImmCB_0_0_0[9] = vec2(0.90096885, 0.433883756);
						ImmCB_0_0_0[10] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[11] = vec2(0.222520977, 0.974927902);
						ImmCB_0_0_0[12] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[13] = vec2(-0.623489976, 0.781831384);
						ImmCB_0_0_0[14] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[15] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[17] = vec2(-0.623489618, -0.781831622);
						ImmCB_0_0_0[18] = vec2(-0.222520545, -0.974928021);
						ImmCB_0_0_0[19] = vec2(0.222521499, -0.974927783);
						ImmCB_0_0_0[20] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[21] = vec2(0.90096885, -0.433883756);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<22 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.142799661;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 334
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %316 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %24 RelaxedPrecision 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpMemberDecorate %29 0 Offset 29 
					                                             OpMemberDecorate %29 1 Offset 29 
					                                             OpMemberDecorate %29 2 Offset 29 
					                                             OpDecorate %29 Block 
					                                             OpDecorate %31 DescriptorSet 31 
					                                             OpDecorate %31 Binding 31 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %170 RelaxedPrecision 
					                                             OpDecorate %171 RelaxedPrecision 
					                                             OpDecorate %172 RelaxedPrecision 
					                                             OpDecorate %177 RelaxedPrecision 
					                                             OpDecorate %178 RelaxedPrecision 
					                                             OpDecorate %180 RelaxedPrecision 
					                                             OpDecorate %181 RelaxedPrecision 
					                                             OpDecorate %184 RelaxedPrecision 
					                                             OpDecorate %185 RelaxedPrecision 
					                                             OpDecorate %191 RelaxedPrecision 
					                                             OpDecorate %209 RelaxedPrecision 
					                                             OpDecorate %210 RelaxedPrecision 
					                                             OpDecorate %225 RelaxedPrecision 
					                                             OpDecorate %226 RelaxedPrecision 
					                                             OpDecorate %237 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %240 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %246 RelaxedPrecision 
					                                             OpDecorate %247 RelaxedPrecision 
					                                             OpDecorate %248 RelaxedPrecision 
					                                             OpDecorate %249 RelaxedPrecision 
					                                             OpDecorate %250 RelaxedPrecision 
					                                             OpDecorate %251 RelaxedPrecision 
					                                             OpDecorate %253 RelaxedPrecision 
					                                             OpDecorate %254 RelaxedPrecision 
					                                             OpDecorate %259 RelaxedPrecision 
					                                             OpDecorate %260 RelaxedPrecision 
					                                             OpDecorate %261 RelaxedPrecision 
					                                             OpDecorate %266 RelaxedPrecision 
					                                             OpDecorate %271 RelaxedPrecision 
					                                             OpDecorate %273 RelaxedPrecision 
					                                             OpDecorate %275 RelaxedPrecision 
					                                             OpDecorate %276 RelaxedPrecision 
					                                             OpDecorate %277 RelaxedPrecision 
					                                             OpDecorate %278 RelaxedPrecision 
					                                             OpDecorate %279 RelaxedPrecision 
					                                             OpDecorate %280 RelaxedPrecision 
					                                             OpDecorate %281 RelaxedPrecision 
					                                             OpDecorate %285 RelaxedPrecision 
					                                             OpDecorate %289 RelaxedPrecision 
					                                             OpDecorate %291 RelaxedPrecision 
					                                             OpDecorate %292 RelaxedPrecision 
					                                             OpDecorate %293 RelaxedPrecision 
					                                             OpDecorate %294 RelaxedPrecision 
					                                             OpDecorate %295 RelaxedPrecision 
					                                             OpDecorate %296 RelaxedPrecision 
					                                             OpDecorate %297 RelaxedPrecision 
					                                             OpDecorate %300 RelaxedPrecision 
					                                             OpDecorate %302 RelaxedPrecision 
					                                             OpDecorate %304 RelaxedPrecision 
					                                             OpDecorate %305 RelaxedPrecision 
					                                             OpDecorate %306 RelaxedPrecision 
					                                             OpDecorate %307 RelaxedPrecision 
					                                             OpDecorate %308 RelaxedPrecision 
					                                             OpDecorate %309 RelaxedPrecision 
					                                             OpDecorate %310 RelaxedPrecision 
					                                             OpDecorate %311 RelaxedPrecision 
					                                             OpDecorate %312 RelaxedPrecision 
					                                             OpDecorate %316 RelaxedPrecision 
					                                             OpDecorate %316 Location 316 
					                                             OpDecorate %317 RelaxedPrecision 
					                                             OpDecorate %318 RelaxedPrecision 
					                                             OpDecorate %319 RelaxedPrecision 
					                                             OpDecorate %320 RelaxedPrecision 
					                                             OpDecorate %321 RelaxedPrecision 
					                                             OpDecorate %322 RelaxedPrecision 
					                                             OpDecorate %323 RelaxedPrecision 
					                                             OpDecorate %324 RelaxedPrecision 
					                                             OpDecorate %327 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %29 = OpTypeStruct %23 %6 %6 
					                                     %30 = OpTypePointer Uniform %29 
					  Uniform struct {f32_4; f32; f32;}* %31 = OpVariable Uniform 
					                                     %32 = OpTypeInt 32 1 
					                                 i32 %33 = OpConstant 0 
					                                 u32 %34 = OpConstant 1 
					                                     %35 = OpTypePointer Uniform %6 
					                                     %41 = OpTypePointer Private %23 
					                      Private f32_4* %42 = OpVariable Private 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                                 u32 %44 = OpConstant 0 
					                                 u32 %47 = OpConstant 2 
					                      Private f32_4* %50 = OpVariable Private 
					                                     %55 = OpTypePointer Function %32 
					                                 i32 %63 = OpConstant 22 
					                                     %64 = OpTypeBool 
					                                     %66 = OpTypeVector %6 3 
					                                     %67 = OpTypePointer Private %66 
					                      Private f32_3* %68 = OpVariable Private 
					                                 i32 %69 = OpConstant 1 
					                                     %78 = OpTypeVector %25 4 
					                                 u32 %79 = OpConstant 22 
					                                     %80 = OpTypeArray %78 %79 
					                               u32_4 %81 = OpConstantComposite %44 %44 %44 %44 
					                                 u32 %82 = OpConstant 1057523849 
					                               u32_4 %83 = OpConstantComposite %82 %44 %44 %44 
					                                 u32 %84 = OpConstant 1051345177 
					                                 u32 %85 = OpConstant 1054178812 
					                               u32_4 %86 = OpConstantComposite %84 %85 %44 %44 
					                                 u32 %87 = OpConstant 3186822495 
					                                 u32 %88 = OpConstant 1057299508 
					                               u32_4 %89 = OpConstantComposite %87 %88 %44 %44 
					                                 u32 %90 = OpConstant 3203794506 
					                                 u32 %91 = OpConstant 1047328091 
					                               u32_4 %92 = OpConstantComposite %90 %91 %44 %44 
					                                 u32 %93 = OpConstant 3194811737 
					                               u32_4 %94 = OpConstantComposite %90 %93 %44 %44 
					                                 u32 %95 = OpConstant 3186822466 
					                                 u32 %96 = OpConstant 3204783157 
					                               u32_4 %97 = OpConstantComposite %95 %96 %44 %44 
					                                 u32 %98 = OpConstant 1051345175 
					                                 u32 %99 = OpConstant 3201662463 
					                              u32_4 %100 = OpConstantComposite %98 %99 %44 %44 
					                                u32 %101 = OpConstant 1065353216 
					                              u32_4 %102 = OpConstantComposite %101 %44 %44 %44 
					                                u32 %103 = OpConstant 1063691749 
					                                u32 %104 = OpConstant 1054746115 
					                              u32_4 %105 = OpConstantComposite %103 %104 %44 %44 
					                                u32 %106 = OpConstant 1059036423 
					                                u32 %107 = OpConstant 1061692956 
					                              u32_4 %108 = OpConstantComposite %106 %107 %44 %44 
					                                u32 %109 = OpConstant 1046731914 
					                                u32 %110 = OpConstant 1064932576 
					                              u32_4 %111 = OpConstantComposite %109 %110 %44 %44 
					                                u32 %112 = OpConstant 3194215560 
					                              u32_4 %113 = OpConstantComposite %112 %110 %44 %44 
					                                u32 %114 = OpConstant 3206520074 
					                                u32 %115 = OpConstant 1061692954 
					                              u32_4 %116 = OpConstantComposite %114 %115 %44 %44 
					                                u32 %117 = OpConstant 3211175397 
					                                u32 %118 = OpConstant 1054746117 
					                              u32_4 %119 = OpConstantComposite %117 %118 %44 %44 
					                                u32 %120 = OpConstant 3212836864 
					                              u32_4 %121 = OpConstantComposite %120 %44 %44 %44 
					                                u32 %122 = OpConstant 3202229763 
					                              u32_4 %123 = OpConstantComposite %117 %122 %44 %44 
					                                u32 %124 = OpConstant 3206520068 
					                                u32 %125 = OpConstant 3209176606 
					                              u32_4 %126 = OpConstantComposite %124 %125 %44 %44 
					                                u32 %127 = OpConstant 3194215533 
					                                u32 %128 = OpConstant 3212416226 
					                              u32_4 %129 = OpConstantComposite %127 %128 %44 %44 
					                                u32 %130 = OpConstant 1046731949 
					                                u32 %131 = OpConstant 3212416222 
					                              u32_4 %132 = OpConstantComposite %130 %131 %44 %44 
					                                u32 %133 = OpConstant 1059036421 
					                              u32_4 %134 = OpConstantComposite %133 %125 %44 %44 
					                              u32_4 %135 = OpConstantComposite %103 %122 %44 %44 
					                          u32_4[22] %136 = OpConstantComposite %81 %83 %86 %89 %92 %94 %97 %100 %102 %105 %108 %111 %113 %116 %119 %121 %123 %126 %129 %132 %134 %135 
					                                    %138 = OpTypeVector %25 2 
					                                    %139 = OpTypePointer Function %80 
					                                    %141 = OpTypePointer Function %78 
					                       Private f32* %149 = OpVariable Private 
					                                i32 %159 = OpConstant 2 
					                     Private f32_4* %170 = OpVariable Private 
					                     Private f32_4* %177 = OpVariable Private 
					                       Private f32* %187 = OpVariable Private 
					                                f32 %195 = OpConstant 3,674022E-40 
					                       Private f32* %199 = OpVariable Private 
					                                f32 %204 = OpConstant 3,674022E-40 
					                                    %222 = OpTypePointer Private %64 
					                      Private bool* %223 = OpVariable Private 
					                       Private f32* %230 = OpVariable Private 
					                       Private f32* %233 = OpVariable Private 
					                     Private f32_4* %249 = OpVariable Private 
					                      Private bool* %264 = OpVariable Private 
					                       Private f32* %271 = OpVariable Private 
					                       Private f32* %300 = OpVariable Private 
					                                f32 %303 = OpConstant 3,674022E-40 
					                                    %315 = OpTypePointer Output %23 
					                      Output f32_4* %316 = OpVariable Output 
					                                    %328 = OpTypePointer Output %6 
					                                    %331 = OpTypePointer Private %32 
					                       Private i32* %332 = OpVariable Private 
					                      Private bool* %333 = OpVariable Private 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                       Function i32* %56 = OpVariable Function 
					                Function u32_4[22]* %140 = OpVariable Function 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD0 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                        Uniform f32* %36 = OpAccessChain %31 %33 %34 
					                                 f32 %37 = OpLoad %36 
					                        Uniform f32* %38 = OpAccessChain %31 %33 %34 
					                                 f32 %39 = OpLoad %38 
					                                 f32 %40 = OpFAdd %37 %39 
					                                             OpStore %28 %40 
					                        Private f32* %45 = OpAccessChain %42 %44 
					                                             OpStore %45 %43 
					                        Private f32* %46 = OpAccessChain %42 %34 
					                                             OpStore %46 %43 
					                        Private f32* %48 = OpAccessChain %42 %47 
					                                             OpStore %48 %43 
					                        Private f32* %49 = OpAccessChain %42 %26 
					                                             OpStore %49 %43 
					                        Private f32* %51 = OpAccessChain %50 %44 
					                                             OpStore %51 %43 
					                        Private f32* %52 = OpAccessChain %50 %34 
					                                             OpStore %52 %43 
					                        Private f32* %53 = OpAccessChain %50 %47 
					                                             OpStore %53 %43 
					                        Private f32* %54 = OpAccessChain %50 %26 
					                                             OpStore %54 %43 
					                                             OpStore %56 %33 
					                                             OpBranch %57 
					                                     %57 = OpLabel 
					                                             OpLoopMerge %59 %60 None 
					                                             OpBranch %61 
					                                     %61 = OpLabel 
					                                 i32 %62 = OpLoad %56 
					                                bool %65 = OpSLessThan %62 %63 
					                                             OpBranchConditional %65 %58 %59 
					                                     %58 = OpLabel 
					                        Uniform f32* %70 = OpAccessChain %31 %69 
					                                 f32 %71 = OpLoad %70 
					                        Uniform f32* %72 = OpAccessChain %31 %69 
					                                 f32 %73 = OpLoad %72 
					                               f32_2 %74 = OpCompositeConstruct %71 %73 
					                                 f32 %75 = OpCompositeExtract %74 0 
					                                 f32 %76 = OpCompositeExtract %74 1 
					                               f32_2 %77 = OpCompositeConstruct %75 %76 
					                                i32 %137 = OpLoad %56 
					                                             OpStore %140 %136 
					                    Function u32_4* %142 = OpAccessChain %140 %137 
					                              u32_4 %143 = OpLoad %142 
					                              u32_2 %144 = OpVectorShuffle %143 %143 0 1 
					                              f32_2 %145 = OpBitcast %144 
					                              f32_2 %146 = OpFMul %77 %145 
					                              f32_3 %147 = OpLoad %68 
					                              f32_3 %148 = OpVectorShuffle %147 %146 0 3 4 
					                                             OpStore %68 %148 
					                              f32_3 %150 = OpLoad %68 
					                              f32_2 %151 = OpVectorShuffle %150 %150 1 2 
					                              f32_3 %152 = OpLoad %68 
					                              f32_2 %153 = OpVectorShuffle %152 %152 1 2 
					                                f32 %154 = OpDot %151 %153 
					                                             OpStore %149 %154 
					                                f32 %155 = OpLoad %149 
					                                f32 %156 = OpExtInst %1 31 %155 
					                                             OpStore %149 %156 
					                       Private f32* %157 = OpAccessChain %68 %34 
					                                f32 %158 = OpLoad %157 
					                       Uniform f32* %160 = OpAccessChain %31 %159 
					                                f32 %161 = OpLoad %160 
					                                f32 %162 = OpFMul %158 %161 
					                       Private f32* %163 = OpAccessChain %68 %44 
					                                             OpStore %163 %162 
					                              f32_3 %164 = OpLoad %68 
					                              f32_2 %165 = OpVectorShuffle %164 %164 0 2 
					                              f32_2 %166 = OpLoad vs_TEXCOORD0 
					                              f32_2 %167 = OpFAdd %165 %166 
					                              f32_3 %168 = OpLoad %68 
					                              f32_3 %169 = OpVectorShuffle %168 %167 3 4 2 
					                                             OpStore %68 %169 
					                read_only Texture2D %171 = OpLoad %11 
					                            sampler %172 = OpLoad %15 
					         read_only Texture2DSampled %173 = OpSampledImage %171 %172 
					                              f32_3 %174 = OpLoad %68 
					                              f32_2 %175 = OpVectorShuffle %174 %174 0 1 
					                              f32_4 %176 = OpImageSampleImplicitLod %173 %175 
					                                             OpStore %170 %176 
					                                f32 %178 = OpLoad %8 
					                       Private f32* %179 = OpAccessChain %170 %26 
					                                f32 %180 = OpLoad %179 
					                                f32 %181 = OpExtInst %1 37 %178 %180 
					                       Private f32* %182 = OpAccessChain %177 %44 
					                                             OpStore %182 %181 
					                       Private f32* %183 = OpAccessChain %177 %44 
					                                f32 %184 = OpLoad %183 
					                                f32 %185 = OpExtInst %1 40 %184 %43 
					                       Private f32* %186 = OpAccessChain %177 %44 
					                                             OpStore %186 %185 
					                                f32 %188 = OpLoad %149 
					                                f32 %189 = OpFNegate %188 
					                       Private f32* %190 = OpAccessChain %177 %44 
					                                f32 %191 = OpLoad %190 
					                                f32 %192 = OpFAdd %189 %191 
					                                             OpStore %187 %192 
					                       Uniform f32* %193 = OpAccessChain %31 %33 %34 
					                                f32 %194 = OpLoad %193 
					                                f32 %196 = OpFMul %194 %195 
					                                f32 %197 = OpLoad %187 
					                                f32 %198 = OpFAdd %196 %197 
					                                             OpStore %187 %198 
					                                f32 %200 = OpLoad %187 
					                                f32 %201 = OpLoad %28 
					                                f32 %202 = OpFDiv %200 %201 
					                                             OpStore %199 %202 
					                                f32 %203 = OpLoad %199 
					                                f32 %205 = OpExtInst %1 43 %203 %43 %204 
					                                             OpStore %199 %205 
					                                f32 %206 = OpLoad %149 
					                                f32 %207 = OpFNegate %206 
					                       Private f32* %208 = OpAccessChain %170 %26 
					                                f32 %209 = OpLoad %208 
					                                f32 %210 = OpFNegate %209 
					                                f32 %211 = OpFAdd %207 %210 
					                                             OpStore %149 %211 
					                       Uniform f32* %212 = OpAccessChain %31 %33 %34 
					                                f32 %213 = OpLoad %212 
					                                f32 %214 = OpFMul %213 %195 
					                                f32 %215 = OpLoad %149 
					                                f32 %216 = OpFAdd %214 %215 
					                                             OpStore %149 %216 
					                                f32 %217 = OpLoad %149 
					                                f32 %218 = OpLoad %28 
					                                f32 %219 = OpFDiv %217 %218 
					                                             OpStore %149 %219 
					                                f32 %220 = OpLoad %149 
					                                f32 %221 = OpExtInst %1 43 %220 %43 %204 
					                                             OpStore %149 %221 
					                       Private f32* %224 = OpAccessChain %170 %26 
					                                f32 %225 = OpLoad %224 
					                                f32 %226 = OpFNegate %225 
					                       Uniform f32* %227 = OpAccessChain %31 %33 %34 
					                                f32 %228 = OpLoad %227 
					                               bool %229 = OpFOrdGreaterThanEqual %226 %228 
					                                             OpStore %223 %229 
					                               bool %231 = OpLoad %223 
					                                f32 %232 = OpSelect %231 %204 %43 
					                                             OpStore %230 %232 
					                                f32 %234 = OpLoad %149 
					                                f32 %235 = OpLoad %230 
					                                f32 %236 = OpFMul %234 %235 
					                                             OpStore %233 %236 
					                              f32_4 %237 = OpLoad %170 
					                              f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
					                                f32 %239 = OpLoad %199 
					                              f32_3 %240 = OpCompositeConstruct %239 %239 %239 
					                              f32_3 %241 = OpFMul %238 %240 
					                              f32_4 %242 = OpLoad %177 
					                              f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
					                                             OpStore %177 %243 
					                                f32 %244 = OpLoad %199 
					                       Private f32* %245 = OpAccessChain %177 %26 
					                                             OpStore %245 %244 
					                              f32_4 %246 = OpLoad %177 
					                              f32_4 %247 = OpLoad %42 
					                              f32_4 %248 = OpFAdd %246 %247 
					                                             OpStore %42 %248 
					                              f32_4 %250 = OpLoad %170 
					                              f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
					                                f32 %252 = OpLoad %233 
					                              f32_3 %253 = OpCompositeConstruct %252 %252 %252 
					                              f32_3 %254 = OpFMul %251 %253 
					                              f32_4 %255 = OpLoad %249 
					                              f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
					                                             OpStore %249 %256 
					                                f32 %257 = OpLoad %233 
					                       Private f32* %258 = OpAccessChain %249 %26 
					                                             OpStore %258 %257 
					                              f32_4 %259 = OpLoad %249 
					                              f32_4 %260 = OpLoad %50 
					                              f32_4 %261 = OpFAdd %259 %260 
					                                             OpStore %50 %261 
					                                             OpBranch %60 
					                                     %60 = OpLabel 
					                                i32 %262 = OpLoad %56 
					                                i32 %263 = OpIAdd %262 %69 
					                                             OpStore %56 %263 
					                                             OpBranch %57 
					                                     %59 = OpLabel 
					                       Private f32* %265 = OpAccessChain %42 %26 
					                                f32 %266 = OpLoad %265 
					                               bool %267 = OpFOrdEqual %266 %43 
					                                             OpStore %264 %267 
					                               bool %268 = OpLoad %264 
					                                f32 %269 = OpSelect %268 %204 %43 
					                       Private f32* %270 = OpAccessChain %177 %44 
					                                             OpStore %270 %269 
					                       Private f32* %272 = OpAccessChain %42 %26 
					                                f32 %273 = OpLoad %272 
					                       Private f32* %274 = OpAccessChain %177 %44 
					                                f32 %275 = OpLoad %274 
					                                f32 %276 = OpFAdd %273 %275 
					                                             OpStore %271 %276 
					                              f32_4 %277 = OpLoad %42 
					                              f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
					                                f32 %279 = OpLoad %271 
					                              f32_3 %280 = OpCompositeConstruct %279 %279 %279 
					                              f32_3 %281 = OpFDiv %278 %280 
					                              f32_4 %282 = OpLoad %42 
					                              f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
					                                             OpStore %42 %283 
					                       Private f32* %284 = OpAccessChain %50 %26 
					                                f32 %285 = OpLoad %284 
					                               bool %286 = OpFOrdEqual %285 %43 
					                                             OpStore %264 %286 
					                               bool %287 = OpLoad %264 
					                                f32 %288 = OpSelect %287 %204 %43 
					                                             OpStore %271 %288 
					                                f32 %289 = OpLoad %271 
					                       Private f32* %290 = OpAccessChain %50 %26 
					                                f32 %291 = OpLoad %290 
					                                f32 %292 = OpFAdd %289 %291 
					                                             OpStore %271 %292 
					                              f32_4 %293 = OpLoad %50 
					                              f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
					                                f32 %295 = OpLoad %271 
					                              f32_3 %296 = OpCompositeConstruct %295 %295 %295 
					                              f32_3 %297 = OpFDiv %294 %296 
					                              f32_4 %298 = OpLoad %50 
					                              f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
					                                             OpStore %50 %299 
					                       Private f32* %301 = OpAccessChain %50 %26 
					                                f32 %302 = OpLoad %301 
					                                f32 %304 = OpFMul %302 %303 
					                                             OpStore %300 %304 
					                                f32 %305 = OpLoad %300 
					                                f32 %306 = OpExtInst %1 37 %305 %204 
					                                             OpStore %271 %306 
					                              f32_4 %307 = OpLoad %42 
					                              f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
					                              f32_3 %309 = OpFNegate %308 
					                              f32_4 %310 = OpLoad %50 
					                              f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                              f32_3 %312 = OpFAdd %309 %311 
					                              f32_4 %313 = OpLoad %50 
					                              f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
					                                             OpStore %50 %314 
					                                f32 %317 = OpLoad %271 
					                              f32_3 %318 = OpCompositeConstruct %317 %317 %317 
					                              f32_4 %319 = OpLoad %50 
					                              f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
					                              f32_3 %321 = OpFMul %318 %320 
					                              f32_4 %322 = OpLoad %42 
					                              f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
					                              f32_3 %324 = OpFAdd %321 %323 
					                              f32_4 %325 = OpLoad %316 
					                              f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
					                                             OpStore %316 %326 
					                                f32 %327 = OpLoad %271 
					                        Output f32* %329 = OpAccessChain %316 %26 
					                                             OpStore %329 %327 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec2 ImmCB_0_0_0[22];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						float _RcpAspect;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.533333361, 0.0);
						ImmCB_0_0_0[2] = vec2(0.332527906, 0.41697681);
						ImmCB_0_0_0[3] = vec2(-0.118677847, 0.519961596);
						ImmCB_0_0_0[4] = vec2(-0.480516732, 0.231404707);
						ImmCB_0_0_0[5] = vec2(-0.480516732, -0.231404677);
						ImmCB_0_0_0[6] = vec2(-0.118677631, -0.519961655);
						ImmCB_0_0_0[7] = vec2(0.332527846, -0.416976899);
						ImmCB_0_0_0[8] = vec2(1.0, 0.0);
						ImmCB_0_0_0[9] = vec2(0.90096885, 0.433883756);
						ImmCB_0_0_0[10] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[11] = vec2(0.222520977, 0.974927902);
						ImmCB_0_0_0[12] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[13] = vec2(-0.623489976, 0.781831384);
						ImmCB_0_0_0[14] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[15] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[17] = vec2(-0.623489618, -0.781831622);
						ImmCB_0_0_0[18] = vec2(-0.222520545, -0.974928021);
						ImmCB_0_0_0[19] = vec2(0.222521499, -0.974927783);
						ImmCB_0_0_0[20] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[21] = vec2(0.90096885, -0.433883756);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<22 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.142799661;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Bokeh Filter (large)"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 371081
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[43];
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					uniform 	float _RcpAspect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.363636374, 0.0);
						ImmCB_0_0_0[2] = vec2(0.226723567, 0.284302384);
						ImmCB_0_0_0[3] = vec2(-0.0809167102, 0.354519248);
						ImmCB_0_0_0[4] = vec2(-0.327625036, 0.157775939);
						ImmCB_0_0_0[5] = vec2(-0.327625036, -0.157775909);
						ImmCB_0_0_0[6] = vec2(-0.0809165612, -0.354519278);
						ImmCB_0_0_0[7] = vec2(0.226723522, -0.284302413);
						ImmCB_0_0_0[8] = vec2(0.681818187, 0.0);
						ImmCB_0_0_0[9] = vec2(0.614296973, 0.295829833);
						ImmCB_0_0_0[10] = vec2(0.425106674, 0.533066928);
						ImmCB_0_0_0[11] = vec2(0.151718855, 0.664723575);
						ImmCB_0_0_0[12] = vec2(-0.151718825, 0.664723575);
						ImmCB_0_0_0[13] = vec2(-0.425106794, 0.533066869);
						ImmCB_0_0_0[14] = vec2(-0.614296973, 0.295829862);
						ImmCB_0_0_0[15] = vec2(-0.681818187, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.614296973, -0.295829833);
						ImmCB_0_0_0[17] = vec2(-0.425106555, -0.533067048);
						ImmCB_0_0_0[18] = vec2(-0.151718557, -0.664723635);
						ImmCB_0_0_0[19] = vec2(0.151719198, -0.664723516);
						ImmCB_0_0_0[20] = vec2(0.425106615, -0.533067048);
						ImmCB_0_0_0[21] = vec2(0.614296973, -0.295829833);
						ImmCB_0_0_0[22] = vec2(1.0, 0.0);
						ImmCB_0_0_0[23] = vec2(0.955572784, 0.294755191);
						ImmCB_0_0_0[24] = vec2(0.826238751, 0.5633201);
						ImmCB_0_0_0[25] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[26] = vec2(0.365340978, 0.930873752);
						ImmCB_0_0_0[27] = vec2(0.0747300014, 0.997203827);
						ImmCB_0_0_0[28] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[29] = vec2(-0.50000006, 0.866025388);
						ImmCB_0_0_0[30] = vec2(-0.733051956, 0.680172682);
						ImmCB_0_0_0[31] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[32] = vec2(-0.988830864, 0.149042085);
						ImmCB_0_0_0[33] = vec2(-0.988830805, -0.149042487);
						ImmCB_0_0_0[34] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[35] = vec2(-0.733051836, -0.680172801);
						ImmCB_0_0_0[36] = vec2(-0.499999911, -0.866025448);
						ImmCB_0_0_0[37] = vec2(-0.222521007, -0.974927902);
						ImmCB_0_0_0[38] = vec2(0.074730292, -0.997203767);
						ImmCB_0_0_0[39] = vec2(0.365341485, -0.930873573);
						ImmCB_0_0_0[40] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[41] = vec2(0.826238811, -0.563319981);
						ImmCB_0_0_0[42] = vec2(0.955572903, -0.294754833);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<43 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.0730602965;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 395
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %377 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %24 RelaxedPrecision 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpMemberDecorate %29 0 Offset 29 
					                                             OpMemberDecorate %29 1 Offset 29 
					                                             OpMemberDecorate %29 2 Offset 29 
					                                             OpDecorate %29 Block 
					                                             OpDecorate %31 DescriptorSet 31 
					                                             OpDecorate %31 Binding 31 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %227 RelaxedPrecision 
					                                             OpDecorate %231 RelaxedPrecision 
					                                             OpDecorate %232 RelaxedPrecision 
					                                             OpDecorate %233 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %239 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %242 RelaxedPrecision 
					                                             OpDecorate %245 RelaxedPrecision 
					                                             OpDecorate %246 RelaxedPrecision 
					                                             OpDecorate %252 RelaxedPrecision 
					                                             OpDecorate %270 RelaxedPrecision 
					                                             OpDecorate %271 RelaxedPrecision 
					                                             OpDecorate %286 RelaxedPrecision 
					                                             OpDecorate %287 RelaxedPrecision 
					                                             OpDecorate %298 RelaxedPrecision 
					                                             OpDecorate %299 RelaxedPrecision 
					                                             OpDecorate %301 RelaxedPrecision 
					                                             OpDecorate %302 RelaxedPrecision 
					                                             OpDecorate %307 RelaxedPrecision 
					                                             OpDecorate %308 RelaxedPrecision 
					                                             OpDecorate %309 RelaxedPrecision 
					                                             OpDecorate %310 RelaxedPrecision 
					                                             OpDecorate %311 RelaxedPrecision 
					                                             OpDecorate %312 RelaxedPrecision 
					                                             OpDecorate %314 RelaxedPrecision 
					                                             OpDecorate %315 RelaxedPrecision 
					                                             OpDecorate %320 RelaxedPrecision 
					                                             OpDecorate %321 RelaxedPrecision 
					                                             OpDecorate %322 RelaxedPrecision 
					                                             OpDecorate %327 RelaxedPrecision 
					                                             OpDecorate %332 RelaxedPrecision 
					                                             OpDecorate %334 RelaxedPrecision 
					                                             OpDecorate %336 RelaxedPrecision 
					                                             OpDecorate %337 RelaxedPrecision 
					                                             OpDecorate %338 RelaxedPrecision 
					                                             OpDecorate %339 RelaxedPrecision 
					                                             OpDecorate %340 RelaxedPrecision 
					                                             OpDecorate %341 RelaxedPrecision 
					                                             OpDecorate %342 RelaxedPrecision 
					                                             OpDecorate %346 RelaxedPrecision 
					                                             OpDecorate %350 RelaxedPrecision 
					                                             OpDecorate %352 RelaxedPrecision 
					                                             OpDecorate %353 RelaxedPrecision 
					                                             OpDecorate %354 RelaxedPrecision 
					                                             OpDecorate %355 RelaxedPrecision 
					                                             OpDecorate %356 RelaxedPrecision 
					                                             OpDecorate %357 RelaxedPrecision 
					                                             OpDecorate %358 RelaxedPrecision 
					                                             OpDecorate %361 RelaxedPrecision 
					                                             OpDecorate %363 RelaxedPrecision 
					                                             OpDecorate %365 RelaxedPrecision 
					                                             OpDecorate %366 RelaxedPrecision 
					                                             OpDecorate %367 RelaxedPrecision 
					                                             OpDecorate %368 RelaxedPrecision 
					                                             OpDecorate %369 RelaxedPrecision 
					                                             OpDecorate %370 RelaxedPrecision 
					                                             OpDecorate %371 RelaxedPrecision 
					                                             OpDecorate %372 RelaxedPrecision 
					                                             OpDecorate %373 RelaxedPrecision 
					                                             OpDecorate %377 RelaxedPrecision 
					                                             OpDecorate %377 Location 377 
					                                             OpDecorate %378 RelaxedPrecision 
					                                             OpDecorate %379 RelaxedPrecision 
					                                             OpDecorate %380 RelaxedPrecision 
					                                             OpDecorate %381 RelaxedPrecision 
					                                             OpDecorate %382 RelaxedPrecision 
					                                             OpDecorate %383 RelaxedPrecision 
					                                             OpDecorate %384 RelaxedPrecision 
					                                             OpDecorate %385 RelaxedPrecision 
					                                             OpDecorate %388 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %29 = OpTypeStruct %23 %6 %6 
					                                     %30 = OpTypePointer Uniform %29 
					  Uniform struct {f32_4; f32; f32;}* %31 = OpVariable Uniform 
					                                     %32 = OpTypeInt 32 1 
					                                 i32 %33 = OpConstant 0 
					                                 u32 %34 = OpConstant 1 
					                                     %35 = OpTypePointer Uniform %6 
					                                     %41 = OpTypePointer Private %23 
					                      Private f32_4* %42 = OpVariable Private 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                                 u32 %44 = OpConstant 0 
					                                 u32 %47 = OpConstant 2 
					                      Private f32_4* %50 = OpVariable Private 
					                                     %55 = OpTypePointer Function %32 
					                                 i32 %63 = OpConstant 43 
					                                     %64 = OpTypeBool 
					                                     %66 = OpTypeVector %6 3 
					                                     %67 = OpTypePointer Private %66 
					                      Private f32_3* %68 = OpVariable Private 
					                                 i32 %69 = OpConstant 1 
					                                     %78 = OpTypeVector %25 4 
					                                 u32 %79 = OpConstant 43 
					                                     %80 = OpTypeArray %78 %79 
					                               u32_4 %81 = OpConstantComposite %44 %44 %44 %44 
					                                 u32 %82 = OpConstant 1052389004 
					                               u32_4 %83 = OpConstantComposite %82 %44 %44 %44 
					                                 u32 %84 = OpConstant 1047013945 
					                                 u32 %85 = OpConstant 1049726997 
					                               u32_4 %86 = OpConstantComposite %84 %85 %44 %44 
					                                 u32 %87 = OpConstant 3181754281 
					                                 u32 %88 = OpConstant 1052083084 
					                               u32_4 %89 = OpConstantComposite %87 %88 %44 %44 
					                                 u32 %90 = OpConstant 3198664312 
					                                 u32 %91 = OpConstant 1042386948 
					                               u32_4 %92 = OpConstantComposite %90 %91 %44 %44 
					                                 u32 %93 = OpConstant 3189870594 
					                               u32_4 %94 = OpConstantComposite %90 %93 %44 %44 
					                                 u32 %95 = OpConstant 3181754261 
					                                 u32 %96 = OpConstant 3199566733 
					                               u32_4 %97 = OpConstantComposite %95 %96 %44 %44 
					                                 u32 %98 = OpConstant 1047013942 
					                                 u32 %99 = OpConstant 3197210646 
					                              u32_4 %100 = OpConstantComposite %98 %99 %44 %44 
					                                u32 %101 = OpConstant 1060015011 
					                              u32_4 %102 = OpConstantComposite %101 %44 %44 %44 
					                                u32 %103 = OpConstant 1058882193 
					                                u32 %104 = OpConstant 1050113794 
					                              u32_4 %105 = OpConstantComposite %103 %104 %44 %44 
					                                u32 %106 = OpConstant 1054451605 
					                                u32 %107 = OpConstant 1057519379 
					                              u32_4 %108 = OpConstantComposite %106 %107 %44 %44 
					                                u32 %109 = OpConstant 1041980464 
					                                u32 %110 = OpConstant 1059728211 
					                              u32_4 %111 = OpConstantComposite %109 %110 %44 %44 
					                                u32 %112 = OpConstant 3189464110 
					                              u32_4 %113 = OpConstantComposite %112 %110 %44 %44 
					                                u32 %114 = OpConstant 3201935257 
					                                u32 %115 = OpConstant 1057519378 
					                              u32_4 %116 = OpConstantComposite %114 %115 %44 %44 
					                                u32 %117 = OpConstant 3206365841 
					                                u32 %118 = OpConstant 1050113795 
					                              u32_4 %119 = OpConstantComposite %117 %118 %44 %44 
					                                u32 %120 = OpConstant 3207498659 
					                              u32_4 %121 = OpConstantComposite %120 %44 %44 %44 
					                                u32 %122 = OpConstant 3197597442 
					                              u32_4 %123 = OpConstantComposite %117 %122 %44 %44 
					                                u32 %124 = OpConstant 3201935249 
					                                u32 %125 = OpConstant 3205003029 
					                              u32_4 %126 = OpConstantComposite %124 %125 %44 %44 
					                                u32 %127 = OpConstant 3189464092 
					                                u32 %128 = OpConstant 3207211860 
					                              u32_4 %129 = OpConstantComposite %127 %128 %44 %44 
					                                u32 %130 = OpConstant 1041980487 
					                                u32 %131 = OpConstant 3207211858 
					                              u32_4 %132 = OpConstantComposite %130 %131 %44 %44 
					                                u32 %133 = OpConstant 1054451603 
					                              u32_4 %134 = OpConstantComposite %133 %125 %44 %44 
					                              u32_4 %135 = OpConstantComposite %103 %122 %44 %44 
					                                u32 %136 = OpConstant 1065353216 
					                              u32_4 %137 = OpConstantComposite %136 %44 %44 %44 
					                                u32 %138 = OpConstant 1064607851 
					                                u32 %139 = OpConstant 1050077735 
					                              u32_4 %140 = OpConstantComposite %138 %139 %44 %44 
					                                u32 %141 = OpConstant 1062437986 
					                                u32 %142 = OpConstant 1058026943 
					                              u32_4 %143 = OpConstantComposite %141 %142 %44 %44 
					                                u32 %144 = OpConstant 1059036423 
					                                u32 %145 = OpConstant 1061692956 
					                              u32_4 %146 = OpConstantComposite %144 %145 %44 %44 
					                                u32 %147 = OpConstant 1052446201 
					                                u32 %148 = OpConstant 1064193470 
					                              u32_4 %149 = OpConstantComposite %147 %148 %44 %44 
					                                u32 %150 = OpConstant 1033440267 
					                                u32 %151 = OpConstant 1065306304 
					                              u32_4 %152 = OpConstantComposite %150 %151 %44 %44 
					                                u32 %153 = OpConstant 3194215560 
					                                u32 %154 = OpConstant 1064932576 
					                              u32_4 %155 = OpConstantComposite %153 %154 %44 %44 
					                                u32 %156 = OpConstant 3204448257 
					                                u32 %157 = OpConstant 1063105495 
					                              u32_4 %158 = OpConstantComposite %156 %157 %44 %44 
					                                u32 %159 = OpConstant 3208358219 
					                                u32 %160 = OpConstant 1059987404 
					                              u32_4 %161 = OpConstantComposite %159 %160 %44 %44 
					                                u32 %162 = OpConstant 3211175397 
					                                u32 %163 = OpConstant 1054746117 
					                              u32_4 %164 = OpConstantComposite %162 %163 %44 %44 
					                                u32 %165 = OpConstant 3212649477 
					                                u32 %166 = OpConstant 1041800829 
					                              u32_4 %167 = OpConstantComposite %165 %166 %44 %44 
					                                u32 %168 = OpConstant 3212649476 
					                                u32 %169 = OpConstant 3189284504 
					                              u32_4 %170 = OpConstantComposite %168 %169 %44 %44 
					                                u32 %171 = OpConstant 3202229763 
					                              u32_4 %172 = OpConstantComposite %162 %171 %44 %44 
					                                u32 %173 = OpConstant 3208358217 
					                                u32 %174 = OpConstant 3207471054 
					                              u32_4 %175 = OpConstantComposite %173 %174 %44 %44 
					                                u32 %176 = OpConstant 3204448253 
					                                u32 %177 = OpConstant 3210589144 
					                              u32_4 %178 = OpConstantComposite %176 %177 %44 %44 
					                                u32 %179 = OpConstant 3194215564 
					                                u32 %180 = OpConstant 3212416224 
					                              u32_4 %181 = OpConstantComposite %179 %180 %44 %44 
					                                u32 %182 = OpConstant 1033440306 
					                                u32 %183 = OpConstant 3212789951 
					                              u32_4 %184 = OpConstantComposite %182 %183 %44 %44 
					                                u32 %185 = OpConstant 1052446218 
					                                u32 %186 = OpConstant 3211677115 
					                              u32_4 %187 = OpConstantComposite %185 %186 %44 %44 
					                                u32 %188 = OpConstant 1059036421 
					                                u32 %189 = OpConstant 3209176606 
					                              u32_4 %190 = OpConstantComposite %188 %189 %44 %44 
					                                u32 %191 = OpConstant 1062437987 
					                                u32 %192 = OpConstant 3205510589 
					                              u32_4 %193 = OpConstantComposite %191 %192 %44 %44 
					                                u32 %194 = OpConstant 1064607853 
					                                u32 %195 = OpConstant 3197561371 
					                              u32_4 %196 = OpConstantComposite %194 %195 %44 %44 
					                          u32_4[43] %197 = OpConstantComposite %81 %83 %86 %89 %92 %94 %97 %100 %102 %105 %108 %111 %113 %116 %119 %121 %123 %126 %129 %132 %134 %135 %137 %140 %143 %146 %149 %152 %155 %158 %161 %164 %167 %170 %172 %175 %178 %181 %184 %187 %190 %193 %196 
					                                    %199 = OpTypeVector %25 2 
					                                    %200 = OpTypePointer Function %80 
					                                    %202 = OpTypePointer Function %78 
					                       Private f32* %210 = OpVariable Private 
					                                i32 %220 = OpConstant 2 
					                     Private f32_4* %231 = OpVariable Private 
					                     Private f32_4* %238 = OpVariable Private 
					                       Private f32* %248 = OpVariable Private 
					                                f32 %256 = OpConstant 3,674022E-40 
					                       Private f32* %260 = OpVariable Private 
					                                f32 %265 = OpConstant 3,674022E-40 
					                                    %283 = OpTypePointer Private %64 
					                      Private bool* %284 = OpVariable Private 
					                       Private f32* %291 = OpVariable Private 
					                       Private f32* %294 = OpVariable Private 
					                     Private f32_4* %310 = OpVariable Private 
					                      Private bool* %325 = OpVariable Private 
					                       Private f32* %332 = OpVariable Private 
					                       Private f32* %361 = OpVariable Private 
					                                f32 %364 = OpConstant 3,674022E-40 
					                                    %376 = OpTypePointer Output %23 
					                      Output f32_4* %377 = OpVariable Output 
					                                    %389 = OpTypePointer Output %6 
					                                    %392 = OpTypePointer Private %32 
					                       Private i32* %393 = OpVariable Private 
					                      Private bool* %394 = OpVariable Private 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                       Function i32* %56 = OpVariable Function 
					                Function u32_4[43]* %201 = OpVariable Function 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD0 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                        Uniform f32* %36 = OpAccessChain %31 %33 %34 
					                                 f32 %37 = OpLoad %36 
					                        Uniform f32* %38 = OpAccessChain %31 %33 %34 
					                                 f32 %39 = OpLoad %38 
					                                 f32 %40 = OpFAdd %37 %39 
					                                             OpStore %28 %40 
					                        Private f32* %45 = OpAccessChain %42 %44 
					                                             OpStore %45 %43 
					                        Private f32* %46 = OpAccessChain %42 %34 
					                                             OpStore %46 %43 
					                        Private f32* %48 = OpAccessChain %42 %47 
					                                             OpStore %48 %43 
					                        Private f32* %49 = OpAccessChain %42 %26 
					                                             OpStore %49 %43 
					                        Private f32* %51 = OpAccessChain %50 %44 
					                                             OpStore %51 %43 
					                        Private f32* %52 = OpAccessChain %50 %34 
					                                             OpStore %52 %43 
					                        Private f32* %53 = OpAccessChain %50 %47 
					                                             OpStore %53 %43 
					                        Private f32* %54 = OpAccessChain %50 %26 
					                                             OpStore %54 %43 
					                                             OpStore %56 %33 
					                                             OpBranch %57 
					                                     %57 = OpLabel 
					                                             OpLoopMerge %59 %60 None 
					                                             OpBranch %61 
					                                     %61 = OpLabel 
					                                 i32 %62 = OpLoad %56 
					                                bool %65 = OpSLessThan %62 %63 
					                                             OpBranchConditional %65 %58 %59 
					                                     %58 = OpLabel 
					                        Uniform f32* %70 = OpAccessChain %31 %69 
					                                 f32 %71 = OpLoad %70 
					                        Uniform f32* %72 = OpAccessChain %31 %69 
					                                 f32 %73 = OpLoad %72 
					                               f32_2 %74 = OpCompositeConstruct %71 %73 
					                                 f32 %75 = OpCompositeExtract %74 0 
					                                 f32 %76 = OpCompositeExtract %74 1 
					                               f32_2 %77 = OpCompositeConstruct %75 %76 
					                                i32 %198 = OpLoad %56 
					                                             OpStore %201 %197 
					                    Function u32_4* %203 = OpAccessChain %201 %198 
					                              u32_4 %204 = OpLoad %203 
					                              u32_2 %205 = OpVectorShuffle %204 %204 0 1 
					                              f32_2 %206 = OpBitcast %205 
					                              f32_2 %207 = OpFMul %77 %206 
					                              f32_3 %208 = OpLoad %68 
					                              f32_3 %209 = OpVectorShuffle %208 %207 0 3 4 
					                                             OpStore %68 %209 
					                              f32_3 %211 = OpLoad %68 
					                              f32_2 %212 = OpVectorShuffle %211 %211 1 2 
					                              f32_3 %213 = OpLoad %68 
					                              f32_2 %214 = OpVectorShuffle %213 %213 1 2 
					                                f32 %215 = OpDot %212 %214 
					                                             OpStore %210 %215 
					                                f32 %216 = OpLoad %210 
					                                f32 %217 = OpExtInst %1 31 %216 
					                                             OpStore %210 %217 
					                       Private f32* %218 = OpAccessChain %68 %34 
					                                f32 %219 = OpLoad %218 
					                       Uniform f32* %221 = OpAccessChain %31 %220 
					                                f32 %222 = OpLoad %221 
					                                f32 %223 = OpFMul %219 %222 
					                       Private f32* %224 = OpAccessChain %68 %44 
					                                             OpStore %224 %223 
					                              f32_3 %225 = OpLoad %68 
					                              f32_2 %226 = OpVectorShuffle %225 %225 0 2 
					                              f32_2 %227 = OpLoad vs_TEXCOORD0 
					                              f32_2 %228 = OpFAdd %226 %227 
					                              f32_3 %229 = OpLoad %68 
					                              f32_3 %230 = OpVectorShuffle %229 %228 3 4 2 
					                                             OpStore %68 %230 
					                read_only Texture2D %232 = OpLoad %11 
					                            sampler %233 = OpLoad %15 
					         read_only Texture2DSampled %234 = OpSampledImage %232 %233 
					                              f32_3 %235 = OpLoad %68 
					                              f32_2 %236 = OpVectorShuffle %235 %235 0 1 
					                              f32_4 %237 = OpImageSampleImplicitLod %234 %236 
					                                             OpStore %231 %237 
					                                f32 %239 = OpLoad %8 
					                       Private f32* %240 = OpAccessChain %231 %26 
					                                f32 %241 = OpLoad %240 
					                                f32 %242 = OpExtInst %1 37 %239 %241 
					                       Private f32* %243 = OpAccessChain %238 %44 
					                                             OpStore %243 %242 
					                       Private f32* %244 = OpAccessChain %238 %44 
					                                f32 %245 = OpLoad %244 
					                                f32 %246 = OpExtInst %1 40 %245 %43 
					                       Private f32* %247 = OpAccessChain %238 %44 
					                                             OpStore %247 %246 
					                                f32 %249 = OpLoad %210 
					                                f32 %250 = OpFNegate %249 
					                       Private f32* %251 = OpAccessChain %238 %44 
					                                f32 %252 = OpLoad %251 
					                                f32 %253 = OpFAdd %250 %252 
					                                             OpStore %248 %253 
					                       Uniform f32* %254 = OpAccessChain %31 %33 %34 
					                                f32 %255 = OpLoad %254 
					                                f32 %257 = OpFMul %255 %256 
					                                f32 %258 = OpLoad %248 
					                                f32 %259 = OpFAdd %257 %258 
					                                             OpStore %248 %259 
					                                f32 %261 = OpLoad %248 
					                                f32 %262 = OpLoad %28 
					                                f32 %263 = OpFDiv %261 %262 
					                                             OpStore %260 %263 
					                                f32 %264 = OpLoad %260 
					                                f32 %266 = OpExtInst %1 43 %264 %43 %265 
					                                             OpStore %260 %266 
					                                f32 %267 = OpLoad %210 
					                                f32 %268 = OpFNegate %267 
					                       Private f32* %269 = OpAccessChain %231 %26 
					                                f32 %270 = OpLoad %269 
					                                f32 %271 = OpFNegate %270 
					                                f32 %272 = OpFAdd %268 %271 
					                                             OpStore %210 %272 
					                       Uniform f32* %273 = OpAccessChain %31 %33 %34 
					                                f32 %274 = OpLoad %273 
					                                f32 %275 = OpFMul %274 %256 
					                                f32 %276 = OpLoad %210 
					                                f32 %277 = OpFAdd %275 %276 
					                                             OpStore %210 %277 
					                                f32 %278 = OpLoad %210 
					                                f32 %279 = OpLoad %28 
					                                f32 %280 = OpFDiv %278 %279 
					                                             OpStore %210 %280 
					                                f32 %281 = OpLoad %210 
					                                f32 %282 = OpExtInst %1 43 %281 %43 %265 
					                                             OpStore %210 %282 
					                       Private f32* %285 = OpAccessChain %231 %26 
					                                f32 %286 = OpLoad %285 
					                                f32 %287 = OpFNegate %286 
					                       Uniform f32* %288 = OpAccessChain %31 %33 %34 
					                                f32 %289 = OpLoad %288 
					                               bool %290 = OpFOrdGreaterThanEqual %287 %289 
					                                             OpStore %284 %290 
					                               bool %292 = OpLoad %284 
					                                f32 %293 = OpSelect %292 %265 %43 
					                                             OpStore %291 %293 
					                                f32 %295 = OpLoad %210 
					                                f32 %296 = OpLoad %291 
					                                f32 %297 = OpFMul %295 %296 
					                                             OpStore %294 %297 
					                              f32_4 %298 = OpLoad %231 
					                              f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
					                                f32 %300 = OpLoad %260 
					                              f32_3 %301 = OpCompositeConstruct %300 %300 %300 
					                              f32_3 %302 = OpFMul %299 %301 
					                              f32_4 %303 = OpLoad %238 
					                              f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
					                                             OpStore %238 %304 
					                                f32 %305 = OpLoad %260 
					                       Private f32* %306 = OpAccessChain %238 %26 
					                                             OpStore %306 %305 
					                              f32_4 %307 = OpLoad %238 
					                              f32_4 %308 = OpLoad %42 
					                              f32_4 %309 = OpFAdd %307 %308 
					                                             OpStore %42 %309 
					                              f32_4 %311 = OpLoad %231 
					                              f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
					                                f32 %313 = OpLoad %294 
					                              f32_3 %314 = OpCompositeConstruct %313 %313 %313 
					                              f32_3 %315 = OpFMul %312 %314 
					                              f32_4 %316 = OpLoad %310 
					                              f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
					                                             OpStore %310 %317 
					                                f32 %318 = OpLoad %294 
					                       Private f32* %319 = OpAccessChain %310 %26 
					                                             OpStore %319 %318 
					                              f32_4 %320 = OpLoad %310 
					                              f32_4 %321 = OpLoad %50 
					                              f32_4 %322 = OpFAdd %320 %321 
					                                             OpStore %50 %322 
					                                             OpBranch %60 
					                                     %60 = OpLabel 
					                                i32 %323 = OpLoad %56 
					                                i32 %324 = OpIAdd %323 %69 
					                                             OpStore %56 %324 
					                                             OpBranch %57 
					                                     %59 = OpLabel 
					                       Private f32* %326 = OpAccessChain %42 %26 
					                                f32 %327 = OpLoad %326 
					                               bool %328 = OpFOrdEqual %327 %43 
					                                             OpStore %325 %328 
					                               bool %329 = OpLoad %325 
					                                f32 %330 = OpSelect %329 %265 %43 
					                       Private f32* %331 = OpAccessChain %238 %44 
					                                             OpStore %331 %330 
					                       Private f32* %333 = OpAccessChain %42 %26 
					                                f32 %334 = OpLoad %333 
					                       Private f32* %335 = OpAccessChain %238 %44 
					                                f32 %336 = OpLoad %335 
					                                f32 %337 = OpFAdd %334 %336 
					                                             OpStore %332 %337 
					                              f32_4 %338 = OpLoad %42 
					                              f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
					                                f32 %340 = OpLoad %332 
					                              f32_3 %341 = OpCompositeConstruct %340 %340 %340 
					                              f32_3 %342 = OpFDiv %339 %341 
					                              f32_4 %343 = OpLoad %42 
					                              f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
					                                             OpStore %42 %344 
					                       Private f32* %345 = OpAccessChain %50 %26 
					                                f32 %346 = OpLoad %345 
					                               bool %347 = OpFOrdEqual %346 %43 
					                                             OpStore %325 %347 
					                               bool %348 = OpLoad %325 
					                                f32 %349 = OpSelect %348 %265 %43 
					                                             OpStore %332 %349 
					                                f32 %350 = OpLoad %332 
					                       Private f32* %351 = OpAccessChain %50 %26 
					                                f32 %352 = OpLoad %351 
					                                f32 %353 = OpFAdd %350 %352 
					                                             OpStore %332 %353 
					                              f32_4 %354 = OpLoad %50 
					                              f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
					                                f32 %356 = OpLoad %332 
					                              f32_3 %357 = OpCompositeConstruct %356 %356 %356 
					                              f32_3 %358 = OpFDiv %355 %357 
					                              f32_4 %359 = OpLoad %50 
					                              f32_4 %360 = OpVectorShuffle %359 %358 4 5 6 3 
					                                             OpStore %50 %360 
					                       Private f32* %362 = OpAccessChain %50 %26 
					                                f32 %363 = OpLoad %362 
					                                f32 %365 = OpFMul %363 %364 
					                                             OpStore %361 %365 
					                                f32 %366 = OpLoad %361 
					                                f32 %367 = OpExtInst %1 37 %366 %265 
					                                             OpStore %332 %367 
					                              f32_4 %368 = OpLoad %42 
					                              f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                              f32_3 %370 = OpFNegate %369 
					                              f32_4 %371 = OpLoad %50 
					                              f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
					                              f32_3 %373 = OpFAdd %370 %372 
					                              f32_4 %374 = OpLoad %50 
					                              f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
					                                             OpStore %50 %375 
					                                f32 %378 = OpLoad %332 
					                              f32_3 %379 = OpCompositeConstruct %378 %378 %378 
					                              f32_4 %380 = OpLoad %50 
					                              f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
					                              f32_3 %382 = OpFMul %379 %381 
					                              f32_4 %383 = OpLoad %42 
					                              f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
					                              f32_3 %385 = OpFAdd %382 %384 
					                              f32_4 %386 = OpLoad %377 
					                              f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
					                                             OpStore %377 %387 
					                                f32 %388 = OpLoad %332 
					                        Output f32* %390 = OpAccessChain %377 %26 
					                                             OpStore %390 %388 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec2 ImmCB_0_0_0[43];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						float _RcpAspect;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.363636374, 0.0);
						ImmCB_0_0_0[2] = vec2(0.226723567, 0.284302384);
						ImmCB_0_0_0[3] = vec2(-0.0809167102, 0.354519248);
						ImmCB_0_0_0[4] = vec2(-0.327625036, 0.157775939);
						ImmCB_0_0_0[5] = vec2(-0.327625036, -0.157775909);
						ImmCB_0_0_0[6] = vec2(-0.0809165612, -0.354519278);
						ImmCB_0_0_0[7] = vec2(0.226723522, -0.284302413);
						ImmCB_0_0_0[8] = vec2(0.681818187, 0.0);
						ImmCB_0_0_0[9] = vec2(0.614296973, 0.295829833);
						ImmCB_0_0_0[10] = vec2(0.425106674, 0.533066928);
						ImmCB_0_0_0[11] = vec2(0.151718855, 0.664723575);
						ImmCB_0_0_0[12] = vec2(-0.151718825, 0.664723575);
						ImmCB_0_0_0[13] = vec2(-0.425106794, 0.533066869);
						ImmCB_0_0_0[14] = vec2(-0.614296973, 0.295829862);
						ImmCB_0_0_0[15] = vec2(-0.681818187, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.614296973, -0.295829833);
						ImmCB_0_0_0[17] = vec2(-0.425106555, -0.533067048);
						ImmCB_0_0_0[18] = vec2(-0.151718557, -0.664723635);
						ImmCB_0_0_0[19] = vec2(0.151719198, -0.664723516);
						ImmCB_0_0_0[20] = vec2(0.425106615, -0.533067048);
						ImmCB_0_0_0[21] = vec2(0.614296973, -0.295829833);
						ImmCB_0_0_0[22] = vec2(1.0, 0.0);
						ImmCB_0_0_0[23] = vec2(0.955572784, 0.294755191);
						ImmCB_0_0_0[24] = vec2(0.826238751, 0.5633201);
						ImmCB_0_0_0[25] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[26] = vec2(0.365340978, 0.930873752);
						ImmCB_0_0_0[27] = vec2(0.0747300014, 0.997203827);
						ImmCB_0_0_0[28] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[29] = vec2(-0.50000006, 0.866025388);
						ImmCB_0_0_0[30] = vec2(-0.733051956, 0.680172682);
						ImmCB_0_0_0[31] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[32] = vec2(-0.988830864, 0.149042085);
						ImmCB_0_0_0[33] = vec2(-0.988830805, -0.149042487);
						ImmCB_0_0_0[34] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[35] = vec2(-0.733051836, -0.680172801);
						ImmCB_0_0_0[36] = vec2(-0.499999911, -0.866025448);
						ImmCB_0_0_0[37] = vec2(-0.222521007, -0.974927902);
						ImmCB_0_0_0[38] = vec2(0.074730292, -0.997203767);
						ImmCB_0_0_0[39] = vec2(0.365341485, -0.930873573);
						ImmCB_0_0_0[40] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[41] = vec2(0.826238811, -0.563319981);
						ImmCB_0_0_0[42] = vec2(0.955572903, -0.294754833);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<43 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.0730602965;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Bokeh Filter (very large)"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 405389
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[71];
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					uniform 	float _RcpAspect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.275862098, 0.0);
						ImmCB_0_0_0[2] = vec2(0.171997204, 0.215677679);
						ImmCB_0_0_0[3] = vec2(-0.0613850951, 0.268945664);
						ImmCB_0_0_0[4] = vec2(-0.248543158, 0.119692102);
						ImmCB_0_0_0[5] = vec2(-0.248543158, -0.11969208);
						ImmCB_0_0_0[6] = vec2(-0.0613849834, -0.268945694);
						ImmCB_0_0_0[7] = vec2(0.171997175, -0.215677708);
						ImmCB_0_0_0[8] = vec2(0.517241359, 0.0);
						ImmCB_0_0_0[9] = vec2(0.466018349, 0.224422619);
						ImmCB_0_0_0[10] = vec2(0.322494715, 0.40439558);
						ImmCB_0_0_0[11] = vec2(0.115097053, 0.504273057);
						ImmCB_0_0_0[12] = vec2(-0.115097038, 0.504273057);
						ImmCB_0_0_0[13] = vec2(-0.322494805, 0.404395521);
						ImmCB_0_0_0[14] = vec2(-0.466018349, 0.224422649);
						ImmCB_0_0_0[15] = vec2(-0.517241359, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.466018349, -0.224422619);
						ImmCB_0_0_0[17] = vec2(-0.322494626, -0.40439564);
						ImmCB_0_0_0[18] = vec2(-0.11509683, -0.504273117);
						ImmCB_0_0_0[19] = vec2(0.115097322, -0.504272997);
						ImmCB_0_0_0[20] = vec2(0.322494656, -0.40439564);
						ImmCB_0_0_0[21] = vec2(0.466018349, -0.224422619);
						ImmCB_0_0_0[22] = vec2(0.758620679, 0.0);
						ImmCB_0_0_0[23] = vec2(0.724917293, 0.223607376);
						ImmCB_0_0_0[24] = vec2(0.626801789, 0.427346289);
						ImmCB_0_0_0[25] = vec2(0.472992241, 0.593113542);
						ImmCB_0_0_0[26] = vec2(0.277155221, 0.706180096);
						ImmCB_0_0_0[27] = vec2(0.0566917248, 0.756499469);
						ImmCB_0_0_0[28] = vec2(-0.168808997, 0.73960048);
						ImmCB_0_0_0[29] = vec2(-0.379310399, 0.656984746);
						ImmCB_0_0_0[30] = vec2(-0.556108356, 0.515993059);
						ImmCB_0_0_0[31] = vec2(-0.683493614, 0.32915324);
						ImmCB_0_0_0[32] = vec2(-0.750147521, 0.113066405);
						ImmCB_0_0_0[33] = vec2(-0.750147521, -0.113066711);
						ImmCB_0_0_0[34] = vec2(-0.683493614, -0.32915318);
						ImmCB_0_0_0[35] = vec2(-0.556108296, -0.515993178);
						ImmCB_0_0_0[36] = vec2(-0.37931028, -0.656984806);
						ImmCB_0_0_0[37] = vec2(-0.168809041, -0.73960048);
						ImmCB_0_0_0[38] = vec2(0.0566919446, -0.75649941);
						ImmCB_0_0_0[39] = vec2(0.277155608, -0.706179917);
						ImmCB_0_0_0[40] = vec2(0.472992152, -0.593113661);
						ImmCB_0_0_0[41] = vec2(0.626801848, -0.4273462);
						ImmCB_0_0_0[42] = vec2(0.724917352, -0.223607108);
						ImmCB_0_0_0[43] = vec2(1.0, 0.0);
						ImmCB_0_0_0[44] = vec2(0.974927902, 0.222520933);
						ImmCB_0_0_0[45] = vec2(0.90096885, 0.433883756);
						ImmCB_0_0_0[46] = vec2(0.781831503, 0.623489797);
						ImmCB_0_0_0[47] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[48] = vec2(0.433883637, 0.900968909);
						ImmCB_0_0_0[49] = vec2(0.222520977, 0.974927902);
						ImmCB_0_0_0[50] = vec2(0.0, 1.0);
						ImmCB_0_0_0[51] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[52] = vec2(-0.433883846, 0.90096885);
						ImmCB_0_0_0[53] = vec2(-0.623489976, 0.781831384);
						ImmCB_0_0_0[54] = vec2(-0.781831682, 0.623489559);
						ImmCB_0_0_0[55] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[56] = vec2(-0.974927902, 0.222520933);
						ImmCB_0_0_0[57] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[58] = vec2(-0.974927902, -0.222520873);
						ImmCB_0_0_0[59] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[60] = vec2(-0.781831384, -0.623489916);
						ImmCB_0_0_0[61] = vec2(-0.623489618, -0.781831622);
						ImmCB_0_0_0[62] = vec2(-0.433883458, -0.900969028);
						ImmCB_0_0_0[63] = vec2(-0.222520545, -0.974928021);
						ImmCB_0_0_0[64] = vec2(0.0, -1.0);
						ImmCB_0_0_0[65] = vec2(0.222521499, -0.974927783);
						ImmCB_0_0_0[66] = vec2(0.433883488, -0.900968969);
						ImmCB_0_0_0[67] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[68] = vec2(0.781831443, -0.623489857);
						ImmCB_0_0_0[69] = vec2(0.90096885, -0.433883756);
						ImmCB_0_0_0[70] = vec2(0.974927902, -0.222520858);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<71 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.0442477837;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 460
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %442 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %24 RelaxedPrecision 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpMemberDecorate %29 0 Offset 29 
					                                             OpMemberDecorate %29 1 Offset 29 
					                                             OpMemberDecorate %29 2 Offset 29 
					                                             OpDecorate %29 Block 
					                                             OpDecorate %31 DescriptorSet 31 
					                                             OpDecorate %31 Binding 31 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %292 RelaxedPrecision 
					                                             OpDecorate %296 RelaxedPrecision 
					                                             OpDecorate %297 RelaxedPrecision 
					                                             OpDecorate %298 RelaxedPrecision 
					                                             OpDecorate %303 RelaxedPrecision 
					                                             OpDecorate %304 RelaxedPrecision 
					                                             OpDecorate %306 RelaxedPrecision 
					                                             OpDecorate %307 RelaxedPrecision 
					                                             OpDecorate %310 RelaxedPrecision 
					                                             OpDecorate %311 RelaxedPrecision 
					                                             OpDecorate %317 RelaxedPrecision 
					                                             OpDecorate %335 RelaxedPrecision 
					                                             OpDecorate %336 RelaxedPrecision 
					                                             OpDecorate %351 RelaxedPrecision 
					                                             OpDecorate %352 RelaxedPrecision 
					                                             OpDecorate %363 RelaxedPrecision 
					                                             OpDecorate %364 RelaxedPrecision 
					                                             OpDecorate %366 RelaxedPrecision 
					                                             OpDecorate %367 RelaxedPrecision 
					                                             OpDecorate %372 RelaxedPrecision 
					                                             OpDecorate %373 RelaxedPrecision 
					                                             OpDecorate %374 RelaxedPrecision 
					                                             OpDecorate %375 RelaxedPrecision 
					                                             OpDecorate %376 RelaxedPrecision 
					                                             OpDecorate %377 RelaxedPrecision 
					                                             OpDecorate %379 RelaxedPrecision 
					                                             OpDecorate %380 RelaxedPrecision 
					                                             OpDecorate %385 RelaxedPrecision 
					                                             OpDecorate %386 RelaxedPrecision 
					                                             OpDecorate %387 RelaxedPrecision 
					                                             OpDecorate %392 RelaxedPrecision 
					                                             OpDecorate %397 RelaxedPrecision 
					                                             OpDecorate %399 RelaxedPrecision 
					                                             OpDecorate %401 RelaxedPrecision 
					                                             OpDecorate %402 RelaxedPrecision 
					                                             OpDecorate %403 RelaxedPrecision 
					                                             OpDecorate %404 RelaxedPrecision 
					                                             OpDecorate %405 RelaxedPrecision 
					                                             OpDecorate %406 RelaxedPrecision 
					                                             OpDecorate %407 RelaxedPrecision 
					                                             OpDecorate %411 RelaxedPrecision 
					                                             OpDecorate %415 RelaxedPrecision 
					                                             OpDecorate %417 RelaxedPrecision 
					                                             OpDecorate %418 RelaxedPrecision 
					                                             OpDecorate %419 RelaxedPrecision 
					                                             OpDecorate %420 RelaxedPrecision 
					                                             OpDecorate %421 RelaxedPrecision 
					                                             OpDecorate %422 RelaxedPrecision 
					                                             OpDecorate %423 RelaxedPrecision 
					                                             OpDecorate %426 RelaxedPrecision 
					                                             OpDecorate %428 RelaxedPrecision 
					                                             OpDecorate %430 RelaxedPrecision 
					                                             OpDecorate %431 RelaxedPrecision 
					                                             OpDecorate %432 RelaxedPrecision 
					                                             OpDecorate %433 RelaxedPrecision 
					                                             OpDecorate %434 RelaxedPrecision 
					                                             OpDecorate %435 RelaxedPrecision 
					                                             OpDecorate %436 RelaxedPrecision 
					                                             OpDecorate %437 RelaxedPrecision 
					                                             OpDecorate %438 RelaxedPrecision 
					                                             OpDecorate %442 RelaxedPrecision 
					                                             OpDecorate %442 Location 442 
					                                             OpDecorate %443 RelaxedPrecision 
					                                             OpDecorate %444 RelaxedPrecision 
					                                             OpDecorate %445 RelaxedPrecision 
					                                             OpDecorate %446 RelaxedPrecision 
					                                             OpDecorate %447 RelaxedPrecision 
					                                             OpDecorate %448 RelaxedPrecision 
					                                             OpDecorate %449 RelaxedPrecision 
					                                             OpDecorate %450 RelaxedPrecision 
					                                             OpDecorate %453 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %29 = OpTypeStruct %23 %6 %6 
					                                     %30 = OpTypePointer Uniform %29 
					  Uniform struct {f32_4; f32; f32;}* %31 = OpVariable Uniform 
					                                     %32 = OpTypeInt 32 1 
					                                 i32 %33 = OpConstant 0 
					                                 u32 %34 = OpConstant 1 
					                                     %35 = OpTypePointer Uniform %6 
					                                     %41 = OpTypePointer Private %23 
					                      Private f32_4* %42 = OpVariable Private 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                                 u32 %44 = OpConstant 0 
					                                 u32 %47 = OpConstant 2 
					                      Private f32_4* %50 = OpVariable Private 
					                                     %55 = OpTypePointer Function %32 
					                                 i32 %63 = OpConstant 71 
					                                     %64 = OpTypeBool 
					                                     %66 = OpTypeVector %6 3 
					                                     %67 = OpTypePointer Private %66 
					                      Private f32_3* %68 = OpVariable Private 
					                                 i32 %69 = OpConstant 1 
					                                     %78 = OpTypeVector %25 4 
					                                 u32 %79 = OpConstant 71 
					                                     %80 = OpTypeArray %78 %79 
					                               u32_4 %81 = OpConstantComposite %44 %44 %44 %44 
					                                 u32 %82 = OpConstant 1049443788 
					                               u32_4 %83 = OpConstantComposite %82 %44 %44 %44 
					                                 u32 %84 = OpConstant 1043341321 
					                                 u32 %85 = OpConstant 1046272668 
					                               u32_4 %86 = OpConstantComposite %84 %85 %44 %44 
					                                 u32 %87 = OpConstant 3178983152 
					                                 u32 %88 = OpConstant 1049211711 
					                               u32_4 %89 = OpConstantComposite %87 %88 %44 %44 
					                                 u32 %90 = OpConstant 3195961881 
					                                 u32 %91 = OpConstant 1039474978 
					                               u32_4 %92 = OpConstantComposite %90 %91 %44 %44 
					                                 u32 %93 = OpConstant 3186958623 
					                               u32_4 %94 = OpConstantComposite %90 %93 %44 %44 
					                                 u32 %95 = OpConstant 3178983122 
					                                 u32 %96 = OpConstant 3196695360 
					                               u32_4 %97 = OpConstantComposite %95 %96 %44 %44 
					                                 u32 %98 = OpConstant 1043341319 
					                                 u32 %99 = OpConstant 3193756318 
					                              u32_4 %100 = OpConstantComposite %98 %99 %44 %44 
					                                u32 %101 = OpConstant 1057253870 
					                              u32_4 %102 = OpConstantComposite %101 %44 %44 %44 
					                                u32 %103 = OpConstant 1055824373 
					                                u32 %104 = OpConstant 1046859531 
					                              u32_4 %105 = OpConstantComposite %103 %104 %44 %44 
					                                u32 %106 = OpConstant 1051008519 
					                                u32 %107 = OpConstant 1053756656 
					                              u32_4 %108 = OpConstantComposite %106 %107 %44 %44 
					                                u32 %109 = OpConstant 1038858241 
					                                u32 %110 = OpConstant 1057036298 
					                              u32_4 %111 = OpConstantComposite %109 %110 %44 %44 
					                                u32 %112 = OpConstant 3186341887 
					                              u32_4 %113 = OpConstantComposite %112 %110 %44 %44 
					                                u32 %114 = OpConstant 3198492170 
					                                u32 %115 = OpConstant 1053756654 
					                              u32_4 %116 = OpConstantComposite %114 %115 %44 %44 
					                                u32 %117 = OpConstant 3203308021 
					                                u32 %118 = OpConstant 1046859533 
					                              u32_4 %119 = OpConstantComposite %117 %118 %44 %44 
					                                u32 %120 = OpConstant 3204737518 
					                              u32_4 %121 = OpConstantComposite %120 %44 %44 %44 
					                                u32 %122 = OpConstant 3194343179 
					                              u32_4 %123 = OpConstantComposite %117 %122 %44 %44 
					                                u32 %124 = OpConstant 3198492164 
					                                u32 %125 = OpConstant 3201240306 
					                              u32_4 %126 = OpConstantComposite %124 %125 %44 %44 
					                                u32 %127 = OpConstant 3186341859 
					                                u32 %128 = OpConstant 3204519947 
					                              u32_4 %129 = OpConstantComposite %127 %128 %44 %44 
					                                u32 %130 = OpConstant 1038858277 
					                                u32 %131 = OpConstant 3204519945 
					                              u32_4 %132 = OpConstantComposite %130 %131 %44 %44 
					                                u32 %133 = OpConstant 1051008517 
					                              u32_4 %134 = OpConstantComposite %133 %125 %44 %44 
					                              u32_4 %135 = OpConstantComposite %103 %122 %44 %44 
					                                u32 %136 = OpConstant 1061303543 
					                              u32_4 %137 = OpConstantComposite %136 %44 %44 %44 
					                                u32 %138 = OpConstant 1060738094 
					                                u32 %139 = OpConstant 1046804821 
					                              u32_4 %140 = OpConstantComposite %138 %139 %44 %44 
					                                u32 %141 = OpConstant 1059091989 
					                                u32 %142 = OpConstant 1054526754 
					                              u32_4 %143 = OpConstantComposite %141 %142 %44 %44 
					                                u32 %144 = OpConstant 1056058378 
					                                u32 %145 = OpConstant 1058526794 
					                              u32_4 %146 = OpConstantComposite %144 %145 %44 %44 
					                                u32 %147 = OpConstant 1049487178 
					                                u32 %148 = OpConstant 1060423736 
					                              u32_4 %149 = OpConstantComposite %147 %148 %44 %44 
					                                u32 %150 = OpConstant 1030239637 
					                                u32 %151 = OpConstant 1061267955 
					                              u32_4 %152 = OpConstantComposite %150 %151 %44 %44 
					                                u32 %153 = OpConstant 3190611012 
					                                u32 %154 = OpConstant 1060984437 
					                              u32_4 %155 = OpConstantComposite %153 %154 %44 %44 
					                                u32 %156 = OpConstant 3200398585 
					                                u32 %157 = OpConstant 1059598375 
					                              u32_4 %158 = OpConstantComposite %156 %157 %44 %44 
					                                u32 %159 = OpConstant 3205389598 
					                                u32 %160 = OpConstant 1057232927 
					                              u32_4 %161 = OpConstantComposite %159 %160 %44 %44 
					                                u32 %162 = OpConstant 3207526768 
					                                u32 %163 = OpConstant 1051231942 
					                              u32_4 %164 = OpConstantComposite %162 %163 %44 %44 
					                                u32 %165 = OpConstant 3208645035 
					                                u32 %166 = OpConstant 1038585692 
					                              u32_4 %167 = OpConstantComposite %165 %166 %44 %44 
					                                u32 %168 = OpConstant 3186069381 
					                              u32_4 %169 = OpConstantComposite %165 %168 %44 %44 
					                                u32 %170 = OpConstant 3198715588 
					                              u32_4 %171 = OpConstantComposite %162 %170 %44 %44 
					                                u32 %172 = OpConstant 3205389597 
					                                u32 %173 = OpConstant 3204716577 
					                              u32_4 %174 = OpConstantComposite %172 %173 %44 %44 
					                                u32 %175 = OpConstant 3200398581 
					                                u32 %176 = OpConstant 3207082024 
					                              u32_4 %177 = OpConstantComposite %175 %176 %44 %44 
					                                u32 %178 = OpConstant 3190611015 
					                                u32 %179 = OpConstant 3208468085 
					                              u32_4 %180 = OpConstantComposite %178 %179 %44 %44 
					                                u32 %181 = OpConstant 1030239696 
					                                u32 %182 = OpConstant 3208751602 
					                              u32_4 %183 = OpConstantComposite %181 %182 %44 %44 
					                                u32 %184 = OpConstant 1049487191 
					                                u32 %185 = OpConstant 3207907381 
					                              u32_4 %186 = OpConstantComposite %184 %185 %44 %44 
					                                u32 %187 = OpConstant 1056058375 
					                                u32 %188 = OpConstant 3206010444 
					                              u32_4 %189 = OpConstantComposite %187 %188 %44 %44 
					                                u32 %190 = OpConstant 1059091990 
					                                u32 %191 = OpConstant 3202010399 
					                              u32_4 %192 = OpConstantComposite %190 %191 %44 %44 
					                                u32 %193 = OpConstant 1060738095 
					                                u32 %194 = OpConstant 3194288451 
					                              u32_4 %195 = OpConstantComposite %193 %194 %44 %44 
					                                u32 %196 = OpConstant 1065353216 
					                              u32_4 %197 = OpConstantComposite %196 %44 %44 %44 
					                                u32 %198 = OpConstant 1064932576 
					                                u32 %199 = OpConstant 1046731911 
					                              u32_4 %200 = OpConstantComposite %198 %199 %44 %44 
					                                u32 %201 = OpConstant 1063691749 
					                                u32 %202 = OpConstant 1054746115 
					                              u32_4 %203 = OpConstantComposite %201 %202 %44 %44 
					                                u32 %204 = OpConstant 1061692956 
					                                u32 %205 = OpConstant 1059036423 
					                              u32_4 %206 = OpConstantComposite %204 %205 %44 %44 
					                              u32_4 %207 = OpConstantComposite %205 %204 %44 %44 
					                                u32 %208 = OpConstant 1054746111 
					                                u32 %209 = OpConstant 1063691750 
					                              u32_4 %210 = OpConstantComposite %208 %209 %44 %44 
					                                u32 %211 = OpConstant 1046731914 
					                              u32_4 %212 = OpConstantComposite %211 %198 %44 %44 
					                              u32_4 %213 = OpConstantComposite %44 %196 %44 %44 
					                                u32 %214 = OpConstant 3194215560 
					                              u32_4 %215 = OpConstantComposite %214 %198 %44 %44 
					                                u32 %216 = OpConstant 3202229766 
					                              u32_4 %217 = OpConstantComposite %216 %201 %44 %44 
					                                u32 %218 = OpConstant 3206520074 
					                                u32 %219 = OpConstant 1061692954 
					                              u32_4 %220 = OpConstantComposite %218 %219 %44 %44 
					                                u32 %221 = OpConstant 3209176607 
					                                u32 %222 = OpConstant 1059036419 
					                              u32_4 %223 = OpConstantComposite %221 %222 %44 %44 
					                                u32 %224 = OpConstant 3211175397 
					                                u32 %225 = OpConstant 1054746117 
					                              u32_4 %226 = OpConstantComposite %224 %225 %44 %44 
					                                u32 %227 = OpConstant 3212416224 
					                              u32_4 %228 = OpConstantComposite %227 %199 %44 %44 
					                                u32 %229 = OpConstant 3212836864 
					                              u32_4 %230 = OpConstantComposite %229 %44 %44 %44 
					                                u32 %231 = OpConstant 3194215555 
					                              u32_4 %232 = OpConstantComposite %227 %231 %44 %44 
					                                u32 %233 = OpConstant 3202229763 
					                              u32_4 %234 = OpConstantComposite %224 %233 %44 %44 
					                                u32 %235 = OpConstant 3209176602 
					                                u32 %236 = OpConstant 3206520073 
					                              u32_4 %237 = OpConstantComposite %235 %236 %44 %44 
					                                u32 %238 = OpConstant 3206520068 
					                                u32 %239 = OpConstant 3209176606 
					                              u32_4 %240 = OpConstantComposite %238 %239 %44 %44 
					                                u32 %241 = OpConstant 3202229753 
					                                u32 %242 = OpConstant 3211175400 
					                              u32_4 %243 = OpConstantComposite %241 %242 %44 %44 
					                                u32 %244 = OpConstant 3194215533 
					                                u32 %245 = OpConstant 3212416226 
					                              u32_4 %246 = OpConstantComposite %244 %245 %44 %44 
					                              u32_4 %247 = OpConstantComposite %44 %229 %44 %44 
					                                u32 %248 = OpConstant 1046731949 
					                                u32 %249 = OpConstant 3212416222 
					                              u32_4 %250 = OpConstantComposite %248 %249 %44 %44 
					                                u32 %251 = OpConstant 1054746106 
					                                u32 %252 = OpConstant 3211175399 
					                              u32_4 %253 = OpConstantComposite %251 %252 %44 %44 
					                                u32 %254 = OpConstant 1059036421 
					                              u32_4 %255 = OpConstantComposite %254 %239 %44 %44 
					                                u32 %256 = OpConstant 1061692955 
					                                u32 %257 = OpConstant 3206520072 
					                              u32_4 %258 = OpConstantComposite %256 %257 %44 %44 
					                              u32_4 %259 = OpConstantComposite %201 %233 %44 %44 
					                                u32 %260 = OpConstant 3194215554 
					                              u32_4 %261 = OpConstantComposite %198 %260 %44 %44 
					                          u32_4[71] %262 = OpConstantComposite %81 %83 %86 %89 %92 %94 %97 %100 %102 %105 %108 %111 %113 %116 %119 %121 %123 %126 %129 %132 %134 %135 %137 %140 %143 %146 %149 %152 %155 %158 %161 %164 %167 %169 %171 %174 %177 %180 %183 %186 %189 %192 %195 %197 %200 %203 %206 %207 %210 %212 %213 %215 %217 %220 %223 %226 %228 %230 %232 %234 %237 %240 %243 %246 %247 %250 %253 %255 %258 %259 %261 
					                                    %264 = OpTypeVector %25 2 
					                                    %265 = OpTypePointer Function %80 
					                                    %267 = OpTypePointer Function %78 
					                       Private f32* %275 = OpVariable Private 
					                                i32 %285 = OpConstant 2 
					                     Private f32_4* %296 = OpVariable Private 
					                     Private f32_4* %303 = OpVariable Private 
					                       Private f32* %313 = OpVariable Private 
					                                f32 %321 = OpConstant 3,674022E-40 
					                       Private f32* %325 = OpVariable Private 
					                                f32 %330 = OpConstant 3,674022E-40 
					                                    %348 = OpTypePointer Private %64 
					                      Private bool* %349 = OpVariable Private 
					                       Private f32* %356 = OpVariable Private 
					                       Private f32* %359 = OpVariable Private 
					                     Private f32_4* %375 = OpVariable Private 
					                      Private bool* %390 = OpVariable Private 
					                       Private f32* %397 = OpVariable Private 
					                       Private f32* %426 = OpVariable Private 
					                                f32 %429 = OpConstant 3,674022E-40 
					                                    %441 = OpTypePointer Output %23 
					                      Output f32_4* %442 = OpVariable Output 
					                                    %454 = OpTypePointer Output %6 
					                                    %457 = OpTypePointer Private %32 
					                       Private i32* %458 = OpVariable Private 
					                      Private bool* %459 = OpVariable Private 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                       Function i32* %56 = OpVariable Function 
					                Function u32_4[71]* %266 = OpVariable Function 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD0 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                        Uniform f32* %36 = OpAccessChain %31 %33 %34 
					                                 f32 %37 = OpLoad %36 
					                        Uniform f32* %38 = OpAccessChain %31 %33 %34 
					                                 f32 %39 = OpLoad %38 
					                                 f32 %40 = OpFAdd %37 %39 
					                                             OpStore %28 %40 
					                        Private f32* %45 = OpAccessChain %42 %44 
					                                             OpStore %45 %43 
					                        Private f32* %46 = OpAccessChain %42 %34 
					                                             OpStore %46 %43 
					                        Private f32* %48 = OpAccessChain %42 %47 
					                                             OpStore %48 %43 
					                        Private f32* %49 = OpAccessChain %42 %26 
					                                             OpStore %49 %43 
					                        Private f32* %51 = OpAccessChain %50 %44 
					                                             OpStore %51 %43 
					                        Private f32* %52 = OpAccessChain %50 %34 
					                                             OpStore %52 %43 
					                        Private f32* %53 = OpAccessChain %50 %47 
					                                             OpStore %53 %43 
					                        Private f32* %54 = OpAccessChain %50 %26 
					                                             OpStore %54 %43 
					                                             OpStore %56 %33 
					                                             OpBranch %57 
					                                     %57 = OpLabel 
					                                             OpLoopMerge %59 %60 None 
					                                             OpBranch %61 
					                                     %61 = OpLabel 
					                                 i32 %62 = OpLoad %56 
					                                bool %65 = OpSLessThan %62 %63 
					                                             OpBranchConditional %65 %58 %59 
					                                     %58 = OpLabel 
					                        Uniform f32* %70 = OpAccessChain %31 %69 
					                                 f32 %71 = OpLoad %70 
					                        Uniform f32* %72 = OpAccessChain %31 %69 
					                                 f32 %73 = OpLoad %72 
					                               f32_2 %74 = OpCompositeConstruct %71 %73 
					                                 f32 %75 = OpCompositeExtract %74 0 
					                                 f32 %76 = OpCompositeExtract %74 1 
					                               f32_2 %77 = OpCompositeConstruct %75 %76 
					                                i32 %263 = OpLoad %56 
					                                             OpStore %266 %262 
					                    Function u32_4* %268 = OpAccessChain %266 %263 
					                              u32_4 %269 = OpLoad %268 
					                              u32_2 %270 = OpVectorShuffle %269 %269 0 1 
					                              f32_2 %271 = OpBitcast %270 
					                              f32_2 %272 = OpFMul %77 %271 
					                              f32_3 %273 = OpLoad %68 
					                              f32_3 %274 = OpVectorShuffle %273 %272 0 3 4 
					                                             OpStore %68 %274 
					                              f32_3 %276 = OpLoad %68 
					                              f32_2 %277 = OpVectorShuffle %276 %276 1 2 
					                              f32_3 %278 = OpLoad %68 
					                              f32_2 %279 = OpVectorShuffle %278 %278 1 2 
					                                f32 %280 = OpDot %277 %279 
					                                             OpStore %275 %280 
					                                f32 %281 = OpLoad %275 
					                                f32 %282 = OpExtInst %1 31 %281 
					                                             OpStore %275 %282 
					                       Private f32* %283 = OpAccessChain %68 %34 
					                                f32 %284 = OpLoad %283 
					                       Uniform f32* %286 = OpAccessChain %31 %285 
					                                f32 %287 = OpLoad %286 
					                                f32 %288 = OpFMul %284 %287 
					                       Private f32* %289 = OpAccessChain %68 %44 
					                                             OpStore %289 %288 
					                              f32_3 %290 = OpLoad %68 
					                              f32_2 %291 = OpVectorShuffle %290 %290 0 2 
					                              f32_2 %292 = OpLoad vs_TEXCOORD0 
					                              f32_2 %293 = OpFAdd %291 %292 
					                              f32_3 %294 = OpLoad %68 
					                              f32_3 %295 = OpVectorShuffle %294 %293 3 4 2 
					                                             OpStore %68 %295 
					                read_only Texture2D %297 = OpLoad %11 
					                            sampler %298 = OpLoad %15 
					         read_only Texture2DSampled %299 = OpSampledImage %297 %298 
					                              f32_3 %300 = OpLoad %68 
					                              f32_2 %301 = OpVectorShuffle %300 %300 0 1 
					                              f32_4 %302 = OpImageSampleImplicitLod %299 %301 
					                                             OpStore %296 %302 
					                                f32 %304 = OpLoad %8 
					                       Private f32* %305 = OpAccessChain %296 %26 
					                                f32 %306 = OpLoad %305 
					                                f32 %307 = OpExtInst %1 37 %304 %306 
					                       Private f32* %308 = OpAccessChain %303 %44 
					                                             OpStore %308 %307 
					                       Private f32* %309 = OpAccessChain %303 %44 
					                                f32 %310 = OpLoad %309 
					                                f32 %311 = OpExtInst %1 40 %310 %43 
					                       Private f32* %312 = OpAccessChain %303 %44 
					                                             OpStore %312 %311 
					                                f32 %314 = OpLoad %275 
					                                f32 %315 = OpFNegate %314 
					                       Private f32* %316 = OpAccessChain %303 %44 
					                                f32 %317 = OpLoad %316 
					                                f32 %318 = OpFAdd %315 %317 
					                                             OpStore %313 %318 
					                       Uniform f32* %319 = OpAccessChain %31 %33 %34 
					                                f32 %320 = OpLoad %319 
					                                f32 %322 = OpFMul %320 %321 
					                                f32 %323 = OpLoad %313 
					                                f32 %324 = OpFAdd %322 %323 
					                                             OpStore %313 %324 
					                                f32 %326 = OpLoad %313 
					                                f32 %327 = OpLoad %28 
					                                f32 %328 = OpFDiv %326 %327 
					                                             OpStore %325 %328 
					                                f32 %329 = OpLoad %325 
					                                f32 %331 = OpExtInst %1 43 %329 %43 %330 
					                                             OpStore %325 %331 
					                                f32 %332 = OpLoad %275 
					                                f32 %333 = OpFNegate %332 
					                       Private f32* %334 = OpAccessChain %296 %26 
					                                f32 %335 = OpLoad %334 
					                                f32 %336 = OpFNegate %335 
					                                f32 %337 = OpFAdd %333 %336 
					                                             OpStore %275 %337 
					                       Uniform f32* %338 = OpAccessChain %31 %33 %34 
					                                f32 %339 = OpLoad %338 
					                                f32 %340 = OpFMul %339 %321 
					                                f32 %341 = OpLoad %275 
					                                f32 %342 = OpFAdd %340 %341 
					                                             OpStore %275 %342 
					                                f32 %343 = OpLoad %275 
					                                f32 %344 = OpLoad %28 
					                                f32 %345 = OpFDiv %343 %344 
					                                             OpStore %275 %345 
					                                f32 %346 = OpLoad %275 
					                                f32 %347 = OpExtInst %1 43 %346 %43 %330 
					                                             OpStore %275 %347 
					                       Private f32* %350 = OpAccessChain %296 %26 
					                                f32 %351 = OpLoad %350 
					                                f32 %352 = OpFNegate %351 
					                       Uniform f32* %353 = OpAccessChain %31 %33 %34 
					                                f32 %354 = OpLoad %353 
					                               bool %355 = OpFOrdGreaterThanEqual %352 %354 
					                                             OpStore %349 %355 
					                               bool %357 = OpLoad %349 
					                                f32 %358 = OpSelect %357 %330 %43 
					                                             OpStore %356 %358 
					                                f32 %360 = OpLoad %275 
					                                f32 %361 = OpLoad %356 
					                                f32 %362 = OpFMul %360 %361 
					                                             OpStore %359 %362 
					                              f32_4 %363 = OpLoad %296 
					                              f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                f32 %365 = OpLoad %325 
					                              f32_3 %366 = OpCompositeConstruct %365 %365 %365 
					                              f32_3 %367 = OpFMul %364 %366 
					                              f32_4 %368 = OpLoad %303 
					                              f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
					                                             OpStore %303 %369 
					                                f32 %370 = OpLoad %325 
					                       Private f32* %371 = OpAccessChain %303 %26 
					                                             OpStore %371 %370 
					                              f32_4 %372 = OpLoad %303 
					                              f32_4 %373 = OpLoad %42 
					                              f32_4 %374 = OpFAdd %372 %373 
					                                             OpStore %42 %374 
					                              f32_4 %376 = OpLoad %296 
					                              f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
					                                f32 %378 = OpLoad %359 
					                              f32_3 %379 = OpCompositeConstruct %378 %378 %378 
					                              f32_3 %380 = OpFMul %377 %379 
					                              f32_4 %381 = OpLoad %375 
					                              f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
					                                             OpStore %375 %382 
					                                f32 %383 = OpLoad %359 
					                       Private f32* %384 = OpAccessChain %375 %26 
					                                             OpStore %384 %383 
					                              f32_4 %385 = OpLoad %375 
					                              f32_4 %386 = OpLoad %50 
					                              f32_4 %387 = OpFAdd %385 %386 
					                                             OpStore %50 %387 
					                                             OpBranch %60 
					                                     %60 = OpLabel 
					                                i32 %388 = OpLoad %56 
					                                i32 %389 = OpIAdd %388 %69 
					                                             OpStore %56 %389 
					                                             OpBranch %57 
					                                     %59 = OpLabel 
					                       Private f32* %391 = OpAccessChain %42 %26 
					                                f32 %392 = OpLoad %391 
					                               bool %393 = OpFOrdEqual %392 %43 
					                                             OpStore %390 %393 
					                               bool %394 = OpLoad %390 
					                                f32 %395 = OpSelect %394 %330 %43 
					                       Private f32* %396 = OpAccessChain %303 %44 
					                                             OpStore %396 %395 
					                       Private f32* %398 = OpAccessChain %42 %26 
					                                f32 %399 = OpLoad %398 
					                       Private f32* %400 = OpAccessChain %303 %44 
					                                f32 %401 = OpLoad %400 
					                                f32 %402 = OpFAdd %399 %401 
					                                             OpStore %397 %402 
					                              f32_4 %403 = OpLoad %42 
					                              f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
					                                f32 %405 = OpLoad %397 
					                              f32_3 %406 = OpCompositeConstruct %405 %405 %405 
					                              f32_3 %407 = OpFDiv %404 %406 
					                              f32_4 %408 = OpLoad %42 
					                              f32_4 %409 = OpVectorShuffle %408 %407 4 5 6 3 
					                                             OpStore %42 %409 
					                       Private f32* %410 = OpAccessChain %50 %26 
					                                f32 %411 = OpLoad %410 
					                               bool %412 = OpFOrdEqual %411 %43 
					                                             OpStore %390 %412 
					                               bool %413 = OpLoad %390 
					                                f32 %414 = OpSelect %413 %330 %43 
					                                             OpStore %397 %414 
					                                f32 %415 = OpLoad %397 
					                       Private f32* %416 = OpAccessChain %50 %26 
					                                f32 %417 = OpLoad %416 
					                                f32 %418 = OpFAdd %415 %417 
					                                             OpStore %397 %418 
					                              f32_4 %419 = OpLoad %50 
					                              f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
					                                f32 %421 = OpLoad %397 
					                              f32_3 %422 = OpCompositeConstruct %421 %421 %421 
					                              f32_3 %423 = OpFDiv %420 %422 
					                              f32_4 %424 = OpLoad %50 
					                              f32_4 %425 = OpVectorShuffle %424 %423 4 5 6 3 
					                                             OpStore %50 %425 
					                       Private f32* %427 = OpAccessChain %50 %26 
					                                f32 %428 = OpLoad %427 
					                                f32 %430 = OpFMul %428 %429 
					                                             OpStore %426 %430 
					                                f32 %431 = OpLoad %426 
					                                f32 %432 = OpExtInst %1 37 %431 %330 
					                                             OpStore %397 %432 
					                              f32_4 %433 = OpLoad %42 
					                              f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
					                              f32_3 %435 = OpFNegate %434 
					                              f32_4 %436 = OpLoad %50 
					                              f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
					                              f32_3 %438 = OpFAdd %435 %437 
					                              f32_4 %439 = OpLoad %50 
					                              f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
					                                             OpStore %50 %440 
					                                f32 %443 = OpLoad %397 
					                              f32_3 %444 = OpCompositeConstruct %443 %443 %443 
					                              f32_4 %445 = OpLoad %50 
					                              f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
					                              f32_3 %447 = OpFMul %444 %446 
					                              f32_4 %448 = OpLoad %42 
					                              f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
					                              f32_3 %450 = OpFAdd %447 %449 
					                              f32_4 %451 = OpLoad %442 
					                              f32_4 %452 = OpVectorShuffle %451 %450 4 5 6 3 
					                                             OpStore %442 %452 
					                                f32 %453 = OpLoad %397 
					                        Output f32* %455 = OpAccessChain %442 %26 
					                                             OpStore %455 %453 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec2 ImmCB_0_0_0[71];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						float _RcpAspect;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.275862098, 0.0);
						ImmCB_0_0_0[2] = vec2(0.171997204, 0.215677679);
						ImmCB_0_0_0[3] = vec2(-0.0613850951, 0.268945664);
						ImmCB_0_0_0[4] = vec2(-0.248543158, 0.119692102);
						ImmCB_0_0_0[5] = vec2(-0.248543158, -0.11969208);
						ImmCB_0_0_0[6] = vec2(-0.0613849834, -0.268945694);
						ImmCB_0_0_0[7] = vec2(0.171997175, -0.215677708);
						ImmCB_0_0_0[8] = vec2(0.517241359, 0.0);
						ImmCB_0_0_0[9] = vec2(0.466018349, 0.224422619);
						ImmCB_0_0_0[10] = vec2(0.322494715, 0.40439558);
						ImmCB_0_0_0[11] = vec2(0.115097053, 0.504273057);
						ImmCB_0_0_0[12] = vec2(-0.115097038, 0.504273057);
						ImmCB_0_0_0[13] = vec2(-0.322494805, 0.404395521);
						ImmCB_0_0_0[14] = vec2(-0.466018349, 0.224422649);
						ImmCB_0_0_0[15] = vec2(-0.517241359, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.466018349, -0.224422619);
						ImmCB_0_0_0[17] = vec2(-0.322494626, -0.40439564);
						ImmCB_0_0_0[18] = vec2(-0.11509683, -0.504273117);
						ImmCB_0_0_0[19] = vec2(0.115097322, -0.504272997);
						ImmCB_0_0_0[20] = vec2(0.322494656, -0.40439564);
						ImmCB_0_0_0[21] = vec2(0.466018349, -0.224422619);
						ImmCB_0_0_0[22] = vec2(0.758620679, 0.0);
						ImmCB_0_0_0[23] = vec2(0.724917293, 0.223607376);
						ImmCB_0_0_0[24] = vec2(0.626801789, 0.427346289);
						ImmCB_0_0_0[25] = vec2(0.472992241, 0.593113542);
						ImmCB_0_0_0[26] = vec2(0.277155221, 0.706180096);
						ImmCB_0_0_0[27] = vec2(0.0566917248, 0.756499469);
						ImmCB_0_0_0[28] = vec2(-0.168808997, 0.73960048);
						ImmCB_0_0_0[29] = vec2(-0.379310399, 0.656984746);
						ImmCB_0_0_0[30] = vec2(-0.556108356, 0.515993059);
						ImmCB_0_0_0[31] = vec2(-0.683493614, 0.32915324);
						ImmCB_0_0_0[32] = vec2(-0.750147521, 0.113066405);
						ImmCB_0_0_0[33] = vec2(-0.750147521, -0.113066711);
						ImmCB_0_0_0[34] = vec2(-0.683493614, -0.32915318);
						ImmCB_0_0_0[35] = vec2(-0.556108296, -0.515993178);
						ImmCB_0_0_0[36] = vec2(-0.37931028, -0.656984806);
						ImmCB_0_0_0[37] = vec2(-0.168809041, -0.73960048);
						ImmCB_0_0_0[38] = vec2(0.0566919446, -0.75649941);
						ImmCB_0_0_0[39] = vec2(0.277155608, -0.706179917);
						ImmCB_0_0_0[40] = vec2(0.472992152, -0.593113661);
						ImmCB_0_0_0[41] = vec2(0.626801848, -0.4273462);
						ImmCB_0_0_0[42] = vec2(0.724917352, -0.223607108);
						ImmCB_0_0_0[43] = vec2(1.0, 0.0);
						ImmCB_0_0_0[44] = vec2(0.974927902, 0.222520933);
						ImmCB_0_0_0[45] = vec2(0.90096885, 0.433883756);
						ImmCB_0_0_0[46] = vec2(0.781831503, 0.623489797);
						ImmCB_0_0_0[47] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[48] = vec2(0.433883637, 0.900968909);
						ImmCB_0_0_0[49] = vec2(0.222520977, 0.974927902);
						ImmCB_0_0_0[50] = vec2(0.0, 1.0);
						ImmCB_0_0_0[51] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[52] = vec2(-0.433883846, 0.90096885);
						ImmCB_0_0_0[53] = vec2(-0.623489976, 0.781831384);
						ImmCB_0_0_0[54] = vec2(-0.781831682, 0.623489559);
						ImmCB_0_0_0[55] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[56] = vec2(-0.974927902, 0.222520933);
						ImmCB_0_0_0[57] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[58] = vec2(-0.974927902, -0.222520873);
						ImmCB_0_0_0[59] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[60] = vec2(-0.781831384, -0.623489916);
						ImmCB_0_0_0[61] = vec2(-0.623489618, -0.781831622);
						ImmCB_0_0_0[62] = vec2(-0.433883458, -0.900969028);
						ImmCB_0_0_0[63] = vec2(-0.222520545, -0.974928021);
						ImmCB_0_0_0[64] = vec2(0.0, -1.0);
						ImmCB_0_0_0[65] = vec2(0.222521499, -0.974927783);
						ImmCB_0_0_0[66] = vec2(0.433883488, -0.900968969);
						ImmCB_0_0_0[67] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[68] = vec2(0.781831443, -0.623489857);
						ImmCB_0_0_0[69] = vec2(0.90096885, -0.433883756);
						ImmCB_0_0_0[70] = vec2(0.974927902, -0.222520858);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<71 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.0442477837;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Postfilter"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 479768
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _MainTex_TexelSize;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat16_0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat10_2;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat16_0 = u_xlat10_0 + u_xlat10_1;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat16_0 = u_xlat16_0 + u_xlat10_2;
					    u_xlat16_0 = u_xlat10_1 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 90
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %26 %84 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpMemberDecorate %10 0 Offset 10 
					                                             OpDecorate %10 Block 
					                                             OpDecorate %12 DescriptorSet 12 
					                                             OpDecorate %12 Binding 12 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 26 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate %33 RelaxedPrecision 
					                                             OpDecorate %33 DescriptorSet 33 
					                                             OpDecorate %33 Binding 33 
					                                             OpDecorate %34 RelaxedPrecision 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %37 DescriptorSet 37 
					                                             OpDecorate %37 Binding 37 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %45 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %51 RelaxedPrecision 
					                                             OpDecorate %52 RelaxedPrecision 
					                                             OpDecorate %53 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %65 RelaxedPrecision 
					                                             OpDecorate %66 RelaxedPrecision 
					                                             OpDecorate %71 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %77 RelaxedPrecision 
					                                             OpDecorate %78 RelaxedPrecision 
					                                             OpDecorate %79 RelaxedPrecision 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %84 Location 84 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %88 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypeStruct %7 
					                                     %11 = OpTypePointer Uniform %10 
					            Uniform struct {f32_4;}* %12 = OpVariable Uniform 
					                                     %13 = OpTypeInt 32 1 
					                                 i32 %14 = OpConstant 0 
					                                     %15 = OpTypePointer Uniform %7 
					                                 f32 %20 = OpConstant 3,674022E-40 
					                                 f32 %21 = OpConstant 3,674022E-40 
					                               f32_4 %22 = OpConstantComposite %20 %20 %21 %20 
					                                     %24 = OpTypeVector %6 2 
					                                     %25 = OpTypePointer Input %24 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                      Private f32_4* %30 = OpVariable Private 
					                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %32 = OpTypePointer UniformConstant %31 
					UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
					                                     %35 = OpTypeSampler 
					                                     %36 = OpTypePointer UniformConstant %35 
					            UniformConstant sampler* %37 = OpVariable UniformConstant 
					                                     %39 = OpTypeSampledImage %31 
					                      Private f32_4* %44 = OpVariable Private 
					                      Private f32_4* %51 = OpVariable Private 
					                      Private f32_4* %55 = OpVariable Private 
					                               f32_4 %59 = OpConstantComposite %21 %20 %20 %20 
					                      Private f32_4* %64 = OpVariable Private 
					                                     %83 = OpTypePointer Output %7 
					                       Output f32_4* %84 = OpVariable Output 
					                                 f32 %86 = OpConstant 3,674022E-40 
					                               f32_4 %87 = OpConstantComposite %86 %86 %86 %86 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                      Uniform f32_4* %16 = OpAccessChain %12 %14 
					                               f32_4 %17 = OpLoad %16 
					                               f32_4 %18 = OpVectorShuffle %17 %17 0 1 0 1 
					                               f32_4 %19 = OpFNegate %18 
					                               f32_4 %23 = OpFMul %19 %22 
					                               f32_2 %27 = OpLoad vs_TEXCOORD0 
					                               f32_4 %28 = OpVectorShuffle %27 %27 0 1 0 1 
					                               f32_4 %29 = OpFAdd %23 %28 
					                                             OpStore %9 %29 
					                 read_only Texture2D %34 = OpLoad %33 
					                             sampler %38 = OpLoad %37 
					          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
					                               f32_4 %41 = OpLoad %9 
					                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
					                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
					                                             OpStore %30 %43 
					                 read_only Texture2D %45 = OpLoad %33 
					                             sampler %46 = OpLoad %37 
					          read_only Texture2DSampled %47 = OpSampledImage %45 %46 
					                               f32_4 %48 = OpLoad %9 
					                               f32_2 %49 = OpVectorShuffle %48 %48 2 3 
					                               f32_4 %50 = OpImageSampleImplicitLod %47 %49 
					                                             OpStore %44 %50 
					                               f32_4 %52 = OpLoad %44 
					                               f32_4 %53 = OpLoad %30 
					                               f32_4 %54 = OpFAdd %52 %53 
					                                             OpStore %51 %54 
					                      Uniform f32_4* %56 = OpAccessChain %12 %14 
					                               f32_4 %57 = OpLoad %56 
					                               f32_4 %58 = OpVectorShuffle %57 %57 0 1 0 1 
					                               f32_4 %60 = OpFMul %58 %59 
					                               f32_2 %61 = OpLoad vs_TEXCOORD0 
					                               f32_4 %62 = OpVectorShuffle %61 %61 0 1 0 1 
					                               f32_4 %63 = OpFAdd %60 %62 
					                                             OpStore %55 %63 
					                 read_only Texture2D %65 = OpLoad %33 
					                             sampler %66 = OpLoad %37 
					          read_only Texture2DSampled %67 = OpSampledImage %65 %66 
					                               f32_4 %68 = OpLoad %55 
					                               f32_2 %69 = OpVectorShuffle %68 %68 0 1 
					                               f32_4 %70 = OpImageSampleImplicitLod %67 %69 
					                                             OpStore %64 %70 
					                 read_only Texture2D %71 = OpLoad %33 
					                             sampler %72 = OpLoad %37 
					          read_only Texture2DSampled %73 = OpSampledImage %71 %72 
					                               f32_4 %74 = OpLoad %55 
					                               f32_2 %75 = OpVectorShuffle %74 %74 2 3 
					                               f32_4 %76 = OpImageSampleImplicitLod %73 %75 
					                                             OpStore %30 %76 
					                               f32_4 %77 = OpLoad %51 
					                               f32_4 %78 = OpLoad %64 
					                               f32_4 %79 = OpFAdd %77 %78 
					                                             OpStore %51 %79 
					                               f32_4 %80 = OpLoad %30 
					                               f32_4 %81 = OpLoad %51 
					                               f32_4 %82 = OpFAdd %80 %81 
					                                             OpStore %51 %82 
					                               f32_4 %85 = OpLoad %51 
					                               f32_4 %88 = OpFMul %85 %87 
					                                             OpStore %84 %88 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat16_0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat10_2;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat16_0 = u_xlat10_0 + u_xlat10_1;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat16_0 = u_xlat16_0 + u_xlat10_2;
					    u_xlat16_0 = u_xlat10_1 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
	}
	SubShader {
		Pass {
			Name "CoC Calculation"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 545286
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Distance;
					uniform 	float _LensCoeff;
					uniform 	float _RcpMaxCoC;
					UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					float u_xlat1;
					void main()
					{
					    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0 = _ZBufferParams.z * u_xlat10_0.x + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat1 = u_xlat0 + (-_Distance);
					    u_xlat0 = max(u_xlat0, 9.99999975e-06);
					    u_xlat1 = u_xlat1 * _LensCoeff;
					    u_xlat0 = u_xlat1 / u_xlat0;
					    u_xlat0 = u_xlat0 * 0.5;
					    u_xlat0 = u_xlat0 * _RcpMaxCoC + 0.5;
					    SV_Target0 = vec4(u_xlat0);
					    SV_Target0 = clamp(SV_Target0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 98
					; Schema: 0
					                                                OpCapability Shader 
					                                         %1 = OpExtInstImport "GLSL.std.450" 
					                                                OpMemoryModel Logical GLSL450 
					                                                OpEntryPoint Fragment %4 "main" %22 %95 
					                                                OpExecutionMode %4 OriginUpperLeft 
					                                                OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                OpDecorate %12 DescriptorSet 12 
					                                                OpDecorate %12 Binding 12 
					                                                OpDecorate %16 DescriptorSet 16 
					                                                OpDecorate %16 Binding 16 
					                                                OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                OpDecorate vs_TEXCOORD0 Location 22 
					                                                OpDecorate %23 RelaxedPrecision 
					                                                OpDecorate %24 RelaxedPrecision 
					                                                OpMemberDecorate %30 0 Offset 30 
					                                                OpMemberDecorate %30 1 Offset 30 
					                                                OpMemberDecorate %30 2 Offset 30 
					                                                OpMemberDecorate %30 3 Offset 30 
					                                                OpDecorate %30 Block 
					                                                OpDecorate %32 DescriptorSet 32 
					                                                OpDecorate %32 Binding 32 
					                                                OpDecorate %75 RelaxedPrecision 
					                                                OpDecorate %80 RelaxedPrecision 
					                                                OpDecorate %95 RelaxedPrecision 
					                                                OpDecorate %95 Location 95 
					                                         %2 = OpTypeVoid 
					                                         %3 = OpTypeFunction %2 
					                                         %6 = OpTypeFloat 32 
					                                         %7 = OpTypeVector %6 4 
					                                         %8 = OpTypePointer Private %7 
					                          Private f32_4* %9 = OpVariable Private 
					                                        %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                        %11 = OpTypePointer UniformConstant %10 
					   UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
					                                        %14 = OpTypeSampler 
					                                        %15 = OpTypePointer UniformConstant %14 
					               UniformConstant sampler* %16 = OpVariable UniformConstant 
					                                        %18 = OpTypeSampledImage %10 
					                                        %20 = OpTypeVector %6 2 
					                                        %21 = OpTypePointer Input %20 
					                  Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                        %25 = OpTypeInt 32 0 
					                                    u32 %26 = OpConstant 0 
					                                        %28 = OpTypePointer Private %6 
					                                        %30 = OpTypeStruct %7 %6 %6 %6 
					                                        %31 = OpTypePointer Uniform %30 
					Uniform struct {f32_4; f32; f32; f32;}* %32 = OpVariable Uniform 
					                                        %33 = OpTypeInt 32 1 
					                                    i32 %34 = OpConstant 0 
					                                    u32 %35 = OpConstant 2 
					                                        %36 = OpTypePointer Uniform %6 
					                                    u32 %42 = OpConstant 3 
					                                    f32 %47 = OpConstant 3,674022E-40 
					                           Private f32* %52 = OpVariable Private 
					                                    i32 %55 = OpConstant 1 
					                                    f32 %62 = OpConstant 3,674022E-40 
					                                    i32 %66 = OpConstant 2 
					                           Private f32* %75 = OpVariable Private 
					                                    f32 %78 = OpConstant 3,674022E-40 
					                                    i32 %81 = OpConstant 3 
					                                    f32 %90 = OpConstant 3,674022E-40 
					                                        %94 = OpTypePointer Output %7 
					                          Output f32_4* %95 = OpVariable Output 
					                                    void %4 = OpFunction None %3 
					                                         %5 = OpLabel 
					                    read_only Texture2D %13 = OpLoad %12 
					                                sampler %17 = OpLoad %16 
					             read_only Texture2DSampled %19 = OpSampledImage %13 %17 
					                                  f32_2 %23 = OpLoad vs_TEXCOORD0 
					                                  f32_4 %24 = OpImageSampleImplicitLod %19 %23 
					                                    f32 %27 = OpCompositeExtract %24 0 
					                           Private f32* %29 = OpAccessChain %9 %26 
					                                                OpStore %29 %27 
					                           Uniform f32* %37 = OpAccessChain %32 %34 %35 
					                                    f32 %38 = OpLoad %37 
					                           Private f32* %39 = OpAccessChain %9 %26 
					                                    f32 %40 = OpLoad %39 
					                                    f32 %41 = OpFMul %38 %40 
					                           Uniform f32* %43 = OpAccessChain %32 %34 %42 
					                                    f32 %44 = OpLoad %43 
					                                    f32 %45 = OpFAdd %41 %44 
					                           Private f32* %46 = OpAccessChain %9 %26 
					                                                OpStore %46 %45 
					                           Private f32* %48 = OpAccessChain %9 %26 
					                                    f32 %49 = OpLoad %48 
					                                    f32 %50 = OpFDiv %47 %49 
					                           Private f32* %51 = OpAccessChain %9 %26 
					                                                OpStore %51 %50 
					                           Private f32* %53 = OpAccessChain %9 %26 
					                                    f32 %54 = OpLoad %53 
					                           Uniform f32* %56 = OpAccessChain %32 %55 
					                                    f32 %57 = OpLoad %56 
					                                    f32 %58 = OpFNegate %57 
					                                    f32 %59 = OpFAdd %54 %58 
					                                                OpStore %52 %59 
					                           Private f32* %60 = OpAccessChain %9 %26 
					                                    f32 %61 = OpLoad %60 
					                                    f32 %63 = OpExtInst %1 40 %61 %62 
					                           Private f32* %64 = OpAccessChain %9 %26 
					                                                OpStore %64 %63 
					                                    f32 %65 = OpLoad %52 
					                           Uniform f32* %67 = OpAccessChain %32 %66 
					                                    f32 %68 = OpLoad %67 
					                                    f32 %69 = OpFMul %65 %68 
					                                                OpStore %52 %69 
					                                    f32 %70 = OpLoad %52 
					                           Private f32* %71 = OpAccessChain %9 %26 
					                                    f32 %72 = OpLoad %71 
					                                    f32 %73 = OpFDiv %70 %72 
					                           Private f32* %74 = OpAccessChain %9 %26 
					                                                OpStore %74 %73 
					                           Private f32* %76 = OpAccessChain %9 %26 
					                                    f32 %77 = OpLoad %76 
					                                    f32 %79 = OpFMul %77 %78 
					                                                OpStore %75 %79 
					                                    f32 %80 = OpLoad %75 
					                           Uniform f32* %82 = OpAccessChain %32 %81 
					                                    f32 %83 = OpLoad %82 
					                                    f32 %84 = OpFMul %80 %83 
					                                    f32 %85 = OpFAdd %84 %78 
					                           Private f32* %86 = OpAccessChain %9 %26 
					                                                OpStore %86 %85 
					                                  f32_4 %87 = OpLoad %9 
					                                  f32_4 %88 = OpVectorShuffle %87 %87 0 0 0 0 
					                                                OpStore %9 %88 
					                                  f32_4 %89 = OpLoad %9 
					                                  f32_4 %91 = OpCompositeConstruct %90 %90 %90 %90 
					                                  f32_4 %92 = OpCompositeConstruct %47 %47 %47 %47 
					                                  f32_4 %93 = OpExtInst %1 43 %89 %91 %92 
					                                                OpStore %9 %93 
					                                  f32_4 %96 = OpLoad %9 
					                                                OpStore %95 %96 
					                                                OpReturn
					                                                OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float _Distance;
						float _LensCoeff;
						float _RcpMaxCoC;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					float u_xlat1;
					void main()
					{
					    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0 = _ZBufferParams.z * u_xlat10_0.x + _ZBufferParams.w;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlat1 = u_xlat0 + (-_Distance);
					    u_xlat0 = max(u_xlat0, 9.99999975e-06);
					    u_xlat1 = u_xlat1 * _LensCoeff;
					    u_xlat0 = u_xlat1 / u_xlat0;
					    u_xlat0 = u_xlat0 * 0.5;
					    u_xlat0 = u_xlat0 * _RcpMaxCoC + 0.5;
					    SV_Target0 = vec4(u_xlat0);
					    SV_Target0 = clamp(SV_Target0, 0.0, 1.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "CoC Temporal Filter"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 619624
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	vec3 _TaaParams;
					UNITY_LOCATION(0) uniform  sampler2D _CoCTex;
					UNITY_LOCATION(1) uniform  sampler2D _CameraMotionVectorsTexture;
					UNITY_LOCATION(2) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec4 u_xlat10_5;
					float u_xlat16_7;
					float u_xlat12;
					bool u_xlatb13;
					vec2 u_xlat14;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.yy * vec2(-0.0, -1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_TaaParams.xxyz.yz);
					    u_xlat10_1 = texture(_CoCTex, u_xlat1.xy);
					    u_xlat2 = (-_MainTex_TexelSize.xyyy) * vec4(1.0, 0.0, 0.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat10_3 = texture(_CoCTex, u_xlat2.xy);
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.zw);
					    u_xlatb18 = u_xlat10_3.x<u_xlat10_1.x;
					    u_xlat4.z = (u_xlatb18) ? u_xlat10_3.x : u_xlat10_1.x;
					    u_xlat16_7 = max(u_xlat10_1.x, u_xlat10_3.x);
					    u_xlat16_7 = max(u_xlat10_2.x, u_xlat16_7);
					    u_xlatb13 = u_xlat10_2.x<u_xlat4.z;
					    u_xlat0.z = u_xlat10_2.x;
					    u_xlat2.xy = _MainTex_TexelSize.xy * vec2(1.0, 0.0);
					    u_xlat14.xy = (-u_xlat2.xy);
					    u_xlat4.xy = mix(vec2(0.0, 0.0), u_xlat14.xy, vec2(bvec2(u_xlatb18)));
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat0.xyz : u_xlat4.xyz;
					    u_xlat3.xy = _MainTex_TexelSize.yy * vec2(0.0, 1.0);
					    u_xlat4 = _MainTex_TexelSize.yyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat10_5 = texture(_CoCTex, u_xlat4.xy);
					    u_xlat10_4 = texture(_CoCTex, u_xlat4.zw);
					    u_xlatb18 = u_xlat10_5.x<u_xlat0.z;
					    u_xlat3.z = u_xlat10_5.x;
					    u_xlat16_7 = max(u_xlat16_7, u_xlat10_5.x);
					    u_xlat16_7 = max(u_xlat10_4.x, u_xlat16_7);
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlatb18 = u_xlat10_4.x<u_xlat0.z;
					    u_xlat12 = min(u_xlat10_4.x, u_xlat0.z);
					    u_xlat0.xy = (bool(u_xlatb18)) ? u_xlat2.xy : u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat10_2 = texture(_CameraMotionVectorsTexture, u_xlat0.xy);
					    u_xlat0.xy = (-u_xlat10_2.xy) + vs_TEXCOORD0.xy;
					    u_xlat10_2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = max(u_xlat12, u_xlat10_2.x);
					    u_xlat0.x = min(u_xlat16_7, u_xlat0.x);
					    u_xlat0.x = (-u_xlat10_1.x) + u_xlat0.x;
					    SV_Target0 = vec4(_TaaParams.z, _TaaParams.z, _TaaParams.z, _TaaParams.z) * u_xlat0.xxxx + u_xlat10_1.xxxx;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 267
					; Schema: 0
					                                              OpCapability Shader 
					                                       %1 = OpExtInstImport "GLSL.std.450" 
					                                              OpMemoryModel Logical GLSL450 
					                                              OpEntryPoint Fragment %4 "main" %30 %256 
					                                              OpExecutionMode %4 OriginUpperLeft 
					                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                              OpMemberDecorate %11 0 Offset 11 
					                                              OpMemberDecorate %11 1 RelaxedPrecision 
					                                              OpMemberDecorate %11 1 Offset 11 
					                                              OpDecorate %11 Block 
					                                              OpDecorate %13 DescriptorSet 13 
					                                              OpDecorate %13 Binding 13 
					                                              OpDecorate %28 RelaxedPrecision 
					                                              OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                              OpDecorate vs_TEXCOORD0 Location 30 
					                                              OpDecorate %31 RelaxedPrecision 
					                                              OpDecorate %35 RelaxedPrecision 
					                                              OpDecorate %36 RelaxedPrecision 
					                                              OpDecorate %37 RelaxedPrecision 
					                                              OpDecorate %38 RelaxedPrecision 
					                                              OpDecorate %43 RelaxedPrecision 
					                                              OpDecorate %43 DescriptorSet 43 
					                                              OpDecorate %43 Binding 43 
					                                              OpDecorate %44 RelaxedPrecision 
					                                              OpDecorate %47 RelaxedPrecision 
					                                              OpDecorate %47 DescriptorSet 47 
					                                              OpDecorate %47 Binding 47 
					                                              OpDecorate %48 RelaxedPrecision 
					                                              OpDecorate %51 RelaxedPrecision 
					                                              OpDecorate %52 RelaxedPrecision 
					                                              OpDecorate %66 RelaxedPrecision 
					                                              OpDecorate %67 RelaxedPrecision 
					                                              OpDecorate %70 RelaxedPrecision 
					                                              OpDecorate %71 RelaxedPrecision 
					                                              OpDecorate %77 RelaxedPrecision 
					                                              OpDecorate %78 RelaxedPrecision 
					                                              OpDecorate %98 RelaxedPrecision 
					                                              OpDecorate %104 RelaxedPrecision 
					                                              OpDecorate %152 RelaxedPrecision 
					                                              OpDecorate %153 RelaxedPrecision 
					                                              OpDecorate %155 RelaxedPrecision 
					                                              OpDecorate %156 RelaxedPrecision 
					                                              OpDecorate %163 RelaxedPrecision 
					                                              OpDecorate %164 RelaxedPrecision 
					                                              OpDecorate %177 RelaxedPrecision 
					                                              OpDecorate %180 RelaxedPrecision 
					                                              OpDecorate %213 RelaxedPrecision 
					                                              OpDecorate %217 RelaxedPrecision 
					                                              OpDecorate %218 RelaxedPrecision 
					                                              OpDecorate %218 DescriptorSet 218 
					                                              OpDecorate %218 Binding 218 
					                                              OpDecorate %219 RelaxedPrecision 
					                                              OpDecorate %220 RelaxedPrecision 
					                                              OpDecorate %220 DescriptorSet 220 
					                                              OpDecorate %220 Binding 220 
					                                              OpDecorate %221 RelaxedPrecision 
					                                              OpDecorate %226 RelaxedPrecision 
					                                              OpDecorate %227 RelaxedPrecision 
					                                              OpDecorate %228 RelaxedPrecision 
					                                              OpDecorate %229 RelaxedPrecision 
					                                              OpDecorate %230 RelaxedPrecision 
					                                              OpDecorate %233 RelaxedPrecision 
					                                              OpDecorate %233 DescriptorSet 233 
					                                              OpDecorate %233 Binding 233 
					                                              OpDecorate %234 RelaxedPrecision 
					                                              OpDecorate %235 RelaxedPrecision 
					                                              OpDecorate %235 DescriptorSet 235 
					                                              OpDecorate %235 Binding 235 
					                                              OpDecorate %236 RelaxedPrecision 
					                                              OpDecorate %241 RelaxedPrecision 
					                                              OpDecorate %243 RelaxedPrecision 
					                                              OpDecorate %246 RelaxedPrecision 
					                                              OpDecorate %248 RelaxedPrecision 
					                                              OpDecorate %249 RelaxedPrecision 
					                                              OpDecorate %250 RelaxedPrecision 
					                                              OpDecorate %253 RelaxedPrecision 
					                                              OpDecorate %256 RelaxedPrecision 
					                                              OpDecorate %256 Location 256 
					                                              OpDecorate %258 RelaxedPrecision 
					                                              OpDecorate %259 RelaxedPrecision 
					                                              OpDecorate %260 RelaxedPrecision 
					                                              OpDecorate %261 RelaxedPrecision 
					                                              OpDecorate %262 RelaxedPrecision 
					                                              OpDecorate %264 RelaxedPrecision 
					                                              OpDecorate %265 RelaxedPrecision 
					                                       %2 = OpTypeVoid 
					                                       %3 = OpTypeFunction %2 
					                                       %6 = OpTypeFloat 32 
					                                       %7 = OpTypeVector %6 3 
					                                       %8 = OpTypePointer Private %7 
					                        Private f32_3* %9 = OpVariable Private 
					                                      %10 = OpTypeVector %6 4 
					                                      %11 = OpTypeStruct %10 %7 
					                                      %12 = OpTypePointer Uniform %11 
					      Uniform struct {f32_4; f32_3;}* %13 = OpVariable Uniform 
					                                      %14 = OpTypeInt 32 1 
					                                  i32 %15 = OpConstant 0 
					                                      %16 = OpTypeVector %6 2 
					                                      %17 = OpTypePointer Uniform %10 
					                                  f32 %21 = OpConstant 3,674022E-40 
					                                  f32 %22 = OpConstant 3,674022E-40 
					                                f32_2 %23 = OpConstantComposite %21 %22 
					                                      %27 = OpTypePointer Private %16 
					                       Private f32_2* %28 = OpVariable Private 
					                                      %29 = OpTypePointer Input %16 
					                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                  i32 %32 = OpConstant 1 
					                                      %33 = OpTypePointer Uniform %7 
					                                      %39 = OpTypePointer Private %6 
					                         Private f32* %40 = OpVariable Private 
					                                      %41 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                      %42 = OpTypePointer UniformConstant %41 
					 UniformConstant read_only Texture2D* %43 = OpVariable UniformConstant 
					                                      %45 = OpTypeSampler 
					                                      %46 = OpTypePointer UniformConstant %45 
					             UniformConstant sampler* %47 = OpVariable UniformConstant 
					                                      %49 = OpTypeSampledImage %41 
					                                      %53 = OpTypeInt 32 0 
					                                  u32 %54 = OpConstant 0 
					                                      %56 = OpTypePointer Private %10 
					                       Private f32_4* %57 = OpVariable Private 
					                                  f32 %62 = OpConstant 3,674022E-40 
					                                  f32 %63 = OpConstant 3,674022E-40 
					                                f32_4 %64 = OpConstantComposite %62 %63 %63 %62 
					                         Private f32* %69 = OpVariable Private 
					                                  u32 %84 = OpConstant 2 
					                                      %86 = OpTypeBool 
					                                      %87 = OpTypePointer Private %86 
					                        Private bool* %88 = OpVariable Private 
					                       Private f32_3* %92 = OpVariable Private 
					                         Private f32* %98 = OpVariable Private 
					                       Private bool* %106 = OpVariable Private 
					                      Private f32_2* %112 = OpVariable Private 
					                               f32_2 %116 = OpConstantComposite %62 %63 
					                      Private f32_2* %118 = OpVariable Private 
					                               f32_2 %121 = OpConstantComposite %63 %63 
					                                     %124 = OpTypeVector %86 2 
					                               f32_2 %126 = OpConstantComposite %62 %62 
					                                     %132 = OpTypePointer Function %7 
					                               f32_2 %143 = OpConstantComposite %63 %62 
					                               f32_4 %150 = OpConstantComposite %63 %62 %62 %63 
					                        Private f32* %194 = OpVariable Private 
					                                     %200 = OpTypePointer Function %16 
					                      Private f32_2* %217 = OpVariable Private 
					UniformConstant read_only Texture2D* %218 = OpVariable UniformConstant 
					            UniformConstant sampler* %220 = OpVariable UniformConstant 
					UniformConstant read_only Texture2D* %233 = OpVariable UniformConstant 
					            UniformConstant sampler* %235 = OpVariable UniformConstant 
					                        Private f32* %243 = OpVariable Private 
					                                     %255 = OpTypePointer Output %10 
					                       Output f32_4* %256 = OpVariable Output 
					                                  void %4 = OpFunction None %3 
					                                       %5 = OpLabel 
					                     Function f32_3* %133 = OpVariable Function 
					                     Function f32_3* %183 = OpVariable Function 
					                     Function f32_2* %201 = OpVariable Function 
					                       Uniform f32_4* %18 = OpAccessChain %13 %15 
					                                f32_4 %19 = OpLoad %18 
					                                f32_2 %20 = OpVectorShuffle %19 %19 1 1 
					                                f32_2 %24 = OpFMul %20 %23 
					                                f32_3 %25 = OpLoad %9 
					                                f32_3 %26 = OpVectorShuffle %25 %24 3 4 2 
					                                              OpStore %9 %26 
					                                f32_2 %31 = OpLoad vs_TEXCOORD0 
					                       Uniform f32_3* %34 = OpAccessChain %13 %32 
					                                f32_3 %35 = OpLoad %34 
					                                f32_2 %36 = OpVectorShuffle %35 %35 0 1 
					                                f32_2 %37 = OpFNegate %36 
					                                f32_2 %38 = OpFAdd %31 %37 
					                                              OpStore %28 %38 
					                  read_only Texture2D %44 = OpLoad %43 
					                              sampler %48 = OpLoad %47 
					           read_only Texture2DSampled %50 = OpSampledImage %44 %48 
					                                f32_2 %51 = OpLoad %28 
					                                f32_4 %52 = OpImageSampleImplicitLod %50 %51 
					                                  f32 %55 = OpCompositeExtract %52 0 
					                                              OpStore %40 %55 
					                       Uniform f32_4* %58 = OpAccessChain %13 %15 
					                                f32_4 %59 = OpLoad %58 
					                                f32_4 %60 = OpVectorShuffle %59 %59 0 1 1 1 
					                                f32_4 %61 = OpFNegate %60 
					                                f32_4 %65 = OpFMul %61 %64 
					                                f32_2 %66 = OpLoad vs_TEXCOORD0 
					                                f32_4 %67 = OpVectorShuffle %66 %66 0 1 0 1 
					                                f32_4 %68 = OpFAdd %65 %67 
					                                              OpStore %57 %68 
					                  read_only Texture2D %70 = OpLoad %43 
					                              sampler %71 = OpLoad %47 
					           read_only Texture2DSampled %72 = OpSampledImage %70 %71 
					                                f32_4 %73 = OpLoad %57 
					                                f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                                f32_4 %75 = OpImageSampleImplicitLod %72 %74 
					                                  f32 %76 = OpCompositeExtract %75 0 
					                                              OpStore %69 %76 
					                  read_only Texture2D %77 = OpLoad %43 
					                              sampler %78 = OpLoad %47 
					           read_only Texture2DSampled %79 = OpSampledImage %77 %78 
					                                f32_4 %80 = OpLoad %57 
					                                f32_2 %81 = OpVectorShuffle %80 %80 2 3 
					                                f32_4 %82 = OpImageSampleImplicitLod %79 %81 
					                                  f32 %83 = OpCompositeExtract %82 0 
					                         Private f32* %85 = OpAccessChain %9 %84 
					                                              OpStore %85 %83 
					                                  f32 %89 = OpLoad %69 
					                                  f32 %90 = OpLoad %40 
					                                 bool %91 = OpFOrdLessThan %89 %90 
					                                              OpStore %88 %91 
					                                 bool %93 = OpLoad %88 
					                                  f32 %94 = OpLoad %69 
					                                  f32 %95 = OpLoad %40 
					                                  f32 %96 = OpSelect %93 %94 %95 
					                         Private f32* %97 = OpAccessChain %92 %84 
					                                              OpStore %97 %96 
					                                  f32 %99 = OpLoad %40 
					                                 f32 %100 = OpLoad %69 
					                                 f32 %101 = OpExtInst %1 40 %99 %100 
					                                              OpStore %98 %101 
					                        Private f32* %102 = OpAccessChain %9 %84 
					                                 f32 %103 = OpLoad %102 
					                                 f32 %104 = OpLoad %98 
					                                 f32 %105 = OpExtInst %1 40 %103 %104 
					                                              OpStore %98 %105 
					                        Private f32* %107 = OpAccessChain %9 %84 
					                                 f32 %108 = OpLoad %107 
					                        Private f32* %109 = OpAccessChain %92 %84 
					                                 f32 %110 = OpLoad %109 
					                                bool %111 = OpFOrdLessThan %108 %110 
					                                              OpStore %106 %111 
					                      Uniform f32_4* %113 = OpAccessChain %13 %15 
					                               f32_4 %114 = OpLoad %113 
					                               f32_2 %115 = OpVectorShuffle %114 %114 0 1 
					                               f32_2 %117 = OpFMul %115 %116 
					                                              OpStore %112 %117 
					                               f32_2 %119 = OpLoad %112 
					                               f32_2 %120 = OpFNegate %119 
					                                              OpStore %118 %120 
					                               f32_2 %122 = OpLoad %118 
					                                bool %123 = OpLoad %88 
					                              bool_2 %125 = OpCompositeConstruct %123 %123 
					                               f32_2 %127 = OpSelect %125 %126 %121 
					                               f32_2 %128 = OpExtInst %1 46 %121 %122 %127 
					                               f32_3 %129 = OpLoad %92 
					                               f32_3 %130 = OpVectorShuffle %129 %128 3 4 2 
					                                              OpStore %92 %130 
					                                bool %131 = OpLoad %106 
					                                              OpSelectionMerge %135 None 
					                                              OpBranchConditional %131 %134 %137 
					                                     %134 = OpLabel 
					                               f32_3 %136 = OpLoad %9 
					                                              OpStore %133 %136 
					                                              OpBranch %135 
					                                     %137 = OpLabel 
					                               f32_3 %138 = OpLoad %92 
					                                              OpStore %133 %138 
					                                              OpBranch %135 
					                                     %135 = OpLabel 
					                               f32_3 %139 = OpLoad %133 
					                                              OpStore %9 %139 
					                      Uniform f32_4* %140 = OpAccessChain %13 %15 
					                               f32_4 %141 = OpLoad %140 
					                               f32_2 %142 = OpVectorShuffle %141 %141 1 1 
					                               f32_2 %144 = OpFMul %142 %143 
					                               f32_3 %145 = OpLoad %92 
					                               f32_3 %146 = OpVectorShuffle %145 %144 3 4 2 
					                                              OpStore %92 %146 
					                      Uniform f32_4* %147 = OpAccessChain %13 %15 
					                               f32_4 %148 = OpLoad %147 
					                               f32_4 %149 = OpVectorShuffle %148 %148 1 1 0 1 
					                               f32_4 %151 = OpFMul %149 %150 
					                               f32_2 %152 = OpLoad vs_TEXCOORD0 
					                               f32_4 %153 = OpVectorShuffle %152 %152 0 1 0 1 
					                               f32_4 %154 = OpFAdd %151 %153 
					                                              OpStore %57 %154 
					                 read_only Texture2D %155 = OpLoad %43 
					                             sampler %156 = OpLoad %47 
					          read_only Texture2DSampled %157 = OpSampledImage %155 %156 
					                               f32_4 %158 = OpLoad %57 
					                               f32_2 %159 = OpVectorShuffle %158 %158 0 1 
					                               f32_4 %160 = OpImageSampleImplicitLod %157 %159 
					                                 f32 %161 = OpCompositeExtract %160 0 
					                        Private f32* %162 = OpAccessChain %92 %84 
					                                              OpStore %162 %161 
					                 read_only Texture2D %163 = OpLoad %43 
					                             sampler %164 = OpLoad %47 
					          read_only Texture2DSampled %165 = OpSampledImage %163 %164 
					                               f32_4 %166 = OpLoad %57 
					                               f32_2 %167 = OpVectorShuffle %166 %166 2 3 
					                               f32_4 %168 = OpImageSampleImplicitLod %165 %167 
					                                 f32 %169 = OpCompositeExtract %168 0 
					                                              OpStore %69 %169 
					                        Private f32* %170 = OpAccessChain %92 %84 
					                                 f32 %171 = OpLoad %170 
					                        Private f32* %172 = OpAccessChain %9 %84 
					                                 f32 %173 = OpLoad %172 
					                                bool %174 = OpFOrdLessThan %171 %173 
					                                              OpStore %88 %174 
					                        Private f32* %175 = OpAccessChain %92 %84 
					                                 f32 %176 = OpLoad %175 
					                                 f32 %177 = OpLoad %98 
					                                 f32 %178 = OpExtInst %1 40 %176 %177 
					                                              OpStore %98 %178 
					                                 f32 %179 = OpLoad %69 
					                                 f32 %180 = OpLoad %98 
					                                 f32 %181 = OpExtInst %1 40 %179 %180 
					                                              OpStore %98 %181 
					                                bool %182 = OpLoad %88 
					                                              OpSelectionMerge %185 None 
					                                              OpBranchConditional %182 %184 %187 
					                                     %184 = OpLabel 
					                               f32_3 %186 = OpLoad %92 
					                                              OpStore %183 %186 
					                                              OpBranch %185 
					                                     %187 = OpLabel 
					                               f32_3 %188 = OpLoad %9 
					                                              OpStore %183 %188 
					                                              OpBranch %185 
					                                     %185 = OpLabel 
					                               f32_3 %189 = OpLoad %183 
					                                              OpStore %9 %189 
					                                 f32 %190 = OpLoad %69 
					                        Private f32* %191 = OpAccessChain %9 %84 
					                                 f32 %192 = OpLoad %191 
					                                bool %193 = OpFOrdLessThan %190 %192 
					                                              OpStore %88 %193 
					                                 f32 %195 = OpLoad %69 
					                        Private f32* %196 = OpAccessChain %9 %84 
					                                 f32 %197 = OpLoad %196 
					                                 f32 %198 = OpExtInst %1 37 %195 %197 
					                                              OpStore %194 %198 
					                                bool %199 = OpLoad %88 
					                                              OpSelectionMerge %203 None 
					                                              OpBranchConditional %199 %202 %205 
					                                     %202 = OpLabel 
					                               f32_2 %204 = OpLoad %112 
					                                              OpStore %201 %204 
					                                              OpBranch %203 
					                                     %205 = OpLabel 
					                               f32_3 %206 = OpLoad %9 
					                               f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                                              OpStore %201 %207 
					                                              OpBranch %203 
					                                     %203 = OpLabel 
					                               f32_2 %208 = OpLoad %201 
					                               f32_3 %209 = OpLoad %9 
					                               f32_3 %210 = OpVectorShuffle %209 %208 3 4 2 
					                                              OpStore %9 %210 
					                               f32_3 %211 = OpLoad %9 
					                               f32_2 %212 = OpVectorShuffle %211 %211 0 1 
					                               f32_2 %213 = OpLoad vs_TEXCOORD0 
					                               f32_2 %214 = OpFAdd %212 %213 
					                               f32_3 %215 = OpLoad %9 
					                               f32_3 %216 = OpVectorShuffle %215 %214 3 4 2 
					                                              OpStore %9 %216 
					                 read_only Texture2D %219 = OpLoad %218 
					                             sampler %221 = OpLoad %220 
					          read_only Texture2DSampled %222 = OpSampledImage %219 %221 
					                               f32_3 %223 = OpLoad %9 
					                               f32_2 %224 = OpVectorShuffle %223 %223 0 1 
					                               f32_4 %225 = OpImageSampleImplicitLod %222 %224 
					                               f32_2 %226 = OpVectorShuffle %225 %225 0 1 
					                                              OpStore %217 %226 
					                               f32_2 %227 = OpLoad %217 
					                               f32_2 %228 = OpFNegate %227 
					                               f32_2 %229 = OpLoad vs_TEXCOORD0 
					                               f32_2 %230 = OpFAdd %228 %229 
					                               f32_3 %231 = OpLoad %9 
					                               f32_3 %232 = OpVectorShuffle %231 %230 3 4 2 
					                                              OpStore %9 %232 
					                 read_only Texture2D %234 = OpLoad %233 
					                             sampler %236 = OpLoad %235 
					          read_only Texture2DSampled %237 = OpSampledImage %234 %236 
					                               f32_3 %238 = OpLoad %9 
					                               f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                               f32_4 %240 = OpImageSampleImplicitLod %237 %239 
					                                 f32 %241 = OpCompositeExtract %240 0 
					                        Private f32* %242 = OpAccessChain %217 %54 
					                                              OpStore %242 %241 
					                                 f32 %244 = OpLoad %194 
					                        Private f32* %245 = OpAccessChain %217 %54 
					                                 f32 %246 = OpLoad %245 
					                                 f32 %247 = OpExtInst %1 40 %244 %246 
					                                              OpStore %243 %247 
					                                 f32 %248 = OpLoad %98 
					                                 f32 %249 = OpLoad %243 
					                                 f32 %250 = OpExtInst %1 37 %248 %249 
					                                              OpStore %98 %250 
					                                 f32 %251 = OpLoad %40 
					                                 f32 %252 = OpFNegate %251 
					                                 f32 %253 = OpLoad %98 
					                                 f32 %254 = OpFAdd %252 %253 
					                                              OpStore %98 %254 
					                      Uniform f32_3* %257 = OpAccessChain %13 %32 
					                               f32_3 %258 = OpLoad %257 
					                               f32_4 %259 = OpVectorShuffle %258 %258 2 2 2 2 
					                                 f32 %260 = OpLoad %98 
					                               f32_4 %261 = OpCompositeConstruct %260 %260 %260 %260 
					                               f32_4 %262 = OpFMul %259 %261 
					                                 f32 %263 = OpLoad %40 
					                               f32_4 %264 = OpCompositeConstruct %263 %263 %263 %263 
					                               f32_4 %265 = OpFAdd %262 %264 
					                                              OpStore %256 %265 
					                                              OpReturn
					                                              OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
						vec3 _TaaParams;
					};
					uniform  sampler2D _CoCTex;
					uniform  sampler2D _CameraMotionVectorsTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec4 u_xlat10_5;
					float u_xlat16_7;
					float u_xlat12;
					bool u_xlatb13;
					vec2 u_xlat14;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.yy * vec2(-0.0, -1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_TaaParams.xxyz.yz);
					    u_xlat10_1 = texture(_CoCTex, u_xlat1.xy);
					    u_xlat2 = (-_MainTex_TexelSize.xyyy) * vec4(1.0, 0.0, 0.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat10_3 = texture(_CoCTex, u_xlat2.xy);
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.zw);
					    u_xlatb18 = u_xlat10_3.x<u_xlat10_1.x;
					    u_xlat4.z = (u_xlatb18) ? u_xlat10_3.x : u_xlat10_1.x;
					    u_xlat16_7 = max(u_xlat10_1.x, u_xlat10_3.x);
					    u_xlat16_7 = max(u_xlat10_2.x, u_xlat16_7);
					    u_xlatb13 = u_xlat10_2.x<u_xlat4.z;
					    u_xlat0.z = u_xlat10_2.x;
					    u_xlat2.xy = _MainTex_TexelSize.xy * vec2(1.0, 0.0);
					    u_xlat14.xy = (-u_xlat2.xy);
					    u_xlat4.xy = mix(vec2(0.0, 0.0), u_xlat14.xy, vec2(bvec2(u_xlatb18)));
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat0.xyz : u_xlat4.xyz;
					    u_xlat3.xy = _MainTex_TexelSize.yy * vec2(0.0, 1.0);
					    u_xlat4 = _MainTex_TexelSize.yyxy * vec4(0.0, 1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat10_5 = texture(_CoCTex, u_xlat4.xy);
					    u_xlat10_4 = texture(_CoCTex, u_xlat4.zw);
					    u_xlatb18 = u_xlat10_5.x<u_xlat0.z;
					    u_xlat3.z = u_xlat10_5.x;
					    u_xlat16_7 = max(u_xlat16_7, u_xlat10_5.x);
					    u_xlat16_7 = max(u_xlat10_4.x, u_xlat16_7);
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlatb18 = u_xlat10_4.x<u_xlat0.z;
					    u_xlat12 = min(u_xlat10_4.x, u_xlat0.z);
					    u_xlat0.xy = (bool(u_xlatb18)) ? u_xlat2.xy : u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat10_2 = texture(_CameraMotionVectorsTexture, u_xlat0.xy);
					    u_xlat0.xy = (-u_xlat10_2.xy) + vs_TEXCOORD0.xy;
					    u_xlat10_2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = max(u_xlat12, u_xlat10_2.x);
					    u_xlat0.x = min(u_xlat16_7, u_xlat0.x);
					    u_xlat0.x = (-u_xlat10_1.x) + u_xlat0.x;
					    SV_Target0 = vec4(_TaaParams.z, _TaaParams.z, _TaaParams.z, _TaaParams.z) * u_xlat0.xxxx + u_xlat10_1.xxxx;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Downsample and Prefilter"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 708966
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _CoCTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					float u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat16_2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat10_4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat10_6;
					float u_xlat16_8;
					bool u_xlatb8;
					float u_xlat16_9;
					float u_xlat16_15;
					float u_xlat21;
					float u_xlat16_21;
					float u_xlat16_22;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1 = texture(_MainTex, u_xlat0.zw);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat16_21 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_21 = max(u_xlat16_21, u_xlat10_1.x);
					    u_xlat16_21 = u_xlat16_21 + 1.0;
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture(_CoCTex, u_xlat2.zw);
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.xy);
					    u_xlat16_22 = u_xlat10_2.x * 2.0 + -1.0;
					    u_xlat16_2 = u_xlat10_3.x * 2.0 + -1.0;
					    u_xlat16_21 = abs(u_xlat16_2) / u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat10_1.xyz;
					    u_xlat16_9 = max(u_xlat10_0.z, u_xlat10_0.y);
					    u_xlat16_9 = max(u_xlat10_0.x, u_xlat16_9);
					    u_xlat16_9 = u_xlat16_9 + 1.0;
					    u_xlat16_9 = abs(u_xlat16_22) / u_xlat16_9;
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(u_xlat16_9) + u_xlat16_1.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_9;
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat10_3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat16_1.x = max(u_xlat10_4.z, u_xlat10_4.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_4.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_6 = texture(_CoCTex, u_xlat5.xy);
					    u_xlat10_5 = texture(_CoCTex, u_xlat5.zw);
					    u_xlat16_8 = u_xlat10_5.x * 2.0 + -1.0;
					    u_xlat16_15 = u_xlat10_6.x * 2.0 + -1.0;
					    u_xlat16_1.x = abs(u_xlat16_15) / u_xlat16_1.x;
					    u_xlat16_15 = min(u_xlat16_8, u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat10_4.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_1.x;
					    u_xlat16_1.x = max(u_xlat10_3.z, u_xlat10_3.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_3.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = abs(u_xlat16_8) / u_xlat16_1.x;
					    u_xlat16_0.xyz = u_xlat10_3.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_1.x;
					    u_xlat16_21 = max(u_xlat16_21, 9.99999975e-06);
					    u_xlat16_0.xyz = u_xlat16_0.xyz / vec3(u_xlat16_21);
					    u_xlat16_21 = min(u_xlat16_15, u_xlat16_2);
					    u_xlat16_1.x = max(u_xlat16_15, u_xlat16_2);
					    u_xlat1 = max(u_xlat16_1.x, u_xlat16_22);
					    u_xlat21 = min(u_xlat16_21, u_xlat16_22);
					    u_xlatb8 = u_xlat1<(-u_xlat21);
					    u_xlat21 = (u_xlatb8) ? u_xlat21 : u_xlat1;
					    u_xlat21 = u_xlat21 * _MaxCoC;
					    u_xlat1 = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat1 = abs(u_xlat21) * u_xlat1;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    SV_Target0.w = u_xlat21;
					    u_xlat21 = u_xlat1 * -2.0 + 3.0;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat21 = u_xlat21 * u_xlat1;
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat16_0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 340
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %26 %79 %337 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpMemberDecorate %10 0 Offset 10 
					                                             OpMemberDecorate %10 1 Offset 10 
					                                             OpDecorate %10 Block 
					                                             OpDecorate %12 DescriptorSet 12 
					                                             OpDecorate %12 Binding 12 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 26 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %32 RelaxedPrecision 
					                                             OpDecorate %35 RelaxedPrecision 
					                                             OpDecorate %35 DescriptorSet 35 
					                                             OpDecorate %35 Binding 35 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %39 DescriptorSet 39 
					                                             OpDecorate %39 Binding 39 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %47 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %67 RelaxedPrecision 
					                                             OpDecorate %68 RelaxedPrecision 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 79 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %84 DescriptorSet 84 
					                                             OpDecorate %84 Binding 84 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %86 DescriptorSet 86 
					                                             OpDecorate %86 Binding 86 
					                                             OpDecorate %87 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %111 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %113 RelaxedPrecision 
					                                             OpDecorate %114 RelaxedPrecision 
					                                             OpDecorate %115 RelaxedPrecision 
					                                             OpDecorate %116 RelaxedPrecision 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %118 RelaxedPrecision 
					                                             OpDecorate %119 RelaxedPrecision 
					                                             OpDecorate %120 RelaxedPrecision 
					                                             OpDecorate %122 RelaxedPrecision 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %125 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %128 RelaxedPrecision 
					                                             OpDecorate %129 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate %132 RelaxedPrecision 
					                                             OpDecorate %133 RelaxedPrecision 
					                                             OpDecorate %134 RelaxedPrecision 
					                                             OpDecorate %135 RelaxedPrecision 
					                                             OpDecorate %136 RelaxedPrecision 
					                                             OpDecorate %137 RelaxedPrecision 
					                                             OpDecorate %138 RelaxedPrecision 
					                                             OpDecorate %139 RelaxedPrecision 
					                                             OpDecorate %140 RelaxedPrecision 
					                                             OpDecorate %141 RelaxedPrecision 
					                                             OpDecorate %142 RelaxedPrecision 
					                                             OpDecorate %143 RelaxedPrecision 
					                                             OpDecorate %144 RelaxedPrecision 
					                                             OpDecorate %145 RelaxedPrecision 
					                                             OpDecorate %153 RelaxedPrecision 
					                                             OpDecorate %154 RelaxedPrecision 
					                                             OpDecorate %156 RelaxedPrecision 
					                                             OpDecorate %157 RelaxedPrecision 
					                                             OpDecorate %158 RelaxedPrecision 
					                                             OpDecorate %163 RelaxedPrecision 
					                                             OpDecorate %164 RelaxedPrecision 
					                                             OpDecorate %165 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %171 RelaxedPrecision 
					                                             OpDecorate %172 RelaxedPrecision 
					                                             OpDecorate %174 RelaxedPrecision 
					                                             OpDecorate %176 RelaxedPrecision 
					                                             OpDecorate %177 RelaxedPrecision 
					                                             OpDecorate %179 RelaxedPrecision 
					                                             OpDecorate %180 RelaxedPrecision 
					                                             OpDecorate %181 RelaxedPrecision 
					                                             OpDecorate %182 RelaxedPrecision 
					                                             OpDecorate %183 RelaxedPrecision 
					                                             OpDecorate %188 RelaxedPrecision 
					                                             OpDecorate %189 RelaxedPrecision 
					                                             OpDecorate %191 RelaxedPrecision 
					                                             OpDecorate %192 RelaxedPrecision 
					                                             OpDecorate %193 RelaxedPrecision 
					                                             OpDecorate %198 RelaxedPrecision 
					                                             OpDecorate %199 RelaxedPrecision 
					                                             OpDecorate %200 RelaxedPrecision 
					                                             OpDecorate %201 RelaxedPrecision 
					                                             OpDecorate %206 RelaxedPrecision 
					                                             OpDecorate %207 RelaxedPrecision 
					                                             OpDecorate %208 RelaxedPrecision 
					                                             OpDecorate %209 RelaxedPrecision 
					                                             OpDecorate %210 RelaxedPrecision 
					                                             OpDecorate %211 RelaxedPrecision 
					                                             OpDecorate %212 RelaxedPrecision 
					                                             OpDecorate %213 RelaxedPrecision 
					                                             OpDecorate %214 RelaxedPrecision 
					                                             OpDecorate %215 RelaxedPrecision 
					                                             OpDecorate %216 RelaxedPrecision 
					                                             OpDecorate %217 RelaxedPrecision 
					                                             OpDecorate %218 RelaxedPrecision 
					                                             OpDecorate %219 RelaxedPrecision 
					                                             OpDecorate %220 RelaxedPrecision 
					                                             OpDecorate %221 RelaxedPrecision 
					                                             OpDecorate %222 RelaxedPrecision 
					                                             OpDecorate %223 RelaxedPrecision 
					                                             OpDecorate %224 RelaxedPrecision 
					                                             OpDecorate %225 RelaxedPrecision 
					                                             OpDecorate %226 RelaxedPrecision 
					                                             OpDecorate %227 RelaxedPrecision 
					                                             OpDecorate %228 RelaxedPrecision 
					                                             OpDecorate %230 RelaxedPrecision 
					                                             OpDecorate %231 RelaxedPrecision 
					                                             OpDecorate %232 RelaxedPrecision 
					                                             OpDecorate %235 RelaxedPrecision 
					                                             OpDecorate %237 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %240 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %242 RelaxedPrecision 
					                                             OpDecorate %243 RelaxedPrecision 
					                                             OpDecorate %244 RelaxedPrecision 
					                                             OpDecorate %245 RelaxedPrecision 
					                                             OpDecorate %246 RelaxedPrecision 
					                                             OpDecorate %247 RelaxedPrecision 
					                                             OpDecorate %248 RelaxedPrecision 
					                                             OpDecorate %249 RelaxedPrecision 
					                                             OpDecorate %250 RelaxedPrecision 
					                                             OpDecorate %251 RelaxedPrecision 
					                                             OpDecorate %252 RelaxedPrecision 
					                                             OpDecorate %253 RelaxedPrecision 
					                                             OpDecorate %254 RelaxedPrecision 
					                                             OpDecorate %256 RelaxedPrecision 
					                                             OpDecorate %257 RelaxedPrecision 
					                                             OpDecorate %258 RelaxedPrecision 
					                                             OpDecorate %261 RelaxedPrecision 
					                                             OpDecorate %263 RelaxedPrecision 
					                                             OpDecorate %265 RelaxedPrecision 
					                                             OpDecorate %266 RelaxedPrecision 
					                                             OpDecorate %267 RelaxedPrecision 
					                                             OpDecorate %268 RelaxedPrecision 
					                                             OpDecorate %269 RelaxedPrecision 
					                                             OpDecorate %270 RelaxedPrecision 
					                                             OpDecorate %271 RelaxedPrecision 
					                                             OpDecorate %272 RelaxedPrecision 
					                                             OpDecorate %273 RelaxedPrecision 
					                                             OpDecorate %274 RelaxedPrecision 
					                                             OpDecorate %275 RelaxedPrecision 
					                                             OpDecorate %276 RelaxedPrecision 
					                                             OpDecorate %277 RelaxedPrecision 
					                                             OpDecorate %278 RelaxedPrecision 
					                                             OpDecorate %279 RelaxedPrecision 
					                                             OpDecorate %280 RelaxedPrecision 
					                                             OpDecorate %284 RelaxedPrecision 
					                                             OpDecorate %285 RelaxedPrecision 
					                                             OpDecorate %286 RelaxedPrecision 
					                                             OpDecorate %289 RelaxedPrecision 
					                                             OpDecorate %290 RelaxedPrecision 
					                                             OpDecorate %293 RelaxedPrecision 
					                                             OpDecorate %331 RelaxedPrecision 
					                                             OpDecorate %332 RelaxedPrecision 
					                                             OpDecorate %333 RelaxedPrecision 
					                                             OpDecorate %337 RelaxedPrecision 
					                                             OpDecorate %337 Location 337 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypeStruct %7 %6 
					                                     %11 = OpTypePointer Uniform %10 
					       Uniform struct {f32_4; f32;}* %12 = OpVariable Uniform 
					                                     %13 = OpTypeInt 32 1 
					                                 i32 %14 = OpConstant 0 
					                                     %15 = OpTypePointer Uniform %7 
					                                 f32 %20 = OpConstant 3,674022E-40 
					                                 f32 %21 = OpConstant 3,674022E-40 
					                               f32_4 %22 = OpConstantComposite %20 %20 %21 %20 
					                                     %24 = OpTypeVector %6 2 
					                                     %25 = OpTypePointer Input %24 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %30 = OpTypeVector %6 3 
					                                     %31 = OpTypePointer Private %30 
					                      Private f32_3* %32 = OpVariable Private 
					                                     %33 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %34 = OpTypePointer UniformConstant %33 
					UniformConstant read_only Texture2D* %35 = OpVariable UniformConstant 
					                                     %37 = OpTypeSampler 
					                                     %38 = OpTypePointer UniformConstant %37 
					            UniformConstant sampler* %39 = OpVariable UniformConstant 
					                                     %41 = OpTypeSampledImage %33 
					                      Private f32_3* %47 = OpVariable Private 
					                                     %55 = OpTypePointer Private %6 
					                        Private f32* %56 = OpVariable Private 
					                                     %57 = OpTypeInt 32 0 
					                                 u32 %58 = OpConstant 2 
					                                 u32 %61 = OpConstant 1 
					                                 u32 %65 = OpConstant 0 
					                                 f32 %71 = OpConstant 3,674022E-40 
					                      Private f32_4* %73 = OpVariable Private 
					               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                        Private f32* %83 = OpVariable Private 
					UniformConstant read_only Texture2D* %84 = OpVariable UniformConstant 
					            UniformConstant sampler* %86 = OpVariable UniformConstant 
					                        Private f32* %93 = OpVariable Private 
					                       Private f32* %101 = OpVariable Private 
					                                f32 %103 = OpConstant 3,674022E-40 
					                                f32 %105 = OpConstant 3,674022E-40 
					                       Private f32* %107 = OpVariable Private 
					                     Private f32_3* %115 = OpVariable Private 
					                       Private f32* %120 = OpVariable Private 
					                     Private f32_3* %136 = OpVariable Private 
					                     Private f32_4* %147 = OpVariable Private 
					                              f32_4 %151 = OpConstantComposite %21 %20 %20 %20 
					                     Private f32_3* %156 = OpVariable Private 
					                     Private f32_3* %164 = OpVariable Private 
					                       Private f32* %172 = OpVariable Private 
					                       Private f32* %191 = OpVariable Private 
					                       Private f32* %199 = OpVariable Private 
					                       Private f32* %207 = OpVariable Private 
					                       Private f32* %211 = OpVariable Private 
					                       Private f32* %219 = OpVariable Private 
					                                f32 %262 = OpConstant 3,674022E-40 
					                                    %281 = OpTypeBool 
					                                    %282 = OpTypePointer Private %281 
					                      Private bool* %283 = OpVariable Private 
					                     Private f32_4* %292 = OpVariable Private 
					                                i32 %294 = OpConstant 1 
					                                    %295 = OpTypePointer Uniform %6 
					                                u32 %299 = OpConstant 3 
					                       Private f32* %301 = OpVariable Private 
					                                f32 %315 = OpConstant 3,674022E-40 
					                                f32 %318 = OpConstant 3,674022E-40 
					                                f32 %320 = OpConstant 3,674022E-40 
					                                    %336 = OpTypePointer Output %7 
					                      Output f32_4* %337 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                      Uniform f32_4* %16 = OpAccessChain %12 %14 
					                               f32_4 %17 = OpLoad %16 
					                               f32_4 %18 = OpVectorShuffle %17 %17 0 1 0 1 
					                               f32_4 %19 = OpFNegate %18 
					                               f32_4 %23 = OpFMul %19 %22 
					                               f32_2 %27 = OpLoad vs_TEXCOORD0 
					                               f32_4 %28 = OpVectorShuffle %27 %27 0 1 0 1 
					                               f32_4 %29 = OpFAdd %23 %28 
					                                             OpStore %9 %29 
					                 read_only Texture2D %36 = OpLoad %35 
					                             sampler %40 = OpLoad %39 
					          read_only Texture2DSampled %42 = OpSampledImage %36 %40 
					                               f32_4 %43 = OpLoad %9 
					                               f32_2 %44 = OpVectorShuffle %43 %43 2 3 
					                               f32_4 %45 = OpImageSampleImplicitLod %42 %44 
					                               f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
					                                             OpStore %32 %46 
					                 read_only Texture2D %48 = OpLoad %35 
					                             sampler %49 = OpLoad %39 
					          read_only Texture2DSampled %50 = OpSampledImage %48 %49 
					                               f32_4 %51 = OpLoad %9 
					                               f32_2 %52 = OpVectorShuffle %51 %51 0 1 
					                               f32_4 %53 = OpImageSampleImplicitLod %50 %52 
					                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                             OpStore %47 %54 
					                        Private f32* %59 = OpAccessChain %32 %58 
					                                 f32 %60 = OpLoad %59 
					                        Private f32* %62 = OpAccessChain %32 %61 
					                                 f32 %63 = OpLoad %62 
					                                 f32 %64 = OpExtInst %1 40 %60 %63 
					                                             OpStore %56 %64 
					                        Private f32* %66 = OpAccessChain %32 %65 
					                                 f32 %67 = OpLoad %66 
					                                 f32 %68 = OpLoad %56 
					                                 f32 %69 = OpExtInst %1 40 %67 %68 
					                                             OpStore %56 %69 
					                                 f32 %70 = OpLoad %56 
					                                 f32 %72 = OpFAdd %70 %71 
					                                             OpStore %56 %72 
					                      Uniform f32_4* %74 = OpAccessChain %12 %14 
					                               f32_4 %75 = OpLoad %74 
					                               f32_4 %76 = OpVectorShuffle %75 %75 0 1 0 1 
					                               f32_4 %77 = OpFNegate %76 
					                               f32_4 %78 = OpFMul %77 %22 
					                               f32_2 %80 = OpLoad vs_TEXCOORD1 
					                               f32_4 %81 = OpVectorShuffle %80 %80 0 1 0 1 
					                               f32_4 %82 = OpFAdd %78 %81 
					                                             OpStore %73 %82 
					                 read_only Texture2D %85 = OpLoad %84 
					                             sampler %87 = OpLoad %86 
					          read_only Texture2DSampled %88 = OpSampledImage %85 %87 
					                               f32_4 %89 = OpLoad %73 
					                               f32_2 %90 = OpVectorShuffle %89 %89 2 3 
					                               f32_4 %91 = OpImageSampleImplicitLod %88 %90 
					                                 f32 %92 = OpCompositeExtract %91 0 
					                                             OpStore %83 %92 
					                 read_only Texture2D %94 = OpLoad %84 
					                             sampler %95 = OpLoad %86 
					          read_only Texture2DSampled %96 = OpSampledImage %94 %95 
					                               f32_4 %97 = OpLoad %73 
					                               f32_2 %98 = OpVectorShuffle %97 %97 0 1 
					                               f32_4 %99 = OpImageSampleImplicitLod %96 %98 
					                                f32 %100 = OpCompositeExtract %99 0 
					                                             OpStore %93 %100 
					                                f32 %102 = OpLoad %93 
					                                f32 %104 = OpFMul %102 %103 
					                                f32 %106 = OpFAdd %104 %105 
					                                             OpStore %101 %106 
					                                f32 %108 = OpLoad %83 
					                                f32 %109 = OpFMul %108 %103 
					                                f32 %110 = OpFAdd %109 %105 
					                                             OpStore %107 %110 
					                                f32 %111 = OpLoad %107 
					                                f32 %112 = OpExtInst %1 4 %111 
					                                f32 %113 = OpLoad %56 
					                                f32 %114 = OpFDiv %112 %113 
					                                             OpStore %56 %114 
					                              f32_3 %116 = OpLoad %32 
					                                f32 %117 = OpLoad %56 
					                              f32_3 %118 = OpCompositeConstruct %117 %117 %117 
					                              f32_3 %119 = OpFMul %116 %118 
					                                             OpStore %115 %119 
					                       Private f32* %121 = OpAccessChain %47 %58 
					                                f32 %122 = OpLoad %121 
					                       Private f32* %123 = OpAccessChain %47 %61 
					                                f32 %124 = OpLoad %123 
					                                f32 %125 = OpExtInst %1 40 %122 %124 
					                                             OpStore %120 %125 
					                       Private f32* %126 = OpAccessChain %47 %65 
					                                f32 %127 = OpLoad %126 
					                                f32 %128 = OpLoad %120 
					                                f32 %129 = OpExtInst %1 40 %127 %128 
					                                             OpStore %120 %129 
					                                f32 %130 = OpLoad %120 
					                                f32 %131 = OpFAdd %130 %71 
					                                             OpStore %120 %131 
					                                f32 %132 = OpLoad %101 
					                                f32 %133 = OpExtInst %1 4 %132 
					                                f32 %134 = OpLoad %120 
					                                f32 %135 = OpFDiv %133 %134 
					                                             OpStore %120 %135 
					                              f32_3 %137 = OpLoad %47 
					                                f32 %138 = OpLoad %120 
					                              f32_3 %139 = OpCompositeConstruct %138 %138 %138 
					                              f32_3 %140 = OpFMul %137 %139 
					                              f32_3 %141 = OpLoad %115 
					                              f32_3 %142 = OpFAdd %140 %141 
					                                             OpStore %136 %142 
					                                f32 %143 = OpLoad %56 
					                                f32 %144 = OpLoad %120 
					                                f32 %145 = OpFAdd %143 %144 
					                       Private f32* %146 = OpAccessChain %115 %65 
					                                             OpStore %146 %145 
					                     Uniform f32_4* %148 = OpAccessChain %12 %14 
					                              f32_4 %149 = OpLoad %148 
					                              f32_4 %150 = OpVectorShuffle %149 %149 0 1 0 1 
					                              f32_4 %152 = OpFMul %150 %151 
					                              f32_2 %153 = OpLoad vs_TEXCOORD0 
					                              f32_4 %154 = OpVectorShuffle %153 %153 0 1 0 1 
					                              f32_4 %155 = OpFAdd %152 %154 
					                                             OpStore %147 %155 
					                read_only Texture2D %157 = OpLoad %35 
					                            sampler %158 = OpLoad %39 
					         read_only Texture2DSampled %159 = OpSampledImage %157 %158 
					                              f32_4 %160 = OpLoad %147 
					                              f32_2 %161 = OpVectorShuffle %160 %160 0 1 
					                              f32_4 %162 = OpImageSampleImplicitLod %159 %161 
					                              f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
					                                             OpStore %156 %163 
					                read_only Texture2D %165 = OpLoad %35 
					                            sampler %166 = OpLoad %39 
					         read_only Texture2DSampled %167 = OpSampledImage %165 %166 
					                              f32_4 %168 = OpLoad %147 
					                              f32_2 %169 = OpVectorShuffle %168 %168 2 3 
					                              f32_4 %170 = OpImageSampleImplicitLod %167 %169 
					                              f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                             OpStore %164 %171 
					                       Private f32* %173 = OpAccessChain %156 %58 
					                                f32 %174 = OpLoad %173 
					                       Private f32* %175 = OpAccessChain %156 %61 
					                                f32 %176 = OpLoad %175 
					                                f32 %177 = OpExtInst %1 40 %174 %176 
					                                             OpStore %172 %177 
					                       Private f32* %178 = OpAccessChain %156 %65 
					                                f32 %179 = OpLoad %178 
					                                f32 %180 = OpLoad %172 
					                                f32 %181 = OpExtInst %1 40 %179 %180 
					                                             OpStore %172 %181 
					                                f32 %182 = OpLoad %172 
					                                f32 %183 = OpFAdd %182 %71 
					                                             OpStore %172 %183 
					                     Uniform f32_4* %184 = OpAccessChain %12 %14 
					                              f32_4 %185 = OpLoad %184 
					                              f32_4 %186 = OpVectorShuffle %185 %185 0 1 0 1 
					                              f32_4 %187 = OpFMul %186 %151 
					                              f32_2 %188 = OpLoad vs_TEXCOORD1 
					                              f32_4 %189 = OpVectorShuffle %188 %188 0 1 0 1 
					                              f32_4 %190 = OpFAdd %187 %189 
					                                             OpStore %147 %190 
					                read_only Texture2D %192 = OpLoad %84 
					                            sampler %193 = OpLoad %86 
					         read_only Texture2DSampled %194 = OpSampledImage %192 %193 
					                              f32_4 %195 = OpLoad %147 
					                              f32_2 %196 = OpVectorShuffle %195 %195 0 1 
					                              f32_4 %197 = OpImageSampleImplicitLod %194 %196 
					                                f32 %198 = OpCompositeExtract %197 0 
					                                             OpStore %191 %198 
					                read_only Texture2D %200 = OpLoad %84 
					                            sampler %201 = OpLoad %86 
					         read_only Texture2DSampled %202 = OpSampledImage %200 %201 
					                              f32_4 %203 = OpLoad %147 
					                              f32_2 %204 = OpVectorShuffle %203 %203 2 3 
					                              f32_4 %205 = OpImageSampleImplicitLod %202 %204 
					                                f32 %206 = OpCompositeExtract %205 0 
					                                             OpStore %199 %206 
					                                f32 %208 = OpLoad %199 
					                                f32 %209 = OpFMul %208 %103 
					                                f32 %210 = OpFAdd %209 %105 
					                                             OpStore %207 %210 
					                                f32 %212 = OpLoad %191 
					                                f32 %213 = OpFMul %212 %103 
					                                f32 %214 = OpFAdd %213 %105 
					                                             OpStore %211 %214 
					                                f32 %215 = OpLoad %211 
					                                f32 %216 = OpExtInst %1 4 %215 
					                                f32 %217 = OpLoad %172 
					                                f32 %218 = OpFDiv %216 %217 
					                                             OpStore %172 %218 
					                                f32 %220 = OpLoad %207 
					                                f32 %221 = OpLoad %211 
					                                f32 %222 = OpExtInst %1 37 %220 %221 
					                                             OpStore %219 %222 
					                              f32_3 %223 = OpLoad %156 
					                                f32 %224 = OpLoad %172 
					                              f32_3 %225 = OpCompositeConstruct %224 %224 %224 
					                              f32_3 %226 = OpFMul %223 %225 
					                              f32_3 %227 = OpLoad %136 
					                              f32_3 %228 = OpFAdd %226 %227 
					                                             OpStore %136 %228 
					                       Private f32* %229 = OpAccessChain %115 %65 
					                                f32 %230 = OpLoad %229 
					                                f32 %231 = OpLoad %172 
					                                f32 %232 = OpFAdd %230 %231 
					                       Private f32* %233 = OpAccessChain %115 %65 
					                                             OpStore %233 %232 
					                       Private f32* %234 = OpAccessChain %164 %58 
					                                f32 %235 = OpLoad %234 
					                       Private f32* %236 = OpAccessChain %164 %61 
					                                f32 %237 = OpLoad %236 
					                                f32 %238 = OpExtInst %1 40 %235 %237 
					                                             OpStore %172 %238 
					                       Private f32* %239 = OpAccessChain %164 %65 
					                                f32 %240 = OpLoad %239 
					                                f32 %241 = OpLoad %172 
					                                f32 %242 = OpExtInst %1 40 %240 %241 
					                                             OpStore %172 %242 
					                                f32 %243 = OpLoad %172 
					                                f32 %244 = OpFAdd %243 %71 
					                                             OpStore %172 %244 
					                                f32 %245 = OpLoad %207 
					                                f32 %246 = OpExtInst %1 4 %245 
					                                f32 %247 = OpLoad %172 
					                                f32 %248 = OpFDiv %246 %247 
					                                             OpStore %172 %248 
					                              f32_3 %249 = OpLoad %164 
					                                f32 %250 = OpLoad %172 
					                              f32_3 %251 = OpCompositeConstruct %250 %250 %250 
					                              f32_3 %252 = OpFMul %249 %251 
					                              f32_3 %253 = OpLoad %136 
					                              f32_3 %254 = OpFAdd %252 %253 
					                                             OpStore %136 %254 
					                       Private f32* %255 = OpAccessChain %115 %65 
					                                f32 %256 = OpLoad %255 
					                                f32 %257 = OpLoad %172 
					                                f32 %258 = OpFAdd %256 %257 
					                       Private f32* %259 = OpAccessChain %115 %65 
					                                             OpStore %259 %258 
					                       Private f32* %260 = OpAccessChain %115 %65 
					                                f32 %261 = OpLoad %260 
					                                f32 %263 = OpExtInst %1 40 %261 %262 
					                       Private f32* %264 = OpAccessChain %115 %65 
					                                             OpStore %264 %263 
					                              f32_3 %265 = OpLoad %136 
					                              f32_3 %266 = OpLoad %115 
					                              f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
					                              f32_3 %268 = OpFDiv %265 %267 
					                                             OpStore %136 %268 
					                                f32 %269 = OpLoad %107 
					                                f32 %270 = OpLoad %219 
					                                f32 %271 = OpExtInst %1 37 %269 %270 
					                                             OpStore %172 %271 
					                                f32 %272 = OpLoad %107 
					                                f32 %273 = OpLoad %219 
					                                f32 %274 = OpExtInst %1 40 %272 %273 
					                                             OpStore %219 %274 
					                                f32 %275 = OpLoad %101 
					                                f32 %276 = OpLoad %219 
					                                f32 %277 = OpExtInst %1 40 %275 %276 
					                                             OpStore %219 %277 
					                                f32 %278 = OpLoad %101 
					                                f32 %279 = OpLoad %172 
					                                f32 %280 = OpExtInst %1 37 %278 %279 
					                                             OpStore %172 %280 
					                                f32 %284 = OpLoad %219 
					                                f32 %285 = OpLoad %172 
					                                f32 %286 = OpFNegate %285 
					                               bool %287 = OpFOrdLessThan %284 %286 
					                                             OpStore %283 %287 
					                               bool %288 = OpLoad %283 
					                                f32 %289 = OpLoad %172 
					                                f32 %290 = OpLoad %219 
					                                f32 %291 = OpSelect %288 %289 %290 
					                                             OpStore %172 %291 
					                                f32 %293 = OpLoad %172 
					                       Uniform f32* %296 = OpAccessChain %12 %294 
					                                f32 %297 = OpLoad %296 
					                                f32 %298 = OpFMul %293 %297 
					                       Private f32* %300 = OpAccessChain %292 %299 
					                                             OpStore %300 %298 
					                       Uniform f32* %302 = OpAccessChain %12 %14 %61 
					                                f32 %303 = OpLoad %302 
					                       Uniform f32* %304 = OpAccessChain %12 %14 %61 
					                                f32 %305 = OpLoad %304 
					                                f32 %306 = OpFAdd %303 %305 
					                                             OpStore %301 %306 
					                                f32 %307 = OpLoad %301 
					                                f32 %308 = OpFDiv %71 %307 
					                                             OpStore %301 %308 
					                                f32 %309 = OpLoad %301 
					                       Private f32* %310 = OpAccessChain %292 %299 
					                                f32 %311 = OpLoad %310 
					                                f32 %312 = OpExtInst %1 4 %311 
					                                f32 %313 = OpFMul %309 %312 
					                                             OpStore %301 %313 
					                                f32 %314 = OpLoad %301 
					                                f32 %316 = OpExtInst %1 43 %314 %315 %71 
					                                             OpStore %301 %316 
					                                f32 %317 = OpLoad %301 
					                                f32 %319 = OpFMul %317 %318 
					                                f32 %321 = OpFAdd %319 %320 
					                       Private f32* %322 = OpAccessChain %73 %65 
					                                             OpStore %322 %321 
					                                f32 %323 = OpLoad %301 
					                                f32 %324 = OpLoad %301 
					                                f32 %325 = OpFMul %323 %324 
					                                             OpStore %301 %325 
					                                f32 %326 = OpLoad %301 
					                       Private f32* %327 = OpAccessChain %73 %65 
					                                f32 %328 = OpLoad %327 
					                                f32 %329 = OpFMul %326 %328 
					                                             OpStore %301 %329 
					                                f32 %330 = OpLoad %301 
					                              f32_3 %331 = OpCompositeConstruct %330 %330 %330 
					                              f32_3 %332 = OpLoad %136 
					                              f32_3 %333 = OpFMul %331 %332 
					                              f32_4 %334 = OpLoad %292 
					                              f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
					                                             OpStore %292 %335 
					                              f32_4 %338 = OpLoad %292 
					                                             OpStore %337 %338 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _CoCTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat16_2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat10_4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat10_6;
					float u_xlat16_8;
					bool u_xlatb8;
					float u_xlat16_9;
					float u_xlat16_15;
					float u_xlat21;
					float u_xlat16_21;
					float u_xlat16_22;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1 = texture(_MainTex, u_xlat0.zw);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat16_21 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_21 = max(u_xlat16_21, u_xlat10_1.x);
					    u_xlat16_21 = u_xlat16_21 + 1.0;
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture(_CoCTex, u_xlat2.zw);
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.xy);
					    u_xlat16_22 = u_xlat10_2.x * 2.0 + -1.0;
					    u_xlat16_2 = u_xlat10_3.x * 2.0 + -1.0;
					    u_xlat16_21 = abs(u_xlat16_2) / u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat10_1.xyz;
					    u_xlat16_9 = max(u_xlat10_0.z, u_xlat10_0.y);
					    u_xlat16_9 = max(u_xlat10_0.x, u_xlat16_9);
					    u_xlat16_9 = u_xlat16_9 + 1.0;
					    u_xlat16_9 = abs(u_xlat16_22) / u_xlat16_9;
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(u_xlat16_9) + u_xlat16_1.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_9;
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat10_3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat16_1.x = max(u_xlat10_4.z, u_xlat10_4.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_4.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_6 = texture(_CoCTex, u_xlat5.xy);
					    u_xlat10_5 = texture(_CoCTex, u_xlat5.zw);
					    u_xlat16_8 = u_xlat10_5.x * 2.0 + -1.0;
					    u_xlat16_15 = u_xlat10_6.x * 2.0 + -1.0;
					    u_xlat16_1.x = abs(u_xlat16_15) / u_xlat16_1.x;
					    u_xlat16_15 = min(u_xlat16_8, u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat10_4.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_1.x;
					    u_xlat16_1.x = max(u_xlat10_3.z, u_xlat10_3.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_3.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = abs(u_xlat16_8) / u_xlat16_1.x;
					    u_xlat16_0.xyz = u_xlat10_3.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_1.x;
					    u_xlat16_21 = max(u_xlat16_21, 9.99999975e-06);
					    u_xlat16_0.xyz = u_xlat16_0.xyz / vec3(u_xlat16_21);
					    u_xlat16_21 = min(u_xlat16_15, u_xlat16_2);
					    u_xlat16_1.x = max(u_xlat16_15, u_xlat16_2);
					    u_xlat1.x = max(u_xlat16_1.x, u_xlat16_22);
					    u_xlat21 = min(u_xlat16_21, u_xlat16_22);
					    u_xlatb8 = u_xlat1.x<(-u_xlat21);
					    u_xlat21 = (u_xlatb8) ? u_xlat21 : u_xlat1.x;
					    u_xlat21 = u_xlat21 * _MaxCoC;
					    u_xlat1.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    SV_Target0.w = u_xlat21;
					    u_xlat21 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat16_0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 367
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %26 %79 %364 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpMemberDecorate %10 0 Offset 10 
					                                             OpMemberDecorate %10 1 Offset 10 
					                                             OpDecorate %10 Block 
					                                             OpDecorate %12 DescriptorSet 12 
					                                             OpDecorate %12 Binding 12 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 26 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %32 RelaxedPrecision 
					                                             OpDecorate %35 RelaxedPrecision 
					                                             OpDecorate %35 DescriptorSet 35 
					                                             OpDecorate %35 Binding 35 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %39 DescriptorSet 39 
					                                             OpDecorate %39 Binding 39 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %47 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %67 RelaxedPrecision 
					                                             OpDecorate %68 RelaxedPrecision 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 79 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %84 DescriptorSet 84 
					                                             OpDecorate %84 Binding 84 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %86 DescriptorSet 86 
					                                             OpDecorate %86 Binding 86 
					                                             OpDecorate %87 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %111 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %113 RelaxedPrecision 
					                                             OpDecorate %114 RelaxedPrecision 
					                                             OpDecorate %115 RelaxedPrecision 
					                                             OpDecorate %116 RelaxedPrecision 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %118 RelaxedPrecision 
					                                             OpDecorate %119 RelaxedPrecision 
					                                             OpDecorate %120 RelaxedPrecision 
					                                             OpDecorate %122 RelaxedPrecision 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %125 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %128 RelaxedPrecision 
					                                             OpDecorate %129 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate %132 RelaxedPrecision 
					                                             OpDecorate %133 RelaxedPrecision 
					                                             OpDecorate %134 RelaxedPrecision 
					                                             OpDecorate %135 RelaxedPrecision 
					                                             OpDecorate %136 RelaxedPrecision 
					                                             OpDecorate %137 RelaxedPrecision 
					                                             OpDecorate %138 RelaxedPrecision 
					                                             OpDecorate %139 RelaxedPrecision 
					                                             OpDecorate %140 RelaxedPrecision 
					                                             OpDecorate %141 RelaxedPrecision 
					                                             OpDecorate %142 RelaxedPrecision 
					                                             OpDecorate %143 RelaxedPrecision 
					                                             OpDecorate %144 RelaxedPrecision 
					                                             OpDecorate %145 RelaxedPrecision 
					                                             OpDecorate %153 RelaxedPrecision 
					                                             OpDecorate %154 RelaxedPrecision 
					                                             OpDecorate %156 RelaxedPrecision 
					                                             OpDecorate %157 RelaxedPrecision 
					                                             OpDecorate %158 RelaxedPrecision 
					                                             OpDecorate %163 RelaxedPrecision 
					                                             OpDecorate %164 RelaxedPrecision 
					                                             OpDecorate %165 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %171 RelaxedPrecision 
					                                             OpDecorate %172 RelaxedPrecision 
					                                             OpDecorate %174 RelaxedPrecision 
					                                             OpDecorate %176 RelaxedPrecision 
					                                             OpDecorate %177 RelaxedPrecision 
					                                             OpDecorate %179 RelaxedPrecision 
					                                             OpDecorate %180 RelaxedPrecision 
					                                             OpDecorate %181 RelaxedPrecision 
					                                             OpDecorate %182 RelaxedPrecision 
					                                             OpDecorate %183 RelaxedPrecision 
					                                             OpDecorate %188 RelaxedPrecision 
					                                             OpDecorate %189 RelaxedPrecision 
					                                             OpDecorate %191 RelaxedPrecision 
					                                             OpDecorate %192 RelaxedPrecision 
					                                             OpDecorate %193 RelaxedPrecision 
					                                             OpDecorate %198 RelaxedPrecision 
					                                             OpDecorate %199 RelaxedPrecision 
					                                             OpDecorate %200 RelaxedPrecision 
					                                             OpDecorate %201 RelaxedPrecision 
					                                             OpDecorate %206 RelaxedPrecision 
					                                             OpDecorate %207 RelaxedPrecision 
					                                             OpDecorate %208 RelaxedPrecision 
					                                             OpDecorate %209 RelaxedPrecision 
					                                             OpDecorate %210 RelaxedPrecision 
					                                             OpDecorate %211 RelaxedPrecision 
					                                             OpDecorate %212 RelaxedPrecision 
					                                             OpDecorate %213 RelaxedPrecision 
					                                             OpDecorate %214 RelaxedPrecision 
					                                             OpDecorate %215 RelaxedPrecision 
					                                             OpDecorate %216 RelaxedPrecision 
					                                             OpDecorate %217 RelaxedPrecision 
					                                             OpDecorate %218 RelaxedPrecision 
					                                             OpDecorate %219 RelaxedPrecision 
					                                             OpDecorate %220 RelaxedPrecision 
					                                             OpDecorate %221 RelaxedPrecision 
					                                             OpDecorate %222 RelaxedPrecision 
					                                             OpDecorate %223 RelaxedPrecision 
					                                             OpDecorate %224 RelaxedPrecision 
					                                             OpDecorate %225 RelaxedPrecision 
					                                             OpDecorate %226 RelaxedPrecision 
					                                             OpDecorate %227 RelaxedPrecision 
					                                             OpDecorate %228 RelaxedPrecision 
					                                             OpDecorate %230 RelaxedPrecision 
					                                             OpDecorate %231 RelaxedPrecision 
					                                             OpDecorate %232 RelaxedPrecision 
					                                             OpDecorate %235 RelaxedPrecision 
					                                             OpDecorate %237 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %240 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %242 RelaxedPrecision 
					                                             OpDecorate %243 RelaxedPrecision 
					                                             OpDecorate %244 RelaxedPrecision 
					                                             OpDecorate %245 RelaxedPrecision 
					                                             OpDecorate %246 RelaxedPrecision 
					                                             OpDecorate %247 RelaxedPrecision 
					                                             OpDecorate %248 RelaxedPrecision 
					                                             OpDecorate %249 RelaxedPrecision 
					                                             OpDecorate %250 RelaxedPrecision 
					                                             OpDecorate %251 RelaxedPrecision 
					                                             OpDecorate %252 RelaxedPrecision 
					                                             OpDecorate %253 RelaxedPrecision 
					                                             OpDecorate %254 RelaxedPrecision 
					                                             OpDecorate %256 RelaxedPrecision 
					                                             OpDecorate %257 RelaxedPrecision 
					                                             OpDecorate %258 RelaxedPrecision 
					                                             OpDecorate %261 RelaxedPrecision 
					                                             OpDecorate %263 RelaxedPrecision 
					                                             OpDecorate %265 RelaxedPrecision 
					                                             OpDecorate %266 RelaxedPrecision 
					                                             OpDecorate %267 RelaxedPrecision 
					                                             OpDecorate %268 RelaxedPrecision 
					                                             OpDecorate %269 RelaxedPrecision 
					                                             OpDecorate %270 RelaxedPrecision 
					                                             OpDecorate %271 RelaxedPrecision 
					                                             OpDecorate %272 RelaxedPrecision 
					                                             OpDecorate %273 RelaxedPrecision 
					                                             OpDecorate %274 RelaxedPrecision 
					                                             OpDecorate %275 RelaxedPrecision 
					                                             OpDecorate %276 RelaxedPrecision 
					                                             OpDecorate %277 RelaxedPrecision 
					                                             OpDecorate %278 RelaxedPrecision 
					                                             OpDecorate %279 RelaxedPrecision 
					                                             OpDecorate %280 RelaxedPrecision 
					                                             OpDecorate %284 RelaxedPrecision 
					                                             OpDecorate %285 RelaxedPrecision 
					                                             OpDecorate %286 RelaxedPrecision 
					                                             OpDecorate %289 RelaxedPrecision 
					                                             OpDecorate %290 RelaxedPrecision 
					                                             OpDecorate %293 RelaxedPrecision 
					                                             OpDecorate %331 RelaxedPrecision 
					                                             OpDecorate %332 RelaxedPrecision 
					                                             OpDecorate %333 RelaxedPrecision 
					                                             OpDecorate %364 RelaxedPrecision 
					                                             OpDecorate %364 Location 364 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypeStruct %7 %6 
					                                     %11 = OpTypePointer Uniform %10 
					       Uniform struct {f32_4; f32;}* %12 = OpVariable Uniform 
					                                     %13 = OpTypeInt 32 1 
					                                 i32 %14 = OpConstant 0 
					                                     %15 = OpTypePointer Uniform %7 
					                                 f32 %20 = OpConstant 3,674022E-40 
					                                 f32 %21 = OpConstant 3,674022E-40 
					                               f32_4 %22 = OpConstantComposite %20 %20 %21 %20 
					                                     %24 = OpTypeVector %6 2 
					                                     %25 = OpTypePointer Input %24 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %30 = OpTypeVector %6 3 
					                                     %31 = OpTypePointer Private %30 
					                      Private f32_3* %32 = OpVariable Private 
					                                     %33 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %34 = OpTypePointer UniformConstant %33 
					UniformConstant read_only Texture2D* %35 = OpVariable UniformConstant 
					                                     %37 = OpTypeSampler 
					                                     %38 = OpTypePointer UniformConstant %37 
					            UniformConstant sampler* %39 = OpVariable UniformConstant 
					                                     %41 = OpTypeSampledImage %33 
					                      Private f32_3* %47 = OpVariable Private 
					                                     %55 = OpTypePointer Private %6 
					                        Private f32* %56 = OpVariable Private 
					                                     %57 = OpTypeInt 32 0 
					                                 u32 %58 = OpConstant 2 
					                                 u32 %61 = OpConstant 1 
					                                 u32 %65 = OpConstant 0 
					                                 f32 %71 = OpConstant 3,674022E-40 
					                      Private f32_4* %73 = OpVariable Private 
					               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                        Private f32* %83 = OpVariable Private 
					UniformConstant read_only Texture2D* %84 = OpVariable UniformConstant 
					            UniformConstant sampler* %86 = OpVariable UniformConstant 
					                        Private f32* %93 = OpVariable Private 
					                       Private f32* %101 = OpVariable Private 
					                                f32 %103 = OpConstant 3,674022E-40 
					                                f32 %105 = OpConstant 3,674022E-40 
					                       Private f32* %107 = OpVariable Private 
					                     Private f32_3* %115 = OpVariable Private 
					                       Private f32* %120 = OpVariable Private 
					                     Private f32_3* %136 = OpVariable Private 
					                     Private f32_4* %147 = OpVariable Private 
					                              f32_4 %151 = OpConstantComposite %21 %20 %20 %20 
					                     Private f32_3* %156 = OpVariable Private 
					                     Private f32_3* %164 = OpVariable Private 
					                       Private f32* %172 = OpVariable Private 
					                       Private f32* %191 = OpVariable Private 
					                       Private f32* %199 = OpVariable Private 
					                       Private f32* %207 = OpVariable Private 
					                       Private f32* %211 = OpVariable Private 
					                       Private f32* %219 = OpVariable Private 
					                                f32 %262 = OpConstant 3,674022E-40 
					                                    %281 = OpTypeBool 
					                                    %282 = OpTypePointer Private %281 
					                      Private bool* %283 = OpVariable Private 
					                     Private f32_4* %292 = OpVariable Private 
					                                i32 %294 = OpConstant 1 
					                                    %295 = OpTypePointer Uniform %6 
					                                u32 %299 = OpConstant 3 
					                       Private f32* %301 = OpVariable Private 
					                                f32 %315 = OpConstant 3,674022E-40 
					                                f32 %318 = OpConstant 3,674022E-40 
					                                f32 %320 = OpConstant 3,674022E-40 
					                                f32 %338 = OpConstant 3,674022E-40 
					                              f32_3 %339 = OpConstantComposite %338 %338 %338 
					                                f32 %341 = OpConstant 3,674022E-40 
					                              f32_3 %342 = OpConstantComposite %341 %341 %341 
					                                f32 %351 = OpConstant 3,674022E-40 
					                              f32_3 %352 = OpConstantComposite %351 %351 %351 
					                                    %363 = OpTypePointer Output %7 
					                      Output f32_4* %364 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                      Uniform f32_4* %16 = OpAccessChain %12 %14 
					                               f32_4 %17 = OpLoad %16 
					                               f32_4 %18 = OpVectorShuffle %17 %17 0 1 0 1 
					                               f32_4 %19 = OpFNegate %18 
					                               f32_4 %23 = OpFMul %19 %22 
					                               f32_2 %27 = OpLoad vs_TEXCOORD0 
					                               f32_4 %28 = OpVectorShuffle %27 %27 0 1 0 1 
					                               f32_4 %29 = OpFAdd %23 %28 
					                                             OpStore %9 %29 
					                 read_only Texture2D %36 = OpLoad %35 
					                             sampler %40 = OpLoad %39 
					          read_only Texture2DSampled %42 = OpSampledImage %36 %40 
					                               f32_4 %43 = OpLoad %9 
					                               f32_2 %44 = OpVectorShuffle %43 %43 2 3 
					                               f32_4 %45 = OpImageSampleImplicitLod %42 %44 
					                               f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
					                                             OpStore %32 %46 
					                 read_only Texture2D %48 = OpLoad %35 
					                             sampler %49 = OpLoad %39 
					          read_only Texture2DSampled %50 = OpSampledImage %48 %49 
					                               f32_4 %51 = OpLoad %9 
					                               f32_2 %52 = OpVectorShuffle %51 %51 0 1 
					                               f32_4 %53 = OpImageSampleImplicitLod %50 %52 
					                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
					                                             OpStore %47 %54 
					                        Private f32* %59 = OpAccessChain %32 %58 
					                                 f32 %60 = OpLoad %59 
					                        Private f32* %62 = OpAccessChain %32 %61 
					                                 f32 %63 = OpLoad %62 
					                                 f32 %64 = OpExtInst %1 40 %60 %63 
					                                             OpStore %56 %64 
					                        Private f32* %66 = OpAccessChain %32 %65 
					                                 f32 %67 = OpLoad %66 
					                                 f32 %68 = OpLoad %56 
					                                 f32 %69 = OpExtInst %1 40 %67 %68 
					                                             OpStore %56 %69 
					                                 f32 %70 = OpLoad %56 
					                                 f32 %72 = OpFAdd %70 %71 
					                                             OpStore %56 %72 
					                      Uniform f32_4* %74 = OpAccessChain %12 %14 
					                               f32_4 %75 = OpLoad %74 
					                               f32_4 %76 = OpVectorShuffle %75 %75 0 1 0 1 
					                               f32_4 %77 = OpFNegate %76 
					                               f32_4 %78 = OpFMul %77 %22 
					                               f32_2 %80 = OpLoad vs_TEXCOORD1 
					                               f32_4 %81 = OpVectorShuffle %80 %80 0 1 0 1 
					                               f32_4 %82 = OpFAdd %78 %81 
					                                             OpStore %73 %82 
					                 read_only Texture2D %85 = OpLoad %84 
					                             sampler %87 = OpLoad %86 
					          read_only Texture2DSampled %88 = OpSampledImage %85 %87 
					                               f32_4 %89 = OpLoad %73 
					                               f32_2 %90 = OpVectorShuffle %89 %89 2 3 
					                               f32_4 %91 = OpImageSampleImplicitLod %88 %90 
					                                 f32 %92 = OpCompositeExtract %91 0 
					                                             OpStore %83 %92 
					                 read_only Texture2D %94 = OpLoad %84 
					                             sampler %95 = OpLoad %86 
					          read_only Texture2DSampled %96 = OpSampledImage %94 %95 
					                               f32_4 %97 = OpLoad %73 
					                               f32_2 %98 = OpVectorShuffle %97 %97 0 1 
					                               f32_4 %99 = OpImageSampleImplicitLod %96 %98 
					                                f32 %100 = OpCompositeExtract %99 0 
					                                             OpStore %93 %100 
					                                f32 %102 = OpLoad %93 
					                                f32 %104 = OpFMul %102 %103 
					                                f32 %106 = OpFAdd %104 %105 
					                                             OpStore %101 %106 
					                                f32 %108 = OpLoad %83 
					                                f32 %109 = OpFMul %108 %103 
					                                f32 %110 = OpFAdd %109 %105 
					                                             OpStore %107 %110 
					                                f32 %111 = OpLoad %107 
					                                f32 %112 = OpExtInst %1 4 %111 
					                                f32 %113 = OpLoad %56 
					                                f32 %114 = OpFDiv %112 %113 
					                                             OpStore %56 %114 
					                              f32_3 %116 = OpLoad %32 
					                                f32 %117 = OpLoad %56 
					                              f32_3 %118 = OpCompositeConstruct %117 %117 %117 
					                              f32_3 %119 = OpFMul %116 %118 
					                                             OpStore %115 %119 
					                       Private f32* %121 = OpAccessChain %47 %58 
					                                f32 %122 = OpLoad %121 
					                       Private f32* %123 = OpAccessChain %47 %61 
					                                f32 %124 = OpLoad %123 
					                                f32 %125 = OpExtInst %1 40 %122 %124 
					                                             OpStore %120 %125 
					                       Private f32* %126 = OpAccessChain %47 %65 
					                                f32 %127 = OpLoad %126 
					                                f32 %128 = OpLoad %120 
					                                f32 %129 = OpExtInst %1 40 %127 %128 
					                                             OpStore %120 %129 
					                                f32 %130 = OpLoad %120 
					                                f32 %131 = OpFAdd %130 %71 
					                                             OpStore %120 %131 
					                                f32 %132 = OpLoad %101 
					                                f32 %133 = OpExtInst %1 4 %132 
					                                f32 %134 = OpLoad %120 
					                                f32 %135 = OpFDiv %133 %134 
					                                             OpStore %120 %135 
					                              f32_3 %137 = OpLoad %47 
					                                f32 %138 = OpLoad %120 
					                              f32_3 %139 = OpCompositeConstruct %138 %138 %138 
					                              f32_3 %140 = OpFMul %137 %139 
					                              f32_3 %141 = OpLoad %115 
					                              f32_3 %142 = OpFAdd %140 %141 
					                                             OpStore %136 %142 
					                                f32 %143 = OpLoad %56 
					                                f32 %144 = OpLoad %120 
					                                f32 %145 = OpFAdd %143 %144 
					                       Private f32* %146 = OpAccessChain %115 %65 
					                                             OpStore %146 %145 
					                     Uniform f32_4* %148 = OpAccessChain %12 %14 
					                              f32_4 %149 = OpLoad %148 
					                              f32_4 %150 = OpVectorShuffle %149 %149 0 1 0 1 
					                              f32_4 %152 = OpFMul %150 %151 
					                              f32_2 %153 = OpLoad vs_TEXCOORD0 
					                              f32_4 %154 = OpVectorShuffle %153 %153 0 1 0 1 
					                              f32_4 %155 = OpFAdd %152 %154 
					                                             OpStore %147 %155 
					                read_only Texture2D %157 = OpLoad %35 
					                            sampler %158 = OpLoad %39 
					         read_only Texture2DSampled %159 = OpSampledImage %157 %158 
					                              f32_4 %160 = OpLoad %147 
					                              f32_2 %161 = OpVectorShuffle %160 %160 0 1 
					                              f32_4 %162 = OpImageSampleImplicitLod %159 %161 
					                              f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
					                                             OpStore %156 %163 
					                read_only Texture2D %165 = OpLoad %35 
					                            sampler %166 = OpLoad %39 
					         read_only Texture2DSampled %167 = OpSampledImage %165 %166 
					                              f32_4 %168 = OpLoad %147 
					                              f32_2 %169 = OpVectorShuffle %168 %168 2 3 
					                              f32_4 %170 = OpImageSampleImplicitLod %167 %169 
					                              f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
					                                             OpStore %164 %171 
					                       Private f32* %173 = OpAccessChain %156 %58 
					                                f32 %174 = OpLoad %173 
					                       Private f32* %175 = OpAccessChain %156 %61 
					                                f32 %176 = OpLoad %175 
					                                f32 %177 = OpExtInst %1 40 %174 %176 
					                                             OpStore %172 %177 
					                       Private f32* %178 = OpAccessChain %156 %65 
					                                f32 %179 = OpLoad %178 
					                                f32 %180 = OpLoad %172 
					                                f32 %181 = OpExtInst %1 40 %179 %180 
					                                             OpStore %172 %181 
					                                f32 %182 = OpLoad %172 
					                                f32 %183 = OpFAdd %182 %71 
					                                             OpStore %172 %183 
					                     Uniform f32_4* %184 = OpAccessChain %12 %14 
					                              f32_4 %185 = OpLoad %184 
					                              f32_4 %186 = OpVectorShuffle %185 %185 0 1 0 1 
					                              f32_4 %187 = OpFMul %186 %151 
					                              f32_2 %188 = OpLoad vs_TEXCOORD1 
					                              f32_4 %189 = OpVectorShuffle %188 %188 0 1 0 1 
					                              f32_4 %190 = OpFAdd %187 %189 
					                                             OpStore %147 %190 
					                read_only Texture2D %192 = OpLoad %84 
					                            sampler %193 = OpLoad %86 
					         read_only Texture2DSampled %194 = OpSampledImage %192 %193 
					                              f32_4 %195 = OpLoad %147 
					                              f32_2 %196 = OpVectorShuffle %195 %195 0 1 
					                              f32_4 %197 = OpImageSampleImplicitLod %194 %196 
					                                f32 %198 = OpCompositeExtract %197 0 
					                                             OpStore %191 %198 
					                read_only Texture2D %200 = OpLoad %84 
					                            sampler %201 = OpLoad %86 
					         read_only Texture2DSampled %202 = OpSampledImage %200 %201 
					                              f32_4 %203 = OpLoad %147 
					                              f32_2 %204 = OpVectorShuffle %203 %203 2 3 
					                              f32_4 %205 = OpImageSampleImplicitLod %202 %204 
					                                f32 %206 = OpCompositeExtract %205 0 
					                                             OpStore %199 %206 
					                                f32 %208 = OpLoad %199 
					                                f32 %209 = OpFMul %208 %103 
					                                f32 %210 = OpFAdd %209 %105 
					                                             OpStore %207 %210 
					                                f32 %212 = OpLoad %191 
					                                f32 %213 = OpFMul %212 %103 
					                                f32 %214 = OpFAdd %213 %105 
					                                             OpStore %211 %214 
					                                f32 %215 = OpLoad %211 
					                                f32 %216 = OpExtInst %1 4 %215 
					                                f32 %217 = OpLoad %172 
					                                f32 %218 = OpFDiv %216 %217 
					                                             OpStore %172 %218 
					                                f32 %220 = OpLoad %207 
					                                f32 %221 = OpLoad %211 
					                                f32 %222 = OpExtInst %1 37 %220 %221 
					                                             OpStore %219 %222 
					                              f32_3 %223 = OpLoad %156 
					                                f32 %224 = OpLoad %172 
					                              f32_3 %225 = OpCompositeConstruct %224 %224 %224 
					                              f32_3 %226 = OpFMul %223 %225 
					                              f32_3 %227 = OpLoad %136 
					                              f32_3 %228 = OpFAdd %226 %227 
					                                             OpStore %136 %228 
					                       Private f32* %229 = OpAccessChain %115 %65 
					                                f32 %230 = OpLoad %229 
					                                f32 %231 = OpLoad %172 
					                                f32 %232 = OpFAdd %230 %231 
					                       Private f32* %233 = OpAccessChain %115 %65 
					                                             OpStore %233 %232 
					                       Private f32* %234 = OpAccessChain %164 %58 
					                                f32 %235 = OpLoad %234 
					                       Private f32* %236 = OpAccessChain %164 %61 
					                                f32 %237 = OpLoad %236 
					                                f32 %238 = OpExtInst %1 40 %235 %237 
					                                             OpStore %172 %238 
					                       Private f32* %239 = OpAccessChain %164 %65 
					                                f32 %240 = OpLoad %239 
					                                f32 %241 = OpLoad %172 
					                                f32 %242 = OpExtInst %1 40 %240 %241 
					                                             OpStore %172 %242 
					                                f32 %243 = OpLoad %172 
					                                f32 %244 = OpFAdd %243 %71 
					                                             OpStore %172 %244 
					                                f32 %245 = OpLoad %207 
					                                f32 %246 = OpExtInst %1 4 %245 
					                                f32 %247 = OpLoad %172 
					                                f32 %248 = OpFDiv %246 %247 
					                                             OpStore %172 %248 
					                              f32_3 %249 = OpLoad %164 
					                                f32 %250 = OpLoad %172 
					                              f32_3 %251 = OpCompositeConstruct %250 %250 %250 
					                              f32_3 %252 = OpFMul %249 %251 
					                              f32_3 %253 = OpLoad %136 
					                              f32_3 %254 = OpFAdd %252 %253 
					                                             OpStore %136 %254 
					                       Private f32* %255 = OpAccessChain %115 %65 
					                                f32 %256 = OpLoad %255 
					                                f32 %257 = OpLoad %172 
					                                f32 %258 = OpFAdd %256 %257 
					                       Private f32* %259 = OpAccessChain %115 %65 
					                                             OpStore %259 %258 
					                       Private f32* %260 = OpAccessChain %115 %65 
					                                f32 %261 = OpLoad %260 
					                                f32 %263 = OpExtInst %1 40 %261 %262 
					                       Private f32* %264 = OpAccessChain %115 %65 
					                                             OpStore %264 %263 
					                              f32_3 %265 = OpLoad %136 
					                              f32_3 %266 = OpLoad %115 
					                              f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
					                              f32_3 %268 = OpFDiv %265 %267 
					                                             OpStore %136 %268 
					                                f32 %269 = OpLoad %107 
					                                f32 %270 = OpLoad %219 
					                                f32 %271 = OpExtInst %1 37 %269 %270 
					                                             OpStore %172 %271 
					                                f32 %272 = OpLoad %107 
					                                f32 %273 = OpLoad %219 
					                                f32 %274 = OpExtInst %1 40 %272 %273 
					                                             OpStore %219 %274 
					                                f32 %275 = OpLoad %101 
					                                f32 %276 = OpLoad %219 
					                                f32 %277 = OpExtInst %1 40 %275 %276 
					                                             OpStore %219 %277 
					                                f32 %278 = OpLoad %101 
					                                f32 %279 = OpLoad %172 
					                                f32 %280 = OpExtInst %1 37 %278 %279 
					                                             OpStore %172 %280 
					                                f32 %284 = OpLoad %219 
					                                f32 %285 = OpLoad %172 
					                                f32 %286 = OpFNegate %285 
					                               bool %287 = OpFOrdLessThan %284 %286 
					                                             OpStore %283 %287 
					                               bool %288 = OpLoad %283 
					                                f32 %289 = OpLoad %172 
					                                f32 %290 = OpLoad %219 
					                                f32 %291 = OpSelect %288 %289 %290 
					                                             OpStore %172 %291 
					                                f32 %293 = OpLoad %172 
					                       Uniform f32* %296 = OpAccessChain %12 %294 
					                                f32 %297 = OpLoad %296 
					                                f32 %298 = OpFMul %293 %297 
					                       Private f32* %300 = OpAccessChain %292 %299 
					                                             OpStore %300 %298 
					                       Uniform f32* %302 = OpAccessChain %12 %14 %61 
					                                f32 %303 = OpLoad %302 
					                       Uniform f32* %304 = OpAccessChain %12 %14 %61 
					                                f32 %305 = OpLoad %304 
					                                f32 %306 = OpFAdd %303 %305 
					                                             OpStore %301 %306 
					                                f32 %307 = OpLoad %301 
					                                f32 %308 = OpFDiv %71 %307 
					                                             OpStore %301 %308 
					                                f32 %309 = OpLoad %301 
					                       Private f32* %310 = OpAccessChain %292 %299 
					                                f32 %311 = OpLoad %310 
					                                f32 %312 = OpExtInst %1 4 %311 
					                                f32 %313 = OpFMul %309 %312 
					                                             OpStore %301 %313 
					                                f32 %314 = OpLoad %301 
					                                f32 %316 = OpExtInst %1 43 %314 %315 %71 
					                                             OpStore %301 %316 
					                                f32 %317 = OpLoad %301 
					                                f32 %319 = OpFMul %317 %318 
					                                f32 %321 = OpFAdd %319 %320 
					                       Private f32* %322 = OpAccessChain %73 %65 
					                                             OpStore %322 %321 
					                                f32 %323 = OpLoad %301 
					                                f32 %324 = OpLoad %301 
					                                f32 %325 = OpFMul %323 %324 
					                                             OpStore %301 %325 
					                                f32 %326 = OpLoad %301 
					                       Private f32* %327 = OpAccessChain %73 %65 
					                                f32 %328 = OpLoad %327 
					                                f32 %329 = OpFMul %326 %328 
					                                             OpStore %301 %329 
					                                f32 %330 = OpLoad %301 
					                              f32_3 %331 = OpCompositeConstruct %330 %330 %330 
					                              f32_3 %332 = OpLoad %136 
					                              f32_3 %333 = OpFMul %331 %332 
					                              f32_4 %334 = OpLoad %9 
					                              f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
					                                             OpStore %9 %335 
					                              f32_4 %336 = OpLoad %9 
					                              f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
					                              f32_3 %340 = OpFMul %337 %339 
					                              f32_3 %343 = OpFAdd %340 %342 
					                              f32_4 %344 = OpLoad %73 
					                              f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
					                                             OpStore %73 %345 
					                              f32_4 %346 = OpLoad %9 
					                              f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
					                              f32_4 %348 = OpLoad %73 
					                              f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
					                              f32_3 %350 = OpFMul %347 %349 
					                              f32_3 %353 = OpFAdd %350 %352 
					                              f32_4 %354 = OpLoad %73 
					                              f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
					                                             OpStore %73 %355 
					                              f32_4 %356 = OpLoad %9 
					                              f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
					                              f32_4 %358 = OpLoad %73 
					                              f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
					                              f32_3 %360 = OpFMul %357 %359 
					                              f32_4 %361 = OpLoad %292 
					                              f32_4 %362 = OpVectorShuffle %361 %360 4 5 6 3 
					                                             OpStore %292 %362 
					                              f32_4 %365 = OpLoad %292 
					                                             OpStore %364 %365 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CoCTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					float u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat16_2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat10_4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat10_6;
					float u_xlat16_8;
					bool u_xlatb8;
					float u_xlat16_9;
					float u_xlat16_15;
					float u_xlat21;
					float u_xlat16_21;
					float u_xlat16_22;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1 = texture(_MainTex, u_xlat0.zw);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat16_21 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_21 = max(u_xlat16_21, u_xlat10_1.x);
					    u_xlat16_21 = u_xlat16_21 + 1.0;
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture(_CoCTex, u_xlat2.zw);
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.xy);
					    u_xlat16_22 = u_xlat10_2.x * 2.0 + -1.0;
					    u_xlat16_2 = u_xlat10_3.x * 2.0 + -1.0;
					    u_xlat16_21 = abs(u_xlat16_2) / u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat10_1.xyz;
					    u_xlat16_9 = max(u_xlat10_0.z, u_xlat10_0.y);
					    u_xlat16_9 = max(u_xlat10_0.x, u_xlat16_9);
					    u_xlat16_9 = u_xlat16_9 + 1.0;
					    u_xlat16_9 = abs(u_xlat16_22) / u_xlat16_9;
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(u_xlat16_9) + u_xlat16_1.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_9;
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat10_3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat16_1.x = max(u_xlat10_4.z, u_xlat10_4.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_4.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_6 = texture(_CoCTex, u_xlat5.xy);
					    u_xlat10_5 = texture(_CoCTex, u_xlat5.zw);
					    u_xlat16_8 = u_xlat10_5.x * 2.0 + -1.0;
					    u_xlat16_15 = u_xlat10_6.x * 2.0 + -1.0;
					    u_xlat16_1.x = abs(u_xlat16_15) / u_xlat16_1.x;
					    u_xlat16_15 = min(u_xlat16_8, u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat10_4.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_1.x;
					    u_xlat16_1.x = max(u_xlat10_3.z, u_xlat10_3.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_3.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = abs(u_xlat16_8) / u_xlat16_1.x;
					    u_xlat16_0.xyz = u_xlat10_3.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_1.x;
					    u_xlat16_21 = max(u_xlat16_21, 9.99999975e-06);
					    u_xlat16_0.xyz = u_xlat16_0.xyz / vec3(u_xlat16_21);
					    u_xlat16_21 = min(u_xlat16_15, u_xlat16_2);
					    u_xlat16_1.x = max(u_xlat16_15, u_xlat16_2);
					    u_xlat1 = max(u_xlat16_1.x, u_xlat16_22);
					    u_xlat21 = min(u_xlat16_21, u_xlat16_22);
					    u_xlatb8 = u_xlat1<(-u_xlat21);
					    u_xlat21 = (u_xlatb8) ? u_xlat21 : u_xlat1;
					    u_xlat21 = u_xlat21 * _MaxCoC;
					    u_xlat1 = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat1 = abs(u_xlat21) * u_xlat1;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    SV_Target0.w = u_xlat21;
					    u_xlat21 = u_xlat1 * -2.0 + 3.0;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat21 = u_xlat21 * u_xlat1;
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat16_0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						vec4 unused_0_4;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CoCTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat16_2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat10_4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat10_6;
					float u_xlat16_8;
					bool u_xlatb8;
					float u_xlat16_9;
					float u_xlat16_15;
					float u_xlat21;
					float u_xlat16_21;
					float u_xlat16_22;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1 = texture(_MainTex, u_xlat0.zw);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat16_21 = max(u_xlat10_1.z, u_xlat10_1.y);
					    u_xlat16_21 = max(u_xlat16_21, u_xlat10_1.x);
					    u_xlat16_21 = u_xlat16_21 + 1.0;
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture(_CoCTex, u_xlat2.zw);
					    u_xlat10_2 = texture(_CoCTex, u_xlat2.xy);
					    u_xlat16_22 = u_xlat10_2.x * 2.0 + -1.0;
					    u_xlat16_2 = u_xlat10_3.x * 2.0 + -1.0;
					    u_xlat16_21 = abs(u_xlat16_2) / u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_21) * u_xlat10_1.xyz;
					    u_xlat16_9 = max(u_xlat10_0.z, u_xlat10_0.y);
					    u_xlat16_9 = max(u_xlat10_0.x, u_xlat16_9);
					    u_xlat16_9 = u_xlat16_9 + 1.0;
					    u_xlat16_9 = abs(u_xlat16_22) / u_xlat16_9;
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(u_xlat16_9) + u_xlat16_1.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_9;
					    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat10_3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat16_1.x = max(u_xlat10_4.z, u_xlat10_4.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_4.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD1.xyxy;
					    u_xlat10_6 = texture(_CoCTex, u_xlat5.xy);
					    u_xlat10_5 = texture(_CoCTex, u_xlat5.zw);
					    u_xlat16_8 = u_xlat10_5.x * 2.0 + -1.0;
					    u_xlat16_15 = u_xlat10_6.x * 2.0 + -1.0;
					    u_xlat16_1.x = abs(u_xlat16_15) / u_xlat16_1.x;
					    u_xlat16_15 = min(u_xlat16_8, u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat10_4.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_1.x;
					    u_xlat16_1.x = max(u_xlat10_3.z, u_xlat10_3.y);
					    u_xlat16_1.x = max(u_xlat16_1.x, u_xlat10_3.x);
					    u_xlat16_1.x = u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = abs(u_xlat16_8) / u_xlat16_1.x;
					    u_xlat16_0.xyz = u_xlat10_3.xyz * u_xlat16_1.xxx + u_xlat16_0.xyz;
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_1.x;
					    u_xlat16_21 = max(u_xlat16_21, 9.99999975e-06);
					    u_xlat16_0.xyz = u_xlat16_0.xyz / vec3(u_xlat16_21);
					    u_xlat16_21 = min(u_xlat16_15, u_xlat16_2);
					    u_xlat16_1.x = max(u_xlat16_15, u_xlat16_2);
					    u_xlat1.x = max(u_xlat16_1.x, u_xlat16_22);
					    u_xlat21 = min(u_xlat16_21, u_xlat16_22);
					    u_xlatb8 = u_xlat1.x<(-u_xlat21);
					    u_xlat21 = (u_xlatb8) ? u_xlat21 : u_xlat1.x;
					    u_xlat21 = u_xlat21 * _MaxCoC;
					    u_xlat1.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    SV_Target0.w = u_xlat21;
					    u_xlat21 = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat16_0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_COLORSPACE_GAMMA" }
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Bokeh Filter (small)"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 760589
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[16];
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					uniform 	float _RcpAspect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.545454562, 0.0);
						ImmCB_0_0_0[2] = vec2(0.168554723, 0.518758118);
						ImmCB_0_0_0[3] = vec2(-0.441282034, 0.320610106);
						ImmCB_0_0_0[4] = vec2(-0.441281974, -0.320610195);
						ImmCB_0_0_0[5] = vec2(0.168554798, -0.518758118);
						ImmCB_0_0_0[6] = vec2(1.0, 0.0);
						ImmCB_0_0_0[7] = vec2(0.809017003, 0.587785244);
						ImmCB_0_0_0[8] = vec2(0.309016973, 0.95105654);
						ImmCB_0_0_0[9] = vec2(-0.309017032, 0.95105648);
						ImmCB_0_0_0[10] = vec2(-0.809017062, 0.587785184);
						ImmCB_0_0_0[11] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[12] = vec2(-0.809016943, -0.587785363);
						ImmCB_0_0_0[13] = vec2(-0.309016645, -0.9510566);
						ImmCB_0_0_0[14] = vec2(0.309017122, -0.95105648);
						ImmCB_0_0_0[15] = vec2(0.809016943, -0.587785304);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.196349546;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 322
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %304 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %24 RelaxedPrecision 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpMemberDecorate %29 0 Offset 29 
					                                             OpMemberDecorate %29 1 Offset 29 
					                                             OpMemberDecorate %29 2 Offset 29 
					                                             OpDecorate %29 Block 
					                                             OpDecorate %31 DescriptorSet 31 
					                                             OpDecorate %31 Binding 31 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %154 RelaxedPrecision 
					                                             OpDecorate %158 RelaxedPrecision 
					                                             OpDecorate %159 RelaxedPrecision 
					                                             OpDecorate %160 RelaxedPrecision 
					                                             OpDecorate %165 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %168 RelaxedPrecision 
					                                             OpDecorate %169 RelaxedPrecision 
					                                             OpDecorate %172 RelaxedPrecision 
					                                             OpDecorate %173 RelaxedPrecision 
					                                             OpDecorate %179 RelaxedPrecision 
					                                             OpDecorate %197 RelaxedPrecision 
					                                             OpDecorate %198 RelaxedPrecision 
					                                             OpDecorate %213 RelaxedPrecision 
					                                             OpDecorate %214 RelaxedPrecision 
					                                             OpDecorate %225 RelaxedPrecision 
					                                             OpDecorate %226 RelaxedPrecision 
					                                             OpDecorate %228 RelaxedPrecision 
					                                             OpDecorate %229 RelaxedPrecision 
					                                             OpDecorate %234 RelaxedPrecision 
					                                             OpDecorate %235 RelaxedPrecision 
					                                             OpDecorate %236 RelaxedPrecision 
					                                             OpDecorate %237 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %239 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %242 RelaxedPrecision 
					                                             OpDecorate %247 RelaxedPrecision 
					                                             OpDecorate %248 RelaxedPrecision 
					                                             OpDecorate %249 RelaxedPrecision 
					                                             OpDecorate %254 RelaxedPrecision 
					                                             OpDecorate %259 RelaxedPrecision 
					                                             OpDecorate %261 RelaxedPrecision 
					                                             OpDecorate %263 RelaxedPrecision 
					                                             OpDecorate %264 RelaxedPrecision 
					                                             OpDecorate %265 RelaxedPrecision 
					                                             OpDecorate %266 RelaxedPrecision 
					                                             OpDecorate %267 RelaxedPrecision 
					                                             OpDecorate %268 RelaxedPrecision 
					                                             OpDecorate %269 RelaxedPrecision 
					                                             OpDecorate %273 RelaxedPrecision 
					                                             OpDecorate %277 RelaxedPrecision 
					                                             OpDecorate %279 RelaxedPrecision 
					                                             OpDecorate %280 RelaxedPrecision 
					                                             OpDecorate %281 RelaxedPrecision 
					                                             OpDecorate %282 RelaxedPrecision 
					                                             OpDecorate %283 RelaxedPrecision 
					                                             OpDecorate %284 RelaxedPrecision 
					                                             OpDecorate %285 RelaxedPrecision 
					                                             OpDecorate %288 RelaxedPrecision 
					                                             OpDecorate %290 RelaxedPrecision 
					                                             OpDecorate %292 RelaxedPrecision 
					                                             OpDecorate %293 RelaxedPrecision 
					                                             OpDecorate %294 RelaxedPrecision 
					                                             OpDecorate %295 RelaxedPrecision 
					                                             OpDecorate %296 RelaxedPrecision 
					                                             OpDecorate %297 RelaxedPrecision 
					                                             OpDecorate %298 RelaxedPrecision 
					                                             OpDecorate %299 RelaxedPrecision 
					                                             OpDecorate %300 RelaxedPrecision 
					                                             OpDecorate %304 RelaxedPrecision 
					                                             OpDecorate %304 Location 304 
					                                             OpDecorate %305 RelaxedPrecision 
					                                             OpDecorate %306 RelaxedPrecision 
					                                             OpDecorate %307 RelaxedPrecision 
					                                             OpDecorate %308 RelaxedPrecision 
					                                             OpDecorate %309 RelaxedPrecision 
					                                             OpDecorate %310 RelaxedPrecision 
					                                             OpDecorate %311 RelaxedPrecision 
					                                             OpDecorate %312 RelaxedPrecision 
					                                             OpDecorate %315 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %29 = OpTypeStruct %23 %6 %6 
					                                     %30 = OpTypePointer Uniform %29 
					  Uniform struct {f32_4; f32; f32;}* %31 = OpVariable Uniform 
					                                     %32 = OpTypeInt 32 1 
					                                 i32 %33 = OpConstant 0 
					                                 u32 %34 = OpConstant 1 
					                                     %35 = OpTypePointer Uniform %6 
					                                     %41 = OpTypePointer Private %23 
					                      Private f32_4* %42 = OpVariable Private 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                                 u32 %44 = OpConstant 0 
					                                 u32 %47 = OpConstant 2 
					                      Private f32_4* %50 = OpVariable Private 
					                                     %55 = OpTypePointer Function %32 
					                                 i32 %63 = OpConstant 16 
					                                     %64 = OpTypeBool 
					                                     %66 = OpTypeVector %6 3 
					                                     %67 = OpTypePointer Private %66 
					                      Private f32_3* %68 = OpVariable Private 
					                                 i32 %69 = OpConstant 1 
					                                     %78 = OpTypeVector %25 4 
					                                 u32 %79 = OpConstant 16 
					                                     %80 = OpTypeArray %78 %79 
					                               u32_4 %81 = OpConstantComposite %44 %44 %44 %44 
					                                 u32 %82 = OpConstant 1057727209 
					                               u32_4 %83 = OpConstantComposite %82 %44 %44 %44 
					                                 u32 %84 = OpConstant 1043110300 
					                                 u32 %85 = OpConstant 1057279317 
					                               u32_4 %86 = OpConstantComposite %84 %85 %44 %44 
					                                 u32 %87 = OpConstant 3202478008 
					                                 u32 %88 = OpConstant 1050945282 
					                               u32_4 %89 = OpConstantComposite %87 %88 %44 %44 
					                                 u32 %90 = OpConstant 3202478006 
					                                 u32 %91 = OpConstant 3198428933 
					                               u32_4 %92 = OpConstantComposite %90 %91 %44 %44 
					                                 u32 %93 = OpConstant 1043110305 
					                                 u32 %94 = OpConstant 3204762965 
					                               u32_4 %95 = OpConstantComposite %93 %94 %44 %44 
					                                 u32 %96 = OpConstant 1065353216 
					                               u32_4 %97 = OpConstantComposite %96 %44 %44 %44 
					                                 u32 %98 = OpConstant 1062149053 
					                                 u32 %99 = OpConstant 1058437400 
					                              u32_4 %100 = OpConstantComposite %98 %99 %44 %44 
					                                u32 %101 = OpConstant 1050556281 
					                                u32 %102 = OpConstant 1064532081 
					                              u32_4 %103 = OpConstantComposite %101 %102 %44 %44 
					                                u32 %104 = OpConstant 3198039931 
					                                u32 %105 = OpConstant 1064532080 
					                              u32_4 %106 = OpConstantComposite %104 %105 %44 %44 
					                                u32 %107 = OpConstant 3209632702 
					                                u32 %108 = OpConstant 1058437399 
					                              u32_4 %109 = OpConstantComposite %107 %108 %44 %44 
					                                u32 %110 = OpConstant 3212836864 
					                              u32_4 %111 = OpConstantComposite %110 %44 %44 %44 
					                                u32 %112 = OpConstant 3209632700 
					                                u32 %113 = OpConstant 3205921050 
					                              u32_4 %114 = OpConstantComposite %112 %113 %44 %44 
					                                u32 %115 = OpConstant 3198039918 
					                                u32 %116 = OpConstant 3212015730 
					                              u32_4 %117 = OpConstantComposite %115 %116 %44 %44 
					                                u32 %118 = OpConstant 1050556286 
					                                u32 %119 = OpConstant 3212015728 
					                              u32_4 %120 = OpConstantComposite %118 %119 %44 %44 
					                                u32 %121 = OpConstant 1062149052 
					                                u32 %122 = OpConstant 3205921049 
					                              u32_4 %123 = OpConstantComposite %121 %122 %44 %44 
					                          u32_4[16] %124 = OpConstantComposite %81 %83 %86 %89 %92 %95 %97 %100 %103 %106 %109 %111 %114 %117 %120 %123 
					                                    %126 = OpTypeVector %25 2 
					                                    %127 = OpTypePointer Function %80 
					                                    %129 = OpTypePointer Function %78 
					                       Private f32* %137 = OpVariable Private 
					                                i32 %147 = OpConstant 2 
					                     Private f32_4* %158 = OpVariable Private 
					                     Private f32_4* %165 = OpVariable Private 
					                       Private f32* %175 = OpVariable Private 
					                                f32 %183 = OpConstant 3,674022E-40 
					                       Private f32* %187 = OpVariable Private 
					                                f32 %192 = OpConstant 3,674022E-40 
					                                    %210 = OpTypePointer Private %64 
					                      Private bool* %211 = OpVariable Private 
					                       Private f32* %218 = OpVariable Private 
					                       Private f32* %221 = OpVariable Private 
					                     Private f32_4* %237 = OpVariable Private 
					                      Private bool* %252 = OpVariable Private 
					                       Private f32* %259 = OpVariable Private 
					                       Private f32* %288 = OpVariable Private 
					                                f32 %291 = OpConstant 3,674022E-40 
					                                    %303 = OpTypePointer Output %23 
					                      Output f32_4* %304 = OpVariable Output 
					                                    %316 = OpTypePointer Output %6 
					                                    %319 = OpTypePointer Private %32 
					                       Private i32* %320 = OpVariable Private 
					                      Private bool* %321 = OpVariable Private 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                       Function i32* %56 = OpVariable Function 
					                Function u32_4[16]* %128 = OpVariable Function 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD0 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                        Uniform f32* %36 = OpAccessChain %31 %33 %34 
					                                 f32 %37 = OpLoad %36 
					                        Uniform f32* %38 = OpAccessChain %31 %33 %34 
					                                 f32 %39 = OpLoad %38 
					                                 f32 %40 = OpFAdd %37 %39 
					                                             OpStore %28 %40 
					                        Private f32* %45 = OpAccessChain %42 %44 
					                                             OpStore %45 %43 
					                        Private f32* %46 = OpAccessChain %42 %34 
					                                             OpStore %46 %43 
					                        Private f32* %48 = OpAccessChain %42 %47 
					                                             OpStore %48 %43 
					                        Private f32* %49 = OpAccessChain %42 %26 
					                                             OpStore %49 %43 
					                        Private f32* %51 = OpAccessChain %50 %44 
					                                             OpStore %51 %43 
					                        Private f32* %52 = OpAccessChain %50 %34 
					                                             OpStore %52 %43 
					                        Private f32* %53 = OpAccessChain %50 %47 
					                                             OpStore %53 %43 
					                        Private f32* %54 = OpAccessChain %50 %26 
					                                             OpStore %54 %43 
					                                             OpStore %56 %33 
					                                             OpBranch %57 
					                                     %57 = OpLabel 
					                                             OpLoopMerge %59 %60 None 
					                                             OpBranch %61 
					                                     %61 = OpLabel 
					                                 i32 %62 = OpLoad %56 
					                                bool %65 = OpSLessThan %62 %63 
					                                             OpBranchConditional %65 %58 %59 
					                                     %58 = OpLabel 
					                        Uniform f32* %70 = OpAccessChain %31 %69 
					                                 f32 %71 = OpLoad %70 
					                        Uniform f32* %72 = OpAccessChain %31 %69 
					                                 f32 %73 = OpLoad %72 
					                               f32_2 %74 = OpCompositeConstruct %71 %73 
					                                 f32 %75 = OpCompositeExtract %74 0 
					                                 f32 %76 = OpCompositeExtract %74 1 
					                               f32_2 %77 = OpCompositeConstruct %75 %76 
					                                i32 %125 = OpLoad %56 
					                                             OpStore %128 %124 
					                    Function u32_4* %130 = OpAccessChain %128 %125 
					                              u32_4 %131 = OpLoad %130 
					                              u32_2 %132 = OpVectorShuffle %131 %131 0 1 
					                              f32_2 %133 = OpBitcast %132 
					                              f32_2 %134 = OpFMul %77 %133 
					                              f32_3 %135 = OpLoad %68 
					                              f32_3 %136 = OpVectorShuffle %135 %134 0 3 4 
					                                             OpStore %68 %136 
					                              f32_3 %138 = OpLoad %68 
					                              f32_2 %139 = OpVectorShuffle %138 %138 1 2 
					                              f32_3 %140 = OpLoad %68 
					                              f32_2 %141 = OpVectorShuffle %140 %140 1 2 
					                                f32 %142 = OpDot %139 %141 
					                                             OpStore %137 %142 
					                                f32 %143 = OpLoad %137 
					                                f32 %144 = OpExtInst %1 31 %143 
					                                             OpStore %137 %144 
					                       Private f32* %145 = OpAccessChain %68 %34 
					                                f32 %146 = OpLoad %145 
					                       Uniform f32* %148 = OpAccessChain %31 %147 
					                                f32 %149 = OpLoad %148 
					                                f32 %150 = OpFMul %146 %149 
					                       Private f32* %151 = OpAccessChain %68 %44 
					                                             OpStore %151 %150 
					                              f32_3 %152 = OpLoad %68 
					                              f32_2 %153 = OpVectorShuffle %152 %152 0 2 
					                              f32_2 %154 = OpLoad vs_TEXCOORD0 
					                              f32_2 %155 = OpFAdd %153 %154 
					                              f32_3 %156 = OpLoad %68 
					                              f32_3 %157 = OpVectorShuffle %156 %155 3 4 2 
					                                             OpStore %68 %157 
					                read_only Texture2D %159 = OpLoad %11 
					                            sampler %160 = OpLoad %15 
					         read_only Texture2DSampled %161 = OpSampledImage %159 %160 
					                              f32_3 %162 = OpLoad %68 
					                              f32_2 %163 = OpVectorShuffle %162 %162 0 1 
					                              f32_4 %164 = OpImageSampleImplicitLod %161 %163 
					                                             OpStore %158 %164 
					                                f32 %166 = OpLoad %8 
					                       Private f32* %167 = OpAccessChain %158 %26 
					                                f32 %168 = OpLoad %167 
					                                f32 %169 = OpExtInst %1 37 %166 %168 
					                       Private f32* %170 = OpAccessChain %165 %44 
					                                             OpStore %170 %169 
					                       Private f32* %171 = OpAccessChain %165 %44 
					                                f32 %172 = OpLoad %171 
					                                f32 %173 = OpExtInst %1 40 %172 %43 
					                       Private f32* %174 = OpAccessChain %165 %44 
					                                             OpStore %174 %173 
					                                f32 %176 = OpLoad %137 
					                                f32 %177 = OpFNegate %176 
					                       Private f32* %178 = OpAccessChain %165 %44 
					                                f32 %179 = OpLoad %178 
					                                f32 %180 = OpFAdd %177 %179 
					                                             OpStore %175 %180 
					                       Uniform f32* %181 = OpAccessChain %31 %33 %34 
					                                f32 %182 = OpLoad %181 
					                                f32 %184 = OpFMul %182 %183 
					                                f32 %185 = OpLoad %175 
					                                f32 %186 = OpFAdd %184 %185 
					                                             OpStore %175 %186 
					                                f32 %188 = OpLoad %175 
					                                f32 %189 = OpLoad %28 
					                                f32 %190 = OpFDiv %188 %189 
					                                             OpStore %187 %190 
					                                f32 %191 = OpLoad %187 
					                                f32 %193 = OpExtInst %1 43 %191 %43 %192 
					                                             OpStore %187 %193 
					                                f32 %194 = OpLoad %137 
					                                f32 %195 = OpFNegate %194 
					                       Private f32* %196 = OpAccessChain %158 %26 
					                                f32 %197 = OpLoad %196 
					                                f32 %198 = OpFNegate %197 
					                                f32 %199 = OpFAdd %195 %198 
					                                             OpStore %137 %199 
					                       Uniform f32* %200 = OpAccessChain %31 %33 %34 
					                                f32 %201 = OpLoad %200 
					                                f32 %202 = OpFMul %201 %183 
					                                f32 %203 = OpLoad %137 
					                                f32 %204 = OpFAdd %202 %203 
					                                             OpStore %137 %204 
					                                f32 %205 = OpLoad %137 
					                                f32 %206 = OpLoad %28 
					                                f32 %207 = OpFDiv %205 %206 
					                                             OpStore %137 %207 
					                                f32 %208 = OpLoad %137 
					                                f32 %209 = OpExtInst %1 43 %208 %43 %192 
					                                             OpStore %137 %209 
					                       Private f32* %212 = OpAccessChain %158 %26 
					                                f32 %213 = OpLoad %212 
					                                f32 %214 = OpFNegate %213 
					                       Uniform f32* %215 = OpAccessChain %31 %33 %34 
					                                f32 %216 = OpLoad %215 
					                               bool %217 = OpFOrdGreaterThanEqual %214 %216 
					                                             OpStore %211 %217 
					                               bool %219 = OpLoad %211 
					                                f32 %220 = OpSelect %219 %192 %43 
					                                             OpStore %218 %220 
					                                f32 %222 = OpLoad %137 
					                                f32 %223 = OpLoad %218 
					                                f32 %224 = OpFMul %222 %223 
					                                             OpStore %221 %224 
					                              f32_4 %225 = OpLoad %158 
					                              f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                f32 %227 = OpLoad %187 
					                              f32_3 %228 = OpCompositeConstruct %227 %227 %227 
					                              f32_3 %229 = OpFMul %226 %228 
					                              f32_4 %230 = OpLoad %165 
					                              f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
					                                             OpStore %165 %231 
					                                f32 %232 = OpLoad %187 
					                       Private f32* %233 = OpAccessChain %165 %26 
					                                             OpStore %233 %232 
					                              f32_4 %234 = OpLoad %165 
					                              f32_4 %235 = OpLoad %42 
					                              f32_4 %236 = OpFAdd %234 %235 
					                                             OpStore %42 %236 
					                              f32_4 %238 = OpLoad %158 
					                              f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
					                                f32 %240 = OpLoad %221 
					                              f32_3 %241 = OpCompositeConstruct %240 %240 %240 
					                              f32_3 %242 = OpFMul %239 %241 
					                              f32_4 %243 = OpLoad %237 
					                              f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
					                                             OpStore %237 %244 
					                                f32 %245 = OpLoad %221 
					                       Private f32* %246 = OpAccessChain %237 %26 
					                                             OpStore %246 %245 
					                              f32_4 %247 = OpLoad %237 
					                              f32_4 %248 = OpLoad %50 
					                              f32_4 %249 = OpFAdd %247 %248 
					                                             OpStore %50 %249 
					                                             OpBranch %60 
					                                     %60 = OpLabel 
					                                i32 %250 = OpLoad %56 
					                                i32 %251 = OpIAdd %250 %69 
					                                             OpStore %56 %251 
					                                             OpBranch %57 
					                                     %59 = OpLabel 
					                       Private f32* %253 = OpAccessChain %42 %26 
					                                f32 %254 = OpLoad %253 
					                               bool %255 = OpFOrdEqual %254 %43 
					                                             OpStore %252 %255 
					                               bool %256 = OpLoad %252 
					                                f32 %257 = OpSelect %256 %192 %43 
					                       Private f32* %258 = OpAccessChain %165 %44 
					                                             OpStore %258 %257 
					                       Private f32* %260 = OpAccessChain %42 %26 
					                                f32 %261 = OpLoad %260 
					                       Private f32* %262 = OpAccessChain %165 %44 
					                                f32 %263 = OpLoad %262 
					                                f32 %264 = OpFAdd %261 %263 
					                                             OpStore %259 %264 
					                              f32_4 %265 = OpLoad %42 
					                              f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
					                                f32 %267 = OpLoad %259 
					                              f32_3 %268 = OpCompositeConstruct %267 %267 %267 
					                              f32_3 %269 = OpFDiv %266 %268 
					                              f32_4 %270 = OpLoad %42 
					                              f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
					                                             OpStore %42 %271 
					                       Private f32* %272 = OpAccessChain %50 %26 
					                                f32 %273 = OpLoad %272 
					                               bool %274 = OpFOrdEqual %273 %43 
					                                             OpStore %252 %274 
					                               bool %275 = OpLoad %252 
					                                f32 %276 = OpSelect %275 %192 %43 
					                                             OpStore %259 %276 
					                                f32 %277 = OpLoad %259 
					                       Private f32* %278 = OpAccessChain %50 %26 
					                                f32 %279 = OpLoad %278 
					                                f32 %280 = OpFAdd %277 %279 
					                                             OpStore %259 %280 
					                              f32_4 %281 = OpLoad %50 
					                              f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
					                                f32 %283 = OpLoad %259 
					                              f32_3 %284 = OpCompositeConstruct %283 %283 %283 
					                              f32_3 %285 = OpFDiv %282 %284 
					                              f32_4 %286 = OpLoad %50 
					                              f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
					                                             OpStore %50 %287 
					                       Private f32* %289 = OpAccessChain %50 %26 
					                                f32 %290 = OpLoad %289 
					                                f32 %292 = OpFMul %290 %291 
					                                             OpStore %288 %292 
					                                f32 %293 = OpLoad %288 
					                                f32 %294 = OpExtInst %1 37 %293 %192 
					                                             OpStore %259 %294 
					                              f32_4 %295 = OpLoad %42 
					                              f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
					                              f32_3 %297 = OpFNegate %296 
					                              f32_4 %298 = OpLoad %50 
					                              f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
					                              f32_3 %300 = OpFAdd %297 %299 
					                              f32_4 %301 = OpLoad %50 
					                              f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
					                                             OpStore %50 %302 
					                                f32 %305 = OpLoad %259 
					                              f32_3 %306 = OpCompositeConstruct %305 %305 %305 
					                              f32_4 %307 = OpLoad %50 
					                              f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
					                              f32_3 %309 = OpFMul %306 %308 
					                              f32_4 %310 = OpLoad %42 
					                              f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                              f32_3 %312 = OpFAdd %309 %311 
					                              f32_4 %313 = OpLoad %304 
					                              f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
					                                             OpStore %304 %314 
					                                f32 %315 = OpLoad %259 
					                        Output f32* %317 = OpAccessChain %304 %26 
					                                             OpStore %317 %315 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec2 ImmCB_0_0_0[16];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						float _RcpAspect;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.545454562, 0.0);
						ImmCB_0_0_0[2] = vec2(0.168554723, 0.518758118);
						ImmCB_0_0_0[3] = vec2(-0.441282034, 0.320610106);
						ImmCB_0_0_0[4] = vec2(-0.441281974, -0.320610195);
						ImmCB_0_0_0[5] = vec2(0.168554798, -0.518758118);
						ImmCB_0_0_0[6] = vec2(1.0, 0.0);
						ImmCB_0_0_0[7] = vec2(0.809017003, 0.587785244);
						ImmCB_0_0_0[8] = vec2(0.309016973, 0.95105654);
						ImmCB_0_0_0[9] = vec2(-0.309017032, 0.95105648);
						ImmCB_0_0_0[10] = vec2(-0.809017062, 0.587785184);
						ImmCB_0_0_0[11] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[12] = vec2(-0.809016943, -0.587785363);
						ImmCB_0_0_0[13] = vec2(-0.309016645, -0.9510566);
						ImmCB_0_0_0[14] = vec2(0.309017122, -0.95105648);
						ImmCB_0_0_0[15] = vec2(0.809016943, -0.587785304);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.196349546;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Bokeh Filter (medium)"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 830967
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[22];
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					uniform 	float _RcpAspect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.533333361, 0.0);
						ImmCB_0_0_0[2] = vec2(0.332527906, 0.41697681);
						ImmCB_0_0_0[3] = vec2(-0.118677847, 0.519961596);
						ImmCB_0_0_0[4] = vec2(-0.480516732, 0.231404707);
						ImmCB_0_0_0[5] = vec2(-0.480516732, -0.231404677);
						ImmCB_0_0_0[6] = vec2(-0.118677631, -0.519961655);
						ImmCB_0_0_0[7] = vec2(0.332527846, -0.416976899);
						ImmCB_0_0_0[8] = vec2(1.0, 0.0);
						ImmCB_0_0_0[9] = vec2(0.90096885, 0.433883756);
						ImmCB_0_0_0[10] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[11] = vec2(0.222520977, 0.974927902);
						ImmCB_0_0_0[12] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[13] = vec2(-0.623489976, 0.781831384);
						ImmCB_0_0_0[14] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[15] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[17] = vec2(-0.623489618, -0.781831622);
						ImmCB_0_0_0[18] = vec2(-0.222520545, -0.974928021);
						ImmCB_0_0_0[19] = vec2(0.222521499, -0.974927783);
						ImmCB_0_0_0[20] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[21] = vec2(0.90096885, -0.433883756);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<22 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.142799661;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 334
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %316 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %24 RelaxedPrecision 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpMemberDecorate %29 0 Offset 29 
					                                             OpMemberDecorate %29 1 Offset 29 
					                                             OpMemberDecorate %29 2 Offset 29 
					                                             OpDecorate %29 Block 
					                                             OpDecorate %31 DescriptorSet 31 
					                                             OpDecorate %31 Binding 31 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %170 RelaxedPrecision 
					                                             OpDecorate %171 RelaxedPrecision 
					                                             OpDecorate %172 RelaxedPrecision 
					                                             OpDecorate %177 RelaxedPrecision 
					                                             OpDecorate %178 RelaxedPrecision 
					                                             OpDecorate %180 RelaxedPrecision 
					                                             OpDecorate %181 RelaxedPrecision 
					                                             OpDecorate %184 RelaxedPrecision 
					                                             OpDecorate %185 RelaxedPrecision 
					                                             OpDecorate %191 RelaxedPrecision 
					                                             OpDecorate %209 RelaxedPrecision 
					                                             OpDecorate %210 RelaxedPrecision 
					                                             OpDecorate %225 RelaxedPrecision 
					                                             OpDecorate %226 RelaxedPrecision 
					                                             OpDecorate %237 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %240 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %246 RelaxedPrecision 
					                                             OpDecorate %247 RelaxedPrecision 
					                                             OpDecorate %248 RelaxedPrecision 
					                                             OpDecorate %249 RelaxedPrecision 
					                                             OpDecorate %250 RelaxedPrecision 
					                                             OpDecorate %251 RelaxedPrecision 
					                                             OpDecorate %253 RelaxedPrecision 
					                                             OpDecorate %254 RelaxedPrecision 
					                                             OpDecorate %259 RelaxedPrecision 
					                                             OpDecorate %260 RelaxedPrecision 
					                                             OpDecorate %261 RelaxedPrecision 
					                                             OpDecorate %266 RelaxedPrecision 
					                                             OpDecorate %271 RelaxedPrecision 
					                                             OpDecorate %273 RelaxedPrecision 
					                                             OpDecorate %275 RelaxedPrecision 
					                                             OpDecorate %276 RelaxedPrecision 
					                                             OpDecorate %277 RelaxedPrecision 
					                                             OpDecorate %278 RelaxedPrecision 
					                                             OpDecorate %279 RelaxedPrecision 
					                                             OpDecorate %280 RelaxedPrecision 
					                                             OpDecorate %281 RelaxedPrecision 
					                                             OpDecorate %285 RelaxedPrecision 
					                                             OpDecorate %289 RelaxedPrecision 
					                                             OpDecorate %291 RelaxedPrecision 
					                                             OpDecorate %292 RelaxedPrecision 
					                                             OpDecorate %293 RelaxedPrecision 
					                                             OpDecorate %294 RelaxedPrecision 
					                                             OpDecorate %295 RelaxedPrecision 
					                                             OpDecorate %296 RelaxedPrecision 
					                                             OpDecorate %297 RelaxedPrecision 
					                                             OpDecorate %300 RelaxedPrecision 
					                                             OpDecorate %302 RelaxedPrecision 
					                                             OpDecorate %304 RelaxedPrecision 
					                                             OpDecorate %305 RelaxedPrecision 
					                                             OpDecorate %306 RelaxedPrecision 
					                                             OpDecorate %307 RelaxedPrecision 
					                                             OpDecorate %308 RelaxedPrecision 
					                                             OpDecorate %309 RelaxedPrecision 
					                                             OpDecorate %310 RelaxedPrecision 
					                                             OpDecorate %311 RelaxedPrecision 
					                                             OpDecorate %312 RelaxedPrecision 
					                                             OpDecorate %316 RelaxedPrecision 
					                                             OpDecorate %316 Location 316 
					                                             OpDecorate %317 RelaxedPrecision 
					                                             OpDecorate %318 RelaxedPrecision 
					                                             OpDecorate %319 RelaxedPrecision 
					                                             OpDecorate %320 RelaxedPrecision 
					                                             OpDecorate %321 RelaxedPrecision 
					                                             OpDecorate %322 RelaxedPrecision 
					                                             OpDecorate %323 RelaxedPrecision 
					                                             OpDecorate %324 RelaxedPrecision 
					                                             OpDecorate %327 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %29 = OpTypeStruct %23 %6 %6 
					                                     %30 = OpTypePointer Uniform %29 
					  Uniform struct {f32_4; f32; f32;}* %31 = OpVariable Uniform 
					                                     %32 = OpTypeInt 32 1 
					                                 i32 %33 = OpConstant 0 
					                                 u32 %34 = OpConstant 1 
					                                     %35 = OpTypePointer Uniform %6 
					                                     %41 = OpTypePointer Private %23 
					                      Private f32_4* %42 = OpVariable Private 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                                 u32 %44 = OpConstant 0 
					                                 u32 %47 = OpConstant 2 
					                      Private f32_4* %50 = OpVariable Private 
					                                     %55 = OpTypePointer Function %32 
					                                 i32 %63 = OpConstant 22 
					                                     %64 = OpTypeBool 
					                                     %66 = OpTypeVector %6 3 
					                                     %67 = OpTypePointer Private %66 
					                      Private f32_3* %68 = OpVariable Private 
					                                 i32 %69 = OpConstant 1 
					                                     %78 = OpTypeVector %25 4 
					                                 u32 %79 = OpConstant 22 
					                                     %80 = OpTypeArray %78 %79 
					                               u32_4 %81 = OpConstantComposite %44 %44 %44 %44 
					                                 u32 %82 = OpConstant 1057523849 
					                               u32_4 %83 = OpConstantComposite %82 %44 %44 %44 
					                                 u32 %84 = OpConstant 1051345177 
					                                 u32 %85 = OpConstant 1054178812 
					                               u32_4 %86 = OpConstantComposite %84 %85 %44 %44 
					                                 u32 %87 = OpConstant 3186822495 
					                                 u32 %88 = OpConstant 1057299508 
					                               u32_4 %89 = OpConstantComposite %87 %88 %44 %44 
					                                 u32 %90 = OpConstant 3203794506 
					                                 u32 %91 = OpConstant 1047328091 
					                               u32_4 %92 = OpConstantComposite %90 %91 %44 %44 
					                                 u32 %93 = OpConstant 3194811737 
					                               u32_4 %94 = OpConstantComposite %90 %93 %44 %44 
					                                 u32 %95 = OpConstant 3186822466 
					                                 u32 %96 = OpConstant 3204783157 
					                               u32_4 %97 = OpConstantComposite %95 %96 %44 %44 
					                                 u32 %98 = OpConstant 1051345175 
					                                 u32 %99 = OpConstant 3201662463 
					                              u32_4 %100 = OpConstantComposite %98 %99 %44 %44 
					                                u32 %101 = OpConstant 1065353216 
					                              u32_4 %102 = OpConstantComposite %101 %44 %44 %44 
					                                u32 %103 = OpConstant 1063691749 
					                                u32 %104 = OpConstant 1054746115 
					                              u32_4 %105 = OpConstantComposite %103 %104 %44 %44 
					                                u32 %106 = OpConstant 1059036423 
					                                u32 %107 = OpConstant 1061692956 
					                              u32_4 %108 = OpConstantComposite %106 %107 %44 %44 
					                                u32 %109 = OpConstant 1046731914 
					                                u32 %110 = OpConstant 1064932576 
					                              u32_4 %111 = OpConstantComposite %109 %110 %44 %44 
					                                u32 %112 = OpConstant 3194215560 
					                              u32_4 %113 = OpConstantComposite %112 %110 %44 %44 
					                                u32 %114 = OpConstant 3206520074 
					                                u32 %115 = OpConstant 1061692954 
					                              u32_4 %116 = OpConstantComposite %114 %115 %44 %44 
					                                u32 %117 = OpConstant 3211175397 
					                                u32 %118 = OpConstant 1054746117 
					                              u32_4 %119 = OpConstantComposite %117 %118 %44 %44 
					                                u32 %120 = OpConstant 3212836864 
					                              u32_4 %121 = OpConstantComposite %120 %44 %44 %44 
					                                u32 %122 = OpConstant 3202229763 
					                              u32_4 %123 = OpConstantComposite %117 %122 %44 %44 
					                                u32 %124 = OpConstant 3206520068 
					                                u32 %125 = OpConstant 3209176606 
					                              u32_4 %126 = OpConstantComposite %124 %125 %44 %44 
					                                u32 %127 = OpConstant 3194215533 
					                                u32 %128 = OpConstant 3212416226 
					                              u32_4 %129 = OpConstantComposite %127 %128 %44 %44 
					                                u32 %130 = OpConstant 1046731949 
					                                u32 %131 = OpConstant 3212416222 
					                              u32_4 %132 = OpConstantComposite %130 %131 %44 %44 
					                                u32 %133 = OpConstant 1059036421 
					                              u32_4 %134 = OpConstantComposite %133 %125 %44 %44 
					                              u32_4 %135 = OpConstantComposite %103 %122 %44 %44 
					                          u32_4[22] %136 = OpConstantComposite %81 %83 %86 %89 %92 %94 %97 %100 %102 %105 %108 %111 %113 %116 %119 %121 %123 %126 %129 %132 %134 %135 
					                                    %138 = OpTypeVector %25 2 
					                                    %139 = OpTypePointer Function %80 
					                                    %141 = OpTypePointer Function %78 
					                       Private f32* %149 = OpVariable Private 
					                                i32 %159 = OpConstant 2 
					                     Private f32_4* %170 = OpVariable Private 
					                     Private f32_4* %177 = OpVariable Private 
					                       Private f32* %187 = OpVariable Private 
					                                f32 %195 = OpConstant 3,674022E-40 
					                       Private f32* %199 = OpVariable Private 
					                                f32 %204 = OpConstant 3,674022E-40 
					                                    %222 = OpTypePointer Private %64 
					                      Private bool* %223 = OpVariable Private 
					                       Private f32* %230 = OpVariable Private 
					                       Private f32* %233 = OpVariable Private 
					                     Private f32_4* %249 = OpVariable Private 
					                      Private bool* %264 = OpVariable Private 
					                       Private f32* %271 = OpVariable Private 
					                       Private f32* %300 = OpVariable Private 
					                                f32 %303 = OpConstant 3,674022E-40 
					                                    %315 = OpTypePointer Output %23 
					                      Output f32_4* %316 = OpVariable Output 
					                                    %328 = OpTypePointer Output %6 
					                                    %331 = OpTypePointer Private %32 
					                       Private i32* %332 = OpVariable Private 
					                      Private bool* %333 = OpVariable Private 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                       Function i32* %56 = OpVariable Function 
					                Function u32_4[22]* %140 = OpVariable Function 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD0 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                        Uniform f32* %36 = OpAccessChain %31 %33 %34 
					                                 f32 %37 = OpLoad %36 
					                        Uniform f32* %38 = OpAccessChain %31 %33 %34 
					                                 f32 %39 = OpLoad %38 
					                                 f32 %40 = OpFAdd %37 %39 
					                                             OpStore %28 %40 
					                        Private f32* %45 = OpAccessChain %42 %44 
					                                             OpStore %45 %43 
					                        Private f32* %46 = OpAccessChain %42 %34 
					                                             OpStore %46 %43 
					                        Private f32* %48 = OpAccessChain %42 %47 
					                                             OpStore %48 %43 
					                        Private f32* %49 = OpAccessChain %42 %26 
					                                             OpStore %49 %43 
					                        Private f32* %51 = OpAccessChain %50 %44 
					                                             OpStore %51 %43 
					                        Private f32* %52 = OpAccessChain %50 %34 
					                                             OpStore %52 %43 
					                        Private f32* %53 = OpAccessChain %50 %47 
					                                             OpStore %53 %43 
					                        Private f32* %54 = OpAccessChain %50 %26 
					                                             OpStore %54 %43 
					                                             OpStore %56 %33 
					                                             OpBranch %57 
					                                     %57 = OpLabel 
					                                             OpLoopMerge %59 %60 None 
					                                             OpBranch %61 
					                                     %61 = OpLabel 
					                                 i32 %62 = OpLoad %56 
					                                bool %65 = OpSLessThan %62 %63 
					                                             OpBranchConditional %65 %58 %59 
					                                     %58 = OpLabel 
					                        Uniform f32* %70 = OpAccessChain %31 %69 
					                                 f32 %71 = OpLoad %70 
					                        Uniform f32* %72 = OpAccessChain %31 %69 
					                                 f32 %73 = OpLoad %72 
					                               f32_2 %74 = OpCompositeConstruct %71 %73 
					                                 f32 %75 = OpCompositeExtract %74 0 
					                                 f32 %76 = OpCompositeExtract %74 1 
					                               f32_2 %77 = OpCompositeConstruct %75 %76 
					                                i32 %137 = OpLoad %56 
					                                             OpStore %140 %136 
					                    Function u32_4* %142 = OpAccessChain %140 %137 
					                              u32_4 %143 = OpLoad %142 
					                              u32_2 %144 = OpVectorShuffle %143 %143 0 1 
					                              f32_2 %145 = OpBitcast %144 
					                              f32_2 %146 = OpFMul %77 %145 
					                              f32_3 %147 = OpLoad %68 
					                              f32_3 %148 = OpVectorShuffle %147 %146 0 3 4 
					                                             OpStore %68 %148 
					                              f32_3 %150 = OpLoad %68 
					                              f32_2 %151 = OpVectorShuffle %150 %150 1 2 
					                              f32_3 %152 = OpLoad %68 
					                              f32_2 %153 = OpVectorShuffle %152 %152 1 2 
					                                f32 %154 = OpDot %151 %153 
					                                             OpStore %149 %154 
					                                f32 %155 = OpLoad %149 
					                                f32 %156 = OpExtInst %1 31 %155 
					                                             OpStore %149 %156 
					                       Private f32* %157 = OpAccessChain %68 %34 
					                                f32 %158 = OpLoad %157 
					                       Uniform f32* %160 = OpAccessChain %31 %159 
					                                f32 %161 = OpLoad %160 
					                                f32 %162 = OpFMul %158 %161 
					                       Private f32* %163 = OpAccessChain %68 %44 
					                                             OpStore %163 %162 
					                              f32_3 %164 = OpLoad %68 
					                              f32_2 %165 = OpVectorShuffle %164 %164 0 2 
					                              f32_2 %166 = OpLoad vs_TEXCOORD0 
					                              f32_2 %167 = OpFAdd %165 %166 
					                              f32_3 %168 = OpLoad %68 
					                              f32_3 %169 = OpVectorShuffle %168 %167 3 4 2 
					                                             OpStore %68 %169 
					                read_only Texture2D %171 = OpLoad %11 
					                            sampler %172 = OpLoad %15 
					         read_only Texture2DSampled %173 = OpSampledImage %171 %172 
					                              f32_3 %174 = OpLoad %68 
					                              f32_2 %175 = OpVectorShuffle %174 %174 0 1 
					                              f32_4 %176 = OpImageSampleImplicitLod %173 %175 
					                                             OpStore %170 %176 
					                                f32 %178 = OpLoad %8 
					                       Private f32* %179 = OpAccessChain %170 %26 
					                                f32 %180 = OpLoad %179 
					                                f32 %181 = OpExtInst %1 37 %178 %180 
					                       Private f32* %182 = OpAccessChain %177 %44 
					                                             OpStore %182 %181 
					                       Private f32* %183 = OpAccessChain %177 %44 
					                                f32 %184 = OpLoad %183 
					                                f32 %185 = OpExtInst %1 40 %184 %43 
					                       Private f32* %186 = OpAccessChain %177 %44 
					                                             OpStore %186 %185 
					                                f32 %188 = OpLoad %149 
					                                f32 %189 = OpFNegate %188 
					                       Private f32* %190 = OpAccessChain %177 %44 
					                                f32 %191 = OpLoad %190 
					                                f32 %192 = OpFAdd %189 %191 
					                                             OpStore %187 %192 
					                       Uniform f32* %193 = OpAccessChain %31 %33 %34 
					                                f32 %194 = OpLoad %193 
					                                f32 %196 = OpFMul %194 %195 
					                                f32 %197 = OpLoad %187 
					                                f32 %198 = OpFAdd %196 %197 
					                                             OpStore %187 %198 
					                                f32 %200 = OpLoad %187 
					                                f32 %201 = OpLoad %28 
					                                f32 %202 = OpFDiv %200 %201 
					                                             OpStore %199 %202 
					                                f32 %203 = OpLoad %199 
					                                f32 %205 = OpExtInst %1 43 %203 %43 %204 
					                                             OpStore %199 %205 
					                                f32 %206 = OpLoad %149 
					                                f32 %207 = OpFNegate %206 
					                       Private f32* %208 = OpAccessChain %170 %26 
					                                f32 %209 = OpLoad %208 
					                                f32 %210 = OpFNegate %209 
					                                f32 %211 = OpFAdd %207 %210 
					                                             OpStore %149 %211 
					                       Uniform f32* %212 = OpAccessChain %31 %33 %34 
					                                f32 %213 = OpLoad %212 
					                                f32 %214 = OpFMul %213 %195 
					                                f32 %215 = OpLoad %149 
					                                f32 %216 = OpFAdd %214 %215 
					                                             OpStore %149 %216 
					                                f32 %217 = OpLoad %149 
					                                f32 %218 = OpLoad %28 
					                                f32 %219 = OpFDiv %217 %218 
					                                             OpStore %149 %219 
					                                f32 %220 = OpLoad %149 
					                                f32 %221 = OpExtInst %1 43 %220 %43 %204 
					                                             OpStore %149 %221 
					                       Private f32* %224 = OpAccessChain %170 %26 
					                                f32 %225 = OpLoad %224 
					                                f32 %226 = OpFNegate %225 
					                       Uniform f32* %227 = OpAccessChain %31 %33 %34 
					                                f32 %228 = OpLoad %227 
					                               bool %229 = OpFOrdGreaterThanEqual %226 %228 
					                                             OpStore %223 %229 
					                               bool %231 = OpLoad %223 
					                                f32 %232 = OpSelect %231 %204 %43 
					                                             OpStore %230 %232 
					                                f32 %234 = OpLoad %149 
					                                f32 %235 = OpLoad %230 
					                                f32 %236 = OpFMul %234 %235 
					                                             OpStore %233 %236 
					                              f32_4 %237 = OpLoad %170 
					                              f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
					                                f32 %239 = OpLoad %199 
					                              f32_3 %240 = OpCompositeConstruct %239 %239 %239 
					                              f32_3 %241 = OpFMul %238 %240 
					                              f32_4 %242 = OpLoad %177 
					                              f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
					                                             OpStore %177 %243 
					                                f32 %244 = OpLoad %199 
					                       Private f32* %245 = OpAccessChain %177 %26 
					                                             OpStore %245 %244 
					                              f32_4 %246 = OpLoad %177 
					                              f32_4 %247 = OpLoad %42 
					                              f32_4 %248 = OpFAdd %246 %247 
					                                             OpStore %42 %248 
					                              f32_4 %250 = OpLoad %170 
					                              f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
					                                f32 %252 = OpLoad %233 
					                              f32_3 %253 = OpCompositeConstruct %252 %252 %252 
					                              f32_3 %254 = OpFMul %251 %253 
					                              f32_4 %255 = OpLoad %249 
					                              f32_4 %256 = OpVectorShuffle %255 %254 4 5 6 3 
					                                             OpStore %249 %256 
					                                f32 %257 = OpLoad %233 
					                       Private f32* %258 = OpAccessChain %249 %26 
					                                             OpStore %258 %257 
					                              f32_4 %259 = OpLoad %249 
					                              f32_4 %260 = OpLoad %50 
					                              f32_4 %261 = OpFAdd %259 %260 
					                                             OpStore %50 %261 
					                                             OpBranch %60 
					                                     %60 = OpLabel 
					                                i32 %262 = OpLoad %56 
					                                i32 %263 = OpIAdd %262 %69 
					                                             OpStore %56 %263 
					                                             OpBranch %57 
					                                     %59 = OpLabel 
					                       Private f32* %265 = OpAccessChain %42 %26 
					                                f32 %266 = OpLoad %265 
					                               bool %267 = OpFOrdEqual %266 %43 
					                                             OpStore %264 %267 
					                               bool %268 = OpLoad %264 
					                                f32 %269 = OpSelect %268 %204 %43 
					                       Private f32* %270 = OpAccessChain %177 %44 
					                                             OpStore %270 %269 
					                       Private f32* %272 = OpAccessChain %42 %26 
					                                f32 %273 = OpLoad %272 
					                       Private f32* %274 = OpAccessChain %177 %44 
					                                f32 %275 = OpLoad %274 
					                                f32 %276 = OpFAdd %273 %275 
					                                             OpStore %271 %276 
					                              f32_4 %277 = OpLoad %42 
					                              f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
					                                f32 %279 = OpLoad %271 
					                              f32_3 %280 = OpCompositeConstruct %279 %279 %279 
					                              f32_3 %281 = OpFDiv %278 %280 
					                              f32_4 %282 = OpLoad %42 
					                              f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
					                                             OpStore %42 %283 
					                       Private f32* %284 = OpAccessChain %50 %26 
					                                f32 %285 = OpLoad %284 
					                               bool %286 = OpFOrdEqual %285 %43 
					                                             OpStore %264 %286 
					                               bool %287 = OpLoad %264 
					                                f32 %288 = OpSelect %287 %204 %43 
					                                             OpStore %271 %288 
					                                f32 %289 = OpLoad %271 
					                       Private f32* %290 = OpAccessChain %50 %26 
					                                f32 %291 = OpLoad %290 
					                                f32 %292 = OpFAdd %289 %291 
					                                             OpStore %271 %292 
					                              f32_4 %293 = OpLoad %50 
					                              f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
					                                f32 %295 = OpLoad %271 
					                              f32_3 %296 = OpCompositeConstruct %295 %295 %295 
					                              f32_3 %297 = OpFDiv %294 %296 
					                              f32_4 %298 = OpLoad %50 
					                              f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
					                                             OpStore %50 %299 
					                       Private f32* %301 = OpAccessChain %50 %26 
					                                f32 %302 = OpLoad %301 
					                                f32 %304 = OpFMul %302 %303 
					                                             OpStore %300 %304 
					                                f32 %305 = OpLoad %300 
					                                f32 %306 = OpExtInst %1 37 %305 %204 
					                                             OpStore %271 %306 
					                              f32_4 %307 = OpLoad %42 
					                              f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
					                              f32_3 %309 = OpFNegate %308 
					                              f32_4 %310 = OpLoad %50 
					                              f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                              f32_3 %312 = OpFAdd %309 %311 
					                              f32_4 %313 = OpLoad %50 
					                              f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
					                                             OpStore %50 %314 
					                                f32 %317 = OpLoad %271 
					                              f32_3 %318 = OpCompositeConstruct %317 %317 %317 
					                              f32_4 %319 = OpLoad %50 
					                              f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
					                              f32_3 %321 = OpFMul %318 %320 
					                              f32_4 %322 = OpLoad %42 
					                              f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
					                              f32_3 %324 = OpFAdd %321 %323 
					                              f32_4 %325 = OpLoad %316 
					                              f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
					                                             OpStore %316 %326 
					                                f32 %327 = OpLoad %271 
					                        Output f32* %329 = OpAccessChain %316 %26 
					                                             OpStore %329 %327 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec2 ImmCB_0_0_0[22];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						float _RcpAspect;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.533333361, 0.0);
						ImmCB_0_0_0[2] = vec2(0.332527906, 0.41697681);
						ImmCB_0_0_0[3] = vec2(-0.118677847, 0.519961596);
						ImmCB_0_0_0[4] = vec2(-0.480516732, 0.231404707);
						ImmCB_0_0_0[5] = vec2(-0.480516732, -0.231404677);
						ImmCB_0_0_0[6] = vec2(-0.118677631, -0.519961655);
						ImmCB_0_0_0[7] = vec2(0.332527846, -0.416976899);
						ImmCB_0_0_0[8] = vec2(1.0, 0.0);
						ImmCB_0_0_0[9] = vec2(0.90096885, 0.433883756);
						ImmCB_0_0_0[10] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[11] = vec2(0.222520977, 0.974927902);
						ImmCB_0_0_0[12] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[13] = vec2(-0.623489976, 0.781831384);
						ImmCB_0_0_0[14] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[15] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[17] = vec2(-0.623489618, -0.781831622);
						ImmCB_0_0_0[18] = vec2(-0.222520545, -0.974928021);
						ImmCB_0_0_0[19] = vec2(0.222521499, -0.974927783);
						ImmCB_0_0_0[20] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[21] = vec2(0.90096885, -0.433883756);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<22 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.142799661;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Bokeh Filter (large)"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 896045
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[43];
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					uniform 	float _RcpAspect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.363636374, 0.0);
						ImmCB_0_0_0[2] = vec2(0.226723567, 0.284302384);
						ImmCB_0_0_0[3] = vec2(-0.0809167102, 0.354519248);
						ImmCB_0_0_0[4] = vec2(-0.327625036, 0.157775939);
						ImmCB_0_0_0[5] = vec2(-0.327625036, -0.157775909);
						ImmCB_0_0_0[6] = vec2(-0.0809165612, -0.354519278);
						ImmCB_0_0_0[7] = vec2(0.226723522, -0.284302413);
						ImmCB_0_0_0[8] = vec2(0.681818187, 0.0);
						ImmCB_0_0_0[9] = vec2(0.614296973, 0.295829833);
						ImmCB_0_0_0[10] = vec2(0.425106674, 0.533066928);
						ImmCB_0_0_0[11] = vec2(0.151718855, 0.664723575);
						ImmCB_0_0_0[12] = vec2(-0.151718825, 0.664723575);
						ImmCB_0_0_0[13] = vec2(-0.425106794, 0.533066869);
						ImmCB_0_0_0[14] = vec2(-0.614296973, 0.295829862);
						ImmCB_0_0_0[15] = vec2(-0.681818187, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.614296973, -0.295829833);
						ImmCB_0_0_0[17] = vec2(-0.425106555, -0.533067048);
						ImmCB_0_0_0[18] = vec2(-0.151718557, -0.664723635);
						ImmCB_0_0_0[19] = vec2(0.151719198, -0.664723516);
						ImmCB_0_0_0[20] = vec2(0.425106615, -0.533067048);
						ImmCB_0_0_0[21] = vec2(0.614296973, -0.295829833);
						ImmCB_0_0_0[22] = vec2(1.0, 0.0);
						ImmCB_0_0_0[23] = vec2(0.955572784, 0.294755191);
						ImmCB_0_0_0[24] = vec2(0.826238751, 0.5633201);
						ImmCB_0_0_0[25] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[26] = vec2(0.365340978, 0.930873752);
						ImmCB_0_0_0[27] = vec2(0.0747300014, 0.997203827);
						ImmCB_0_0_0[28] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[29] = vec2(-0.50000006, 0.866025388);
						ImmCB_0_0_0[30] = vec2(-0.733051956, 0.680172682);
						ImmCB_0_0_0[31] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[32] = vec2(-0.988830864, 0.149042085);
						ImmCB_0_0_0[33] = vec2(-0.988830805, -0.149042487);
						ImmCB_0_0_0[34] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[35] = vec2(-0.733051836, -0.680172801);
						ImmCB_0_0_0[36] = vec2(-0.499999911, -0.866025448);
						ImmCB_0_0_0[37] = vec2(-0.222521007, -0.974927902);
						ImmCB_0_0_0[38] = vec2(0.074730292, -0.997203767);
						ImmCB_0_0_0[39] = vec2(0.365341485, -0.930873573);
						ImmCB_0_0_0[40] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[41] = vec2(0.826238811, -0.563319981);
						ImmCB_0_0_0[42] = vec2(0.955572903, -0.294754833);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<43 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.0730602965;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 395
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %377 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %24 RelaxedPrecision 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpMemberDecorate %29 0 Offset 29 
					                                             OpMemberDecorate %29 1 Offset 29 
					                                             OpMemberDecorate %29 2 Offset 29 
					                                             OpDecorate %29 Block 
					                                             OpDecorate %31 DescriptorSet 31 
					                                             OpDecorate %31 Binding 31 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %227 RelaxedPrecision 
					                                             OpDecorate %231 RelaxedPrecision 
					                                             OpDecorate %232 RelaxedPrecision 
					                                             OpDecorate %233 RelaxedPrecision 
					                                             OpDecorate %238 RelaxedPrecision 
					                                             OpDecorate %239 RelaxedPrecision 
					                                             OpDecorate %241 RelaxedPrecision 
					                                             OpDecorate %242 RelaxedPrecision 
					                                             OpDecorate %245 RelaxedPrecision 
					                                             OpDecorate %246 RelaxedPrecision 
					                                             OpDecorate %252 RelaxedPrecision 
					                                             OpDecorate %270 RelaxedPrecision 
					                                             OpDecorate %271 RelaxedPrecision 
					                                             OpDecorate %286 RelaxedPrecision 
					                                             OpDecorate %287 RelaxedPrecision 
					                                             OpDecorate %298 RelaxedPrecision 
					                                             OpDecorate %299 RelaxedPrecision 
					                                             OpDecorate %301 RelaxedPrecision 
					                                             OpDecorate %302 RelaxedPrecision 
					                                             OpDecorate %307 RelaxedPrecision 
					                                             OpDecorate %308 RelaxedPrecision 
					                                             OpDecorate %309 RelaxedPrecision 
					                                             OpDecorate %310 RelaxedPrecision 
					                                             OpDecorate %311 RelaxedPrecision 
					                                             OpDecorate %312 RelaxedPrecision 
					                                             OpDecorate %314 RelaxedPrecision 
					                                             OpDecorate %315 RelaxedPrecision 
					                                             OpDecorate %320 RelaxedPrecision 
					                                             OpDecorate %321 RelaxedPrecision 
					                                             OpDecorate %322 RelaxedPrecision 
					                                             OpDecorate %327 RelaxedPrecision 
					                                             OpDecorate %332 RelaxedPrecision 
					                                             OpDecorate %334 RelaxedPrecision 
					                                             OpDecorate %336 RelaxedPrecision 
					                                             OpDecorate %337 RelaxedPrecision 
					                                             OpDecorate %338 RelaxedPrecision 
					                                             OpDecorate %339 RelaxedPrecision 
					                                             OpDecorate %340 RelaxedPrecision 
					                                             OpDecorate %341 RelaxedPrecision 
					                                             OpDecorate %342 RelaxedPrecision 
					                                             OpDecorate %346 RelaxedPrecision 
					                                             OpDecorate %350 RelaxedPrecision 
					                                             OpDecorate %352 RelaxedPrecision 
					                                             OpDecorate %353 RelaxedPrecision 
					                                             OpDecorate %354 RelaxedPrecision 
					                                             OpDecorate %355 RelaxedPrecision 
					                                             OpDecorate %356 RelaxedPrecision 
					                                             OpDecorate %357 RelaxedPrecision 
					                                             OpDecorate %358 RelaxedPrecision 
					                                             OpDecorate %361 RelaxedPrecision 
					                                             OpDecorate %363 RelaxedPrecision 
					                                             OpDecorate %365 RelaxedPrecision 
					                                             OpDecorate %366 RelaxedPrecision 
					                                             OpDecorate %367 RelaxedPrecision 
					                                             OpDecorate %368 RelaxedPrecision 
					                                             OpDecorate %369 RelaxedPrecision 
					                                             OpDecorate %370 RelaxedPrecision 
					                                             OpDecorate %371 RelaxedPrecision 
					                                             OpDecorate %372 RelaxedPrecision 
					                                             OpDecorate %373 RelaxedPrecision 
					                                             OpDecorate %377 RelaxedPrecision 
					                                             OpDecorate %377 Location 377 
					                                             OpDecorate %378 RelaxedPrecision 
					                                             OpDecorate %379 RelaxedPrecision 
					                                             OpDecorate %380 RelaxedPrecision 
					                                             OpDecorate %381 RelaxedPrecision 
					                                             OpDecorate %382 RelaxedPrecision 
					                                             OpDecorate %383 RelaxedPrecision 
					                                             OpDecorate %384 RelaxedPrecision 
					                                             OpDecorate %385 RelaxedPrecision 
					                                             OpDecorate %388 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %29 = OpTypeStruct %23 %6 %6 
					                                     %30 = OpTypePointer Uniform %29 
					  Uniform struct {f32_4; f32; f32;}* %31 = OpVariable Uniform 
					                                     %32 = OpTypeInt 32 1 
					                                 i32 %33 = OpConstant 0 
					                                 u32 %34 = OpConstant 1 
					                                     %35 = OpTypePointer Uniform %6 
					                                     %41 = OpTypePointer Private %23 
					                      Private f32_4* %42 = OpVariable Private 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                                 u32 %44 = OpConstant 0 
					                                 u32 %47 = OpConstant 2 
					                      Private f32_4* %50 = OpVariable Private 
					                                     %55 = OpTypePointer Function %32 
					                                 i32 %63 = OpConstant 43 
					                                     %64 = OpTypeBool 
					                                     %66 = OpTypeVector %6 3 
					                                     %67 = OpTypePointer Private %66 
					                      Private f32_3* %68 = OpVariable Private 
					                                 i32 %69 = OpConstant 1 
					                                     %78 = OpTypeVector %25 4 
					                                 u32 %79 = OpConstant 43 
					                                     %80 = OpTypeArray %78 %79 
					                               u32_4 %81 = OpConstantComposite %44 %44 %44 %44 
					                                 u32 %82 = OpConstant 1052389004 
					                               u32_4 %83 = OpConstantComposite %82 %44 %44 %44 
					                                 u32 %84 = OpConstant 1047013945 
					                                 u32 %85 = OpConstant 1049726997 
					                               u32_4 %86 = OpConstantComposite %84 %85 %44 %44 
					                                 u32 %87 = OpConstant 3181754281 
					                                 u32 %88 = OpConstant 1052083084 
					                               u32_4 %89 = OpConstantComposite %87 %88 %44 %44 
					                                 u32 %90 = OpConstant 3198664312 
					                                 u32 %91 = OpConstant 1042386948 
					                               u32_4 %92 = OpConstantComposite %90 %91 %44 %44 
					                                 u32 %93 = OpConstant 3189870594 
					                               u32_4 %94 = OpConstantComposite %90 %93 %44 %44 
					                                 u32 %95 = OpConstant 3181754261 
					                                 u32 %96 = OpConstant 3199566733 
					                               u32_4 %97 = OpConstantComposite %95 %96 %44 %44 
					                                 u32 %98 = OpConstant 1047013942 
					                                 u32 %99 = OpConstant 3197210646 
					                              u32_4 %100 = OpConstantComposite %98 %99 %44 %44 
					                                u32 %101 = OpConstant 1060015011 
					                              u32_4 %102 = OpConstantComposite %101 %44 %44 %44 
					                                u32 %103 = OpConstant 1058882193 
					                                u32 %104 = OpConstant 1050113794 
					                              u32_4 %105 = OpConstantComposite %103 %104 %44 %44 
					                                u32 %106 = OpConstant 1054451605 
					                                u32 %107 = OpConstant 1057519379 
					                              u32_4 %108 = OpConstantComposite %106 %107 %44 %44 
					                                u32 %109 = OpConstant 1041980464 
					                                u32 %110 = OpConstant 1059728211 
					                              u32_4 %111 = OpConstantComposite %109 %110 %44 %44 
					                                u32 %112 = OpConstant 3189464110 
					                              u32_4 %113 = OpConstantComposite %112 %110 %44 %44 
					                                u32 %114 = OpConstant 3201935257 
					                                u32 %115 = OpConstant 1057519378 
					                              u32_4 %116 = OpConstantComposite %114 %115 %44 %44 
					                                u32 %117 = OpConstant 3206365841 
					                                u32 %118 = OpConstant 1050113795 
					                              u32_4 %119 = OpConstantComposite %117 %118 %44 %44 
					                                u32 %120 = OpConstant 3207498659 
					                              u32_4 %121 = OpConstantComposite %120 %44 %44 %44 
					                                u32 %122 = OpConstant 3197597442 
					                              u32_4 %123 = OpConstantComposite %117 %122 %44 %44 
					                                u32 %124 = OpConstant 3201935249 
					                                u32 %125 = OpConstant 3205003029 
					                              u32_4 %126 = OpConstantComposite %124 %125 %44 %44 
					                                u32 %127 = OpConstant 3189464092 
					                                u32 %128 = OpConstant 3207211860 
					                              u32_4 %129 = OpConstantComposite %127 %128 %44 %44 
					                                u32 %130 = OpConstant 1041980487 
					                                u32 %131 = OpConstant 3207211858 
					                              u32_4 %132 = OpConstantComposite %130 %131 %44 %44 
					                                u32 %133 = OpConstant 1054451603 
					                              u32_4 %134 = OpConstantComposite %133 %125 %44 %44 
					                              u32_4 %135 = OpConstantComposite %103 %122 %44 %44 
					                                u32 %136 = OpConstant 1065353216 
					                              u32_4 %137 = OpConstantComposite %136 %44 %44 %44 
					                                u32 %138 = OpConstant 1064607851 
					                                u32 %139 = OpConstant 1050077735 
					                              u32_4 %140 = OpConstantComposite %138 %139 %44 %44 
					                                u32 %141 = OpConstant 1062437986 
					                                u32 %142 = OpConstant 1058026943 
					                              u32_4 %143 = OpConstantComposite %141 %142 %44 %44 
					                                u32 %144 = OpConstant 1059036423 
					                                u32 %145 = OpConstant 1061692956 
					                              u32_4 %146 = OpConstantComposite %144 %145 %44 %44 
					                                u32 %147 = OpConstant 1052446201 
					                                u32 %148 = OpConstant 1064193470 
					                              u32_4 %149 = OpConstantComposite %147 %148 %44 %44 
					                                u32 %150 = OpConstant 1033440267 
					                                u32 %151 = OpConstant 1065306304 
					                              u32_4 %152 = OpConstantComposite %150 %151 %44 %44 
					                                u32 %153 = OpConstant 3194215560 
					                                u32 %154 = OpConstant 1064932576 
					                              u32_4 %155 = OpConstantComposite %153 %154 %44 %44 
					                                u32 %156 = OpConstant 3204448257 
					                                u32 %157 = OpConstant 1063105495 
					                              u32_4 %158 = OpConstantComposite %156 %157 %44 %44 
					                                u32 %159 = OpConstant 3208358219 
					                                u32 %160 = OpConstant 1059987404 
					                              u32_4 %161 = OpConstantComposite %159 %160 %44 %44 
					                                u32 %162 = OpConstant 3211175397 
					                                u32 %163 = OpConstant 1054746117 
					                              u32_4 %164 = OpConstantComposite %162 %163 %44 %44 
					                                u32 %165 = OpConstant 3212649477 
					                                u32 %166 = OpConstant 1041800829 
					                              u32_4 %167 = OpConstantComposite %165 %166 %44 %44 
					                                u32 %168 = OpConstant 3212649476 
					                                u32 %169 = OpConstant 3189284504 
					                              u32_4 %170 = OpConstantComposite %168 %169 %44 %44 
					                                u32 %171 = OpConstant 3202229763 
					                              u32_4 %172 = OpConstantComposite %162 %171 %44 %44 
					                                u32 %173 = OpConstant 3208358217 
					                                u32 %174 = OpConstant 3207471054 
					                              u32_4 %175 = OpConstantComposite %173 %174 %44 %44 
					                                u32 %176 = OpConstant 3204448253 
					                                u32 %177 = OpConstant 3210589144 
					                              u32_4 %178 = OpConstantComposite %176 %177 %44 %44 
					                                u32 %179 = OpConstant 3194215564 
					                                u32 %180 = OpConstant 3212416224 
					                              u32_4 %181 = OpConstantComposite %179 %180 %44 %44 
					                                u32 %182 = OpConstant 1033440306 
					                                u32 %183 = OpConstant 3212789951 
					                              u32_4 %184 = OpConstantComposite %182 %183 %44 %44 
					                                u32 %185 = OpConstant 1052446218 
					                                u32 %186 = OpConstant 3211677115 
					                              u32_4 %187 = OpConstantComposite %185 %186 %44 %44 
					                                u32 %188 = OpConstant 1059036421 
					                                u32 %189 = OpConstant 3209176606 
					                              u32_4 %190 = OpConstantComposite %188 %189 %44 %44 
					                                u32 %191 = OpConstant 1062437987 
					                                u32 %192 = OpConstant 3205510589 
					                              u32_4 %193 = OpConstantComposite %191 %192 %44 %44 
					                                u32 %194 = OpConstant 1064607853 
					                                u32 %195 = OpConstant 3197561371 
					                              u32_4 %196 = OpConstantComposite %194 %195 %44 %44 
					                          u32_4[43] %197 = OpConstantComposite %81 %83 %86 %89 %92 %94 %97 %100 %102 %105 %108 %111 %113 %116 %119 %121 %123 %126 %129 %132 %134 %135 %137 %140 %143 %146 %149 %152 %155 %158 %161 %164 %167 %170 %172 %175 %178 %181 %184 %187 %190 %193 %196 
					                                    %199 = OpTypeVector %25 2 
					                                    %200 = OpTypePointer Function %80 
					                                    %202 = OpTypePointer Function %78 
					                       Private f32* %210 = OpVariable Private 
					                                i32 %220 = OpConstant 2 
					                     Private f32_4* %231 = OpVariable Private 
					                     Private f32_4* %238 = OpVariable Private 
					                       Private f32* %248 = OpVariable Private 
					                                f32 %256 = OpConstant 3,674022E-40 
					                       Private f32* %260 = OpVariable Private 
					                                f32 %265 = OpConstant 3,674022E-40 
					                                    %283 = OpTypePointer Private %64 
					                      Private bool* %284 = OpVariable Private 
					                       Private f32* %291 = OpVariable Private 
					                       Private f32* %294 = OpVariable Private 
					                     Private f32_4* %310 = OpVariable Private 
					                      Private bool* %325 = OpVariable Private 
					                       Private f32* %332 = OpVariable Private 
					                       Private f32* %361 = OpVariable Private 
					                                f32 %364 = OpConstant 3,674022E-40 
					                                    %376 = OpTypePointer Output %23 
					                      Output f32_4* %377 = OpVariable Output 
					                                    %389 = OpTypePointer Output %6 
					                                    %392 = OpTypePointer Private %32 
					                       Private i32* %393 = OpVariable Private 
					                      Private bool* %394 = OpVariable Private 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                       Function i32* %56 = OpVariable Function 
					                Function u32_4[43]* %201 = OpVariable Function 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD0 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                        Uniform f32* %36 = OpAccessChain %31 %33 %34 
					                                 f32 %37 = OpLoad %36 
					                        Uniform f32* %38 = OpAccessChain %31 %33 %34 
					                                 f32 %39 = OpLoad %38 
					                                 f32 %40 = OpFAdd %37 %39 
					                                             OpStore %28 %40 
					                        Private f32* %45 = OpAccessChain %42 %44 
					                                             OpStore %45 %43 
					                        Private f32* %46 = OpAccessChain %42 %34 
					                                             OpStore %46 %43 
					                        Private f32* %48 = OpAccessChain %42 %47 
					                                             OpStore %48 %43 
					                        Private f32* %49 = OpAccessChain %42 %26 
					                                             OpStore %49 %43 
					                        Private f32* %51 = OpAccessChain %50 %44 
					                                             OpStore %51 %43 
					                        Private f32* %52 = OpAccessChain %50 %34 
					                                             OpStore %52 %43 
					                        Private f32* %53 = OpAccessChain %50 %47 
					                                             OpStore %53 %43 
					                        Private f32* %54 = OpAccessChain %50 %26 
					                                             OpStore %54 %43 
					                                             OpStore %56 %33 
					                                             OpBranch %57 
					                                     %57 = OpLabel 
					                                             OpLoopMerge %59 %60 None 
					                                             OpBranch %61 
					                                     %61 = OpLabel 
					                                 i32 %62 = OpLoad %56 
					                                bool %65 = OpSLessThan %62 %63 
					                                             OpBranchConditional %65 %58 %59 
					                                     %58 = OpLabel 
					                        Uniform f32* %70 = OpAccessChain %31 %69 
					                                 f32 %71 = OpLoad %70 
					                        Uniform f32* %72 = OpAccessChain %31 %69 
					                                 f32 %73 = OpLoad %72 
					                               f32_2 %74 = OpCompositeConstruct %71 %73 
					                                 f32 %75 = OpCompositeExtract %74 0 
					                                 f32 %76 = OpCompositeExtract %74 1 
					                               f32_2 %77 = OpCompositeConstruct %75 %76 
					                                i32 %198 = OpLoad %56 
					                                             OpStore %201 %197 
					                    Function u32_4* %203 = OpAccessChain %201 %198 
					                              u32_4 %204 = OpLoad %203 
					                              u32_2 %205 = OpVectorShuffle %204 %204 0 1 
					                              f32_2 %206 = OpBitcast %205 
					                              f32_2 %207 = OpFMul %77 %206 
					                              f32_3 %208 = OpLoad %68 
					                              f32_3 %209 = OpVectorShuffle %208 %207 0 3 4 
					                                             OpStore %68 %209 
					                              f32_3 %211 = OpLoad %68 
					                              f32_2 %212 = OpVectorShuffle %211 %211 1 2 
					                              f32_3 %213 = OpLoad %68 
					                              f32_2 %214 = OpVectorShuffle %213 %213 1 2 
					                                f32 %215 = OpDot %212 %214 
					                                             OpStore %210 %215 
					                                f32 %216 = OpLoad %210 
					                                f32 %217 = OpExtInst %1 31 %216 
					                                             OpStore %210 %217 
					                       Private f32* %218 = OpAccessChain %68 %34 
					                                f32 %219 = OpLoad %218 
					                       Uniform f32* %221 = OpAccessChain %31 %220 
					                                f32 %222 = OpLoad %221 
					                                f32 %223 = OpFMul %219 %222 
					                       Private f32* %224 = OpAccessChain %68 %44 
					                                             OpStore %224 %223 
					                              f32_3 %225 = OpLoad %68 
					                              f32_2 %226 = OpVectorShuffle %225 %225 0 2 
					                              f32_2 %227 = OpLoad vs_TEXCOORD0 
					                              f32_2 %228 = OpFAdd %226 %227 
					                              f32_3 %229 = OpLoad %68 
					                              f32_3 %230 = OpVectorShuffle %229 %228 3 4 2 
					                                             OpStore %68 %230 
					                read_only Texture2D %232 = OpLoad %11 
					                            sampler %233 = OpLoad %15 
					         read_only Texture2DSampled %234 = OpSampledImage %232 %233 
					                              f32_3 %235 = OpLoad %68 
					                              f32_2 %236 = OpVectorShuffle %235 %235 0 1 
					                              f32_4 %237 = OpImageSampleImplicitLod %234 %236 
					                                             OpStore %231 %237 
					                                f32 %239 = OpLoad %8 
					                       Private f32* %240 = OpAccessChain %231 %26 
					                                f32 %241 = OpLoad %240 
					                                f32 %242 = OpExtInst %1 37 %239 %241 
					                       Private f32* %243 = OpAccessChain %238 %44 
					                                             OpStore %243 %242 
					                       Private f32* %244 = OpAccessChain %238 %44 
					                                f32 %245 = OpLoad %244 
					                                f32 %246 = OpExtInst %1 40 %245 %43 
					                       Private f32* %247 = OpAccessChain %238 %44 
					                                             OpStore %247 %246 
					                                f32 %249 = OpLoad %210 
					                                f32 %250 = OpFNegate %249 
					                       Private f32* %251 = OpAccessChain %238 %44 
					                                f32 %252 = OpLoad %251 
					                                f32 %253 = OpFAdd %250 %252 
					                                             OpStore %248 %253 
					                       Uniform f32* %254 = OpAccessChain %31 %33 %34 
					                                f32 %255 = OpLoad %254 
					                                f32 %257 = OpFMul %255 %256 
					                                f32 %258 = OpLoad %248 
					                                f32 %259 = OpFAdd %257 %258 
					                                             OpStore %248 %259 
					                                f32 %261 = OpLoad %248 
					                                f32 %262 = OpLoad %28 
					                                f32 %263 = OpFDiv %261 %262 
					                                             OpStore %260 %263 
					                                f32 %264 = OpLoad %260 
					                                f32 %266 = OpExtInst %1 43 %264 %43 %265 
					                                             OpStore %260 %266 
					                                f32 %267 = OpLoad %210 
					                                f32 %268 = OpFNegate %267 
					                       Private f32* %269 = OpAccessChain %231 %26 
					                                f32 %270 = OpLoad %269 
					                                f32 %271 = OpFNegate %270 
					                                f32 %272 = OpFAdd %268 %271 
					                                             OpStore %210 %272 
					                       Uniform f32* %273 = OpAccessChain %31 %33 %34 
					                                f32 %274 = OpLoad %273 
					                                f32 %275 = OpFMul %274 %256 
					                                f32 %276 = OpLoad %210 
					                                f32 %277 = OpFAdd %275 %276 
					                                             OpStore %210 %277 
					                                f32 %278 = OpLoad %210 
					                                f32 %279 = OpLoad %28 
					                                f32 %280 = OpFDiv %278 %279 
					                                             OpStore %210 %280 
					                                f32 %281 = OpLoad %210 
					                                f32 %282 = OpExtInst %1 43 %281 %43 %265 
					                                             OpStore %210 %282 
					                       Private f32* %285 = OpAccessChain %231 %26 
					                                f32 %286 = OpLoad %285 
					                                f32 %287 = OpFNegate %286 
					                       Uniform f32* %288 = OpAccessChain %31 %33 %34 
					                                f32 %289 = OpLoad %288 
					                               bool %290 = OpFOrdGreaterThanEqual %287 %289 
					                                             OpStore %284 %290 
					                               bool %292 = OpLoad %284 
					                                f32 %293 = OpSelect %292 %265 %43 
					                                             OpStore %291 %293 
					                                f32 %295 = OpLoad %210 
					                                f32 %296 = OpLoad %291 
					                                f32 %297 = OpFMul %295 %296 
					                                             OpStore %294 %297 
					                              f32_4 %298 = OpLoad %231 
					                              f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
					                                f32 %300 = OpLoad %260 
					                              f32_3 %301 = OpCompositeConstruct %300 %300 %300 
					                              f32_3 %302 = OpFMul %299 %301 
					                              f32_4 %303 = OpLoad %238 
					                              f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
					                                             OpStore %238 %304 
					                                f32 %305 = OpLoad %260 
					                       Private f32* %306 = OpAccessChain %238 %26 
					                                             OpStore %306 %305 
					                              f32_4 %307 = OpLoad %238 
					                              f32_4 %308 = OpLoad %42 
					                              f32_4 %309 = OpFAdd %307 %308 
					                                             OpStore %42 %309 
					                              f32_4 %311 = OpLoad %231 
					                              f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
					                                f32 %313 = OpLoad %294 
					                              f32_3 %314 = OpCompositeConstruct %313 %313 %313 
					                              f32_3 %315 = OpFMul %312 %314 
					                              f32_4 %316 = OpLoad %310 
					                              f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
					                                             OpStore %310 %317 
					                                f32 %318 = OpLoad %294 
					                       Private f32* %319 = OpAccessChain %310 %26 
					                                             OpStore %319 %318 
					                              f32_4 %320 = OpLoad %310 
					                              f32_4 %321 = OpLoad %50 
					                              f32_4 %322 = OpFAdd %320 %321 
					                                             OpStore %50 %322 
					                                             OpBranch %60 
					                                     %60 = OpLabel 
					                                i32 %323 = OpLoad %56 
					                                i32 %324 = OpIAdd %323 %69 
					                                             OpStore %56 %324 
					                                             OpBranch %57 
					                                     %59 = OpLabel 
					                       Private f32* %326 = OpAccessChain %42 %26 
					                                f32 %327 = OpLoad %326 
					                               bool %328 = OpFOrdEqual %327 %43 
					                                             OpStore %325 %328 
					                               bool %329 = OpLoad %325 
					                                f32 %330 = OpSelect %329 %265 %43 
					                       Private f32* %331 = OpAccessChain %238 %44 
					                                             OpStore %331 %330 
					                       Private f32* %333 = OpAccessChain %42 %26 
					                                f32 %334 = OpLoad %333 
					                       Private f32* %335 = OpAccessChain %238 %44 
					                                f32 %336 = OpLoad %335 
					                                f32 %337 = OpFAdd %334 %336 
					                                             OpStore %332 %337 
					                              f32_4 %338 = OpLoad %42 
					                              f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
					                                f32 %340 = OpLoad %332 
					                              f32_3 %341 = OpCompositeConstruct %340 %340 %340 
					                              f32_3 %342 = OpFDiv %339 %341 
					                              f32_4 %343 = OpLoad %42 
					                              f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
					                                             OpStore %42 %344 
					                       Private f32* %345 = OpAccessChain %50 %26 
					                                f32 %346 = OpLoad %345 
					                               bool %347 = OpFOrdEqual %346 %43 
					                                             OpStore %325 %347 
					                               bool %348 = OpLoad %325 
					                                f32 %349 = OpSelect %348 %265 %43 
					                                             OpStore %332 %349 
					                                f32 %350 = OpLoad %332 
					                       Private f32* %351 = OpAccessChain %50 %26 
					                                f32 %352 = OpLoad %351 
					                                f32 %353 = OpFAdd %350 %352 
					                                             OpStore %332 %353 
					                              f32_4 %354 = OpLoad %50 
					                              f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
					                                f32 %356 = OpLoad %332 
					                              f32_3 %357 = OpCompositeConstruct %356 %356 %356 
					                              f32_3 %358 = OpFDiv %355 %357 
					                              f32_4 %359 = OpLoad %50 
					                              f32_4 %360 = OpVectorShuffle %359 %358 4 5 6 3 
					                                             OpStore %50 %360 
					                       Private f32* %362 = OpAccessChain %50 %26 
					                                f32 %363 = OpLoad %362 
					                                f32 %365 = OpFMul %363 %364 
					                                             OpStore %361 %365 
					                                f32 %366 = OpLoad %361 
					                                f32 %367 = OpExtInst %1 37 %366 %265 
					                                             OpStore %332 %367 
					                              f32_4 %368 = OpLoad %42 
					                              f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                              f32_3 %370 = OpFNegate %369 
					                              f32_4 %371 = OpLoad %50 
					                              f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
					                              f32_3 %373 = OpFAdd %370 %372 
					                              f32_4 %374 = OpLoad %50 
					                              f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
					                                             OpStore %50 %375 
					                                f32 %378 = OpLoad %332 
					                              f32_3 %379 = OpCompositeConstruct %378 %378 %378 
					                              f32_4 %380 = OpLoad %50 
					                              f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
					                              f32_3 %382 = OpFMul %379 %381 
					                              f32_4 %383 = OpLoad %42 
					                              f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
					                              f32_3 %385 = OpFAdd %382 %384 
					                              f32_4 %386 = OpLoad %377 
					                              f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
					                                             OpStore %377 %387 
					                                f32 %388 = OpLoad %332 
					                        Output f32* %390 = OpAccessChain %377 %26 
					                                             OpStore %390 %388 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec2 ImmCB_0_0_0[43];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						float _RcpAspect;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.363636374, 0.0);
						ImmCB_0_0_0[2] = vec2(0.226723567, 0.284302384);
						ImmCB_0_0_0[3] = vec2(-0.0809167102, 0.354519248);
						ImmCB_0_0_0[4] = vec2(-0.327625036, 0.157775939);
						ImmCB_0_0_0[5] = vec2(-0.327625036, -0.157775909);
						ImmCB_0_0_0[6] = vec2(-0.0809165612, -0.354519278);
						ImmCB_0_0_0[7] = vec2(0.226723522, -0.284302413);
						ImmCB_0_0_0[8] = vec2(0.681818187, 0.0);
						ImmCB_0_0_0[9] = vec2(0.614296973, 0.295829833);
						ImmCB_0_0_0[10] = vec2(0.425106674, 0.533066928);
						ImmCB_0_0_0[11] = vec2(0.151718855, 0.664723575);
						ImmCB_0_0_0[12] = vec2(-0.151718825, 0.664723575);
						ImmCB_0_0_0[13] = vec2(-0.425106794, 0.533066869);
						ImmCB_0_0_0[14] = vec2(-0.614296973, 0.295829862);
						ImmCB_0_0_0[15] = vec2(-0.681818187, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.614296973, -0.295829833);
						ImmCB_0_0_0[17] = vec2(-0.425106555, -0.533067048);
						ImmCB_0_0_0[18] = vec2(-0.151718557, -0.664723635);
						ImmCB_0_0_0[19] = vec2(0.151719198, -0.664723516);
						ImmCB_0_0_0[20] = vec2(0.425106615, -0.533067048);
						ImmCB_0_0_0[21] = vec2(0.614296973, -0.295829833);
						ImmCB_0_0_0[22] = vec2(1.0, 0.0);
						ImmCB_0_0_0[23] = vec2(0.955572784, 0.294755191);
						ImmCB_0_0_0[24] = vec2(0.826238751, 0.5633201);
						ImmCB_0_0_0[25] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[26] = vec2(0.365340978, 0.930873752);
						ImmCB_0_0_0[27] = vec2(0.0747300014, 0.997203827);
						ImmCB_0_0_0[28] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[29] = vec2(-0.50000006, 0.866025388);
						ImmCB_0_0_0[30] = vec2(-0.733051956, 0.680172682);
						ImmCB_0_0_0[31] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[32] = vec2(-0.988830864, 0.149042085);
						ImmCB_0_0_0[33] = vec2(-0.988830805, -0.149042487);
						ImmCB_0_0_0[34] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[35] = vec2(-0.733051836, -0.680172801);
						ImmCB_0_0_0[36] = vec2(-0.499999911, -0.866025448);
						ImmCB_0_0_0[37] = vec2(-0.222521007, -0.974927902);
						ImmCB_0_0_0[38] = vec2(0.074730292, -0.997203767);
						ImmCB_0_0_0[39] = vec2(0.365341485, -0.930873573);
						ImmCB_0_0_0[40] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[41] = vec2(0.826238811, -0.563319981);
						ImmCB_0_0_0[42] = vec2(0.955572903, -0.294754833);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<43 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.0730602965;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Bokeh Filter (very large)"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 956011
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[71];
					uniform 	vec4 _MainTex_TexelSize;
					uniform 	float _MaxCoC;
					uniform 	float _RcpAspect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.275862098, 0.0);
						ImmCB_0_0_0[2] = vec2(0.171997204, 0.215677679);
						ImmCB_0_0_0[3] = vec2(-0.0613850951, 0.268945664);
						ImmCB_0_0_0[4] = vec2(-0.248543158, 0.119692102);
						ImmCB_0_0_0[5] = vec2(-0.248543158, -0.11969208);
						ImmCB_0_0_0[6] = vec2(-0.0613849834, -0.268945694);
						ImmCB_0_0_0[7] = vec2(0.171997175, -0.215677708);
						ImmCB_0_0_0[8] = vec2(0.517241359, 0.0);
						ImmCB_0_0_0[9] = vec2(0.466018349, 0.224422619);
						ImmCB_0_0_0[10] = vec2(0.322494715, 0.40439558);
						ImmCB_0_0_0[11] = vec2(0.115097053, 0.504273057);
						ImmCB_0_0_0[12] = vec2(-0.115097038, 0.504273057);
						ImmCB_0_0_0[13] = vec2(-0.322494805, 0.404395521);
						ImmCB_0_0_0[14] = vec2(-0.466018349, 0.224422649);
						ImmCB_0_0_0[15] = vec2(-0.517241359, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.466018349, -0.224422619);
						ImmCB_0_0_0[17] = vec2(-0.322494626, -0.40439564);
						ImmCB_0_0_0[18] = vec2(-0.11509683, -0.504273117);
						ImmCB_0_0_0[19] = vec2(0.115097322, -0.504272997);
						ImmCB_0_0_0[20] = vec2(0.322494656, -0.40439564);
						ImmCB_0_0_0[21] = vec2(0.466018349, -0.224422619);
						ImmCB_0_0_0[22] = vec2(0.758620679, 0.0);
						ImmCB_0_0_0[23] = vec2(0.724917293, 0.223607376);
						ImmCB_0_0_0[24] = vec2(0.626801789, 0.427346289);
						ImmCB_0_0_0[25] = vec2(0.472992241, 0.593113542);
						ImmCB_0_0_0[26] = vec2(0.277155221, 0.706180096);
						ImmCB_0_0_0[27] = vec2(0.0566917248, 0.756499469);
						ImmCB_0_0_0[28] = vec2(-0.168808997, 0.73960048);
						ImmCB_0_0_0[29] = vec2(-0.379310399, 0.656984746);
						ImmCB_0_0_0[30] = vec2(-0.556108356, 0.515993059);
						ImmCB_0_0_0[31] = vec2(-0.683493614, 0.32915324);
						ImmCB_0_0_0[32] = vec2(-0.750147521, 0.113066405);
						ImmCB_0_0_0[33] = vec2(-0.750147521, -0.113066711);
						ImmCB_0_0_0[34] = vec2(-0.683493614, -0.32915318);
						ImmCB_0_0_0[35] = vec2(-0.556108296, -0.515993178);
						ImmCB_0_0_0[36] = vec2(-0.37931028, -0.656984806);
						ImmCB_0_0_0[37] = vec2(-0.168809041, -0.73960048);
						ImmCB_0_0_0[38] = vec2(0.0566919446, -0.75649941);
						ImmCB_0_0_0[39] = vec2(0.277155608, -0.706179917);
						ImmCB_0_0_0[40] = vec2(0.472992152, -0.593113661);
						ImmCB_0_0_0[41] = vec2(0.626801848, -0.4273462);
						ImmCB_0_0_0[42] = vec2(0.724917352, -0.223607108);
						ImmCB_0_0_0[43] = vec2(1.0, 0.0);
						ImmCB_0_0_0[44] = vec2(0.974927902, 0.222520933);
						ImmCB_0_0_0[45] = vec2(0.90096885, 0.433883756);
						ImmCB_0_0_0[46] = vec2(0.781831503, 0.623489797);
						ImmCB_0_0_0[47] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[48] = vec2(0.433883637, 0.900968909);
						ImmCB_0_0_0[49] = vec2(0.222520977, 0.974927902);
						ImmCB_0_0_0[50] = vec2(0.0, 1.0);
						ImmCB_0_0_0[51] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[52] = vec2(-0.433883846, 0.90096885);
						ImmCB_0_0_0[53] = vec2(-0.623489976, 0.781831384);
						ImmCB_0_0_0[54] = vec2(-0.781831682, 0.623489559);
						ImmCB_0_0_0[55] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[56] = vec2(-0.974927902, 0.222520933);
						ImmCB_0_0_0[57] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[58] = vec2(-0.974927902, -0.222520873);
						ImmCB_0_0_0[59] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[60] = vec2(-0.781831384, -0.623489916);
						ImmCB_0_0_0[61] = vec2(-0.623489618, -0.781831622);
						ImmCB_0_0_0[62] = vec2(-0.433883458, -0.900969028);
						ImmCB_0_0_0[63] = vec2(-0.222520545, -0.974928021);
						ImmCB_0_0_0[64] = vec2(0.0, -1.0);
						ImmCB_0_0_0[65] = vec2(0.222521499, -0.974927783);
						ImmCB_0_0_0[66] = vec2(0.433883488, -0.900968969);
						ImmCB_0_0_0[67] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[68] = vec2(0.781831443, -0.623489857);
						ImmCB_0_0_0[69] = vec2(0.90096885, -0.433883756);
						ImmCB_0_0_0[70] = vec2(0.974927902, -0.222520858);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<71 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.0442477837;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 460
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %442 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %24 RelaxedPrecision 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpMemberDecorate %29 0 Offset 29 
					                                             OpMemberDecorate %29 1 Offset 29 
					                                             OpMemberDecorate %29 2 Offset 29 
					                                             OpDecorate %29 Block 
					                                             OpDecorate %31 DescriptorSet 31 
					                                             OpDecorate %31 Binding 31 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %292 RelaxedPrecision 
					                                             OpDecorate %296 RelaxedPrecision 
					                                             OpDecorate %297 RelaxedPrecision 
					                                             OpDecorate %298 RelaxedPrecision 
					                                             OpDecorate %303 RelaxedPrecision 
					                                             OpDecorate %304 RelaxedPrecision 
					                                             OpDecorate %306 RelaxedPrecision 
					                                             OpDecorate %307 RelaxedPrecision 
					                                             OpDecorate %310 RelaxedPrecision 
					                                             OpDecorate %311 RelaxedPrecision 
					                                             OpDecorate %317 RelaxedPrecision 
					                                             OpDecorate %335 RelaxedPrecision 
					                                             OpDecorate %336 RelaxedPrecision 
					                                             OpDecorate %351 RelaxedPrecision 
					                                             OpDecorate %352 RelaxedPrecision 
					                                             OpDecorate %363 RelaxedPrecision 
					                                             OpDecorate %364 RelaxedPrecision 
					                                             OpDecorate %366 RelaxedPrecision 
					                                             OpDecorate %367 RelaxedPrecision 
					                                             OpDecorate %372 RelaxedPrecision 
					                                             OpDecorate %373 RelaxedPrecision 
					                                             OpDecorate %374 RelaxedPrecision 
					                                             OpDecorate %375 RelaxedPrecision 
					                                             OpDecorate %376 RelaxedPrecision 
					                                             OpDecorate %377 RelaxedPrecision 
					                                             OpDecorate %379 RelaxedPrecision 
					                                             OpDecorate %380 RelaxedPrecision 
					                                             OpDecorate %385 RelaxedPrecision 
					                                             OpDecorate %386 RelaxedPrecision 
					                                             OpDecorate %387 RelaxedPrecision 
					                                             OpDecorate %392 RelaxedPrecision 
					                                             OpDecorate %397 RelaxedPrecision 
					                                             OpDecorate %399 RelaxedPrecision 
					                                             OpDecorate %401 RelaxedPrecision 
					                                             OpDecorate %402 RelaxedPrecision 
					                                             OpDecorate %403 RelaxedPrecision 
					                                             OpDecorate %404 RelaxedPrecision 
					                                             OpDecorate %405 RelaxedPrecision 
					                                             OpDecorate %406 RelaxedPrecision 
					                                             OpDecorate %407 RelaxedPrecision 
					                                             OpDecorate %411 RelaxedPrecision 
					                                             OpDecorate %415 RelaxedPrecision 
					                                             OpDecorate %417 RelaxedPrecision 
					                                             OpDecorate %418 RelaxedPrecision 
					                                             OpDecorate %419 RelaxedPrecision 
					                                             OpDecorate %420 RelaxedPrecision 
					                                             OpDecorate %421 RelaxedPrecision 
					                                             OpDecorate %422 RelaxedPrecision 
					                                             OpDecorate %423 RelaxedPrecision 
					                                             OpDecorate %426 RelaxedPrecision 
					                                             OpDecorate %428 RelaxedPrecision 
					                                             OpDecorate %430 RelaxedPrecision 
					                                             OpDecorate %431 RelaxedPrecision 
					                                             OpDecorate %432 RelaxedPrecision 
					                                             OpDecorate %433 RelaxedPrecision 
					                                             OpDecorate %434 RelaxedPrecision 
					                                             OpDecorate %435 RelaxedPrecision 
					                                             OpDecorate %436 RelaxedPrecision 
					                                             OpDecorate %437 RelaxedPrecision 
					                                             OpDecorate %438 RelaxedPrecision 
					                                             OpDecorate %442 RelaxedPrecision 
					                                             OpDecorate %442 Location 442 
					                                             OpDecorate %443 RelaxedPrecision 
					                                             OpDecorate %444 RelaxedPrecision 
					                                             OpDecorate %445 RelaxedPrecision 
					                                             OpDecorate %446 RelaxedPrecision 
					                                             OpDecorate %447 RelaxedPrecision 
					                                             OpDecorate %448 RelaxedPrecision 
					                                             OpDecorate %449 RelaxedPrecision 
					                                             OpDecorate %450 RelaxedPrecision 
					                                             OpDecorate %453 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %29 = OpTypeStruct %23 %6 %6 
					                                     %30 = OpTypePointer Uniform %29 
					  Uniform struct {f32_4; f32; f32;}* %31 = OpVariable Uniform 
					                                     %32 = OpTypeInt 32 1 
					                                 i32 %33 = OpConstant 0 
					                                 u32 %34 = OpConstant 1 
					                                     %35 = OpTypePointer Uniform %6 
					                                     %41 = OpTypePointer Private %23 
					                      Private f32_4* %42 = OpVariable Private 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                                 u32 %44 = OpConstant 0 
					                                 u32 %47 = OpConstant 2 
					                      Private f32_4* %50 = OpVariable Private 
					                                     %55 = OpTypePointer Function %32 
					                                 i32 %63 = OpConstant 71 
					                                     %64 = OpTypeBool 
					                                     %66 = OpTypeVector %6 3 
					                                     %67 = OpTypePointer Private %66 
					                      Private f32_3* %68 = OpVariable Private 
					                                 i32 %69 = OpConstant 1 
					                                     %78 = OpTypeVector %25 4 
					                                 u32 %79 = OpConstant 71 
					                                     %80 = OpTypeArray %78 %79 
					                               u32_4 %81 = OpConstantComposite %44 %44 %44 %44 
					                                 u32 %82 = OpConstant 1049443788 
					                               u32_4 %83 = OpConstantComposite %82 %44 %44 %44 
					                                 u32 %84 = OpConstant 1043341321 
					                                 u32 %85 = OpConstant 1046272668 
					                               u32_4 %86 = OpConstantComposite %84 %85 %44 %44 
					                                 u32 %87 = OpConstant 3178983152 
					                                 u32 %88 = OpConstant 1049211711 
					                               u32_4 %89 = OpConstantComposite %87 %88 %44 %44 
					                                 u32 %90 = OpConstant 3195961881 
					                                 u32 %91 = OpConstant 1039474978 
					                               u32_4 %92 = OpConstantComposite %90 %91 %44 %44 
					                                 u32 %93 = OpConstant 3186958623 
					                               u32_4 %94 = OpConstantComposite %90 %93 %44 %44 
					                                 u32 %95 = OpConstant 3178983122 
					                                 u32 %96 = OpConstant 3196695360 
					                               u32_4 %97 = OpConstantComposite %95 %96 %44 %44 
					                                 u32 %98 = OpConstant 1043341319 
					                                 u32 %99 = OpConstant 3193756318 
					                              u32_4 %100 = OpConstantComposite %98 %99 %44 %44 
					                                u32 %101 = OpConstant 1057253870 
					                              u32_4 %102 = OpConstantComposite %101 %44 %44 %44 
					                                u32 %103 = OpConstant 1055824373 
					                                u32 %104 = OpConstant 1046859531 
					                              u32_4 %105 = OpConstantComposite %103 %104 %44 %44 
					                                u32 %106 = OpConstant 1051008519 
					                                u32 %107 = OpConstant 1053756656 
					                              u32_4 %108 = OpConstantComposite %106 %107 %44 %44 
					                                u32 %109 = OpConstant 1038858241 
					                                u32 %110 = OpConstant 1057036298 
					                              u32_4 %111 = OpConstantComposite %109 %110 %44 %44 
					                                u32 %112 = OpConstant 3186341887 
					                              u32_4 %113 = OpConstantComposite %112 %110 %44 %44 
					                                u32 %114 = OpConstant 3198492170 
					                                u32 %115 = OpConstant 1053756654 
					                              u32_4 %116 = OpConstantComposite %114 %115 %44 %44 
					                                u32 %117 = OpConstant 3203308021 
					                                u32 %118 = OpConstant 1046859533 
					                              u32_4 %119 = OpConstantComposite %117 %118 %44 %44 
					                                u32 %120 = OpConstant 3204737518 
					                              u32_4 %121 = OpConstantComposite %120 %44 %44 %44 
					                                u32 %122 = OpConstant 3194343179 
					                              u32_4 %123 = OpConstantComposite %117 %122 %44 %44 
					                                u32 %124 = OpConstant 3198492164 
					                                u32 %125 = OpConstant 3201240306 
					                              u32_4 %126 = OpConstantComposite %124 %125 %44 %44 
					                                u32 %127 = OpConstant 3186341859 
					                                u32 %128 = OpConstant 3204519947 
					                              u32_4 %129 = OpConstantComposite %127 %128 %44 %44 
					                                u32 %130 = OpConstant 1038858277 
					                                u32 %131 = OpConstant 3204519945 
					                              u32_4 %132 = OpConstantComposite %130 %131 %44 %44 
					                                u32 %133 = OpConstant 1051008517 
					                              u32_4 %134 = OpConstantComposite %133 %125 %44 %44 
					                              u32_4 %135 = OpConstantComposite %103 %122 %44 %44 
					                                u32 %136 = OpConstant 1061303543 
					                              u32_4 %137 = OpConstantComposite %136 %44 %44 %44 
					                                u32 %138 = OpConstant 1060738094 
					                                u32 %139 = OpConstant 1046804821 
					                              u32_4 %140 = OpConstantComposite %138 %139 %44 %44 
					                                u32 %141 = OpConstant 1059091989 
					                                u32 %142 = OpConstant 1054526754 
					                              u32_4 %143 = OpConstantComposite %141 %142 %44 %44 
					                                u32 %144 = OpConstant 1056058378 
					                                u32 %145 = OpConstant 1058526794 
					                              u32_4 %146 = OpConstantComposite %144 %145 %44 %44 
					                                u32 %147 = OpConstant 1049487178 
					                                u32 %148 = OpConstant 1060423736 
					                              u32_4 %149 = OpConstantComposite %147 %148 %44 %44 
					                                u32 %150 = OpConstant 1030239637 
					                                u32 %151 = OpConstant 1061267955 
					                              u32_4 %152 = OpConstantComposite %150 %151 %44 %44 
					                                u32 %153 = OpConstant 3190611012 
					                                u32 %154 = OpConstant 1060984437 
					                              u32_4 %155 = OpConstantComposite %153 %154 %44 %44 
					                                u32 %156 = OpConstant 3200398585 
					                                u32 %157 = OpConstant 1059598375 
					                              u32_4 %158 = OpConstantComposite %156 %157 %44 %44 
					                                u32 %159 = OpConstant 3205389598 
					                                u32 %160 = OpConstant 1057232927 
					                              u32_4 %161 = OpConstantComposite %159 %160 %44 %44 
					                                u32 %162 = OpConstant 3207526768 
					                                u32 %163 = OpConstant 1051231942 
					                              u32_4 %164 = OpConstantComposite %162 %163 %44 %44 
					                                u32 %165 = OpConstant 3208645035 
					                                u32 %166 = OpConstant 1038585692 
					                              u32_4 %167 = OpConstantComposite %165 %166 %44 %44 
					                                u32 %168 = OpConstant 3186069381 
					                              u32_4 %169 = OpConstantComposite %165 %168 %44 %44 
					                                u32 %170 = OpConstant 3198715588 
					                              u32_4 %171 = OpConstantComposite %162 %170 %44 %44 
					                                u32 %172 = OpConstant 3205389597 
					                                u32 %173 = OpConstant 3204716577 
					                              u32_4 %174 = OpConstantComposite %172 %173 %44 %44 
					                                u32 %175 = OpConstant 3200398581 
					                                u32 %176 = OpConstant 3207082024 
					                              u32_4 %177 = OpConstantComposite %175 %176 %44 %44 
					                                u32 %178 = OpConstant 3190611015 
					                                u32 %179 = OpConstant 3208468085 
					                              u32_4 %180 = OpConstantComposite %178 %179 %44 %44 
					                                u32 %181 = OpConstant 1030239696 
					                                u32 %182 = OpConstant 3208751602 
					                              u32_4 %183 = OpConstantComposite %181 %182 %44 %44 
					                                u32 %184 = OpConstant 1049487191 
					                                u32 %185 = OpConstant 3207907381 
					                              u32_4 %186 = OpConstantComposite %184 %185 %44 %44 
					                                u32 %187 = OpConstant 1056058375 
					                                u32 %188 = OpConstant 3206010444 
					                              u32_4 %189 = OpConstantComposite %187 %188 %44 %44 
					                                u32 %190 = OpConstant 1059091990 
					                                u32 %191 = OpConstant 3202010399 
					                              u32_4 %192 = OpConstantComposite %190 %191 %44 %44 
					                                u32 %193 = OpConstant 1060738095 
					                                u32 %194 = OpConstant 3194288451 
					                              u32_4 %195 = OpConstantComposite %193 %194 %44 %44 
					                                u32 %196 = OpConstant 1065353216 
					                              u32_4 %197 = OpConstantComposite %196 %44 %44 %44 
					                                u32 %198 = OpConstant 1064932576 
					                                u32 %199 = OpConstant 1046731911 
					                              u32_4 %200 = OpConstantComposite %198 %199 %44 %44 
					                                u32 %201 = OpConstant 1063691749 
					                                u32 %202 = OpConstant 1054746115 
					                              u32_4 %203 = OpConstantComposite %201 %202 %44 %44 
					                                u32 %204 = OpConstant 1061692956 
					                                u32 %205 = OpConstant 1059036423 
					                              u32_4 %206 = OpConstantComposite %204 %205 %44 %44 
					                              u32_4 %207 = OpConstantComposite %205 %204 %44 %44 
					                                u32 %208 = OpConstant 1054746111 
					                                u32 %209 = OpConstant 1063691750 
					                              u32_4 %210 = OpConstantComposite %208 %209 %44 %44 
					                                u32 %211 = OpConstant 1046731914 
					                              u32_4 %212 = OpConstantComposite %211 %198 %44 %44 
					                              u32_4 %213 = OpConstantComposite %44 %196 %44 %44 
					                                u32 %214 = OpConstant 3194215560 
					                              u32_4 %215 = OpConstantComposite %214 %198 %44 %44 
					                                u32 %216 = OpConstant 3202229766 
					                              u32_4 %217 = OpConstantComposite %216 %201 %44 %44 
					                                u32 %218 = OpConstant 3206520074 
					                                u32 %219 = OpConstant 1061692954 
					                              u32_4 %220 = OpConstantComposite %218 %219 %44 %44 
					                                u32 %221 = OpConstant 3209176607 
					                                u32 %222 = OpConstant 1059036419 
					                              u32_4 %223 = OpConstantComposite %221 %222 %44 %44 
					                                u32 %224 = OpConstant 3211175397 
					                                u32 %225 = OpConstant 1054746117 
					                              u32_4 %226 = OpConstantComposite %224 %225 %44 %44 
					                                u32 %227 = OpConstant 3212416224 
					                              u32_4 %228 = OpConstantComposite %227 %199 %44 %44 
					                                u32 %229 = OpConstant 3212836864 
					                              u32_4 %230 = OpConstantComposite %229 %44 %44 %44 
					                                u32 %231 = OpConstant 3194215555 
					                              u32_4 %232 = OpConstantComposite %227 %231 %44 %44 
					                                u32 %233 = OpConstant 3202229763 
					                              u32_4 %234 = OpConstantComposite %224 %233 %44 %44 
					                                u32 %235 = OpConstant 3209176602 
					                                u32 %236 = OpConstant 3206520073 
					                              u32_4 %237 = OpConstantComposite %235 %236 %44 %44 
					                                u32 %238 = OpConstant 3206520068 
					                                u32 %239 = OpConstant 3209176606 
					                              u32_4 %240 = OpConstantComposite %238 %239 %44 %44 
					                                u32 %241 = OpConstant 3202229753 
					                                u32 %242 = OpConstant 3211175400 
					                              u32_4 %243 = OpConstantComposite %241 %242 %44 %44 
					                                u32 %244 = OpConstant 3194215533 
					                                u32 %245 = OpConstant 3212416226 
					                              u32_4 %246 = OpConstantComposite %244 %245 %44 %44 
					                              u32_4 %247 = OpConstantComposite %44 %229 %44 %44 
					                                u32 %248 = OpConstant 1046731949 
					                                u32 %249 = OpConstant 3212416222 
					                              u32_4 %250 = OpConstantComposite %248 %249 %44 %44 
					                                u32 %251 = OpConstant 1054746106 
					                                u32 %252 = OpConstant 3211175399 
					                              u32_4 %253 = OpConstantComposite %251 %252 %44 %44 
					                                u32 %254 = OpConstant 1059036421 
					                              u32_4 %255 = OpConstantComposite %254 %239 %44 %44 
					                                u32 %256 = OpConstant 1061692955 
					                                u32 %257 = OpConstant 3206520072 
					                              u32_4 %258 = OpConstantComposite %256 %257 %44 %44 
					                              u32_4 %259 = OpConstantComposite %201 %233 %44 %44 
					                                u32 %260 = OpConstant 3194215554 
					                              u32_4 %261 = OpConstantComposite %198 %260 %44 %44 
					                          u32_4[71] %262 = OpConstantComposite %81 %83 %86 %89 %92 %94 %97 %100 %102 %105 %108 %111 %113 %116 %119 %121 %123 %126 %129 %132 %134 %135 %137 %140 %143 %146 %149 %152 %155 %158 %161 %164 %167 %169 %171 %174 %177 %180 %183 %186 %189 %192 %195 %197 %200 %203 %206 %207 %210 %212 %213 %215 %217 %220 %223 %226 %228 %230 %232 %234 %237 %240 %243 %246 %247 %250 %253 %255 %258 %259 %261 
					                                    %264 = OpTypeVector %25 2 
					                                    %265 = OpTypePointer Function %80 
					                                    %267 = OpTypePointer Function %78 
					                       Private f32* %275 = OpVariable Private 
					                                i32 %285 = OpConstant 2 
					                     Private f32_4* %296 = OpVariable Private 
					                     Private f32_4* %303 = OpVariable Private 
					                       Private f32* %313 = OpVariable Private 
					                                f32 %321 = OpConstant 3,674022E-40 
					                       Private f32* %325 = OpVariable Private 
					                                f32 %330 = OpConstant 3,674022E-40 
					                                    %348 = OpTypePointer Private %64 
					                      Private bool* %349 = OpVariable Private 
					                       Private f32* %356 = OpVariable Private 
					                       Private f32* %359 = OpVariable Private 
					                     Private f32_4* %375 = OpVariable Private 
					                      Private bool* %390 = OpVariable Private 
					                       Private f32* %397 = OpVariable Private 
					                       Private f32* %426 = OpVariable Private 
					                                f32 %429 = OpConstant 3,674022E-40 
					                                    %441 = OpTypePointer Output %23 
					                      Output f32_4* %442 = OpVariable Output 
					                                    %454 = OpTypePointer Output %6 
					                                    %457 = OpTypePointer Private %32 
					                       Private i32* %458 = OpVariable Private 
					                      Private bool* %459 = OpVariable Private 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                       Function i32* %56 = OpVariable Function 
					                Function u32_4[71]* %266 = OpVariable Function 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD0 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                        Uniform f32* %36 = OpAccessChain %31 %33 %34 
					                                 f32 %37 = OpLoad %36 
					                        Uniform f32* %38 = OpAccessChain %31 %33 %34 
					                                 f32 %39 = OpLoad %38 
					                                 f32 %40 = OpFAdd %37 %39 
					                                             OpStore %28 %40 
					                        Private f32* %45 = OpAccessChain %42 %44 
					                                             OpStore %45 %43 
					                        Private f32* %46 = OpAccessChain %42 %34 
					                                             OpStore %46 %43 
					                        Private f32* %48 = OpAccessChain %42 %47 
					                                             OpStore %48 %43 
					                        Private f32* %49 = OpAccessChain %42 %26 
					                                             OpStore %49 %43 
					                        Private f32* %51 = OpAccessChain %50 %44 
					                                             OpStore %51 %43 
					                        Private f32* %52 = OpAccessChain %50 %34 
					                                             OpStore %52 %43 
					                        Private f32* %53 = OpAccessChain %50 %47 
					                                             OpStore %53 %43 
					                        Private f32* %54 = OpAccessChain %50 %26 
					                                             OpStore %54 %43 
					                                             OpStore %56 %33 
					                                             OpBranch %57 
					                                     %57 = OpLabel 
					                                             OpLoopMerge %59 %60 None 
					                                             OpBranch %61 
					                                     %61 = OpLabel 
					                                 i32 %62 = OpLoad %56 
					                                bool %65 = OpSLessThan %62 %63 
					                                             OpBranchConditional %65 %58 %59 
					                                     %58 = OpLabel 
					                        Uniform f32* %70 = OpAccessChain %31 %69 
					                                 f32 %71 = OpLoad %70 
					                        Uniform f32* %72 = OpAccessChain %31 %69 
					                                 f32 %73 = OpLoad %72 
					                               f32_2 %74 = OpCompositeConstruct %71 %73 
					                                 f32 %75 = OpCompositeExtract %74 0 
					                                 f32 %76 = OpCompositeExtract %74 1 
					                               f32_2 %77 = OpCompositeConstruct %75 %76 
					                                i32 %263 = OpLoad %56 
					                                             OpStore %266 %262 
					                    Function u32_4* %268 = OpAccessChain %266 %263 
					                              u32_4 %269 = OpLoad %268 
					                              u32_2 %270 = OpVectorShuffle %269 %269 0 1 
					                              f32_2 %271 = OpBitcast %270 
					                              f32_2 %272 = OpFMul %77 %271 
					                              f32_3 %273 = OpLoad %68 
					                              f32_3 %274 = OpVectorShuffle %273 %272 0 3 4 
					                                             OpStore %68 %274 
					                              f32_3 %276 = OpLoad %68 
					                              f32_2 %277 = OpVectorShuffle %276 %276 1 2 
					                              f32_3 %278 = OpLoad %68 
					                              f32_2 %279 = OpVectorShuffle %278 %278 1 2 
					                                f32 %280 = OpDot %277 %279 
					                                             OpStore %275 %280 
					                                f32 %281 = OpLoad %275 
					                                f32 %282 = OpExtInst %1 31 %281 
					                                             OpStore %275 %282 
					                       Private f32* %283 = OpAccessChain %68 %34 
					                                f32 %284 = OpLoad %283 
					                       Uniform f32* %286 = OpAccessChain %31 %285 
					                                f32 %287 = OpLoad %286 
					                                f32 %288 = OpFMul %284 %287 
					                       Private f32* %289 = OpAccessChain %68 %44 
					                                             OpStore %289 %288 
					                              f32_3 %290 = OpLoad %68 
					                              f32_2 %291 = OpVectorShuffle %290 %290 0 2 
					                              f32_2 %292 = OpLoad vs_TEXCOORD0 
					                              f32_2 %293 = OpFAdd %291 %292 
					                              f32_3 %294 = OpLoad %68 
					                              f32_3 %295 = OpVectorShuffle %294 %293 3 4 2 
					                                             OpStore %68 %295 
					                read_only Texture2D %297 = OpLoad %11 
					                            sampler %298 = OpLoad %15 
					         read_only Texture2DSampled %299 = OpSampledImage %297 %298 
					                              f32_3 %300 = OpLoad %68 
					                              f32_2 %301 = OpVectorShuffle %300 %300 0 1 
					                              f32_4 %302 = OpImageSampleImplicitLod %299 %301 
					                                             OpStore %296 %302 
					                                f32 %304 = OpLoad %8 
					                       Private f32* %305 = OpAccessChain %296 %26 
					                                f32 %306 = OpLoad %305 
					                                f32 %307 = OpExtInst %1 37 %304 %306 
					                       Private f32* %308 = OpAccessChain %303 %44 
					                                             OpStore %308 %307 
					                       Private f32* %309 = OpAccessChain %303 %44 
					                                f32 %310 = OpLoad %309 
					                                f32 %311 = OpExtInst %1 40 %310 %43 
					                       Private f32* %312 = OpAccessChain %303 %44 
					                                             OpStore %312 %311 
					                                f32 %314 = OpLoad %275 
					                                f32 %315 = OpFNegate %314 
					                       Private f32* %316 = OpAccessChain %303 %44 
					                                f32 %317 = OpLoad %316 
					                                f32 %318 = OpFAdd %315 %317 
					                                             OpStore %313 %318 
					                       Uniform f32* %319 = OpAccessChain %31 %33 %34 
					                                f32 %320 = OpLoad %319 
					                                f32 %322 = OpFMul %320 %321 
					                                f32 %323 = OpLoad %313 
					                                f32 %324 = OpFAdd %322 %323 
					                                             OpStore %313 %324 
					                                f32 %326 = OpLoad %313 
					                                f32 %327 = OpLoad %28 
					                                f32 %328 = OpFDiv %326 %327 
					                                             OpStore %325 %328 
					                                f32 %329 = OpLoad %325 
					                                f32 %331 = OpExtInst %1 43 %329 %43 %330 
					                                             OpStore %325 %331 
					                                f32 %332 = OpLoad %275 
					                                f32 %333 = OpFNegate %332 
					                       Private f32* %334 = OpAccessChain %296 %26 
					                                f32 %335 = OpLoad %334 
					                                f32 %336 = OpFNegate %335 
					                                f32 %337 = OpFAdd %333 %336 
					                                             OpStore %275 %337 
					                       Uniform f32* %338 = OpAccessChain %31 %33 %34 
					                                f32 %339 = OpLoad %338 
					                                f32 %340 = OpFMul %339 %321 
					                                f32 %341 = OpLoad %275 
					                                f32 %342 = OpFAdd %340 %341 
					                                             OpStore %275 %342 
					                                f32 %343 = OpLoad %275 
					                                f32 %344 = OpLoad %28 
					                                f32 %345 = OpFDiv %343 %344 
					                                             OpStore %275 %345 
					                                f32 %346 = OpLoad %275 
					                                f32 %347 = OpExtInst %1 43 %346 %43 %330 
					                                             OpStore %275 %347 
					                       Private f32* %350 = OpAccessChain %296 %26 
					                                f32 %351 = OpLoad %350 
					                                f32 %352 = OpFNegate %351 
					                       Uniform f32* %353 = OpAccessChain %31 %33 %34 
					                                f32 %354 = OpLoad %353 
					                               bool %355 = OpFOrdGreaterThanEqual %352 %354 
					                                             OpStore %349 %355 
					                               bool %357 = OpLoad %349 
					                                f32 %358 = OpSelect %357 %330 %43 
					                                             OpStore %356 %358 
					                                f32 %360 = OpLoad %275 
					                                f32 %361 = OpLoad %356 
					                                f32 %362 = OpFMul %360 %361 
					                                             OpStore %359 %362 
					                              f32_4 %363 = OpLoad %296 
					                              f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                f32 %365 = OpLoad %325 
					                              f32_3 %366 = OpCompositeConstruct %365 %365 %365 
					                              f32_3 %367 = OpFMul %364 %366 
					                              f32_4 %368 = OpLoad %303 
					                              f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
					                                             OpStore %303 %369 
					                                f32 %370 = OpLoad %325 
					                       Private f32* %371 = OpAccessChain %303 %26 
					                                             OpStore %371 %370 
					                              f32_4 %372 = OpLoad %303 
					                              f32_4 %373 = OpLoad %42 
					                              f32_4 %374 = OpFAdd %372 %373 
					                                             OpStore %42 %374 
					                              f32_4 %376 = OpLoad %296 
					                              f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
					                                f32 %378 = OpLoad %359 
					                              f32_3 %379 = OpCompositeConstruct %378 %378 %378 
					                              f32_3 %380 = OpFMul %377 %379 
					                              f32_4 %381 = OpLoad %375 
					                              f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
					                                             OpStore %375 %382 
					                                f32 %383 = OpLoad %359 
					                       Private f32* %384 = OpAccessChain %375 %26 
					                                             OpStore %384 %383 
					                              f32_4 %385 = OpLoad %375 
					                              f32_4 %386 = OpLoad %50 
					                              f32_4 %387 = OpFAdd %385 %386 
					                                             OpStore %50 %387 
					                                             OpBranch %60 
					                                     %60 = OpLabel 
					                                i32 %388 = OpLoad %56 
					                                i32 %389 = OpIAdd %388 %69 
					                                             OpStore %56 %389 
					                                             OpBranch %57 
					                                     %59 = OpLabel 
					                       Private f32* %391 = OpAccessChain %42 %26 
					                                f32 %392 = OpLoad %391 
					                               bool %393 = OpFOrdEqual %392 %43 
					                                             OpStore %390 %393 
					                               bool %394 = OpLoad %390 
					                                f32 %395 = OpSelect %394 %330 %43 
					                       Private f32* %396 = OpAccessChain %303 %44 
					                                             OpStore %396 %395 
					                       Private f32* %398 = OpAccessChain %42 %26 
					                                f32 %399 = OpLoad %398 
					                       Private f32* %400 = OpAccessChain %303 %44 
					                                f32 %401 = OpLoad %400 
					                                f32 %402 = OpFAdd %399 %401 
					                                             OpStore %397 %402 
					                              f32_4 %403 = OpLoad %42 
					                              f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
					                                f32 %405 = OpLoad %397 
					                              f32_3 %406 = OpCompositeConstruct %405 %405 %405 
					                              f32_3 %407 = OpFDiv %404 %406 
					                              f32_4 %408 = OpLoad %42 
					                              f32_4 %409 = OpVectorShuffle %408 %407 4 5 6 3 
					                                             OpStore %42 %409 
					                       Private f32* %410 = OpAccessChain %50 %26 
					                                f32 %411 = OpLoad %410 
					                               bool %412 = OpFOrdEqual %411 %43 
					                                             OpStore %390 %412 
					                               bool %413 = OpLoad %390 
					                                f32 %414 = OpSelect %413 %330 %43 
					                                             OpStore %397 %414 
					                                f32 %415 = OpLoad %397 
					                       Private f32* %416 = OpAccessChain %50 %26 
					                                f32 %417 = OpLoad %416 
					                                f32 %418 = OpFAdd %415 %417 
					                                             OpStore %397 %418 
					                              f32_4 %419 = OpLoad %50 
					                              f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
					                                f32 %421 = OpLoad %397 
					                              f32_3 %422 = OpCompositeConstruct %421 %421 %421 
					                              f32_3 %423 = OpFDiv %420 %422 
					                              f32_4 %424 = OpLoad %50 
					                              f32_4 %425 = OpVectorShuffle %424 %423 4 5 6 3 
					                                             OpStore %50 %425 
					                       Private f32* %427 = OpAccessChain %50 %26 
					                                f32 %428 = OpLoad %427 
					                                f32 %430 = OpFMul %428 %429 
					                                             OpStore %426 %430 
					                                f32 %431 = OpLoad %426 
					                                f32 %432 = OpExtInst %1 37 %431 %330 
					                                             OpStore %397 %432 
					                              f32_4 %433 = OpLoad %42 
					                              f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
					                              f32_3 %435 = OpFNegate %434 
					                              f32_4 %436 = OpLoad %50 
					                              f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
					                              f32_3 %438 = OpFAdd %435 %437 
					                              f32_4 %439 = OpLoad %50 
					                              f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
					                                             OpStore %50 %440 
					                                f32 %443 = OpLoad %397 
					                              f32_3 %444 = OpCompositeConstruct %443 %443 %443 
					                              f32_4 %445 = OpLoad %50 
					                              f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
					                              f32_3 %447 = OpFMul %444 %446 
					                              f32_4 %448 = OpLoad %42 
					                              f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
					                              f32_3 %450 = OpFAdd %447 %449 
					                              f32_4 %451 = OpLoad %442 
					                              f32_4 %452 = OpVectorShuffle %451 %450 4 5 6 3 
					                                             OpStore %442 %452 
					                                f32 %453 = OpLoad %397 
					                        Output f32* %455 = OpAccessChain %442 %26 
					                                             OpStore %455 %453 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec2 ImmCB_0_0_0[71];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						float _MaxCoC;
						float _RcpAspect;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					int u_xlati6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat22;
					bool u_xlatb22;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0, 0.0);
						ImmCB_0_0_0[1] = vec2(0.275862098, 0.0);
						ImmCB_0_0_0[2] = vec2(0.171997204, 0.215677679);
						ImmCB_0_0_0[3] = vec2(-0.0613850951, 0.268945664);
						ImmCB_0_0_0[4] = vec2(-0.248543158, 0.119692102);
						ImmCB_0_0_0[5] = vec2(-0.248543158, -0.11969208);
						ImmCB_0_0_0[6] = vec2(-0.0613849834, -0.268945694);
						ImmCB_0_0_0[7] = vec2(0.171997175, -0.215677708);
						ImmCB_0_0_0[8] = vec2(0.517241359, 0.0);
						ImmCB_0_0_0[9] = vec2(0.466018349, 0.224422619);
						ImmCB_0_0_0[10] = vec2(0.322494715, 0.40439558);
						ImmCB_0_0_0[11] = vec2(0.115097053, 0.504273057);
						ImmCB_0_0_0[12] = vec2(-0.115097038, 0.504273057);
						ImmCB_0_0_0[13] = vec2(-0.322494805, 0.404395521);
						ImmCB_0_0_0[14] = vec2(-0.466018349, 0.224422649);
						ImmCB_0_0_0[15] = vec2(-0.517241359, 0.0);
						ImmCB_0_0_0[16] = vec2(-0.466018349, -0.224422619);
						ImmCB_0_0_0[17] = vec2(-0.322494626, -0.40439564);
						ImmCB_0_0_0[18] = vec2(-0.11509683, -0.504273117);
						ImmCB_0_0_0[19] = vec2(0.115097322, -0.504272997);
						ImmCB_0_0_0[20] = vec2(0.322494656, -0.40439564);
						ImmCB_0_0_0[21] = vec2(0.466018349, -0.224422619);
						ImmCB_0_0_0[22] = vec2(0.758620679, 0.0);
						ImmCB_0_0_0[23] = vec2(0.724917293, 0.223607376);
						ImmCB_0_0_0[24] = vec2(0.626801789, 0.427346289);
						ImmCB_0_0_0[25] = vec2(0.472992241, 0.593113542);
						ImmCB_0_0_0[26] = vec2(0.277155221, 0.706180096);
						ImmCB_0_0_0[27] = vec2(0.0566917248, 0.756499469);
						ImmCB_0_0_0[28] = vec2(-0.168808997, 0.73960048);
						ImmCB_0_0_0[29] = vec2(-0.379310399, 0.656984746);
						ImmCB_0_0_0[30] = vec2(-0.556108356, 0.515993059);
						ImmCB_0_0_0[31] = vec2(-0.683493614, 0.32915324);
						ImmCB_0_0_0[32] = vec2(-0.750147521, 0.113066405);
						ImmCB_0_0_0[33] = vec2(-0.750147521, -0.113066711);
						ImmCB_0_0_0[34] = vec2(-0.683493614, -0.32915318);
						ImmCB_0_0_0[35] = vec2(-0.556108296, -0.515993178);
						ImmCB_0_0_0[36] = vec2(-0.37931028, -0.656984806);
						ImmCB_0_0_0[37] = vec2(-0.168809041, -0.73960048);
						ImmCB_0_0_0[38] = vec2(0.0566919446, -0.75649941);
						ImmCB_0_0_0[39] = vec2(0.277155608, -0.706179917);
						ImmCB_0_0_0[40] = vec2(0.472992152, -0.593113661);
						ImmCB_0_0_0[41] = vec2(0.626801848, -0.4273462);
						ImmCB_0_0_0[42] = vec2(0.724917352, -0.223607108);
						ImmCB_0_0_0[43] = vec2(1.0, 0.0);
						ImmCB_0_0_0[44] = vec2(0.974927902, 0.222520933);
						ImmCB_0_0_0[45] = vec2(0.90096885, 0.433883756);
						ImmCB_0_0_0[46] = vec2(0.781831503, 0.623489797);
						ImmCB_0_0_0[47] = vec2(0.623489797, 0.781831503);
						ImmCB_0_0_0[48] = vec2(0.433883637, 0.900968909);
						ImmCB_0_0_0[49] = vec2(0.222520977, 0.974927902);
						ImmCB_0_0_0[50] = vec2(0.0, 1.0);
						ImmCB_0_0_0[51] = vec2(-0.222520947, 0.974927902);
						ImmCB_0_0_0[52] = vec2(-0.433883846, 0.90096885);
						ImmCB_0_0_0[53] = vec2(-0.623489976, 0.781831384);
						ImmCB_0_0_0[54] = vec2(-0.781831682, 0.623489559);
						ImmCB_0_0_0[55] = vec2(-0.90096885, 0.433883816);
						ImmCB_0_0_0[56] = vec2(-0.974927902, 0.222520933);
						ImmCB_0_0_0[57] = vec2(-1.0, 0.0);
						ImmCB_0_0_0[58] = vec2(-0.974927902, -0.222520873);
						ImmCB_0_0_0[59] = vec2(-0.90096885, -0.433883756);
						ImmCB_0_0_0[60] = vec2(-0.781831384, -0.623489916);
						ImmCB_0_0_0[61] = vec2(-0.623489618, -0.781831622);
						ImmCB_0_0_0[62] = vec2(-0.433883458, -0.900969028);
						ImmCB_0_0_0[63] = vec2(-0.222520545, -0.974928021);
						ImmCB_0_0_0[64] = vec2(0.0, -1.0);
						ImmCB_0_0_0[65] = vec2(0.222521499, -0.974927783);
						ImmCB_0_0_0[66] = vec2(0.433883488, -0.900968969);
						ImmCB_0_0_0[67] = vec2(0.623489678, -0.781831622);
						ImmCB_0_0_0[68] = vec2(0.781831443, -0.623489857);
						ImmCB_0_0_0[69] = vec2(0.90096885, -0.433883756);
						ImmCB_0_0_0[70] = vec2(0.974927902, -0.222520858);
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = _MainTex_TexelSize.y + _MainTex_TexelSize.y;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<71 ; u_xlati_loop_1++)
					    {
					        u_xlat4.yz = vec2(vec2(_MaxCoC, _MaxCoC)) * ImmCB_0_0_0[u_xlati_loop_1].xy;
					        u_xlat12 = dot(u_xlat4.yz, u_xlat4.yz);
					        u_xlat12 = sqrt(u_xlat12);
					        u_xlat4.x = u_xlat4.y * _RcpAspect;
					        u_xlat4.xy = u_xlat4.xz + vs_TEXCOORD0.xy;
					        u_xlat10_4 = texture(_MainTex, u_xlat4.xy);
					        u_xlat16_5 = min(u_xlat10_0.w, u_xlat10_4.w);
					        u_xlat16_5 = max(u_xlat16_5, 0.0);
					        u_xlat5 = (-u_xlat12) + u_xlat16_5;
					        u_xlat5 = _MainTex_TexelSize.y * 2.0 + u_xlat5;
					        u_xlat5 = u_xlat5 / u_xlat0.x;
					        u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					        u_xlat12 = (-u_xlat12) + (-u_xlat10_4.w);
					        u_xlat12 = _MainTex_TexelSize.y * 2.0 + u_xlat12;
					        u_xlat12 = u_xlat12 / u_xlat0.x;
					        u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					        u_xlatb22 = (-u_xlat10_4.w)>=_MainTex_TexelSize.y;
					        u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					        u_xlat12 = u_xlat12 * u_xlat22;
					        u_xlat1.xyz = u_xlat10_4.xyz;
					        u_xlat2 = u_xlat1 * vec4(u_xlat5) + u_xlat2;
					        u_xlat3 = u_xlat1 * vec4(u_xlat12) + u_xlat3;
					    }
					    u_xlatb0 = u_xlat2.w==0.0;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.x + u_xlat2.w;
					    u_xlat0.xyz = u_xlat2.xyz / u_xlat0.xxx;
					    u_xlatb18 = u_xlat3.w==0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 + u_xlat3.w;
					    u_xlat1.xyz = u_xlat3.xyz / vec3(u_xlat18);
					    u_xlat18 = u_xlat3.w * 0.0442477837;
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat18;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Postfilter"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 988503
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    phase0_Output0_1.w = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _MainTex_TexelSize;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat16_0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat10_2;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat16_0 = u_xlat10_0 + u_xlat10_1;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat16_0 = u_xlat16_0 + u_xlat10_2;
					    u_xlat16_0 = u_xlat10_1 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 131
					; Schema: 0
					                                                     OpCapability Shader 
					                                              %1 = OpExtInstImport "GLSL.std.450" 
					                                                     OpMemoryModel Logical GLSL450 
					                                                     OpEntryPoint Vertex %4 "main" %11 %72 %92 %119 %122 
					                                                     OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                     OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                     OpDecorate %11 Location 11 
					                                                     OpDecorate %16 ArrayStride 16 
					                                                     OpDecorate %17 ArrayStride 17 
					                                                     OpMemberDecorate %18 0 Offset 18 
					                                                     OpMemberDecorate %18 1 Offset 18 
					                                                     OpMemberDecorate %18 2 Offset 18 
					                                                     OpDecorate %18 Block 
					                                                     OpDecorate %20 DescriptorSet 20 
					                                                     OpDecorate %20 Binding 20 
					                                                     OpMemberDecorate %70 0 BuiltIn 70 
					                                                     OpMemberDecorate %70 1 BuiltIn 70 
					                                                     OpMemberDecorate %70 2 BuiltIn 70 
					                                                     OpDecorate %70 Block 
					                                                     OpDecorate %91 RelaxedPrecision 
					                                                     OpDecorate %92 Location 92 
					                                                     OpDecorate %99 RelaxedPrecision 
					                                                     OpDecorate %105 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD0 Location 119 
					                                                     OpDecorate %120 RelaxedPrecision 
					                                                     OpDecorate %121 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                     OpDecorate vs_TEXCOORD1 Location 122 
					                                                     OpDecorate %123 RelaxedPrecision 
					                                                     OpDecorate %124 RelaxedPrecision 
					                                              %2 = OpTypeVoid 
					                                              %3 = OpTypeFunction %2 
					                                              %6 = OpTypeFloat 32 
					                                              %7 = OpTypeVector %6 4 
					                                              %8 = OpTypePointer Private %7 
					                               Private f32_4* %9 = OpVariable Private 
					                                             %10 = OpTypePointer Input %7 
					                                Input f32_4* %11 = OpVariable Input 
					                                             %14 = OpTypeInt 32 0 
					                                         u32 %15 = OpConstant 4 
					                                             %16 = OpTypeArray %7 %15 
					                                             %17 = OpTypeArray %7 %15 
					                                             %18 = OpTypeStruct %16 %17 %7 
					                                             %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4[4]; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
					                                             %21 = OpTypeInt 32 1 
					                                         i32 %22 = OpConstant 0 
					                                         i32 %23 = OpConstant 1 
					                                             %24 = OpTypePointer Uniform %7 
					                                         i32 %35 = OpConstant 2 
					                                         i32 %44 = OpConstant 3 
					                              Private f32_4* %48 = OpVariable Private 
					                                         u32 %68 = OpConstant 1 
					                                             %69 = OpTypeArray %6 %68 
					                                             %70 = OpTypeStruct %7 %6 %69 
					                                             %71 = OpTypePointer Output %70 
					        Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
					                                             %80 = OpTypePointer Output %7 
					                                             %82 = OpTypeBool 
					                                             %83 = OpTypePointer Private %82 
					                               Private bool* %84 = OpVariable Private 
					                                             %85 = OpTypePointer Uniform %6 
					                                         f32 %88 = OpConstant 3,674022E-40 
					                                             %90 = OpTypePointer Private %6 
					                                Private f32* %91 = OpVariable Private 
					                                Input f32_4* %92 = OpVariable Input 
					                                             %93 = OpTypePointer Input %6 
					                                         f32 %97 = OpConstant 3,674022E-40 
					                              Private f32_4* %99 = OpVariable Private 
					                                            %101 = OpTypePointer Function %6 
					                                        u32 %110 = OpConstant 3 
					                                            %112 = OpTypeVector %6 3 
					                                            %117 = OpTypeVector %6 2 
					                                            %118 = OpTypePointer Output %117 
					                      Output f32_2* vs_TEXCOORD0 = OpVariable Output 
					                      Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                            %125 = OpTypePointer Output %6 
					                                         void %4 = OpFunction None %3 
					                                              %5 = OpLabel 
					                              Function f32* %102 = OpVariable Function 
					                                       f32_4 %12 = OpLoad %11 
					                                       f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                              Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
					                                       f32_4 %26 = OpLoad %25 
					                                       f32_4 %27 = OpFMul %13 %26 
					                                                     OpStore %9 %27 
					                              Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
					                                       f32_4 %29 = OpLoad %28 
					                                       f32_4 %30 = OpLoad %11 
					                                       f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                       f32_4 %32 = OpFMul %29 %31 
					                                       f32_4 %33 = OpLoad %9 
					                                       f32_4 %34 = OpFAdd %32 %33 
					                                                     OpStore %9 %34 
					                              Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                       f32_4 %37 = OpLoad %36 
					                                       f32_4 %38 = OpLoad %11 
					                                       f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                       f32_4 %40 = OpFMul %37 %39 
					                                       f32_4 %41 = OpLoad %9 
					                                       f32_4 %42 = OpFAdd %40 %41 
					                                                     OpStore %9 %42 
					                                       f32_4 %43 = OpLoad %9 
					                              Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                       f32_4 %46 = OpLoad %45 
					                                       f32_4 %47 = OpFAdd %43 %46 
					                                                     OpStore %9 %47 
					                                       f32_4 %49 = OpLoad %9 
					                                       f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                              Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
					                                       f32_4 %52 = OpLoad %51 
					                                       f32_4 %53 = OpFMul %50 %52 
					                                                     OpStore %48 %53 
					                              Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
					                                       f32_4 %55 = OpLoad %54 
					                                       f32_4 %56 = OpLoad %9 
					                                       f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                       f32_4 %58 = OpFMul %55 %57 
					                                       f32_4 %59 = OpLoad %48 
					                                       f32_4 %60 = OpFAdd %58 %59 
					                                                     OpStore %48 %60 
					                              Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
					                                       f32_4 %62 = OpLoad %61 
					                                       f32_4 %63 = OpLoad %9 
					                                       f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                       f32_4 %65 = OpFMul %62 %64 
					                                       f32_4 %66 = OpLoad %48 
					                                       f32_4 %67 = OpFAdd %65 %66 
					                                                     OpStore %48 %67 
					                              Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
					                                       f32_4 %74 = OpLoad %73 
					                                       f32_4 %75 = OpLoad %9 
					                                       f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
					                                       f32_4 %77 = OpFMul %74 %76 
					                                       f32_4 %78 = OpLoad %48 
					                                       f32_4 %79 = OpFAdd %77 %78 
					                               Output f32_4* %81 = OpAccessChain %72 %22 
					                                                     OpStore %81 %79 
					                                Uniform f32* %86 = OpAccessChain %20 %35 %68 
					                                         f32 %87 = OpLoad %86 
					                                        bool %89 = OpFOrdLessThan %87 %88 
					                                                     OpStore %84 %89 
					                                  Input f32* %94 = OpAccessChain %92 %68 
					                                         f32 %95 = OpLoad %94 
					                                         f32 %96 = OpFNegate %95 
					                                         f32 %98 = OpFAdd %96 %97 
					                                                     OpStore %91 %98 
					                                       bool %100 = OpLoad %84 
					                                                     OpSelectionMerge %104 None 
					                                                     OpBranchConditional %100 %103 %106 
					                                            %103 = OpLabel 
					                                        f32 %105 = OpLoad %91 
					                                                     OpStore %102 %105 
					                                                     OpBranch %104 
					                                            %106 = OpLabel 
					                                 Input f32* %107 = OpAccessChain %92 %68 
					                                        f32 %108 = OpLoad %107 
					                                                     OpStore %102 %108 
					                                                     OpBranch %104 
					                                            %104 = OpLabel 
					                                        f32 %109 = OpLoad %102 
					                               Private f32* %111 = OpAccessChain %99 %110 
					                                                     OpStore %111 %109 
					                                      f32_4 %113 = OpLoad %92 
					                                      f32_3 %114 = OpVectorShuffle %113 %113 0 1 0 
					                                      f32_4 %115 = OpLoad %99 
					                                      f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
					                                                     OpStore %99 %116 
					                                      f32_4 %120 = OpLoad %99 
					                                      f32_2 %121 = OpVectorShuffle %120 %120 0 1 
					                                                     OpStore vs_TEXCOORD0 %121 
					                                      f32_4 %123 = OpLoad %99 
					                                      f32_2 %124 = OpVectorShuffle %123 %123 2 3 
					                                                     OpStore vs_TEXCOORD1 %124 
					                                Output f32* %126 = OpAccessChain %72 %22 %68 
					                                        f32 %127 = OpLoad %126 
					                                        f32 %128 = OpFNegate %127 
					                                Output f32* %129 = OpAccessChain %72 %22 %68 
					                                                     OpStore %129 %128 
					                                                     OpReturn
					                                                     OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 90
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %26 %84 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpMemberDecorate %10 0 Offset 10 
					                                             OpDecorate %10 Block 
					                                             OpDecorate %12 DescriptorSet 12 
					                                             OpDecorate %12 Binding 12 
					                                             OpDecorate vs_TEXCOORD0 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 26 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate %33 RelaxedPrecision 
					                                             OpDecorate %33 DescriptorSet 33 
					                                             OpDecorate %33 Binding 33 
					                                             OpDecorate %34 RelaxedPrecision 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %37 DescriptorSet 37 
					                                             OpDecorate %37 Binding 37 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %45 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %51 RelaxedPrecision 
					                                             OpDecorate %52 RelaxedPrecision 
					                                             OpDecorate %53 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %65 RelaxedPrecision 
					                                             OpDecorate %66 RelaxedPrecision 
					                                             OpDecorate %71 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %77 RelaxedPrecision 
					                                             OpDecorate %78 RelaxedPrecision 
					                                             OpDecorate %79 RelaxedPrecision 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %84 Location 84 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %88 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypeStruct %7 
					                                     %11 = OpTypePointer Uniform %10 
					            Uniform struct {f32_4;}* %12 = OpVariable Uniform 
					                                     %13 = OpTypeInt 32 1 
					                                 i32 %14 = OpConstant 0 
					                                     %15 = OpTypePointer Uniform %7 
					                                 f32 %20 = OpConstant 3,674022E-40 
					                                 f32 %21 = OpConstant 3,674022E-40 
					                               f32_4 %22 = OpConstantComposite %20 %20 %21 %20 
					                                     %24 = OpTypeVector %6 2 
					                                     %25 = OpTypePointer Input %24 
					               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
					                      Private f32_4* %30 = OpVariable Private 
					                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %32 = OpTypePointer UniformConstant %31 
					UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
					                                     %35 = OpTypeSampler 
					                                     %36 = OpTypePointer UniformConstant %35 
					            UniformConstant sampler* %37 = OpVariable UniformConstant 
					                                     %39 = OpTypeSampledImage %31 
					                      Private f32_4* %44 = OpVariable Private 
					                      Private f32_4* %51 = OpVariable Private 
					                      Private f32_4* %55 = OpVariable Private 
					                               f32_4 %59 = OpConstantComposite %21 %20 %20 %20 
					                      Private f32_4* %64 = OpVariable Private 
					                                     %83 = OpTypePointer Output %7 
					                       Output f32_4* %84 = OpVariable Output 
					                                 f32 %86 = OpConstant 3,674022E-40 
					                               f32_4 %87 = OpConstantComposite %86 %86 %86 %86 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                      Uniform f32_4* %16 = OpAccessChain %12 %14 
					                               f32_4 %17 = OpLoad %16 
					                               f32_4 %18 = OpVectorShuffle %17 %17 0 1 0 1 
					                               f32_4 %19 = OpFNegate %18 
					                               f32_4 %23 = OpFMul %19 %22 
					                               f32_2 %27 = OpLoad vs_TEXCOORD0 
					                               f32_4 %28 = OpVectorShuffle %27 %27 0 1 0 1 
					                               f32_4 %29 = OpFAdd %23 %28 
					                                             OpStore %9 %29 
					                 read_only Texture2D %34 = OpLoad %33 
					                             sampler %38 = OpLoad %37 
					          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
					                               f32_4 %41 = OpLoad %9 
					                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
					                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
					                                             OpStore %30 %43 
					                 read_only Texture2D %45 = OpLoad %33 
					                             sampler %46 = OpLoad %37 
					          read_only Texture2DSampled %47 = OpSampledImage %45 %46 
					                               f32_4 %48 = OpLoad %9 
					                               f32_2 %49 = OpVectorShuffle %48 %48 2 3 
					                               f32_4 %50 = OpImageSampleImplicitLod %47 %49 
					                                             OpStore %44 %50 
					                               f32_4 %52 = OpLoad %44 
					                               f32_4 %53 = OpLoad %30 
					                               f32_4 %54 = OpFAdd %52 %53 
					                                             OpStore %51 %54 
					                      Uniform f32_4* %56 = OpAccessChain %12 %14 
					                               f32_4 %57 = OpLoad %56 
					                               f32_4 %58 = OpVectorShuffle %57 %57 0 1 0 1 
					                               f32_4 %60 = OpFMul %58 %59 
					                               f32_2 %61 = OpLoad vs_TEXCOORD0 
					                               f32_4 %62 = OpVectorShuffle %61 %61 0 1 0 1 
					                               f32_4 %63 = OpFAdd %60 %62 
					                                             OpStore %55 %63 
					                 read_only Texture2D %65 = OpLoad %33 
					                             sampler %66 = OpLoad %37 
					          read_only Texture2DSampled %67 = OpSampledImage %65 %66 
					                               f32_4 %68 = OpLoad %55 
					                               f32_2 %69 = OpVectorShuffle %68 %68 0 1 
					                               f32_4 %70 = OpImageSampleImplicitLod %67 %69 
					                                             OpStore %64 %70 
					                 read_only Texture2D %71 = OpLoad %33 
					                             sampler %72 = OpLoad %37 
					          read_only Texture2DSampled %73 = OpSampledImage %71 %72 
					                               f32_4 %74 = OpLoad %55 
					                               f32_2 %75 = OpVectorShuffle %74 %74 2 3 
					                               f32_4 %76 = OpImageSampleImplicitLod %73 %75 
					                                             OpStore %30 %76 
					                               f32_4 %77 = OpLoad %51 
					                               f32_4 %78 = OpLoad %64 
					                               f32_4 %79 = OpFAdd %77 %78 
					                                             OpStore %51 %79 
					                               f32_4 %80 = OpLoad %30 
					                               f32_4 %81 = OpLoad %51 
					                               f32_4 %82 = OpFAdd %80 %81 
					                                             OpStore %51 %82 
					                               f32_4 %85 = OpLoad %51 
					                               f32_4 %88 = OpFMul %85 %87 
					                                             OpStore %84 %88 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat16_0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat10_2;
					void main()
					{
					    u_xlat0 = (-_MainTex_TexelSize.xyxy) * vec4(0.5, 0.5, -0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat16_0 = u_xlat10_0 + u_xlat10_1;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat16_0 = u_xlat16_0 + u_xlat10_2;
					    u_xlat16_0 = u_xlat10_1 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
			}
		}
	}
}