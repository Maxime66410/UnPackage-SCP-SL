Shader "TextMeshPro/Distance Field (Surface)" {
	Properties {
		_FaceTex ("Fill Texture", 2D) = "white" {}
		_FaceUVSpeedX ("Face UV Speed X", Range(-5, 5)) = 0
		_FaceUVSpeedY ("Face UV Speed Y", Range(-5, 5)) = 0
		_FaceColor ("Fill Color", Vector) = (1,1,1,1)
		_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
		_OutlineColor ("Outline Color", Vector) = (0,0,0,1)
		_OutlineTex ("Outline Texture", 2D) = "white" {}
		_OutlineUVSpeedX ("Outline UV Speed X", Range(-5, 5)) = 0
		_OutlineUVSpeedY ("Outline UV Speed Y", Range(-5, 5)) = 0
		_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
		_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
		_Bevel ("Bevel", Range(0, 1)) = 0.5
		_BevelOffset ("Bevel Offset", Range(-0.5, 0.5)) = 0
		_BevelWidth ("Bevel Width", Range(-0.5, 0.5)) = 0
		_BevelClamp ("Bevel Clamp", Range(0, 1)) = 0
		_BevelRoundness ("Bevel Roundness", Range(0, 1)) = 0
		_BumpMap ("Normalmap", 2D) = "bump" {}
		_BumpOutline ("Bump Outline", Range(0, 1)) = 0.5
		_BumpFace ("Bump Face", Range(0, 1)) = 0.5
		_ReflectFaceColor ("Face Color", Vector) = (0,0,0,1)
		_ReflectOutlineColor ("Outline Color", Vector) = (0,0,0,1)
		_Cube ("Reflection Cubemap", Cube) = "black" {}
		_EnvMatrixRotation ("Texture Rotation", Vector) = (0,0,0,0)
		_SpecColor ("Specular Color", Vector) = (0,0,0,1)
		_FaceShininess ("Face Shininess", Range(0, 1)) = 0
		_OutlineShininess ("Outline Shininess", Range(0, 1)) = 0
		_GlowColor ("Color", Vector) = (0,1,0,0.5)
		_GlowOffset ("Offset", Range(-1, 1)) = 0
		_GlowInner ("Inner", Range(0, 1)) = 0.05
		_GlowOuter ("Outer", Range(0, 1)) = 0.05
		_GlowPower ("Falloff", Range(1, 0)) = 0.75
		_WeightNormal ("Weight Normal", Float) = 0
		_WeightBold ("Weight Bold", Float) = 0.5
		_ShaderFlags ("Flags", Float) = 0
		_ScaleRatioA ("Scale RatioA", Float) = 1
		_ScaleRatioB ("Scale RatioB", Float) = 1
		_ScaleRatioC ("Scale RatioC", Float) = 1
		_MainTex ("Font Atlas", 2D) = "white" {}
		_TextureWidth ("Texture Width", Float) = 512
		_TextureHeight ("Texture Height", Float) = 512
		_GradientScale ("Gradient Scale", Float) = 5
		_ScaleX ("Scale X", Float) = 1
		_ScaleY ("Scale Y", Float) = 1
		_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
		_VertexOffsetX ("Vertex OffsetX", Float) = 0
		_VertexOffsetY ("Vertex OffsetY", Float) = 0
	}
	SubShader {
		LOD 300
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZWrite Off
			Cull Off
			GpuProgramID 57641
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat16 = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat16 + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat15 * 0.5;
					    u_xlat15 = u_xlat2.y * unity_MatrixVP[1].w;
					    u_xlat15 = unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat2.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat16 = u_xlat15 * 1.5;
					    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat16);
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xxx;
					    u_xlat3.x = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat3.x) * u_xlat15 + u_xlat16;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.wxy * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.ywx * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyw = _EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _FaceDilate;
					uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _FaceTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat16 = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat16 + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat15 * 0.5;
					    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat16 = u_xlat15 * 1.5;
					    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat16);
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xxx;
					    u_xlat3.x = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat3.x) * u_xlat15 + u_xlat16;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.wxy * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.ywx * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
					    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _SpecColor;
					uniform 	float _FaceUVSpeedX;
					uniform 	float _FaceUVSpeedY;
					uniform 	vec4 _FaceColor;
					uniform 	float _OutlineSoftness;
					uniform 	float _OutlineUVSpeedX;
					uniform 	float _OutlineUVSpeedY;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _Bevel;
					uniform 	float _BevelOffset;
					uniform 	float _BevelWidth;
					uniform 	float _BevelClamp;
					uniform 	float _BevelRoundness;
					uniform 	float _BumpOutline;
					uniform 	float _BumpFace;
					uniform 	vec4 _ReflectFaceColor;
					uniform 	vec4 _ReflectOutlineColor;
					uniform 	float _ShaderFlags;
					uniform 	float _ScaleRatioA;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _FaceShininess;
					uniform 	float _OutlineShininess;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _FaceTex;
					UNITY_LOCATION(2) uniform  sampler2D _OutlineTex;
					UNITY_LOCATION(3) uniform  sampler2D _BumpMap;
					UNITY_LOCATION(4) uniform  samplerCube _Cube;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					float u_xlat16_4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb9;
					float u_xlat10;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat1 = vec4(u_xlat18) + u_xlat3;
					    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat18 = _BevelWidth + _OutlineWidth;
					    u_xlat18 = max(u_xlat18, 0.00999999978);
					    u_xlat1 = u_xlat1 / vec4(u_xlat18);
					    u_xlat18 = u_xlat18 * _Bevel;
					    u_xlat18 = u_xlat18 * _GradientScale;
					    u_xlat18 = u_xlat18 * -2.0;
					    u_xlat1 = u_xlat1 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2 = u_xlat1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = _ShaderFlags * 0.5;
					    u_xlatb9 = u_xlat3.x>=(-u_xlat3.x);
					    u_xlat3.x = fract(abs(u_xlat3.x));
					    u_xlat3.x = (u_xlatb9) ? u_xlat3.x : (-u_xlat3.x);
					    u_xlatb3 = u_xlat3.x>=0.5;
					    u_xlat1 = (bool(u_xlatb3)) ? u_xlat2 : u_xlat1;
					    u_xlat2 = u_xlat1 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat1 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat1;
					    u_xlat2.x = (-_BevelClamp) + 1.0;
					    u_xlat1 = min(u_xlat1, u_xlat2.xxxx);
					    u_xlat1.xz = vec2(u_xlat18) * u_xlat1.xz;
					    u_xlat1.yz = u_xlat1.wy * vec2(u_xlat18) + (-u_xlat1.zx);
					    u_xlat1.x = float(-1.0);
					    u_xlat1.w = float(1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat19 = dot(u_xlat1.zw, u_xlat1.zw);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.x = u_xlat19 * u_xlat1.z;
					    u_xlat2.yz = vec2(u_xlat19) * vec2(1.0, 0.0);
					    u_xlat1.z = 0.0;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat2.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_2 = texture(_OutlineTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;
					    u_xlat18 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat3.w = u_xlat10_2.w * u_xlat18;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.www;
					    u_xlat2.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_2 = texture(_FaceTex, u_xlat2.xy);
					    u_xlat4 = vs_COLOR0 * _FaceColor;
					    u_xlat2 = u_xlat10_2 * u_xlat4;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2) + u_xlat3;
					    u_xlat18 = _OutlineWidth * _ScaleRatioA;
					    u_xlat18 = u_xlat18 * vs_TEXCOORD5.y;
					    u_xlat19 = min(u_xlat18, 1.0);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = (-u_xlat10_4.w) + 0.5;
					    u_xlat4.x = u_xlat16_4 + (-vs_TEXCOORD5.x);
					    u_xlat4.x = u_xlat4.x * vs_TEXCOORD5.y + 0.5;
					    u_xlat10 = u_xlat18 * 0.5 + u_xlat4.x;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.5 + u_xlat4.x;
					    u_xlat19 = u_xlat19 * u_xlat10;
					    u_xlat2 = vec4(u_xlat19) * u_xlat3 + u_xlat2;
					    u_xlat19 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.x = u_xlat19 * vs_TEXCOORD5.y;
					    u_xlat19 = u_xlat19 * vs_TEXCOORD5.y + 1.0;
					    u_xlat18 = u_xlat3.x * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat18 / u_xlat19;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2 = vec4(u_xlat18) * u_xlat2;
					    u_xlat18 = (-_BumpFace) + _BumpOutline;
					    u_xlat18 = u_xlat10 * u_xlat18 + _BumpFace;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat3.z = sqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat18) + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.xyz = u_xlat2.www * u_xlat3.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, (-u_xlat1.xyz));
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, (-u_xlat1.xyz));
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, (-u_xlat1.xyz));
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat6.x = u_xlat10 * u_xlat6.x + _FaceShininess;
					    u_xlat6.x = u_xlat6.x * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat6.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat19 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat19);
					    u_xlat4.xzw = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat4.xzw * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat5.x = dot(unity_SHAr, u_xlat3);
					    u_xlat5.y = dot(unity_SHAg, u_xlat3);
					    u_xlat5.z = dot(unity_SHAb, u_xlat3);
					    u_xlat3.xyz = u_xlat5.xyz + vs_TEXCOORD7.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz + _ReflectFaceColor.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat18 = dot(vs_TEXCOORD6.xyz, u_xlat1.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat18)) + vs_TEXCOORD6.xyz;
					    u_xlat10_1 = texture(_Cube, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat0.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 688
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %105 %117 %143 %158 %170 %221 %386 %494 %498 %577 %581 %603 %604 %627 %673 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpDecorate %22 ArrayStride 22 
					                                                      OpMemberDecorate %23 0 Offset 23 
					                                                      OpMemberDecorate %23 1 Offset 23 
					                                                      OpMemberDecorate %23 2 RelaxedPrecision 
					                                                      OpMemberDecorate %23 2 Offset 23 
					                                                      OpMemberDecorate %23 3 RelaxedPrecision 
					                                                      OpMemberDecorate %23 3 Offset 23 
					                                                      OpMemberDecorate %23 4 RelaxedPrecision 
					                                                      OpMemberDecorate %23 4 Offset 23 
					                                                      OpMemberDecorate %23 5 RelaxedPrecision 
					                                                      OpMemberDecorate %23 5 Offset 23 
					                                                      OpMemberDecorate %23 6 Offset 23 
					                                                      OpMemberDecorate %23 7 Offset 23 
					                                                      OpMemberDecorate %23 8 Offset 23 
					                                                      OpMemberDecorate %23 9 Offset 23 
					                                                      OpMemberDecorate %23 10 Offset 23 
					                                                      OpMemberDecorate %23 11 Offset 23 
					                                                      OpMemberDecorate %23 12 Offset 23 
					                                                      OpMemberDecorate %23 13 Offset 23 
					                                                      OpMemberDecorate %23 14 Offset 23 
					                                                      OpMemberDecorate %23 15 Offset 23 
					                                                      OpMemberDecorate %23 16 Offset 23 
					                                                      OpMemberDecorate %23 17 Offset 23 
					                                                      OpMemberDecorate %23 18 Offset 23 
					                                                      OpMemberDecorate %23 19 Offset 23 
					                                                      OpMemberDecorate %23 20 Offset 23 
					                                                      OpMemberDecorate %23 21 Offset 23 
					                                                      OpMemberDecorate %23 22 Offset 23 
					                                                      OpMemberDecorate %23 23 Offset 23 
					                                                      OpMemberDecorate %23 24 Offset 23 
					                                                      OpDecorate %23 Block 
					                                                      OpDecorate %25 DescriptorSet 25 
					                                                      OpDecorate %25 Binding 25 
					                                                      OpMemberDecorate %103 0 BuiltIn 103 
					                                                      OpMemberDecorate %103 1 BuiltIn 103 
					                                                      OpMemberDecorate %103 2 BuiltIn 103 
					                                                      OpDecorate %103 Block 
					                                                      OpDecorate %117 Location 117 
					                                                      OpDecorate vs_TEXCOORD0 Location 143 
					                                                      OpDecorate vs_TEXCOORD1 Location 158 
					                                                      OpDecorate %170 Location 170 
					                                                      OpDecorate vs_TEXCOORD5 Location 221 
					                                                      OpDecorate %386 Location 386 
					                                                      OpDecorate vs_TEXCOORD2 Location 494 
					                                                      OpDecorate %498 Location 498 
					                                                      OpDecorate vs_TEXCOORD3 Location 577 
					                                                      OpDecorate vs_TEXCOORD4 Location 581 
					                                                      OpDecorate %603 RelaxedPrecision 
					                                                      OpDecorate %603 Location 603 
					                                                      OpDecorate %604 RelaxedPrecision 
					                                                      OpDecorate %604 Location 604 
					                                                      OpDecorate %605 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD6 Location 627 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %648 RelaxedPrecision 
					                                                      OpDecorate %649 RelaxedPrecision 
					                                                      OpDecorate %651 RelaxedPrecision 
					                                                      OpDecorate %656 RelaxedPrecision 
					                                                      OpDecorate %658 RelaxedPrecision 
					                                                      OpDecorate %659 RelaxedPrecision 
					                                                      OpDecorate %660 RelaxedPrecision 
					                                                      OpDecorate %663 RelaxedPrecision 
					                                                      OpDecorate %664 RelaxedPrecision 
					                                                      OpDecorate %665 RelaxedPrecision 
					                                                      OpDecorate %669 RelaxedPrecision 
					                                                      OpDecorate %670 RelaxedPrecision 
					                                                      OpDecorate %671 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 673 
					                                                      OpDecorate %676 RelaxedPrecision 
					                                                      OpDecorate %677 RelaxedPrecision 
					                                                      OpDecorate %678 RelaxedPrecision 
					                                                      OpDecorate %679 RelaxedPrecision 
					                                                      OpDecorate %680 RelaxedPrecision 
					                                                      OpDecorate %681 RelaxedPrecision 
					                                                      OpDecorate %682 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %12 = OpTypeVector %6 2 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %7 %17 
					                                              %19 = OpTypeArray %7 %17 
					                                              %20 = OpTypeArray %7 %17 
					                                              %21 = OpTypeArray %7 %17 
					                                              %22 = OpTypeArray %7 %17 
					                                              %23 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %19 %7 %20 %21 %6 %22 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
					                                              %24 = OpTypePointer Uniform %23 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %25 = OpVariable Uniform 
					                                              %26 = OpTypeInt 32 1 
					                                          i32 %27 = OpConstant 16 
					                                              %28 = OpTypePointer Uniform %6 
					                                          i32 %31 = OpConstant 17 
					                               Private f32_4* %38 = OpVariable Private 
					                                          i32 %41 = OpConstant 6 
					                                          i32 %42 = OpConstant 1 
					                                              %43 = OpTypePointer Uniform %7 
					                                          i32 %47 = OpConstant 0 
					                                          i32 %55 = OpConstant 2 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %65 = OpConstant 3 
					                               Private f32_4* %80 = OpVariable Private 
					                                          i32 %83 = OpConstant 10 
					                                         u32 %101 = OpConstant 1 
					                                             %102 = OpTypeArray %6 %101 
					                                             %103 = OpTypeStruct %7 %6 %102 
					                                             %104 = OpTypePointer Output %103 
					        Output struct {f32_4; f32; f32[1];}* %105 = OpVariable Output 
					                                             %113 = OpTypePointer Output %7 
					                                             %115 = OpTypePointer Private %6 
					                                Private f32* %116 = OpVariable Private 
					                                Input f32_4* %117 = OpVariable Input 
					                                         u32 %118 = OpConstant 0 
					                                             %119 = OpTypePointer Input %6 
					                                         f32 %122 = OpConstant 3,674022E-40 
					                                         f32 %130 = OpConstant 3,674022E-40 
					                                         f32 %138 = OpConstant 3,674022E-40 
					                                       f32_2 %139 = OpConstantComposite %138 %138 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                                         i32 %146 = OpConstant 23 
					                                             %157 = OpTypePointer Output %12 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                         i32 %161 = OpConstant 24 
					                                Input f32_4* %170 = OpVariable Input 
					                                         i32 %173 = OpConstant 22 
					                                             %184 = OpTypeBool 
					                                             %185 = OpTypePointer Private %184 
					                               Private bool* %186 = OpVariable Private 
					                                         f32 %187 = OpConstant 3,674022E-40 
					                                         f32 %192 = OpConstant 3,674022E-40 
					                                Private f32* %194 = OpVariable Private 
					                                         i32 %195 = OpConstant 13 
					                                         i32 %199 = OpConstant 14 
					                                         f32 %210 = OpConstant 3,674022E-40 
					                                         i32 %212 = OpConstant 11 
					                                         i32 %217 = OpConstant 15 
					                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %223 = OpConstant 3,674022E-40 
					                                             %225 = OpTypePointer Output %6 
					                                         u32 %229 = OpConstant 3 
					                                         u32 %242 = OpConstant 2 
					                                         i32 %258 = OpConstant 9 
					                                         i32 %279 = OpConstant 19 
					                                         i32 %282 = OpConstant 20 
					                                         i32 %306 = OpConstant 18 
					                                         f32 %314 = OpConstant 3,674022E-40 
					                                         i32 %316 = OpConstant 21 
					                                             %331 = OpTypePointer Uniform %15 
					                                         i32 %335 = OpConstant 7 
					                                             %385 = OpTypePointer Input %15 
					                                Input f32_3* %386 = OpVariable Input 
					                                             %392 = OpTypePointer Private %26 
					                                Private i32* %393 = OpVariable Private 
					                                         u32 %397 = OpConstant 4294967295 
					                                Private i32* %400 = OpVariable Private 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_4* %498 = OpVariable Input 
					                                             %543 = OpTypePointer Private %15 
					                              Private f32_3* %544 = OpVariable Private 
					                                         i32 %560 = OpConstant 8 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %603 = OpVariable Output 
					                                Input f32_4* %604 = OpVariable Input 
					                                         i32 %608 = OpConstant 12 
					                                             %626 = OpTypePointer Output %15 
					                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
					                                Private f32* %637 = OpVariable Private 
					                              Private f32_4* %651 = OpVariable Private 
					                              Private f32_3* %656 = OpVariable Private 
					                                         i32 %667 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
					                                         i32 %674 = OpConstant 5 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %13 = OpLoad %11 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %29 = OpAccessChain %25 %27 
					                                          f32 %30 = OpLoad %29 
					                                 Uniform f32* %32 = OpAccessChain %25 %31 
					                                          f32 %33 = OpLoad %32 
					                                        f32_2 %34 = OpCompositeConstruct %30 %33 
					                                        f32_2 %35 = OpFAdd %14 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 2 3 
					                                                      OpStore %9 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 1 1 1 1 
					                               Uniform f32_4* %44 = OpAccessChain %25 %41 %42 
					                                        f32_4 %45 = OpLoad %44 
					                                        f32_4 %46 = OpFMul %40 %45 
					                                                      OpStore %38 %46 
					                               Uniform f32_4* %48 = OpAccessChain %25 %41 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_4 %51 = OpVectorShuffle %50 %50 0 0 0 0 
					                                        f32_4 %52 = OpFMul %49 %51 
					                                        f32_4 %53 = OpLoad %38 
					                                        f32_4 %54 = OpFAdd %52 %53 
					                                                      OpStore %38 %54 
					                               Uniform f32_4* %56 = OpAccessChain %25 %41 %55 
					                                        f32_4 %57 = OpLoad %56 
					                                        f32_4 %58 = OpLoad %11 
					                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
					                                        f32_4 %60 = OpFMul %57 %59 
					                                        f32_4 %61 = OpLoad %38 
					                                        f32_4 %62 = OpFAdd %60 %61 
					                                                      OpStore %38 %62 
					                                        f32_4 %64 = OpLoad %38 
					                               Uniform f32_4* %66 = OpAccessChain %25 %41 %65 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_4 %68 = OpFAdd %64 %67 
					                                                      OpStore %63 %68 
					                               Uniform f32_4* %69 = OpAccessChain %25 %41 %65 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
					                                        f32_4 %72 = OpLoad %11 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
					                                        f32_3 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %38 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                        f32_3 %77 = OpFAdd %74 %76 
					                                        f32_4 %78 = OpLoad %38 
					                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
					                                                      OpStore %38 %79 
					                                        f32_4 %81 = OpLoad %63 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 1 1 1 1 
					                               Uniform f32_4* %84 = OpAccessChain %25 %83 %42 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpFMul %82 %85 
					                                                      OpStore %80 %86 
					                               Uniform f32_4* %87 = OpAccessChain %25 %83 %47 
					                                        f32_4 %88 = OpLoad %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpVectorShuffle %89 %89 0 0 0 0 
					                                        f32_4 %91 = OpFMul %88 %90 
					                                        f32_4 %92 = OpLoad %80 
					                                        f32_4 %93 = OpFAdd %91 %92 
					                                                      OpStore %80 %93 
					                               Uniform f32_4* %94 = OpAccessChain %25 %83 %55 
					                                        f32_4 %95 = OpLoad %94 
					                                        f32_4 %96 = OpLoad %63 
					                                        f32_4 %97 = OpVectorShuffle %96 %96 2 2 2 2 
					                                        f32_4 %98 = OpFMul %95 %97 
					                                        f32_4 %99 = OpLoad %80 
					                                       f32_4 %100 = OpFAdd %98 %99 
					                                                      OpStore %80 %100 
					                              Uniform f32_4* %106 = OpAccessChain %25 %83 %65 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_4 %108 = OpLoad %63 
					                                       f32_4 %109 = OpVectorShuffle %108 %108 3 3 3 3 
					                                       f32_4 %110 = OpFMul %107 %109 
					                                       f32_4 %111 = OpLoad %80 
					                                       f32_4 %112 = OpFAdd %110 %111 
					                               Output f32_4* %114 = OpAccessChain %105 %47 
					                                                      OpStore %114 %112 
					                                  Input f32* %120 = OpAccessChain %117 %118 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %123 = OpFMul %121 %122 
					                                                      OpStore %116 %123 
					                                         f32 %124 = OpLoad %116 
					                                         f32 %125 = OpExtInst %1 8 %124 
					                                Private f32* %126 = OpAccessChain %80 %118 
					                                                      OpStore %126 %125 
					                                Private f32* %127 = OpAccessChain %80 %118 
					                                         f32 %128 = OpLoad %127 
					                                         f32 %129 = OpFNegate %128 
					                                         f32 %131 = OpFMul %129 %130 
					                                  Input f32* %132 = OpAccessChain %117 %118 
					                                         f32 %133 = OpLoad %132 
					                                         f32 %134 = OpFAdd %131 %133 
					                                Private f32* %135 = OpAccessChain %80 %101 
					                                                      OpStore %135 %134 
					                                       f32_4 %136 = OpLoad %80 
					                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
					                                       f32_2 %140 = OpFMul %137 %139 
					                                       f32_4 %141 = OpLoad %80 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %80 %142 
					                                       f32_4 %144 = OpLoad %80 
					                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
					                              Uniform f32_4* %147 = OpAccessChain %25 %146 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
					                                       f32_2 %150 = OpFMul %145 %149 
					                              Uniform f32_4* %151 = OpAccessChain %25 %146 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
					                                       f32_2 %154 = OpFAdd %150 %153 
					                                       f32_4 %155 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %156 = OpVectorShuffle %155 %154 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %156 
					                                       f32_4 %159 = OpLoad %80 
					                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
					                              Uniform f32_4* %162 = OpAccessChain %25 %161 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
					                                       f32_2 %165 = OpFMul %160 %164 
					                              Uniform f32_4* %166 = OpAccessChain %25 %161 
					                                       f32_4 %167 = OpLoad %166 
					                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
					                                       f32_2 %169 = OpFAdd %165 %168 
					                                                      OpStore vs_TEXCOORD1 %169 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
					                              Uniform f32_4* %174 = OpAccessChain %25 %173 
					                                       f32_4 %175 = OpLoad %174 
					                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
					                                       f32_2 %177 = OpFMul %172 %176 
					                              Uniform f32_4* %178 = OpAccessChain %25 %173 
					                                       f32_4 %179 = OpLoad %178 
					                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
					                                       f32_2 %181 = OpFAdd %177 %180 
					                                       f32_4 %182 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %183 
					                                  Input f32* %188 = OpAccessChain %117 %101 
					                                         f32 %189 = OpLoad %188 
					                                        bool %190 = OpFOrdGreaterThanEqual %187 %189 
					                                                      OpStore %186 %190 
					                                        bool %191 = OpLoad %186 
					                                         f32 %193 = OpSelect %191 %192 %187 
					                                                      OpStore %116 %193 
					                                Uniform f32* %196 = OpAccessChain %25 %195 
					                                         f32 %197 = OpLoad %196 
					                                         f32 %198 = OpFNegate %197 
					                                Uniform f32* %200 = OpAccessChain %25 %199 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpFAdd %198 %201 
					                                                      OpStore %194 %202 
					                                         f32 %203 = OpLoad %116 
					                                         f32 %204 = OpLoad %194 
					                                         f32 %205 = OpFMul %203 %204 
					                                Uniform f32* %206 = OpAccessChain %25 %195 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFAdd %205 %207 
					                                                      OpStore %116 %208 
					                                         f32 %209 = OpLoad %116 
					                                         f32 %211 = OpFMul %209 %210 
					                                Uniform f32* %213 = OpAccessChain %25 %212 
					                                         f32 %214 = OpLoad %213 
					                                         f32 %215 = OpFAdd %211 %214 
					                                                      OpStore %116 %215 
					                                         f32 %216 = OpLoad %116 
					                                Uniform f32* %218 = OpAccessChain %25 %217 
					                                         f32 %219 = OpLoad %218 
					                                         f32 %220 = OpFMul %216 %219 
					                                                      OpStore %116 %220 
					                                         f32 %222 = OpLoad %116 
					                                         f32 %224 = OpFMul %222 %223 
					                                 Output f32* %226 = OpAccessChain vs_TEXCOORD5 %118 
					                                                      OpStore %226 %224 
					                                Private f32* %227 = OpAccessChain %63 %101 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %230 = OpAccessChain %25 %83 %42 %229 
					                                         f32 %231 = OpLoad %230 
					                                         f32 %232 = OpFMul %228 %231 
					                                                      OpStore %116 %232 
					                                Uniform f32* %233 = OpAccessChain %25 %83 %47 %229 
					                                         f32 %234 = OpLoad %233 
					                                Private f32* %235 = OpAccessChain %63 %118 
					                                         f32 %236 = OpLoad %235 
					                                         f32 %237 = OpFMul %234 %236 
					                                         f32 %238 = OpLoad %116 
					                                         f32 %239 = OpFAdd %237 %238 
					                                                      OpStore %116 %239 
					                                Uniform f32* %240 = OpAccessChain %25 %83 %55 %229 
					                                         f32 %241 = OpLoad %240 
					                                Private f32* %243 = OpAccessChain %63 %242 
					                                         f32 %244 = OpLoad %243 
					                                         f32 %245 = OpFMul %241 %244 
					                                         f32 %246 = OpLoad %116 
					                                         f32 %247 = OpFAdd %245 %246 
					                                                      OpStore %116 %247 
					                                Uniform f32* %248 = OpAccessChain %25 %83 %65 %229 
					                                         f32 %249 = OpLoad %248 
					                                Private f32* %250 = OpAccessChain %63 %229 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpFMul %249 %251 
					                                         f32 %253 = OpLoad %116 
					                                         f32 %254 = OpFAdd %252 %253 
					                                                      OpStore %116 %254 
					                              Uniform f32_4* %255 = OpAccessChain %25 %42 
					                                       f32_4 %256 = OpLoad %255 
					                                       f32_2 %257 = OpVectorShuffle %256 %256 1 1 
					                              Uniform f32_4* %259 = OpAccessChain %25 %258 %42 
					                                       f32_4 %260 = OpLoad %259 
					                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
					                                       f32_2 %262 = OpFMul %257 %261 
					                                       f32_4 %263 = OpLoad %63 
					                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
					                                                      OpStore %63 %264 
					                              Uniform f32_4* %265 = OpAccessChain %25 %258 %47 
					                                       f32_4 %266 = OpLoad %265 
					                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
					                              Uniform f32_4* %268 = OpAccessChain %25 %42 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_2 %270 = OpVectorShuffle %269 %269 0 0 
					                                       f32_2 %271 = OpFMul %267 %270 
					                                       f32_4 %272 = OpLoad %63 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFAdd %271 %273 
					                                       f32_4 %275 = OpLoad %63 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %63 %276 
					                                       f32_4 %277 = OpLoad %63 
					                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
					                                Uniform f32* %280 = OpAccessChain %25 %279 
					                                         f32 %281 = OpLoad %280 
					                                Uniform f32* %283 = OpAccessChain %25 %282 
					                                         f32 %284 = OpLoad %283 
					                                       f32_2 %285 = OpCompositeConstruct %281 %284 
					                                       f32_2 %286 = OpFMul %278 %285 
					                                       f32_4 %287 = OpLoad %63 
					                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 2 3 
					                                                      OpStore %63 %288 
					                                         f32 %289 = OpLoad %116 
					                                       f32_2 %290 = OpCompositeConstruct %289 %289 
					                                       f32_4 %291 = OpLoad %63 
					                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
					                                       f32_2 %293 = OpFDiv %290 %292 
					                                       f32_4 %294 = OpLoad %63 
					                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 2 3 
					                                                      OpStore %63 %295 
					                                       f32_4 %296 = OpLoad %63 
					                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
					                                       f32_4 %298 = OpLoad %63 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                         f32 %300 = OpDot %297 %299 
					                                                      OpStore %116 %300 
					                                         f32 %301 = OpLoad %116 
					                                         f32 %302 = OpExtInst %1 32 %301 
					                                                      OpStore %116 %302 
					                                  Input f32* %303 = OpAccessChain %117 %101 
					                                         f32 %304 = OpLoad %303 
					                                         f32 %305 = OpExtInst %1 4 %304 
					                                Uniform f32* %307 = OpAccessChain %25 %306 
					                                         f32 %308 = OpLoad %307 
					                                         f32 %309 = OpFMul %305 %308 
					                                                      OpStore %194 %309 
					                                         f32 %310 = OpLoad %116 
					                                         f32 %311 = OpLoad %194 
					                                         f32 %312 = OpFMul %310 %311 
					                                                      OpStore %116 %312 
					                                         f32 %313 = OpLoad %116 
					                                         f32 %315 = OpFMul %313 %314 
					                                                      OpStore %194 %315 
					                                Uniform f32* %317 = OpAccessChain %25 %316 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFNegate %318 
					                                         f32 %320 = OpFAdd %319 %192 
					                                Private f32* %321 = OpAccessChain %63 %118 
					                                                      OpStore %321 %320 
					                                         f32 %322 = OpLoad %194 
					                                Private f32* %323 = OpAccessChain %63 %118 
					                                         f32 %324 = OpLoad %323 
					                                         f32 %325 = OpFMul %322 %324 
					                                                      OpStore %194 %325 
					                                         f32 %326 = OpLoad %116 
					                                         f32 %327 = OpFMul %326 %314 
					                                         f32 %328 = OpLoad %194 
					                                         f32 %329 = OpFNegate %328 
					                                         f32 %330 = OpFAdd %327 %329 
					                                                      OpStore %116 %330 
					                              Uniform f32_3* %332 = OpAccessChain %25 %47 
					                                       f32_3 %333 = OpLoad %332 
					                                       f32_3 %334 = OpVectorShuffle %333 %333 1 1 1 
					                              Uniform f32_4* %336 = OpAccessChain %25 %335 %42 
					                                       f32_4 %337 = OpLoad %336 
					                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
					                                       f32_3 %339 = OpFMul %334 %338 
					                                       f32_4 %340 = OpLoad %63 
					                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
					                                                      OpStore %63 %341 
					                              Uniform f32_4* %342 = OpAccessChain %25 %335 %47 
					                                       f32_4 %343 = OpLoad %342 
					                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
					                              Uniform f32_3* %345 = OpAccessChain %25 %47 
					                                       f32_3 %346 = OpLoad %345 
					                                       f32_3 %347 = OpVectorShuffle %346 %346 0 0 0 
					                                       f32_3 %348 = OpFMul %344 %347 
					                                       f32_4 %349 = OpLoad %63 
					                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
					                                       f32_3 %351 = OpFAdd %348 %350 
					                                       f32_4 %352 = OpLoad %63 
					                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
					                                                      OpStore %63 %353 
					                              Uniform f32_4* %354 = OpAccessChain %25 %335 %55 
					                                       f32_4 %355 = OpLoad %354 
					                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
					                              Uniform f32_3* %357 = OpAccessChain %25 %47 
					                                       f32_3 %358 = OpLoad %357 
					                                       f32_3 %359 = OpVectorShuffle %358 %358 2 2 2 
					                                       f32_3 %360 = OpFMul %356 %359 
					                                       f32_4 %361 = OpLoad %63 
					                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
					                                       f32_3 %363 = OpFAdd %360 %362 
					                                       f32_4 %364 = OpLoad %63 
					                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
					                                                      OpStore %63 %365 
					                                       f32_4 %366 = OpLoad %63 
					                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
					                              Uniform f32_4* %368 = OpAccessChain %25 %335 %65 
					                                       f32_4 %369 = OpLoad %368 
					                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %63 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %63 %373 
					                                  Input f32* %374 = OpAccessChain %11 %242 
					                                         f32 %375 = OpLoad %374 
					                                Private f32* %376 = OpAccessChain %9 %242 
					                                                      OpStore %376 %375 
					                                       f32_4 %377 = OpLoad %9 
					                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
					                                       f32_3 %379 = OpFNegate %378 
					                                       f32_4 %380 = OpLoad %63 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
					                                       f32_3 %382 = OpFAdd %379 %381 
					                                       f32_4 %383 = OpLoad %9 
					                                       f32_4 %384 = OpVectorShuffle %383 %382 4 5 6 3 
					                                                      OpStore %9 %384 
					                                       f32_3 %387 = OpLoad %386 
					                                       f32_4 %388 = OpLoad %9 
					                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
					                                         f32 %390 = OpDot %387 %389 
					                                Private f32* %391 = OpAccessChain %9 %118 
					                                                      OpStore %391 %390 
					                                Private f32* %394 = OpAccessChain %9 %118 
					                                         f32 %395 = OpLoad %394 
					                                        bool %396 = OpFOrdLessThan %187 %395 
					                                         u32 %398 = OpSelect %396 %397 %118 
					                                         i32 %399 = OpBitcast %398 
					                                                      OpStore %393 %399 
					                                Private f32* %401 = OpAccessChain %9 %118 
					                                         f32 %402 = OpLoad %401 
					                                        bool %403 = OpFOrdLessThan %402 %187 
					                                         u32 %404 = OpSelect %403 %397 %118 
					                                         i32 %405 = OpBitcast %404 
					                                                      OpStore %400 %405 
					                                         i32 %406 = OpLoad %393 
					                                         i32 %407 = OpSNegate %406 
					                                         i32 %408 = OpLoad %400 
					                                         i32 %409 = OpIAdd %407 %408 
					                                                      OpStore %400 %409 
					                                         i32 %410 = OpLoad %400 
					                                         f32 %411 = OpConvertSToF %410 
					                                Private f32* %412 = OpAccessChain %9 %118 
					                                                      OpStore %412 %411 
					                                       f32_4 %413 = OpLoad %9 
					                                       f32_3 %414 = OpVectorShuffle %413 %413 0 0 0 
					                                       f32_3 %415 = OpLoad %386 
					                                       f32_3 %416 = OpFMul %414 %415 
					                                       f32_4 %417 = OpLoad %9 
					                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
					                                                      OpStore %9 %418 
					                                       f32_4 %419 = OpLoad %9 
					                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
					                              Uniform f32_4* %421 = OpAccessChain %25 %335 %47 
					                                       f32_4 %422 = OpLoad %421 
					                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
					                                         f32 %424 = OpDot %420 %423 
					                                Private f32* %425 = OpAccessChain %63 %118 
					                                                      OpStore %425 %424 
					                                       f32_4 %426 = OpLoad %9 
					                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
					                              Uniform f32_4* %428 = OpAccessChain %25 %335 %42 
					                                       f32_4 %429 = OpLoad %428 
					                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
					                                         f32 %431 = OpDot %427 %430 
					                                Private f32* %432 = OpAccessChain %63 %101 
					                                                      OpStore %432 %431 
					                                       f32_4 %433 = OpLoad %9 
					                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
					                              Uniform f32_4* %435 = OpAccessChain %25 %335 %55 
					                                       f32_4 %436 = OpLoad %435 
					                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
					                                         f32 %438 = OpDot %434 %437 
					                                Private f32* %439 = OpAccessChain %63 %242 
					                                                      OpStore %439 %438 
					                                       f32_4 %440 = OpLoad %63 
					                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
					                                       f32_4 %442 = OpLoad %63 
					                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
					                                         f32 %444 = OpDot %441 %443 
					                                Private f32* %445 = OpAccessChain %9 %118 
					                                                      OpStore %445 %444 
					                                Private f32* %446 = OpAccessChain %9 %118 
					                                         f32 %447 = OpLoad %446 
					                                         f32 %448 = OpExtInst %1 32 %447 
					                                Private f32* %449 = OpAccessChain %9 %118 
					                                                      OpStore %449 %448 
					                                       f32_4 %450 = OpLoad %9 
					                                       f32_4 %451 = OpVectorShuffle %450 %450 0 0 0 0 
					                                       f32_4 %452 = OpLoad %63 
					                                       f32_4 %453 = OpVectorShuffle %452 %452 0 1 2 2 
					                                       f32_4 %454 = OpFMul %451 %453 
					                                                      OpStore %63 %454 
					                                       f32_4 %455 = OpLoad %38 
					                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
					                                       f32_3 %457 = OpFNegate %456 
					                              Uniform f32_3* %458 = OpAccessChain %25 %47 
					                                       f32_3 %459 = OpLoad %458 
					                                       f32_3 %460 = OpFAdd %457 %459 
					                                       f32_4 %461 = OpLoad %9 
					                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 6 3 
					                                                      OpStore %9 %462 
					                                       f32_4 %463 = OpLoad %9 
					                                       f32_3 %464 = OpVectorShuffle %463 %463 0 1 2 
					                                       f32_4 %465 = OpLoad %9 
					                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 2 
					                                         f32 %467 = OpDot %464 %466 
					                                Private f32* %468 = OpAccessChain %80 %118 
					                                                      OpStore %468 %467 
					                                Private f32* %469 = OpAccessChain %80 %118 
					                                         f32 %470 = OpLoad %469 
					                                         f32 %471 = OpExtInst %1 32 %470 
					                                Private f32* %472 = OpAccessChain %80 %118 
					                                                      OpStore %472 %471 
					                                       f32_4 %473 = OpLoad %9 
					                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
					                                       f32_4 %475 = OpLoad %80 
					                                       f32_3 %476 = OpVectorShuffle %475 %475 0 0 0 
					                                       f32_3 %477 = OpFMul %474 %476 
					                                       f32_4 %478 = OpLoad %80 
					                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 6 3 
					                                                      OpStore %80 %479 
					                                       f32_4 %480 = OpLoad %63 
					                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 3 
					                                       f32_4 %482 = OpLoad %80 
					                                       f32_3 %483 = OpVectorShuffle %482 %482 0 1 2 
					                                         f32 %484 = OpDot %481 %483 
					                                Private f32* %485 = OpAccessChain %80 %118 
					                                                      OpStore %485 %484 
					                                Private f32* %486 = OpAccessChain %80 %118 
					                                         f32 %487 = OpLoad %486 
					                                         f32 %488 = OpExtInst %1 4 %487 
					                                         f32 %489 = OpLoad %116 
					                                         f32 %490 = OpFMul %488 %489 
					                                         f32 %491 = OpLoad %194 
					                                         f32 %492 = OpFAdd %490 %491 
					                                 Output f32* %493 = OpAccessChain vs_TEXCOORD5 %101 
					                                                      OpStore %493 %492 
					                                Private f32* %495 = OpAccessChain %38 %118 
					                                         f32 %496 = OpLoad %495 
					                                 Output f32* %497 = OpAccessChain vs_TEXCOORD2 %229 
					                                                      OpStore %497 %496 
					                                       f32_4 %499 = OpLoad %498 
					                                       f32_3 %500 = OpVectorShuffle %499 %499 1 1 1 
					                              Uniform f32_4* %501 = OpAccessChain %25 %41 %42 
					                                       f32_4 %502 = OpLoad %501 
					                                       f32_3 %503 = OpVectorShuffle %502 %502 1 2 0 
					                                       f32_3 %504 = OpFMul %500 %503 
					                                       f32_4 %505 = OpLoad %80 
					                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 6 3 
					                                                      OpStore %80 %506 
					                              Uniform f32_4* %507 = OpAccessChain %25 %41 %47 
					                                       f32_4 %508 = OpLoad %507 
					                                       f32_3 %509 = OpVectorShuffle %508 %508 1 2 0 
					                                       f32_4 %510 = OpLoad %498 
					                                       f32_3 %511 = OpVectorShuffle %510 %510 0 0 0 
					                                       f32_3 %512 = OpFMul %509 %511 
					                                       f32_4 %513 = OpLoad %80 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
					                                       f32_3 %515 = OpFAdd %512 %514 
					                                       f32_4 %516 = OpLoad %80 
					                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
					                                                      OpStore %80 %517 
					                              Uniform f32_4* %518 = OpAccessChain %25 %41 %55 
					                                       f32_4 %519 = OpLoad %518 
					                                       f32_3 %520 = OpVectorShuffle %519 %519 1 2 0 
					                                       f32_4 %521 = OpLoad %498 
					                                       f32_3 %522 = OpVectorShuffle %521 %521 2 2 2 
					                                       f32_3 %523 = OpFMul %520 %522 
					                                       f32_4 %524 = OpLoad %80 
					                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
					                                       f32_3 %526 = OpFAdd %523 %525 
					                                       f32_4 %527 = OpLoad %80 
					                                       f32_4 %528 = OpVectorShuffle %527 %526 4 5 6 3 
					                                                      OpStore %80 %528 
					                                       f32_4 %529 = OpLoad %80 
					                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
					                                       f32_4 %531 = OpLoad %80 
					                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
					                                         f32 %533 = OpDot %530 %532 
					                                                      OpStore %116 %533 
					                                         f32 %534 = OpLoad %116 
					                                         f32 %535 = OpExtInst %1 32 %534 
					                                                      OpStore %116 %535 
					                                         f32 %536 = OpLoad %116 
					                                       f32_3 %537 = OpCompositeConstruct %536 %536 %536 
					                                       f32_4 %538 = OpLoad %80 
					                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
					                                       f32_3 %540 = OpFMul %537 %539 
					                                       f32_4 %541 = OpLoad %80 
					                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 6 3 
					                                                      OpStore %80 %542 
					                                       f32_4 %545 = OpLoad %63 
					                                       f32_3 %546 = OpVectorShuffle %545 %545 3 0 1 
					                                       f32_4 %547 = OpLoad %80 
					                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
					                                       f32_3 %549 = OpFMul %546 %548 
					                                                      OpStore %544 %549 
					                                       f32_4 %550 = OpLoad %63 
					                                       f32_3 %551 = OpVectorShuffle %550 %550 1 3 0 
					                                       f32_4 %552 = OpLoad %80 
					                                       f32_3 %553 = OpVectorShuffle %552 %552 1 2 0 
					                                       f32_3 %554 = OpFMul %551 %553 
					                                       f32_3 %555 = OpLoad %544 
					                                       f32_3 %556 = OpFNegate %555 
					                                       f32_3 %557 = OpFAdd %554 %556 
					                                                      OpStore %544 %557 
					                                  Input f32* %558 = OpAccessChain %498 %229 
					                                         f32 %559 = OpLoad %558 
					                                Uniform f32* %561 = OpAccessChain %25 %560 %229 
					                                         f32 %562 = OpLoad %561 
					                                         f32 %563 = OpFMul %559 %562 
					                                                      OpStore %116 %563 
					                                         f32 %564 = OpLoad %116 
					                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
					                                       f32_3 %566 = OpLoad %544 
					                                       f32_3 %567 = OpFMul %565 %566 
					                                                      OpStore %544 %567 
					                                Private f32* %568 = OpAccessChain %544 %118 
					                                         f32 %569 = OpLoad %568 
					                                 Output f32* %570 = OpAccessChain vs_TEXCOORD2 %101 
					                                                      OpStore %570 %569 
					                                Private f32* %571 = OpAccessChain %63 %118 
					                                         f32 %572 = OpLoad %571 
					                                 Output f32* %573 = OpAccessChain vs_TEXCOORD2 %242 
					                                                      OpStore %573 %572 
					                                Private f32* %574 = OpAccessChain %80 %242 
					                                         f32 %575 = OpLoad %574 
					                                 Output f32* %576 = OpAccessChain vs_TEXCOORD2 %118 
					                                                      OpStore %576 %575 
					                                Private f32* %578 = OpAccessChain %80 %118 
					                                         f32 %579 = OpLoad %578 
					                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %118 
					                                                      OpStore %580 %579 
					                                Private f32* %582 = OpAccessChain %80 %101 
					                                         f32 %583 = OpLoad %582 
					                                 Output f32* %584 = OpAccessChain vs_TEXCOORD4 %118 
					                                                      OpStore %584 %583 
					                                Private f32* %585 = OpAccessChain %38 %101 
					                                         f32 %586 = OpLoad %585 
					                                 Output f32* %587 = OpAccessChain vs_TEXCOORD3 %229 
					                                                      OpStore %587 %586 
					                                Private f32* %588 = OpAccessChain %38 %242 
					                                         f32 %589 = OpLoad %588 
					                                 Output f32* %590 = OpAccessChain vs_TEXCOORD4 %229 
					                                                      OpStore %590 %589 
					                                Private f32* %591 = OpAccessChain %63 %101 
					                                         f32 %592 = OpLoad %591 
					                                 Output f32* %593 = OpAccessChain vs_TEXCOORD3 %242 
					                                                      OpStore %593 %592 
					                                Private f32* %594 = OpAccessChain %544 %101 
					                                         f32 %595 = OpLoad %594 
					                                 Output f32* %596 = OpAccessChain vs_TEXCOORD3 %101 
					                                                      OpStore %596 %595 
					                                Private f32* %597 = OpAccessChain %544 %242 
					                                         f32 %598 = OpLoad %597 
					                                 Output f32* %599 = OpAccessChain vs_TEXCOORD4 %101 
					                                                      OpStore %599 %598 
					                                Private f32* %600 = OpAccessChain %63 %229 
					                                         f32 %601 = OpLoad %600 
					                                 Output f32* %602 = OpAccessChain vs_TEXCOORD4 %242 
					                                                      OpStore %602 %601 
					                                       f32_4 %605 = OpLoad %604 
					                                                      OpStore %603 %605 
					                                       f32_4 %606 = OpLoad %9 
					                                       f32_3 %607 = OpVectorShuffle %606 %606 1 1 1 
					                              Uniform f32_4* %609 = OpAccessChain %25 %608 %42 
					                                       f32_4 %610 = OpLoad %609 
					                                       f32_3 %611 = OpVectorShuffle %610 %610 0 1 2 
					                                       f32_3 %612 = OpFMul %607 %611 
					                                       f32_4 %613 = OpLoad %38 
					                                       f32_4 %614 = OpVectorShuffle %613 %612 4 5 6 3 
					                                                      OpStore %38 %614 
					                              Uniform f32_4* %615 = OpAccessChain %25 %608 %47 
					                                       f32_4 %616 = OpLoad %615 
					                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
					                                       f32_4 %618 = OpLoad %9 
					                                       f32_3 %619 = OpVectorShuffle %618 %618 0 0 0 
					                                       f32_3 %620 = OpFMul %617 %619 
					                                       f32_4 %621 = OpLoad %38 
					                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
					                                       f32_3 %623 = OpFAdd %620 %622 
					                                       f32_4 %624 = OpLoad %9 
					                                       f32_4 %625 = OpVectorShuffle %624 %623 4 5 2 6 
					                                                      OpStore %9 %625 
					                              Uniform f32_4* %628 = OpAccessChain %25 %608 %55 
					                                       f32_4 %629 = OpLoad %628 
					                                       f32_3 %630 = OpVectorShuffle %629 %629 0 1 2 
					                                       f32_4 %631 = OpLoad %9 
					                                       f32_3 %632 = OpVectorShuffle %631 %631 2 2 2 
					                                       f32_3 %633 = OpFMul %630 %632 
					                                       f32_4 %634 = OpLoad %9 
					                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 3 
					                                       f32_3 %636 = OpFAdd %633 %635 
					                                                      OpStore vs_TEXCOORD6 %636 
					                                Private f32* %638 = OpAccessChain %63 %101 
					                                         f32 %639 = OpLoad %638 
					                                Private f32* %640 = OpAccessChain %63 %101 
					                                         f32 %641 = OpLoad %640 
					                                         f32 %642 = OpFMul %639 %641 
					                                                      OpStore %637 %642 
					                                Private f32* %643 = OpAccessChain %63 %118 
					                                         f32 %644 = OpLoad %643 
					                                Private f32* %645 = OpAccessChain %63 %118 
					                                         f32 %646 = OpLoad %645 
					                                         f32 %647 = OpFMul %644 %646 
					                                         f32 %648 = OpLoad %637 
					                                         f32 %649 = OpFNegate %648 
					                                         f32 %650 = OpFAdd %647 %649 
					                                                      OpStore %637 %650 
					                                       f32_4 %652 = OpLoad %63 
					                                       f32_4 %653 = OpVectorShuffle %652 %652 1 3 2 0 
					                                       f32_4 %654 = OpLoad %63 
					                                       f32_4 %655 = OpFMul %653 %654 
					                                                      OpStore %651 %655 
					                              Uniform f32_4* %657 = OpAccessChain %25 %55 
					                                       f32_4 %658 = OpLoad %657 
					                                       f32_4 %659 = OpLoad %651 
					                                         f32 %660 = OpDot %658 %659 
					                                Private f32* %661 = OpAccessChain %656 %118 
					                                                      OpStore %661 %660 
					                              Uniform f32_4* %662 = OpAccessChain %25 %65 
					                                       f32_4 %663 = OpLoad %662 
					                                       f32_4 %664 = OpLoad %651 
					                                         f32 %665 = OpDot %663 %664 
					                                Private f32* %666 = OpAccessChain %656 %101 
					                                                      OpStore %666 %665 
					                              Uniform f32_4* %668 = OpAccessChain %25 %667 
					                                       f32_4 %669 = OpLoad %668 
					                                       f32_4 %670 = OpLoad %651 
					                                         f32 %671 = OpDot %669 %670 
					                                Private f32* %672 = OpAccessChain %656 %242 
					                                                      OpStore %672 %671 
					                              Uniform f32_4* %675 = OpAccessChain %25 %674 
					                                       f32_4 %676 = OpLoad %675 
					                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 2 
					                                         f32 %678 = OpLoad %637 
					                                       f32_3 %679 = OpCompositeConstruct %678 %678 %678 
					                                       f32_3 %680 = OpFMul %677 %679 
					                                       f32_3 %681 = OpLoad %656 
					                                       f32_3 %682 = OpFAdd %680 %681 
					                                                      OpStore vs_TEXCOORD7 %682 
					                                 Output f32* %683 = OpAccessChain %105 %47 %101 
					                                         f32 %684 = OpLoad %683 
					                                         f32 %685 = OpFNegate %684 
					                                 Output f32* %686 = OpAccessChain %105 %47 %101 
					                                                      OpStore %686 %685 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 981
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %20 %25 %80 %108 %445 %465 %867 %929 %966 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate vs_TEXCOORD2 Location 11 
					                                                      OpDecorate vs_TEXCOORD3 Location 20 
					                                                      OpDecorate vs_TEXCOORD4 Location 25 
					                                                      OpDecorate %35 ArrayStride 35 
					                                                      OpMemberDecorate %36 0 Offset 36 
					                                                      OpMemberDecorate %36 1 Offset 36 
					                                                      OpMemberDecorate %36 2 RelaxedPrecision 
					                                                      OpMemberDecorate %36 2 Offset 36 
					                                                      OpMemberDecorate %36 3 RelaxedPrecision 
					                                                      OpMemberDecorate %36 3 Offset 36 
					                                                      OpMemberDecorate %36 4 RelaxedPrecision 
					                                                      OpMemberDecorate %36 4 Offset 36 
					                                                      OpMemberDecorate %36 5 RelaxedPrecision 
					                                                      OpMemberDecorate %36 5 Offset 36 
					                                                      OpMemberDecorate %36 6 Offset 36 
					                                                      OpMemberDecorate %36 7 RelaxedPrecision 
					                                                      OpMemberDecorate %36 7 Offset 36 
					                                                      OpMemberDecorate %36 8 RelaxedPrecision 
					                                                      OpMemberDecorate %36 8 Offset 36 
					                                                      OpMemberDecorate %36 9 Offset 36 
					                                                      OpMemberDecorate %36 10 Offset 36 
					                                                      OpMemberDecorate %36 11 RelaxedPrecision 
					                                                      OpMemberDecorate %36 11 Offset 36 
					                                                      OpMemberDecorate %36 12 Offset 36 
					                                                      OpMemberDecorate %36 13 Offset 36 
					                                                      OpMemberDecorate %36 14 Offset 36 
					                                                      OpMemberDecorate %36 15 RelaxedPrecision 
					                                                      OpMemberDecorate %36 15 Offset 36 
					                                                      OpMemberDecorate %36 16 Offset 36 
					                                                      OpMemberDecorate %36 17 Offset 36 
					                                                      OpMemberDecorate %36 18 Offset 36 
					                                                      OpMemberDecorate %36 19 Offset 36 
					                                                      OpMemberDecorate %36 20 Offset 36 
					                                                      OpMemberDecorate %36 21 Offset 36 
					                                                      OpMemberDecorate %36 22 Offset 36 
					                                                      OpMemberDecorate %36 23 Offset 36 
					                                                      OpMemberDecorate %36 24 RelaxedPrecision 
					                                                      OpMemberDecorate %36 24 Offset 36 
					                                                      OpMemberDecorate %36 25 RelaxedPrecision 
					                                                      OpMemberDecorate %36 25 Offset 36 
					                                                      OpMemberDecorate %36 26 Offset 36 
					                                                      OpMemberDecorate %36 27 Offset 36 
					                                                      OpMemberDecorate %36 28 Offset 36 
					                                                      OpMemberDecorate %36 29 Offset 36 
					                                                      OpMemberDecorate %36 30 Offset 36 
					                                                      OpMemberDecorate %36 31 RelaxedPrecision 
					                                                      OpMemberDecorate %36 31 Offset 36 
					                                                      OpMemberDecorate %36 32 RelaxedPrecision 
					                                                      OpMemberDecorate %36 32 Offset 36 
					                                                      OpDecorate %36 Block 
					                                                      OpDecorate %38 DescriptorSet 38 
					                                                      OpDecorate %38 Binding 38 
					                                                      OpDecorate %56 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %73 RelaxedPrecision 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %75 RelaxedPrecision 
					                                                      OpDecorate %76 RelaxedPrecision 
					                                                      OpDecorate %77 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD5 Location 80 
					                                                      OpDecorate vs_TEXCOORD0 Location 108 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %120 DescriptorSet 120 
					                                                      OpDecorate %120 Binding 120 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %124 DescriptorSet 124 
					                                                      OpDecorate %124 Binding 124 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate %387 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %389 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %426 RelaxedPrecision 
					                                                      OpDecorate %427 RelaxedPrecision 
					                                                      OpDecorate %429 RelaxedPrecision 
					                                                      OpDecorate %431 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 445 
					                                                      OpDecorate %448 RelaxedPrecision 
					                                                      OpDecorate %449 RelaxedPrecision 
					                                                      OpDecorate %449 DescriptorSet 449 
					                                                      OpDecorate %449 Binding 449 
					                                                      OpDecorate %450 RelaxedPrecision 
					                                                      OpDecorate %451 RelaxedPrecision 
					                                                      OpDecorate %451 DescriptorSet 451 
					                                                      OpDecorate %451 Binding 451 
					                                                      OpDecorate %452 RelaxedPrecision 
					                                                      OpDecorate %456 RelaxedPrecision 
					                                                      OpDecorate %457 RelaxedPrecision 
					                                                      OpDecorate %458 RelaxedPrecision 
					                                                      OpDecorate %461 RelaxedPrecision 
					                                                      OpDecorate %462 RelaxedPrecision 
					                                                      OpDecorate %463 RelaxedPrecision 
					                                                      OpDecorate %464 RelaxedPrecision 
					                                                      OpDecorate %465 RelaxedPrecision 
					                                                      OpDecorate %465 Location 465 
					                                                      OpDecorate %467 RelaxedPrecision 
					                                                      OpDecorate %469 RelaxedPrecision 
					                                                      OpDecorate %470 RelaxedPrecision 
					                                                      OpDecorate %472 RelaxedPrecision 
					                                                      OpDecorate %474 RelaxedPrecision 
					                                                      OpDecorate %476 RelaxedPrecision 
					                                                      OpDecorate %477 RelaxedPrecision 
					                                                      OpDecorate %494 RelaxedPrecision 
					                                                      OpDecorate %495 RelaxedPrecision 
					                                                      OpDecorate %495 DescriptorSet 495 
					                                                      OpDecorate %495 Binding 495 
					                                                      OpDecorate %496 RelaxedPrecision 
					                                                      OpDecorate %497 RelaxedPrecision 
					                                                      OpDecorate %497 DescriptorSet 497 
					                                                      OpDecorate %497 Binding 497 
					                                                      OpDecorate %498 RelaxedPrecision 
					                                                      OpDecorate %503 RelaxedPrecision 
					                                                      OpDecorate %506 RelaxedPrecision 
					                                                      OpDecorate %507 RelaxedPrecision 
					                                                      OpDecorate %508 RelaxedPrecision 
					                                                      OpDecorate %509 RelaxedPrecision 
					                                                      OpDecorate %510 RelaxedPrecision 
					                                                      OpDecorate %511 RelaxedPrecision 
					                                                      OpDecorate %512 RelaxedPrecision 
					                                                      OpDecorate %513 RelaxedPrecision 
					                                                      OpDecorate %514 RelaxedPrecision 
					                                                      OpDecorate %515 RelaxedPrecision 
					                                                      OpDecorate %516 RelaxedPrecision 
					                                                      OpDecorate %517 RelaxedPrecision 
					                                                      OpDecorate %520 RelaxedPrecision 
					                                                      OpDecorate %521 RelaxedPrecision 
					                                                      OpDecorate %522 RelaxedPrecision 
					                                                      OpDecorate %523 RelaxedPrecision 
					                                                      OpDecorate %524 RelaxedPrecision 
					                                                      OpDecorate %525 RelaxedPrecision 
					                                                      OpDecorate %526 RelaxedPrecision 
					                                                      OpDecorate %527 RelaxedPrecision 
					                                                      OpDecorate %531 RelaxedPrecision 
					                                                      OpDecorate %533 RelaxedPrecision 
					                                                      OpDecorate %534 RelaxedPrecision 
					                                                      OpDecorate %536 RelaxedPrecision 
					                                                      OpDecorate %537 RelaxedPrecision 
					                                                      OpDecorate %538 RelaxedPrecision 
					                                                      OpDecorate %540 RelaxedPrecision 
					                                                      OpDecorate %541 RelaxedPrecision 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate %543 RelaxedPrecision 
					                                                      OpDecorate %544 RelaxedPrecision 
					                                                      OpDecorate %546 RelaxedPrecision 
					                                                      OpDecorate %548 RelaxedPrecision 
					                                                      OpDecorate %549 RelaxedPrecision 
					                                                      OpDecorate %551 RelaxedPrecision 
					                                                      OpDecorate %552 RelaxedPrecision 
					                                                      OpDecorate %554 RelaxedPrecision 
					                                                      OpDecorate %555 RelaxedPrecision 
					                                                      OpDecorate %556 RelaxedPrecision 
					                                                      OpDecorate %557 RelaxedPrecision 
					                                                      OpDecorate %558 RelaxedPrecision 
					                                                      OpDecorate %559 RelaxedPrecision 
					                                                      OpDecorate %560 RelaxedPrecision 
					                                                      OpDecorate %561 RelaxedPrecision 
					                                                      OpDecorate %600 RelaxedPrecision 
					                                                      OpDecorate %602 RelaxedPrecision 
					                                                      OpDecorate %604 RelaxedPrecision 
					                                                      OpDecorate %605 RelaxedPrecision 
					                                                      OpDecorate %606 RelaxedPrecision 
					                                                      OpDecorate %607 RelaxedPrecision 
					                                                      OpDecorate %608 RelaxedPrecision 
					                                                      OpDecorate %609 RelaxedPrecision 
					                                                      OpDecorate %610 RelaxedPrecision 
					                                                      OpDecorate %611 RelaxedPrecision 
					                                                      OpDecorate %612 RelaxedPrecision 
					                                                      OpDecorate %613 RelaxedPrecision 
					                                                      OpDecorate %614 RelaxedPrecision 
					                                                      OpDecorate %615 RelaxedPrecision 
					                                                      OpDecorate %634 RelaxedPrecision 
					                                                      OpDecorate %635 RelaxedPrecision 
					                                                      OpDecorate %635 DescriptorSet 635 
					                                                      OpDecorate %635 Binding 635 
					                                                      OpDecorate %636 RelaxedPrecision 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %637 DescriptorSet 637 
					                                                      OpDecorate %637 Binding 637 
					                                                      OpDecorate %638 RelaxedPrecision 
					                                                      OpDecorate %643 RelaxedPrecision 
					                                                      OpDecorate %644 RelaxedPrecision 
					                                                      OpDecorate %645 RelaxedPrecision 
					                                                      OpDecorate %646 RelaxedPrecision 
					                                                      OpDecorate %647 RelaxedPrecision 
					                                                      OpDecorate %648 RelaxedPrecision 
					                                                      OpDecorate %651 RelaxedPrecision 
					                                                      OpDecorate %653 RelaxedPrecision 
					                                                      OpDecorate %654 RelaxedPrecision 
					                                                      OpDecorate %656 RelaxedPrecision 
					                                                      OpDecorate %657 RelaxedPrecision 
					                                                      OpDecorate %659 RelaxedPrecision 
					                                                      OpDecorate %662 RelaxedPrecision 
					                                                      OpDecorate %663 RelaxedPrecision 
					                                                      OpDecorate %664 RelaxedPrecision 
					                                                      OpDecorate %665 RelaxedPrecision 
					                                                      OpDecorate %666 RelaxedPrecision 
					                                                      OpDecorate %667 RelaxedPrecision 
					                                                      OpDecorate %668 RelaxedPrecision 
					                                                      OpDecorate %669 RelaxedPrecision 
					                                                      OpDecorate %670 RelaxedPrecision 
					                                                      OpDecorate %671 RelaxedPrecision 
					                                                      OpDecorate %672 RelaxedPrecision 
					                                                      OpDecorate %673 RelaxedPrecision 
					                                                      OpDecorate %675 RelaxedPrecision 
					                                                      OpDecorate %676 RelaxedPrecision 
					                                                      OpDecorate %683 RelaxedPrecision 
					                                                      OpDecorate %684 RelaxedPrecision 
					                                                      OpDecorate %734 RelaxedPrecision 
					                                                      OpDecorate %735 RelaxedPrecision 
					                                                      OpDecorate %736 RelaxedPrecision 
					                                                      OpDecorate %737 RelaxedPrecision 
					                                                      OpDecorate %738 RelaxedPrecision 
					                                                      OpDecorate %741 RelaxedPrecision 
					                                                      OpDecorate %742 RelaxedPrecision 
					                                                      OpDecorate %744 RelaxedPrecision 
					                                                      OpDecorate %745 RelaxedPrecision 
					                                                      OpDecorate %746 RelaxedPrecision 
					                                                      OpDecorate %747 RelaxedPrecision 
					                                                      OpDecorate %748 RelaxedPrecision 
					                                                      OpDecorate %753 RelaxedPrecision 
					                                                      OpDecorate %757 RelaxedPrecision 
					                                                      OpDecorate %758 RelaxedPrecision 
					                                                      OpDecorate %761 RelaxedPrecision 
					                                                      OpDecorate %762 RelaxedPrecision 
					                                                      OpDecorate %764 RelaxedPrecision 
					                                                      OpDecorate %767 RelaxedPrecision 
					                                                      OpDecorate %768 RelaxedPrecision 
					                                                      OpDecorate %771 RelaxedPrecision 
					                                                      OpDecorate %772 RelaxedPrecision 
					                                                      OpDecorate %775 RelaxedPrecision 
					                                                      OpDecorate %778 RelaxedPrecision 
					                                                      OpDecorate %785 RelaxedPrecision 
					                                                      OpDecorate %787 RelaxedPrecision 
					                                                      OpDecorate %788 RelaxedPrecision 
					                                                      OpDecorate %791 RelaxedPrecision 
					                                                      OpDecorate %792 RelaxedPrecision 
					                                                      OpDecorate %796 RelaxedPrecision 
					                                                      OpDecorate %797 RelaxedPrecision 
					                                                      OpDecorate %800 RelaxedPrecision 
					                                                      OpDecorate %801 RelaxedPrecision 
					                                                      OpDecorate %802 RelaxedPrecision 
					                                                      OpDecorate %803 RelaxedPrecision 
					                                                      OpDecorate %804 RelaxedPrecision 
					                                                      OpDecorate %805 RelaxedPrecision 
					                                                      OpDecorate %806 RelaxedPrecision 
					                                                      OpDecorate %812 RelaxedPrecision 
					                                                      OpDecorate %813 RelaxedPrecision 
					                                                      OpDecorate %817 RelaxedPrecision 
					                                                      OpDecorate %818 RelaxedPrecision 
					                                                      OpDecorate %820 RelaxedPrecision 
					                                                      OpDecorate %822 RelaxedPrecision 
					                                                      OpDecorate %824 RelaxedPrecision 
					                                                      OpDecorate %825 RelaxedPrecision 
					                                                      OpDecorate %826 RelaxedPrecision 
					                                                      OpDecorate %827 RelaxedPrecision 
					                                                      OpDecorate %828 RelaxedPrecision 
					                                                      OpDecorate %829 RelaxedPrecision 
					                                                      OpDecorate %830 RelaxedPrecision 
					                                                      OpDecorate %831 RelaxedPrecision 
					                                                      OpDecorate %832 RelaxedPrecision 
					                                                      OpDecorate %834 RelaxedPrecision 
					                                                      OpDecorate %835 RelaxedPrecision 
					                                                      OpDecorate %836 RelaxedPrecision 
					                                                      OpDecorate %837 RelaxedPrecision 
					                                                      OpDecorate %838 RelaxedPrecision 
					                                                      OpDecorate %839 RelaxedPrecision 
					                                                      OpDecorate %840 RelaxedPrecision 
					                                                      OpDecorate %841 RelaxedPrecision 
					                                                      OpDecorate %842 RelaxedPrecision 
					                                                      OpDecorate %843 RelaxedPrecision 
					                                                      OpDecorate %849 RelaxedPrecision 
					                                                      OpDecorate %855 RelaxedPrecision 
					                                                      OpDecorate %861 RelaxedPrecision 
					                                                      OpDecorate %865 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 867 
					                                                      OpDecorate %868 RelaxedPrecision 
					                                                      OpDecorate %869 RelaxedPrecision 
					                                                      OpDecorate %870 RelaxedPrecision 
					                                                      OpDecorate %872 RelaxedPrecision 
					                                                      OpDecorate %873 RelaxedPrecision 
					                                                      OpDecorate %874 RelaxedPrecision 
					                                                      OpDecorate %875 RelaxedPrecision 
					                                                      OpDecorate %876 RelaxedPrecision 
					                                                      OpDecorate %877 RelaxedPrecision 
					                                                      OpDecorate %878 RelaxedPrecision 
					                                                      OpDecorate %881 RelaxedPrecision 
					                                                      OpDecorate %882 RelaxedPrecision 
					                                                      OpDecorate %883 RelaxedPrecision 
					                                                      OpDecorate %886 RelaxedPrecision 
					                                                      OpDecorate %887 RelaxedPrecision 
					                                                      OpDecorate %888 RelaxedPrecision 
					                                                      OpDecorate %892 RelaxedPrecision 
					                                                      OpDecorate %893 RelaxedPrecision 
					                                                      OpDecorate %894 RelaxedPrecision 
					                                                      OpDecorate %895 RelaxedPrecision 
					                                                      OpDecorate %897 RelaxedPrecision 
					                                                      OpDecorate %898 RelaxedPrecision 
					                                                      OpDecorate %899 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD6 Location 929 
					                                                      OpDecorate %947 RelaxedPrecision 
					                                                      OpDecorate %950 RelaxedPrecision 
					                                                      OpDecorate %950 DescriptorSet 950 
					                                                      OpDecorate %950 Binding 950 
					                                                      OpDecorate %951 RelaxedPrecision 
					                                                      OpDecorate %952 RelaxedPrecision 
					                                                      OpDecorate %952 DescriptorSet 952 
					                                                      OpDecorate %952 Binding 952 
					                                                      OpDecorate %953 RelaxedPrecision 
					                                                      OpDecorate %959 RelaxedPrecision 
					                                                      OpDecorate %961 RelaxedPrecision 
					                                                      OpDecorate %966 RelaxedPrecision 
					                                                      OpDecorate %966 Location 966 
					                                                      OpDecorate %969 RelaxedPrecision 
					                                                      OpDecorate %970 RelaxedPrecision 
					                                                      OpDecorate %972 RelaxedPrecision 
					                                                      OpDecorate %977 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                              %12 = OpTypeInt 32 0 
					                                          u32 %13 = OpConstant 3 
					                                              %14 = OpTypePointer Input %6 
					                                          u32 %17 = OpConstant 0 
					                                              %18 = OpTypePointer Private %6 
					                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                          u32 %23 = OpConstant 1 
					                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
					                                          u32 %28 = OpConstant 2 
					                                              %30 = OpTypeVector %6 3 
					                                          u32 %34 = OpConstant 4 
					                                              %35 = OpTypeArray %7 %34 
					                                              %36 = OpTypeStruct %7 %30 %7 %7 %7 %7 %35 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 %6 %6 %6 %6 %6 
					                                              %37 = OpTypePointer Uniform %36 
					Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %38 = OpVariable Uniform 
					                                              %39 = OpTypeInt 32 1 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %30 
					                                 Private f32* %47 = OpVariable Private 
					                                              %55 = OpTypePointer Private %30 
					                               Private f32_3* %56 = OpVariable Private 
					                                          i32 %62 = OpConstant 2 
					                                              %63 = OpTypePointer Uniform %7 
					                                 Private f32* %68 = OpVariable Private 
					                                              %78 = OpTypeVector %6 2 
					                                              %79 = OpTypePointer Input %78 
					                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
					                                          i32 %83 = OpConstant 18 
					                                              %84 = OpTypePointer Uniform %6 
					                               Private f32_4* %89 = OpVariable Private 
					                                          f32 %90 = OpConstant 3,674022E-40 
					                                        f32_2 %91 = OpConstantComposite %90 %90 
					                                          i32 %92 = OpConstant 28 
					                                          i32 %95 = OpConstant 29 
					                                         f32 %102 = OpConstant 3,674022E-40 
					                              Private f32_4* %104 = OpVariable Private 
					                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                              Private f32_4* %117 = OpVariable Private 
					                                             %118 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %119 = OpTypePointer UniformConstant %118 
					        UniformConstant read_only Texture2D* %120 = OpVariable UniformConstant 
					                                             %122 = OpTypeSampler 
					                                             %123 = OpTypePointer UniformConstant %122 
					                    UniformConstant sampler* %124 = OpVariable UniformConstant 
					                                             %126 = OpTypeSampledImage %118 
					                                         f32 %162 = OpConstant 3,674022E-40 
					                                       f32_4 %163 = OpConstantComposite %162 %162 %162 %162 
					                                         i32 %165 = OpConstant 19 
					                                         i32 %168 = OpConstant 16 
					                                         f32 %175 = OpConstant 3,674022E-40 
					                                         i32 %184 = OpConstant 17 
					                                         i32 %191 = OpConstant 30 
					                                         f32 %198 = OpConstant 3,674022E-40 
					                                         f32 %202 = OpConstant 3,674022E-40 
					                                       f32_4 %203 = OpConstantComposite %202 %202 %202 %202 
					                                         f32 %210 = OpConstant 3,674022E-40 
					                                       f32_4 %211 = OpConstantComposite %210 %210 %210 %210 
					                                         f32 %213 = OpConstant 3,674022E-40 
					                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
					                                       f32_4 %219 = OpConstantComposite %90 %90 %90 %90 
					                                             %221 = OpTypePointer Private %78 
					                              Private f32_2* %222 = OpVariable Private 
					                                         i32 %223 = OpConstant 26 
					                                             %228 = OpTypeBool 
					                                             %229 = OpTypePointer Private %228 
					                               Private bool* %230 = OpVariable Private 
					                                             %243 = OpTypePointer Function %6 
					                               Private bool* %255 = OpVariable Private 
					                                             %262 = OpTypeVector %228 4 
					                                         f32 %266 = OpConstant 3,674022E-40 
					                                       f32_4 %267 = OpConstantComposite %266 %266 %266 %266 
					                                         i32 %275 = OpConstant 21 
					                                         i32 %294 = OpConstant 20 
					                                       f32_2 %348 = OpConstantComposite %90 %102 
					                                Private f32* %378 = OpVariable Private 
					                                Private f32* %386 = OpVariable Private 
					                                         i32 %402 = OpConstant 27 
					                              Private f32_4* %420 = OpVariable Private 
					                                         i32 %433 = OpConstant 13 
					                                         i32 %436 = OpConstant 14 
					                                         i32 %440 = OpConstant 0 
					                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                              Private f32_4* %448 = OpVariable Private 
					        UniformConstant read_only Texture2D* %449 = OpVariable UniformConstant 
					                    UniformConstant sampler* %451 = OpVariable UniformConstant 
					                              Private f32_3* %456 = OpVariable Private 
					                                         i32 %459 = OpConstant 15 
					                              Private f32_4* %464 = OpVariable Private 
					                                Input f32_4* %465 = OpVariable Input 
					                                Private f32* %472 = OpVariable Private 
					                                         i32 %478 = OpConstant 9 
					                                         i32 %481 = OpConstant 10 
					                              Private f32_4* %494 = OpVariable Private 
					        UniformConstant read_only Texture2D* %495 = OpVariable UniformConstant 
					                    UniformConstant sampler* %497 = OpVariable UniformConstant 
					                                         i32 %504 = OpConstant 11 
					                              Private f32_4* %508 = OpVariable Private 
					                              Private f32_4* %512 = OpVariable Private 
					                              Private f32_4* %544 = OpVariable Private 
					                                         i32 %577 = OpConstant 12 
					                              Private f32_4* %611 = OpVariable Private 
					                              Private f32_3* %616 = OpVariable Private 
					                                         i32 %617 = OpConstant 23 
					                                         i32 %621 = OpConstant 22 
					                              Private f32_3* %634 = OpVariable Private 
					        UniformConstant read_only Texture2D* %635 = OpVariable UniformConstant 
					                    UniformConstant sampler* %637 = OpVariable UniformConstant 
					                                       f32_2 %658 = OpConstantComposite %213 %213 
					                                         f32 %680 = OpConstant 3,674022E-40 
					                                       f32_3 %681 = OpConstantComposite %680 %680 %213 
					                                       f32_3 %687 = OpConstantComposite %102 %102 %90 
					                                Private f32* %764 = OpVariable Private 
					                                         i32 %765 = OpConstant 31 
					                                         i32 %769 = OpConstant 32 
					                                Private f32* %773 = OpVariable Private 
					                                         f32 %781 = OpConstant 3,674022E-40 
					                                         i32 %794 = OpConstant 7 
					                                         i32 %798 = OpConstant 8 
					                                Private f32* %820 = OpVariable Private 
					                                         f32 %823 = OpConstant 3,674022E-40 
					                              Private f32_3* %825 = OpVariable Private 
					                              Private f32_3* %831 = OpVariable Private 
					                                         i32 %847 = OpConstant 3 
					                                         i32 %853 = OpConstant 4 
					                                         i32 %859 = OpConstant 5 
					                                             %866 = OpTypePointer Input %30 
					                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
					                                       f32_3 %871 = OpConstantComposite %102 %102 %102 
					                                         i32 %879 = OpConstant 24 
					                                         i32 %884 = OpConstant 25 
					                              Private f32_3* %900 = OpVariable Private 
					                                         i32 %903 = OpConstant 6 
					                        Input f32_3* vs_TEXCOORD6 = OpVariable Input 
					                              Private f32_3* %947 = OpVariable Private 
					                                             %948 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %949 = OpTypePointer UniformConstant %948 
					      UniformConstant read_only TextureCube* %950 = OpVariable UniformConstant 
					                    UniformConstant sampler* %952 = OpVariable UniformConstant 
					                                             %954 = OpTypeSampledImage %948 
					                                             %965 = OpTypePointer Output %7 
					                               Output f32_4* %966 = OpVariable Output 
					                                             %978 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %244 = OpVariable Function 
					                                   Input f32* %15 = OpAccessChain vs_TEXCOORD2 %13 
					                                          f32 %16 = OpLoad %15 
					                                 Private f32* %19 = OpAccessChain %9 %17 
					                                                      OpStore %19 %16 
					                                   Input f32* %21 = OpAccessChain vs_TEXCOORD3 %13 
					                                          f32 %22 = OpLoad %21 
					                                 Private f32* %24 = OpAccessChain %9 %23 
					                                                      OpStore %24 %22 
					                                   Input f32* %26 = OpAccessChain vs_TEXCOORD4 %13 
					                                          f32 %27 = OpLoad %26 
					                                 Private f32* %29 = OpAccessChain %9 %28 
					                                                      OpStore %29 %27 
					                                        f32_4 %31 = OpLoad %9 
					                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
					                                        f32_3 %33 = OpFNegate %32 
					                               Uniform f32_3* %42 = OpAccessChain %38 %40 
					                                        f32_3 %43 = OpLoad %42 
					                                        f32_3 %44 = OpFAdd %33 %43 
					                                        f32_4 %45 = OpLoad %9 
					                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 6 3 
					                                                      OpStore %9 %46 
					                                        f32_4 %48 = OpLoad %9 
					                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
					                                          f32 %52 = OpDot %49 %51 
					                                                      OpStore %47 %52 
					                                          f32 %53 = OpLoad %47 
					                                          f32 %54 = OpExtInst %1 32 %53 
					                                                      OpStore %47 %54 
					                                        f32_4 %57 = OpLoad %9 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
					                                          f32 %59 = OpLoad %47 
					                                        f32_3 %60 = OpCompositeConstruct %59 %59 %59 
					                                        f32_3 %61 = OpFMul %58 %60 
					                               Uniform f32_4* %64 = OpAccessChain %38 %62 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
					                                        f32_3 %67 = OpFAdd %61 %66 
					                                                      OpStore %56 %67 
					                                        f32_3 %69 = OpLoad %56 
					                                        f32_3 %70 = OpLoad %56 
					                                          f32 %71 = OpDot %69 %70 
					                                                      OpStore %68 %71 
					                                          f32 %72 = OpLoad %68 
					                                          f32 %73 = OpExtInst %1 32 %72 
					                                                      OpStore %68 %73 
					                                          f32 %74 = OpLoad %68 
					                                        f32_3 %75 = OpCompositeConstruct %74 %74 %74 
					                                        f32_3 %76 = OpLoad %56 
					                                        f32_3 %77 = OpFMul %75 %76 
					                                                      OpStore %56 %77 
					                                   Input f32* %81 = OpAccessChain vs_TEXCOORD5 %17 
					                                          f32 %82 = OpLoad %81 
					                                 Uniform f32* %85 = OpAccessChain %38 %83 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFAdd %82 %86 
					                                 Private f32* %88 = OpAccessChain %9 %17 
					                                                      OpStore %88 %87 
					                                 Uniform f32* %93 = OpAccessChain %38 %92 
					                                          f32 %94 = OpLoad %93 
					                                 Uniform f32* %96 = OpAccessChain %38 %95 
					                                          f32 %97 = OpLoad %96 
					                                        f32_2 %98 = OpCompositeConstruct %94 %97 
					                                        f32_2 %99 = OpFDiv %91 %98 
					                                       f32_4 %100 = OpLoad %89 
					                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 2 3 
					                                                      OpStore %89 %101 
					                                Private f32* %103 = OpAccessChain %89 %28 
					                                                      OpStore %103 %102 
					                                       f32_4 %105 = OpLoad %89 
					                                       f32_4 %106 = OpVectorShuffle %105 %105 0 2 2 1 
					                                       f32_4 %107 = OpFNegate %106 
					                                       f32_4 %109 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
					                                       f32_4 %111 = OpFAdd %107 %110 
					                                                      OpStore %104 %111 
					                                       f32_4 %112 = OpLoad %89 
					                                       f32_4 %113 = OpVectorShuffle %112 %112 0 2 2 1 
					                                       f32_4 %114 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %115 = OpVectorShuffle %114 %114 0 1 0 1 
					                                       f32_4 %116 = OpFAdd %113 %115 
					                                                      OpStore %89 %116 
					                         read_only Texture2D %121 = OpLoad %120 
					                                     sampler %125 = OpLoad %124 
					                  read_only Texture2DSampled %127 = OpSampledImage %121 %125 
					                                       f32_4 %128 = OpLoad %104 
					                                       f32_2 %129 = OpVectorShuffle %128 %128 0 1 
					                                       f32_4 %130 = OpImageSampleImplicitLod %127 %129 
					                                         f32 %131 = OpCompositeExtract %130 3 
					                                Private f32* %132 = OpAccessChain %117 %17 
					                                                      OpStore %132 %131 
					                         read_only Texture2D %133 = OpLoad %120 
					                                     sampler %134 = OpLoad %124 
					                  read_only Texture2DSampled %135 = OpSampledImage %133 %134 
					                                       f32_4 %136 = OpLoad %104 
					                                       f32_2 %137 = OpVectorShuffle %136 %136 2 3 
					                                       f32_4 %138 = OpImageSampleImplicitLod %135 %137 
					                                         f32 %139 = OpCompositeExtract %138 3 
					                                Private f32* %140 = OpAccessChain %117 %28 
					                                                      OpStore %140 %139 
					                         read_only Texture2D %141 = OpLoad %120 
					                                     sampler %142 = OpLoad %124 
					                  read_only Texture2DSampled %143 = OpSampledImage %141 %142 
					                                       f32_4 %144 = OpLoad %89 
					                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
					                                       f32_4 %146 = OpImageSampleImplicitLod %143 %145 
					                                         f32 %147 = OpCompositeExtract %146 3 
					                                Private f32* %148 = OpAccessChain %117 %23 
					                                                      OpStore %148 %147 
					                         read_only Texture2D %149 = OpLoad %120 
					                                     sampler %150 = OpLoad %124 
					                  read_only Texture2DSampled %151 = OpSampledImage %149 %150 
					                                       f32_4 %152 = OpLoad %89 
					                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
					                                       f32_4 %154 = OpImageSampleImplicitLod %151 %153 
					                                         f32 %155 = OpCompositeExtract %154 3 
					                                Private f32* %156 = OpAccessChain %117 %13 
					                                                      OpStore %156 %155 
					                                       f32_4 %157 = OpLoad %9 
					                                       f32_4 %158 = OpVectorShuffle %157 %157 0 0 0 0 
					                                       f32_4 %159 = OpLoad %117 
					                                       f32_4 %160 = OpFAdd %158 %159 
					                                                      OpStore %9 %160 
					                                       f32_4 %161 = OpLoad %9 
					                                       f32_4 %164 = OpFAdd %161 %163 
					                                                      OpStore %9 %164 
					                                Uniform f32* %166 = OpAccessChain %38 %165 
					                                         f32 %167 = OpLoad %166 
					                                Uniform f32* %169 = OpAccessChain %38 %168 
					                                         f32 %170 = OpLoad %169 
					                                         f32 %171 = OpFAdd %167 %170 
					                                Private f32* %172 = OpAccessChain %89 %17 
					                                                      OpStore %172 %171 
					                                Private f32* %173 = OpAccessChain %89 %17 
					                                         f32 %174 = OpLoad %173 
					                                         f32 %176 = OpExtInst %1 40 %174 %175 
					                                Private f32* %177 = OpAccessChain %89 %17 
					                                                      OpStore %177 %176 
					                                       f32_4 %178 = OpLoad %9 
					                                       f32_4 %179 = OpLoad %89 
					                                       f32_4 %180 = OpVectorShuffle %179 %179 0 0 0 0 
					                                       f32_4 %181 = OpFDiv %178 %180 
					                                                      OpStore %9 %181 
					                                Private f32* %182 = OpAccessChain %89 %17 
					                                         f32 %183 = OpLoad %182 
					                                Uniform f32* %185 = OpAccessChain %38 %184 
					                                         f32 %186 = OpLoad %185 
					                                         f32 %187 = OpFMul %183 %186 
					                                Private f32* %188 = OpAccessChain %89 %17 
					                                                      OpStore %188 %187 
					                                Private f32* %189 = OpAccessChain %89 %17 
					                                         f32 %190 = OpLoad %189 
					                                Uniform f32* %192 = OpAccessChain %38 %191 
					                                         f32 %193 = OpLoad %192 
					                                         f32 %194 = OpFMul %190 %193 
					                                Private f32* %195 = OpAccessChain %89 %17 
					                                                      OpStore %195 %194 
					                                Private f32* %196 = OpAccessChain %89 %17 
					                                         f32 %197 = OpLoad %196 
					                                         f32 %199 = OpFMul %197 %198 
					                                Private f32* %200 = OpAccessChain %89 %17 
					                                                      OpStore %200 %199 
					                                       f32_4 %201 = OpLoad %9 
					                                       f32_4 %204 = OpFAdd %201 %203 
					                                                      OpStore %9 %204 
					                                       f32_4 %205 = OpLoad %9 
					                                       f32_4 %206 = OpCompositeConstruct %102 %102 %102 %102 
					                                       f32_4 %207 = OpCompositeConstruct %90 %90 %90 %90 
					                                       f32_4 %208 = OpExtInst %1 43 %205 %206 %207 
					                                                      OpStore %9 %208 
					                                       f32_4 %209 = OpLoad %9 
					                                       f32_4 %212 = OpFMul %209 %211 
					                                       f32_4 %215 = OpFAdd %212 %214 
					                                                      OpStore %104 %215 
					                                       f32_4 %216 = OpLoad %104 
					                                       f32_4 %217 = OpExtInst %1 4 %216 
					                                       f32_4 %218 = OpFNegate %217 
					                                       f32_4 %220 = OpFAdd %218 %219 
					                                                      OpStore %104 %220 
					                                Uniform f32* %224 = OpAccessChain %38 %223 
					                                         f32 %225 = OpLoad %224 
					                                         f32 %226 = OpFMul %225 %202 
					                                Private f32* %227 = OpAccessChain %222 %17 
					                                                      OpStore %227 %226 
					                                Private f32* %231 = OpAccessChain %222 %17 
					                                         f32 %232 = OpLoad %231 
					                                Private f32* %233 = OpAccessChain %222 %17 
					                                         f32 %234 = OpLoad %233 
					                                         f32 %235 = OpFNegate %234 
					                                        bool %236 = OpFOrdGreaterThanEqual %232 %235 
					                                                      OpStore %230 %236 
					                                Private f32* %237 = OpAccessChain %222 %17 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpExtInst %1 4 %238 
					                                         f32 %240 = OpExtInst %1 10 %239 
					                                Private f32* %241 = OpAccessChain %222 %17 
					                                                      OpStore %241 %240 
					                                        bool %242 = OpLoad %230 
					                                                      OpSelectionMerge %246 None 
					                                                      OpBranchConditional %242 %245 %249 
					                                             %245 = OpLabel 
					                                Private f32* %247 = OpAccessChain %222 %17 
					                                         f32 %248 = OpLoad %247 
					                                                      OpStore %244 %248 
					                                                      OpBranch %246 
					                                             %249 = OpLabel 
					                                Private f32* %250 = OpAccessChain %222 %17 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpFNegate %251 
					                                                      OpStore %244 %252 
					                                                      OpBranch %246 
					                                             %246 = OpLabel 
					                                         f32 %253 = OpLoad %244 
					                                Private f32* %254 = OpAccessChain %222 %17 
					                                                      OpStore %254 %253 
					                                Private f32* %256 = OpAccessChain %222 %17 
					                                         f32 %257 = OpLoad %256 
					                                        bool %258 = OpFOrdGreaterThanEqual %257 %202 
					                                                      OpStore %255 %258 
					                                        bool %259 = OpLoad %255 
					                                       f32_4 %260 = OpLoad %104 
					                                       f32_4 %261 = OpLoad %9 
					                                      bool_4 %263 = OpCompositeConstruct %259 %259 %259 %259 
					                                       f32_4 %264 = OpSelect %263 %260 %261 
					                                                      OpStore %9 %264 
					                                       f32_4 %265 = OpLoad %9 
					                                       f32_4 %268 = OpFMul %265 %267 
					                                                      OpStore %104 %268 
					                                       f32_4 %269 = OpLoad %104 
					                                       f32_4 %270 = OpExtInst %1 13 %269 
					                                                      OpStore %104 %270 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_4 %272 = OpFNegate %271 
					                                       f32_4 %273 = OpLoad %104 
					                                       f32_4 %274 = OpFAdd %272 %273 
					                                                      OpStore %104 %274 
					                                Uniform f32* %276 = OpAccessChain %38 %275 
					                                         f32 %277 = OpLoad %276 
					                                Uniform f32* %278 = OpAccessChain %38 %275 
					                                         f32 %279 = OpLoad %278 
					                                Uniform f32* %280 = OpAccessChain %38 %275 
					                                         f32 %281 = OpLoad %280 
					                                Uniform f32* %282 = OpAccessChain %38 %275 
					                                         f32 %283 = OpLoad %282 
					                                       f32_4 %284 = OpCompositeConstruct %277 %279 %281 %283 
					                                         f32 %285 = OpCompositeExtract %284 0 
					                                         f32 %286 = OpCompositeExtract %284 1 
					                                         f32 %287 = OpCompositeExtract %284 2 
					                                         f32 %288 = OpCompositeExtract %284 3 
					                                       f32_4 %289 = OpCompositeConstruct %285 %286 %287 %288 
					                                       f32_4 %290 = OpLoad %104 
					                                       f32_4 %291 = OpFMul %289 %290 
					                                       f32_4 %292 = OpLoad %9 
					                                       f32_4 %293 = OpFAdd %291 %292 
					                                                      OpStore %9 %293 
					                                Uniform f32* %295 = OpAccessChain %38 %294 
					                                         f32 %296 = OpLoad %295 
					                                         f32 %297 = OpFNegate %296 
					                                         f32 %298 = OpFAdd %297 %90 
					                                Private f32* %299 = OpAccessChain %222 %17 
					                                                      OpStore %299 %298 
					                                       f32_4 %300 = OpLoad %9 
					                                       f32_2 %301 = OpLoad %222 
					                                       f32_4 %302 = OpVectorShuffle %301 %301 0 0 0 0 
					                                       f32_4 %303 = OpExtInst %1 37 %300 %302 
					                                                      OpStore %9 %303 
					                                       f32_4 %304 = OpLoad %89 
					                                       f32_2 %305 = OpVectorShuffle %304 %304 0 0 
					                                       f32_4 %306 = OpLoad %9 
					                                       f32_2 %307 = OpVectorShuffle %306 %306 0 2 
					                                       f32_2 %308 = OpFMul %305 %307 
					                                       f32_4 %309 = OpLoad %9 
					                                       f32_4 %310 = OpVectorShuffle %309 %308 4 1 5 3 
					                                                      OpStore %9 %310 
					                                       f32_4 %311 = OpLoad %9 
					                                       f32_2 %312 = OpVectorShuffle %311 %311 3 1 
					                                       f32_4 %313 = OpLoad %89 
					                                       f32_2 %314 = OpVectorShuffle %313 %313 0 0 
					                                       f32_2 %315 = OpFMul %312 %314 
					                                       f32_4 %316 = OpLoad %9 
					                                       f32_2 %317 = OpVectorShuffle %316 %316 2 0 
					                                       f32_2 %318 = OpFNegate %317 
					                                       f32_2 %319 = OpFAdd %315 %318 
					                                       f32_4 %320 = OpLoad %9 
					                                       f32_4 %321 = OpVectorShuffle %320 %319 0 4 5 3 
					                                                      OpStore %9 %321 
					                                Private f32* %322 = OpAccessChain %9 %17 
					                                                      OpStore %322 %213 
					                                Private f32* %323 = OpAccessChain %9 %13 
					                                                      OpStore %323 %90 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_2 %325 = OpVectorShuffle %324 %324 0 1 
					                                       f32_4 %326 = OpLoad %9 
					                                       f32_2 %327 = OpVectorShuffle %326 %326 0 1 
					                                         f32 %328 = OpDot %325 %327 
					                                Private f32* %329 = OpAccessChain %89 %17 
					                                                      OpStore %329 %328 
					                                Private f32* %330 = OpAccessChain %89 %17 
					                                         f32 %331 = OpLoad %330 
					                                         f32 %332 = OpExtInst %1 32 %331 
					                                Private f32* %333 = OpAccessChain %89 %17 
					                                                      OpStore %333 %332 
					                                       f32_4 %334 = OpLoad %9 
					                                       f32_2 %335 = OpVectorShuffle %334 %334 2 3 
					                                       f32_4 %336 = OpLoad %9 
					                                       f32_2 %337 = OpVectorShuffle %336 %336 2 3 
					                                         f32 %338 = OpDot %335 %337 
					                                                      OpStore %47 %338 
					                                         f32 %339 = OpLoad %47 
					                                         f32 %340 = OpExtInst %1 32 %339 
					                                                      OpStore %47 %340 
					                                         f32 %341 = OpLoad %47 
					                                Private f32* %342 = OpAccessChain %9 %28 
					                                         f32 %343 = OpLoad %342 
					                                         f32 %344 = OpFMul %341 %343 
					                                Private f32* %345 = OpAccessChain %104 %17 
					                                                      OpStore %345 %344 
					                                         f32 %346 = OpLoad %47 
					                                       f32_2 %347 = OpCompositeConstruct %346 %346 
					                                       f32_2 %349 = OpFMul %347 %348 
					                                       f32_4 %350 = OpLoad %104 
					                                       f32_4 %351 = OpVectorShuffle %350 %349 0 4 5 3 
					                                                      OpStore %104 %351 
					                                Private f32* %352 = OpAccessChain %9 %28 
					                                                      OpStore %352 %102 
					                                       f32_4 %353 = OpLoad %89 
					                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
					                                       f32_4 %355 = OpLoad %9 
					                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
					                                       f32_3 %357 = OpFMul %354 %356 
					                                       f32_4 %358 = OpLoad %9 
					                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
					                                                      OpStore %9 %359 
					                                       f32_4 %360 = OpLoad %9 
					                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
					                                       f32_4 %362 = OpLoad %104 
					                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
					                                       f32_3 %364 = OpFMul %361 %363 
					                                       f32_4 %365 = OpLoad %89 
					                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
					                                                      OpStore %89 %366 
					                                       f32_4 %367 = OpLoad %104 
					                                       f32_3 %368 = OpVectorShuffle %367 %367 2 0 1 
					                                       f32_4 %369 = OpLoad %9 
					                                       f32_3 %370 = OpVectorShuffle %369 %369 1 2 0 
					                                       f32_3 %371 = OpFMul %368 %370 
					                                       f32_4 %372 = OpLoad %89 
					                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
					                                       f32_3 %374 = OpFNegate %373 
					                                       f32_3 %375 = OpFAdd %371 %374 
					                                       f32_4 %376 = OpLoad %9 
					                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
					                                                      OpStore %9 %377 
					                         read_only Texture2D %379 = OpLoad %120 
					                                     sampler %380 = OpLoad %124 
					                  read_only Texture2DSampled %381 = OpSampledImage %379 %380 
					                                       f32_4 %382 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
					                                       f32_4 %384 = OpImageSampleImplicitLod %381 %383 
					                                         f32 %385 = OpCompositeExtract %384 3 
					                                                      OpStore %378 %385 
					                                         f32 %387 = OpLoad %378 
					                                         f32 %388 = OpFNegate %387 
					                                         f32 %389 = OpFAdd %388 %202 
					                                                      OpStore %386 %389 
					                                         f32 %390 = OpLoad %386 
					                                  Input f32* %391 = OpAccessChain vs_TEXCOORD5 %17 
					                                         f32 %392 = OpLoad %391 
					                                         f32 %393 = OpFNegate %392 
					                                         f32 %394 = OpFAdd %390 %393 
					                                                      OpStore %47 %394 
					                                         f32 %395 = OpLoad %47 
					                                  Input f32* %396 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %397 = OpLoad %396 
					                                         f32 %398 = OpFMul %395 %397 
					                                         f32 %399 = OpFAdd %398 %202 
					                                                      OpStore %47 %399 
					                                Uniform f32* %400 = OpAccessChain %38 %168 
					                                         f32 %401 = OpLoad %400 
					                                Uniform f32* %403 = OpAccessChain %38 %402 
					                                         f32 %404 = OpLoad %403 
					                                         f32 %405 = OpFMul %401 %404 
					                                Private f32* %406 = OpAccessChain %89 %17 
					                                                      OpStore %406 %405 
					                                Private f32* %407 = OpAccessChain %89 %17 
					                                         f32 %408 = OpLoad %407 
					                                  Input f32* %409 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %410 = OpLoad %409 
					                                         f32 %411 = OpFMul %408 %410 
					                                Private f32* %412 = OpAccessChain %89 %17 
					                                                      OpStore %412 %411 
					                                Private f32* %413 = OpAccessChain %89 %17 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %414 %202 
					                                         f32 %416 = OpLoad %47 
					                                         f32 %417 = OpFAdd %415 %416 
					                                                      OpStore %68 %417 
					                                         f32 %418 = OpLoad %68 
					                                         f32 %419 = OpExtInst %1 43 %418 %102 %90 
					                                                      OpStore %68 %419 
					                                Private f32* %421 = OpAccessChain %89 %17 
					                                         f32 %422 = OpLoad %421 
					                                         f32 %423 = OpExtInst %1 37 %422 %90 
					                                Private f32* %424 = OpAccessChain %420 %17 
					                                                      OpStore %424 %423 
					                                Private f32* %425 = OpAccessChain %420 %17 
					                                         f32 %426 = OpLoad %425 
					                                         f32 %427 = OpExtInst %1 31 %426 
					                                Private f32* %428 = OpAccessChain %420 %17 
					                                                      OpStore %428 %427 
					                                         f32 %429 = OpLoad %68 
					                                Private f32* %430 = OpAccessChain %420 %17 
					                                         f32 %431 = OpLoad %430 
					                                         f32 %432 = OpFMul %429 %431 
					                                                      OpStore %68 %432 
					                                Uniform f32* %434 = OpAccessChain %38 %433 
					                                         f32 %435 = OpLoad %434 
					                                Uniform f32* %437 = OpAccessChain %38 %436 
					                                         f32 %438 = OpLoad %437 
					                                       f32_2 %439 = OpCompositeConstruct %435 %438 
					                              Uniform f32_4* %441 = OpAccessChain %38 %440 
					                                       f32_4 %442 = OpLoad %441 
					                                       f32_2 %443 = OpVectorShuffle %442 %442 1 1 
					                                       f32_2 %444 = OpFMul %439 %443 
					                                       f32_2 %446 = OpLoad vs_TEXCOORD1 
					                                       f32_2 %447 = OpFAdd %444 %446 
					                                                      OpStore %222 %447 
					                         read_only Texture2D %450 = OpLoad %449 
					                                     sampler %452 = OpLoad %451 
					                  read_only Texture2DSampled %453 = OpSampledImage %450 %452 
					                                       f32_2 %454 = OpLoad %222 
					                                       f32_4 %455 = OpImageSampleImplicitLod %453 %454 
					                                                      OpStore %448 %455 
					                                       f32_4 %457 = OpLoad %448 
					                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
					                              Uniform f32_4* %460 = OpAccessChain %38 %459 
					                                       f32_4 %461 = OpLoad %460 
					                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
					                                       f32_3 %463 = OpFMul %458 %462 
					                                                      OpStore %456 %463 
					                                  Input f32* %466 = OpAccessChain %465 %13 
					                                         f32 %467 = OpLoad %466 
					                                Uniform f32* %468 = OpAccessChain %38 %459 %13 
					                                         f32 %469 = OpLoad %468 
					                                         f32 %470 = OpFMul %467 %469 
					                                Private f32* %471 = OpAccessChain %464 %17 
					                                                      OpStore %471 %470 
					                                Private f32* %473 = OpAccessChain %448 %13 
					                                         f32 %474 = OpLoad %473 
					                                Private f32* %475 = OpAccessChain %464 %17 
					                                         f32 %476 = OpLoad %475 
					                                         f32 %477 = OpFMul %474 %476 
					                                                      OpStore %472 %477 
					                                Uniform f32* %479 = OpAccessChain %38 %478 
					                                         f32 %480 = OpLoad %479 
					                                Uniform f32* %482 = OpAccessChain %38 %481 
					                                         f32 %483 = OpLoad %482 
					                                       f32_2 %484 = OpCompositeConstruct %480 %483 
					                              Uniform f32_4* %485 = OpAccessChain %38 %440 
					                                       f32_4 %486 = OpLoad %485 
					                                       f32_2 %487 = OpVectorShuffle %486 %486 1 1 
					                                       f32_2 %488 = OpFMul %484 %487 
					                                       f32_4 %489 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
					                                       f32_2 %491 = OpFAdd %488 %490 
					                                       f32_4 %492 = OpLoad %117 
					                                       f32_4 %493 = OpVectorShuffle %492 %491 4 5 2 3 
					                                                      OpStore %117 %493 
					                         read_only Texture2D %496 = OpLoad %495 
					                                     sampler %498 = OpLoad %497 
					                  read_only Texture2DSampled %499 = OpSampledImage %496 %498 
					                                       f32_4 %500 = OpLoad %117 
					                                       f32_2 %501 = OpVectorShuffle %500 %500 0 1 
					                                       f32_4 %502 = OpImageSampleImplicitLod %499 %501 
					                                                      OpStore %494 %502 
					                                       f32_4 %503 = OpLoad %465 
					                              Uniform f32_4* %505 = OpAccessChain %38 %504 
					                                       f32_4 %506 = OpLoad %505 
					                                       f32_4 %507 = OpFMul %503 %506 
					                                                      OpStore %420 %507 
					                                       f32_4 %509 = OpLoad %494 
					                                       f32_4 %510 = OpLoad %420 
					                                       f32_4 %511 = OpFMul %509 %510 
					                                                      OpStore %508 %511 
					                                       f32_4 %513 = OpLoad %508 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 3 3 3 
					                                       f32_4 %515 = OpLoad %508 
					                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
					                                       f32_3 %517 = OpFMul %514 %516 
					                                       f32_4 %518 = OpLoad %512 
					                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
					                                                      OpStore %512 %519 
					                                       f32_3 %520 = OpLoad %456 
					                                         f32 %521 = OpLoad %472 
					                                       f32_3 %522 = OpCompositeConstruct %521 %521 %521 
					                                       f32_3 %523 = OpFMul %520 %522 
					                                       f32_4 %524 = OpLoad %512 
					                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
					                                       f32_3 %526 = OpFNegate %525 
					                                       f32_3 %527 = OpFAdd %523 %526 
					                                       f32_4 %528 = OpLoad %512 
					                                       f32_4 %529 = OpVectorShuffle %528 %527 4 5 6 3 
					                                                      OpStore %512 %529 
					                                Private f32* %530 = OpAccessChain %464 %17 
					                                         f32 %531 = OpLoad %530 
					                                Private f32* %532 = OpAccessChain %448 %13 
					                                         f32 %533 = OpLoad %532 
					                                         f32 %534 = OpFMul %531 %533 
					                                Private f32* %535 = OpAccessChain %508 %13 
					                                         f32 %536 = OpLoad %535 
					                                         f32 %537 = OpFNegate %536 
					                                         f32 %538 = OpFAdd %534 %537 
					                                Private f32* %539 = OpAccessChain %512 %13 
					                                                      OpStore %539 %538 
					                                         f32 %540 = OpLoad %68 
					                                       f32_4 %541 = OpCompositeConstruct %540 %540 %540 %540 
					                                       f32_4 %542 = OpLoad %512 
					                                       f32_4 %543 = OpFMul %541 %542 
					                                                      OpStore %464 %543 
					                                Private f32* %545 = OpAccessChain %420 %13 
					                                         f32 %546 = OpLoad %545 
					                                Private f32* %547 = OpAccessChain %494 %13 
					                                         f32 %548 = OpLoad %547 
					                                         f32 %549 = OpFMul %546 %548 
					                                Private f32* %550 = OpAccessChain %464 %13 
					                                         f32 %551 = OpLoad %550 
					                                         f32 %552 = OpFAdd %549 %551 
					                                Private f32* %553 = OpAccessChain %544 %13 
					                                                      OpStore %553 %552 
					                                       f32_4 %554 = OpLoad %508 
					                                       f32_3 %555 = OpVectorShuffle %554 %554 0 1 2 
					                                       f32_4 %556 = OpLoad %508 
					                                       f32_3 %557 = OpVectorShuffle %556 %556 3 3 3 
					                                       f32_3 %558 = OpFMul %555 %557 
					                                       f32_4 %559 = OpLoad %464 
					                                       f32_3 %560 = OpVectorShuffle %559 %559 0 1 2 
					                                       f32_3 %561 = OpFAdd %558 %560 
					                                       f32_4 %562 = OpLoad %544 
					                                       f32_4 %563 = OpVectorShuffle %562 %561 4 5 6 3 
					                                                      OpStore %544 %563 
					                                Private f32* %564 = OpAccessChain %89 %17 
					                                         f32 %565 = OpLoad %564 
					                                         f32 %566 = OpFNegate %565 
					                                         f32 %567 = OpFMul %566 %202 
					                                         f32 %568 = OpLoad %47 
					                                         f32 %569 = OpFAdd %567 %568 
					                                                      OpStore %68 %569 
					                                Private f32* %570 = OpAccessChain %89 %17 
					                                         f32 %571 = OpLoad %570 
					                                         f32 %572 = OpFMul %571 %202 
					                                         f32 %573 = OpLoad %47 
					                                         f32 %574 = OpFAdd %572 %573 
					                                                      OpStore %47 %574 
					                                         f32 %575 = OpLoad %47 
					                                         f32 %576 = OpExtInst %1 43 %575 %102 %90 
					                                                      OpStore %47 %576 
					                                Uniform f32* %578 = OpAccessChain %38 %577 
					                                         f32 %579 = OpLoad %578 
					                                Uniform f32* %580 = OpAccessChain %38 %402 
					                                         f32 %581 = OpLoad %580 
					                                         f32 %582 = OpFMul %579 %581 
					                                Private f32* %583 = OpAccessChain %89 %17 
					                                                      OpStore %583 %582 
					                                Private f32* %584 = OpAccessChain %89 %17 
					                                         f32 %585 = OpLoad %584 
					                                  Input f32* %586 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %587 = OpLoad %586 
					                                         f32 %588 = OpFMul %585 %587 
					                                Private f32* %589 = OpAccessChain %222 %17 
					                                                      OpStore %589 %588 
					                                Private f32* %590 = OpAccessChain %89 %17 
					                                         f32 %591 = OpLoad %590 
					                                  Input f32* %592 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %593 = OpLoad %592 
					                                         f32 %594 = OpFMul %591 %593 
					                                         f32 %595 = OpFAdd %594 %90 
					                                Private f32* %596 = OpAccessChain %512 %17 
					                                                      OpStore %596 %595 
					                                Private f32* %597 = OpAccessChain %222 %17 
					                                         f32 %598 = OpLoad %597 
					                                         f32 %599 = OpFMul %598 %202 
					                                         f32 %600 = OpLoad %68 
					                                         f32 %601 = OpFAdd %599 %600 
					                                                      OpStore %68 %601 
					                                         f32 %602 = OpLoad %68 
					                                Private f32* %603 = OpAccessChain %512 %17 
					                                         f32 %604 = OpLoad %603 
					                                         f32 %605 = OpFDiv %602 %604 
					                                                      OpStore %68 %605 
					                                         f32 %606 = OpLoad %68 
					                                         f32 %607 = OpExtInst %1 43 %606 %102 %90 
					                                                      OpStore %68 %607 
					                                         f32 %608 = OpLoad %68 
					                                         f32 %609 = OpFNegate %608 
					                                         f32 %610 = OpFAdd %609 %90 
					                                                      OpStore %68 %610 
					                                         f32 %612 = OpLoad %68 
					                                       f32_4 %613 = OpCompositeConstruct %612 %612 %612 %612 
					                                       f32_4 %614 = OpLoad %544 
					                                       f32_4 %615 = OpFMul %613 %614 
					                                                      OpStore %611 %615 
					                                Uniform f32* %618 = OpAccessChain %38 %617 
					                                         f32 %619 = OpLoad %618 
					                                         f32 %620 = OpFNegate %619 
					                                Uniform f32* %622 = OpAccessChain %38 %621 
					                                         f32 %623 = OpLoad %622 
					                                         f32 %624 = OpFAdd %620 %623 
					                                Private f32* %625 = OpAccessChain %616 %17 
					                                                      OpStore %625 %624 
					                                         f32 %626 = OpLoad %47 
					                                Private f32* %627 = OpAccessChain %616 %17 
					                                         f32 %628 = OpLoad %627 
					                                         f32 %629 = OpFMul %626 %628 
					                                Uniform f32* %630 = OpAccessChain %38 %617 
					                                         f32 %631 = OpLoad %630 
					                                         f32 %632 = OpFAdd %629 %631 
					                                Private f32* %633 = OpAccessChain %616 %17 
					                                                      OpStore %633 %632 
					                         read_only Texture2D %636 = OpLoad %635 
					                                     sampler %638 = OpLoad %637 
					                  read_only Texture2DSampled %639 = OpSampledImage %636 %638 
					                                       f32_4 %640 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %641 = OpVectorShuffle %640 %640 2 3 
					                                       f32_4 %642 = OpImageSampleImplicitLod %639 %641 
					                                       f32_3 %643 = OpVectorShuffle %642 %642 0 1 3 
					                                                      OpStore %634 %643 
					                                       f32_3 %644 = OpLoad %634 
					                                       f32_2 %645 = OpVectorShuffle %644 %644 0 0 
					                                       f32_3 %646 = OpLoad %634 
					                                       f32_2 %647 = OpVectorShuffle %646 %646 2 2 
					                                         f32 %648 = OpDot %645 %647 
					                                Private f32* %649 = OpAccessChain %512 %17 
					                                                      OpStore %649 %648 
					                                Private f32* %650 = OpAccessChain %634 %23 
					                                         f32 %651 = OpLoad %650 
					                                Private f32* %652 = OpAccessChain %634 %23 
					                                         f32 %653 = OpLoad %652 
					                                         f32 %654 = OpFAdd %651 %653 
					                                Private f32* %655 = OpAccessChain %512 %23 
					                                                      OpStore %655 %654 
					                                       f32_4 %656 = OpLoad %512 
					                                       f32_2 %657 = OpVectorShuffle %656 %656 0 1 
					                                       f32_2 %659 = OpFAdd %657 %658 
					                                       f32_4 %660 = OpLoad %512 
					                                       f32_4 %661 = OpVectorShuffle %660 %659 4 5 2 3 
					                                                      OpStore %512 %661 
					                                       f32_4 %662 = OpLoad %512 
					                                       f32_2 %663 = OpVectorShuffle %662 %662 0 1 
					                                       f32_4 %664 = OpLoad %512 
					                                       f32_2 %665 = OpVectorShuffle %664 %664 0 1 
					                                         f32 %666 = OpDot %663 %665 
					                                                      OpStore %68 %666 
					                                         f32 %667 = OpLoad %68 
					                                         f32 %668 = OpExtInst %1 37 %667 %90 
					                                                      OpStore %68 %668 
					                                         f32 %669 = OpLoad %68 
					                                         f32 %670 = OpFNegate %669 
					                                         f32 %671 = OpFAdd %670 %90 
					                                                      OpStore %68 %671 
					                                         f32 %672 = OpLoad %68 
					                                         f32 %673 = OpExtInst %1 31 %672 
					                                Private f32* %674 = OpAccessChain %512 %28 
					                                                      OpStore %674 %673 
					                                       f32_4 %675 = OpLoad %512 
					                                       f32_3 %676 = OpVectorShuffle %675 %675 0 1 2 
					                                       f32_3 %677 = OpLoad %616 
					                                       f32_3 %678 = OpVectorShuffle %677 %677 0 0 0 
					                                       f32_3 %679 = OpFMul %676 %678 
					                                       f32_3 %682 = OpFAdd %679 %681 
					                                                      OpStore %616 %682 
					                                       f32_4 %683 = OpLoad %611 
					                                       f32_3 %684 = OpVectorShuffle %683 %683 3 3 3 
					                                       f32_3 %685 = OpLoad %616 
					                                       f32_3 %686 = OpFMul %684 %685 
					                                       f32_3 %688 = OpFAdd %686 %687 
					                                                      OpStore %616 %688 
					                                       f32_4 %689 = OpLoad %9 
					                                       f32_3 %690 = OpVectorShuffle %689 %689 0 1 2 
					                                       f32_3 %691 = OpLoad %616 
					                                       f32_3 %692 = OpFNegate %691 
					                                       f32_3 %693 = OpFAdd %690 %692 
					                                       f32_4 %694 = OpLoad %9 
					                                       f32_4 %695 = OpVectorShuffle %694 %693 4 5 6 3 
					                                                      OpStore %9 %695 
					                                       f32_4 %696 = OpLoad %9 
					                                       f32_3 %697 = OpVectorShuffle %696 %696 0 1 2 
					                                       f32_4 %698 = OpLoad %9 
					                                       f32_3 %699 = OpVectorShuffle %698 %698 0 1 2 
					                                         f32 %700 = OpDot %697 %699 
					                                Private f32* %701 = OpAccessChain %616 %17 
					                                                      OpStore %701 %700 
					                                Private f32* %702 = OpAccessChain %616 %17 
					                                         f32 %703 = OpLoad %702 
					                                         f32 %704 = OpExtInst %1 32 %703 
					                                Private f32* %705 = OpAccessChain %616 %17 
					                                                      OpStore %705 %704 
					                                       f32_4 %706 = OpLoad %9 
					                                       f32_3 %707 = OpVectorShuffle %706 %706 0 1 2 
					                                       f32_3 %708 = OpLoad %616 
					                                       f32_3 %709 = OpVectorShuffle %708 %708 0 0 0 
					                                       f32_3 %710 = OpFMul %707 %709 
					                                       f32_4 %711 = OpLoad %9 
					                                       f32_4 %712 = OpVectorShuffle %711 %710 4 5 6 3 
					                                                      OpStore %9 %712 
					                                       f32_4 %713 = OpLoad vs_TEXCOORD2 
					                                       f32_3 %714 = OpVectorShuffle %713 %713 0 1 2 
					                                       f32_4 %715 = OpLoad %9 
					                                       f32_3 %716 = OpVectorShuffle %715 %715 0 1 2 
					                                       f32_3 %717 = OpFNegate %716 
					                                         f32 %718 = OpDot %714 %717 
					                                Private f32* %719 = OpAccessChain %512 %17 
					                                                      OpStore %719 %718 
					                                       f32_4 %720 = OpLoad vs_TEXCOORD3 
					                                       f32_3 %721 = OpVectorShuffle %720 %720 0 1 2 
					                                       f32_4 %722 = OpLoad %9 
					                                       f32_3 %723 = OpVectorShuffle %722 %722 0 1 2 
					                                       f32_3 %724 = OpFNegate %723 
					                                         f32 %725 = OpDot %721 %724 
					                                Private f32* %726 = OpAccessChain %512 %23 
					                                                      OpStore %726 %725 
					                                       f32_4 %727 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %728 = OpVectorShuffle %727 %727 0 1 2 
					                                       f32_4 %729 = OpLoad %9 
					                                       f32_3 %730 = OpVectorShuffle %729 %729 0 1 2 
					                                       f32_3 %731 = OpFNegate %730 
					                                         f32 %732 = OpDot %728 %731 
					                                Private f32* %733 = OpAccessChain %512 %28 
					                                                      OpStore %733 %732 
					                                       f32_4 %734 = OpLoad %512 
					                                       f32_3 %735 = OpVectorShuffle %734 %734 0 1 2 
					                                       f32_4 %736 = OpLoad %512 
					                                       f32_3 %737 = OpVectorShuffle %736 %736 0 1 2 
					                                         f32 %738 = OpDot %735 %737 
					                                Private f32* %739 = OpAccessChain %508 %17 
					                                                      OpStore %739 %738 
					                                Private f32* %740 = OpAccessChain %508 %17 
					                                         f32 %741 = OpLoad %740 
					                                         f32 %742 = OpExtInst %1 32 %741 
					                                Private f32* %743 = OpAccessChain %508 %17 
					                                                      OpStore %743 %742 
					                                       f32_4 %744 = OpLoad %508 
					                                       f32_3 %745 = OpVectorShuffle %744 %744 0 0 0 
					                                       f32_4 %746 = OpLoad %512 
					                                       f32_3 %747 = OpVectorShuffle %746 %746 0 1 2 
					                                       f32_3 %748 = OpFMul %745 %747 
					                                       f32_4 %749 = OpLoad %104 
					                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
					                                                      OpStore %104 %750 
					                                       f32_4 %751 = OpLoad %104 
					                                       f32_3 %752 = OpVectorShuffle %751 %751 0 1 2 
					                                       f32_3 %753 = OpLoad %56 
					                                         f32 %754 = OpDot %752 %753 
					                                Private f32* %755 = OpAccessChain %56 %17 
					                                                      OpStore %755 %754 
					                                Private f32* %756 = OpAccessChain %56 %17 
					                                         f32 %757 = OpLoad %756 
					                                         f32 %758 = OpExtInst %1 40 %757 %102 
					                                Private f32* %759 = OpAccessChain %56 %17 
					                                                      OpStore %759 %758 
					                                Private f32* %760 = OpAccessChain %56 %17 
					                                         f32 %761 = OpLoad %760 
					                                         f32 %762 = OpExtInst %1 30 %761 
					                                Private f32* %763 = OpAccessChain %508 %17 
					                                                      OpStore %763 %762 
					                                Uniform f32* %766 = OpAccessChain %38 %765 
					                                         f32 %767 = OpLoad %766 
					                                         f32 %768 = OpFNegate %767 
					                                Uniform f32* %770 = OpAccessChain %38 %769 
					                                         f32 %771 = OpLoad %770 
					                                         f32 %772 = OpFAdd %768 %771 
					                                                      OpStore %764 %772 
					                                         f32 %774 = OpLoad %47 
					                                         f32 %775 = OpLoad %764 
					                                         f32 %776 = OpFMul %774 %775 
					                                Uniform f32* %777 = OpAccessChain %38 %765 
					                                         f32 %778 = OpLoad %777 
					                                         f32 %779 = OpFAdd %776 %778 
					                                                      OpStore %773 %779 
					                                         f32 %780 = OpLoad %773 
					                                         f32 %782 = OpFMul %780 %781 
					                                Private f32* %783 = OpAccessChain %56 %17 
					                                                      OpStore %783 %782 
					                                Private f32* %784 = OpAccessChain %508 %17 
					                                         f32 %785 = OpLoad %784 
					                                Private f32* %786 = OpAccessChain %56 %17 
					                                         f32 %787 = OpLoad %786 
					                                         f32 %788 = OpFMul %785 %787 
					                                Private f32* %789 = OpAccessChain %508 %17 
					                                                      OpStore %789 %788 
					                                Private f32* %790 = OpAccessChain %508 %17 
					                                         f32 %791 = OpLoad %790 
					                                         f32 %792 = OpExtInst %1 29 %791 
					                                Private f32* %793 = OpAccessChain %508 %17 
					                                                      OpStore %793 %792 
					                              Uniform f32_4* %795 = OpAccessChain %38 %794 
					                                       f32_4 %796 = OpLoad %795 
					                                       f32_3 %797 = OpVectorShuffle %796 %796 0 1 2 
					                              Uniform f32_4* %799 = OpAccessChain %38 %798 
					                                       f32_4 %800 = OpLoad %799 
					                                       f32_3 %801 = OpVectorShuffle %800 %800 0 1 2 
					                                       f32_3 %802 = OpFMul %797 %801 
					                                                      OpStore %56 %802 
					                                       f32_4 %803 = OpLoad %508 
					                                       f32_3 %804 = OpVectorShuffle %803 %803 0 0 0 
					                                       f32_3 %805 = OpLoad %56 
					                                       f32_3 %806 = OpFMul %804 %805 
					                                       f32_4 %807 = OpLoad %508 
					                                       f32_4 %808 = OpVectorShuffle %807 %806 4 5 6 3 
					                                                      OpStore %508 %808 
					                                       f32_4 %809 = OpLoad %104 
					                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
					                              Uniform f32_4* %811 = OpAccessChain %38 %62 
					                                       f32_4 %812 = OpLoad %811 
					                                       f32_3 %813 = OpVectorShuffle %812 %812 0 1 2 
					                                         f32 %814 = OpDot %810 %813 
					                                Private f32* %815 = OpAccessChain %56 %17 
					                                                      OpStore %815 %814 
					                                Private f32* %816 = OpAccessChain %56 %17 
					                                         f32 %817 = OpLoad %816 
					                                         f32 %818 = OpExtInst %1 40 %817 %102 
					                                Private f32* %819 = OpAccessChain %56 %17 
					                                                      OpStore %819 %818 
					                                Private f32* %821 = OpAccessChain %611 %13 
					                                         f32 %822 = OpLoad %821 
					                                         f32 %824 = OpExtInst %1 40 %822 %823 
					                                                      OpStore %820 %824 
					                                       f32_4 %826 = OpLoad %611 
					                                       f32_3 %827 = OpVectorShuffle %826 %826 0 1 2 
					                                         f32 %828 = OpLoad %820 
					                                       f32_3 %829 = OpCompositeConstruct %828 %828 %828 
					                                       f32_3 %830 = OpFDiv %827 %829 
					                                                      OpStore %825 %830 
					                                       f32_3 %832 = OpLoad %825 
					                              Uniform f32_4* %833 = OpAccessChain %38 %794 
					                                       f32_4 %834 = OpLoad %833 
					                                       f32_3 %835 = OpVectorShuffle %834 %834 0 1 2 
					                                       f32_3 %836 = OpFMul %832 %835 
					                                                      OpStore %831 %836 
					                                       f32_3 %837 = OpLoad %831 
					                                       f32_3 %838 = OpLoad %56 
					                                       f32_3 %839 = OpVectorShuffle %838 %838 0 0 0 
					                                       f32_3 %840 = OpFMul %837 %839 
					                                       f32_4 %841 = OpLoad %508 
					                                       f32_3 %842 = OpVectorShuffle %841 %841 0 1 2 
					                                       f32_3 %843 = OpFAdd %840 %842 
					                                       f32_4 %844 = OpLoad %508 
					                                       f32_4 %845 = OpVectorShuffle %844 %843 4 5 6 3 
					                                                      OpStore %508 %845 
					                                Private f32* %846 = OpAccessChain %104 %13 
					                                                      OpStore %846 %90 
					                              Uniform f32_4* %848 = OpAccessChain %38 %847 
					                                       f32_4 %849 = OpLoad %848 
					                                       f32_4 %850 = OpLoad %104 
					                                         f32 %851 = OpDot %849 %850 
					                                Private f32* %852 = OpAccessChain %56 %17 
					                                                      OpStore %852 %851 
					                              Uniform f32_4* %854 = OpAccessChain %38 %853 
					                                       f32_4 %855 = OpLoad %854 
					                                       f32_4 %856 = OpLoad %104 
					                                         f32 %857 = OpDot %855 %856 
					                                Private f32* %858 = OpAccessChain %56 %23 
					                                                      OpStore %858 %857 
					                              Uniform f32_4* %860 = OpAccessChain %38 %859 
					                                       f32_4 %861 = OpLoad %860 
					                                       f32_4 %862 = OpLoad %104 
					                                         f32 %863 = OpDot %861 %862 
					                                Private f32* %864 = OpAccessChain %56 %28 
					                                                      OpStore %864 %863 
					                                       f32_3 %865 = OpLoad %56 
					                                       f32_3 %868 = OpLoad vs_TEXCOORD7 
					                                       f32_3 %869 = OpFAdd %865 %868 
					                                                      OpStore %56 %869 
					                                       f32_3 %870 = OpLoad %56 
					                                       f32_3 %872 = OpExtInst %1 40 %870 %871 
					                                                      OpStore %56 %872 
					                                       f32_3 %873 = OpLoad %825 
					                                       f32_3 %874 = OpLoad %56 
					                                       f32_3 %875 = OpFMul %873 %874 
					                                       f32_4 %876 = OpLoad %508 
					                                       f32_3 %877 = OpVectorShuffle %876 %876 0 1 2 
					                                       f32_3 %878 = OpFAdd %875 %877 
					                                                      OpStore %56 %878 
					                              Uniform f32_4* %880 = OpAccessChain %38 %879 
					                                       f32_4 %881 = OpLoad %880 
					                                       f32_3 %882 = OpVectorShuffle %881 %881 0 1 2 
					                                       f32_3 %883 = OpFNegate %882 
					                              Uniform f32_4* %885 = OpAccessChain %38 %884 
					                                       f32_4 %886 = OpLoad %885 
					                                       f32_3 %887 = OpVectorShuffle %886 %886 0 1 2 
					                                       f32_3 %888 = OpFAdd %883 %887 
					                                       f32_4 %889 = OpLoad %508 
					                                       f32_4 %890 = OpVectorShuffle %889 %888 4 5 6 3 
					                                                      OpStore %508 %890 
					                                         f32 %891 = OpLoad %47 
					                                       f32_3 %892 = OpCompositeConstruct %891 %891 %891 
					                                       f32_4 %893 = OpLoad %508 
					                                       f32_3 %894 = OpVectorShuffle %893 %893 0 1 2 
					                                       f32_3 %895 = OpFMul %892 %894 
					                              Uniform f32_4* %896 = OpAccessChain %38 %879 
					                                       f32_4 %897 = OpLoad %896 
					                                       f32_3 %898 = OpVectorShuffle %897 %897 0 1 2 
					                                       f32_3 %899 = OpFAdd %895 %898 
					                                                      OpStore %616 %899 
					                                       f32_4 %901 = OpLoad %9 
					                                       f32_3 %902 = OpVectorShuffle %901 %901 1 1 1 
					                              Uniform f32_4* %904 = OpAccessChain %38 %903 %40 
					                                       f32_4 %905 = OpLoad %904 
					                                       f32_3 %906 = OpVectorShuffle %905 %905 0 1 2 
					                                       f32_3 %907 = OpFMul %902 %906 
					                                                      OpStore %900 %907 
					                              Uniform f32_4* %908 = OpAccessChain %38 %903 %440 
					                                       f32_4 %909 = OpLoad %908 
					                                       f32_3 %910 = OpVectorShuffle %909 %909 0 1 2 
					                                       f32_4 %911 = OpLoad %9 
					                                       f32_3 %912 = OpVectorShuffle %911 %911 0 0 0 
					                                       f32_3 %913 = OpFMul %910 %912 
					                                       f32_3 %914 = OpLoad %900 
					                                       f32_3 %915 = OpFAdd %913 %914 
					                                       f32_4 %916 = OpLoad %9 
					                                       f32_4 %917 = OpVectorShuffle %916 %915 4 5 2 6 
					                                                      OpStore %9 %917 
					                              Uniform f32_4* %918 = OpAccessChain %38 %903 %62 
					                                       f32_4 %919 = OpLoad %918 
					                                       f32_3 %920 = OpVectorShuffle %919 %919 0 1 2 
					                                       f32_4 %921 = OpLoad %9 
					                                       f32_3 %922 = OpVectorShuffle %921 %921 2 2 2 
					                                       f32_3 %923 = OpFMul %920 %922 
					                                       f32_4 %924 = OpLoad %9 
					                                       f32_3 %925 = OpVectorShuffle %924 %924 0 1 3 
					                                       f32_3 %926 = OpFAdd %923 %925 
					                                       f32_4 %927 = OpLoad %9 
					                                       f32_4 %928 = OpVectorShuffle %927 %926 4 5 6 3 
					                                                      OpStore %9 %928 
					                                       f32_3 %930 = OpLoad vs_TEXCOORD6 
					                                       f32_4 %931 = OpLoad %9 
					                                       f32_3 %932 = OpVectorShuffle %931 %931 0 1 2 
					                                         f32 %933 = OpDot %930 %932 
					                                                      OpStore %47 %933 
					                                         f32 %934 = OpLoad %47 
					                                         f32 %935 = OpLoad %47 
					                                         f32 %936 = OpFAdd %934 %935 
					                                                      OpStore %47 %936 
					                                       f32_4 %937 = OpLoad %9 
					                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 2 
					                                         f32 %939 = OpLoad %47 
					                                       f32_3 %940 = OpCompositeConstruct %939 %939 %939 
					                                       f32_3 %941 = OpFNegate %940 
					                                       f32_3 %942 = OpFMul %938 %941 
					                                       f32_3 %943 = OpLoad vs_TEXCOORD6 
					                                       f32_3 %944 = OpFAdd %942 %943 
					                                       f32_4 %945 = OpLoad %9 
					                                       f32_4 %946 = OpVectorShuffle %945 %944 4 5 6 3 
					                                                      OpStore %9 %946 
					                       read_only TextureCube %951 = OpLoad %950 
					                                     sampler %953 = OpLoad %952 
					                read_only TextureCubeSampled %955 = OpSampledImage %951 %953 
					                                       f32_4 %956 = OpLoad %9 
					                                       f32_3 %957 = OpVectorShuffle %956 %956 0 1 2 
					                                       f32_4 %958 = OpImageSampleImplicitLod %955 %957 
					                                       f32_3 %959 = OpVectorShuffle %958 %958 0 1 2 
					                                                      OpStore %947 %959 
					                                       f32_3 %960 = OpLoad %616 
					                                       f32_3 %961 = OpLoad %947 
					                                       f32_3 %962 = OpFMul %960 %961 
					                                       f32_4 %963 = OpLoad %9 
					                                       f32_4 %964 = OpVectorShuffle %963 %962 4 5 6 3 
					                                                      OpStore %9 %964 
					                                       f32_4 %967 = OpLoad %9 
					                                       f32_3 %968 = OpVectorShuffle %967 %967 0 1 2 
					                                       f32_4 %969 = OpLoad %611 
					                                       f32_3 %970 = OpVectorShuffle %969 %969 3 3 3 
					                                       f32_3 %971 = OpFMul %968 %970 
					                                       f32_3 %972 = OpLoad %56 
					                                       f32_3 %973 = OpFAdd %971 %972 
					                                       f32_4 %974 = OpLoad %966 
					                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
					                                                      OpStore %966 %975 
					                                Private f32* %976 = OpAccessChain %611 %13 
					                                         f32 %977 = OpLoad %976 
					                                 Output f32* %979 = OpAccessChain %966 %13 
					                                                      OpStore %979 %977 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[42];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat16 = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat16 + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat15 * 0.5;
					    u_xlat15 = u_xlat2.y * unity_MatrixVP[1].w;
					    u_xlat15 = unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat2.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat16 = u_xlat15 * 1.5;
					    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat16);
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xxx;
					    u_xlat3.x = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat3.x) * u_xlat15 + u_xlat16;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.wxy * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.ywx * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyw = _EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _FaceDilate;
					uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _FaceTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat16 = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat16 + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat15 * 0.5;
					    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat16 = u_xlat15 * 1.5;
					    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat16);
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xxx;
					    u_xlat3.x = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat3.x) * u_xlat15 + u_xlat16;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.wxy * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.ywx * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
					    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _SpecColor;
					uniform 	float _FaceUVSpeedX;
					uniform 	float _FaceUVSpeedY;
					uniform 	vec4 _FaceColor;
					uniform 	float _OutlineSoftness;
					uniform 	float _OutlineUVSpeedX;
					uniform 	float _OutlineUVSpeedY;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _Bevel;
					uniform 	float _BevelOffset;
					uniform 	float _BevelWidth;
					uniform 	float _BevelClamp;
					uniform 	float _BevelRoundness;
					uniform 	float _BumpOutline;
					uniform 	float _BumpFace;
					uniform 	vec4 _ReflectFaceColor;
					uniform 	vec4 _ReflectOutlineColor;
					uniform 	float _ShaderFlags;
					uniform 	float _ScaleRatioA;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _FaceShininess;
					uniform 	float _OutlineShininess;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _FaceTex;
					UNITY_LOCATION(2) uniform  sampler2D _OutlineTex;
					UNITY_LOCATION(3) uniform  sampler2D _BumpMap;
					UNITY_LOCATION(4) uniform  samplerCube _Cube;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					float u_xlat16_4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb9;
					float u_xlat10;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat1 = vec4(u_xlat18) + u_xlat3;
					    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat18 = _BevelWidth + _OutlineWidth;
					    u_xlat18 = max(u_xlat18, 0.00999999978);
					    u_xlat1 = u_xlat1 / vec4(u_xlat18);
					    u_xlat18 = u_xlat18 * _Bevel;
					    u_xlat18 = u_xlat18 * _GradientScale;
					    u_xlat18 = u_xlat18 * -2.0;
					    u_xlat1 = u_xlat1 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2 = u_xlat1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = _ShaderFlags * 0.5;
					    u_xlatb9 = u_xlat3.x>=(-u_xlat3.x);
					    u_xlat3.x = fract(abs(u_xlat3.x));
					    u_xlat3.x = (u_xlatb9) ? u_xlat3.x : (-u_xlat3.x);
					    u_xlatb3 = u_xlat3.x>=0.5;
					    u_xlat1 = (bool(u_xlatb3)) ? u_xlat2 : u_xlat1;
					    u_xlat2 = u_xlat1 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat1 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat1;
					    u_xlat2.x = (-_BevelClamp) + 1.0;
					    u_xlat1 = min(u_xlat1, u_xlat2.xxxx);
					    u_xlat1.xz = vec2(u_xlat18) * u_xlat1.xz;
					    u_xlat1.yz = u_xlat1.wy * vec2(u_xlat18) + (-u_xlat1.zx);
					    u_xlat1.x = float(-1.0);
					    u_xlat1.w = float(1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat19 = dot(u_xlat1.zw, u_xlat1.zw);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.x = u_xlat19 * u_xlat1.z;
					    u_xlat2.yz = vec2(u_xlat19) * vec2(1.0, 0.0);
					    u_xlat1.z = 0.0;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat2.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_2 = texture(_OutlineTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;
					    u_xlat18 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat3.w = u_xlat10_2.w * u_xlat18;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.www;
					    u_xlat2.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_2 = texture(_FaceTex, u_xlat2.xy);
					    u_xlat4 = vs_COLOR0 * _FaceColor;
					    u_xlat2 = u_xlat10_2 * u_xlat4;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2) + u_xlat3;
					    u_xlat18 = _OutlineWidth * _ScaleRatioA;
					    u_xlat18 = u_xlat18 * vs_TEXCOORD5.y;
					    u_xlat19 = min(u_xlat18, 1.0);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = (-u_xlat10_4.w) + 0.5;
					    u_xlat4.x = u_xlat16_4 + (-vs_TEXCOORD5.x);
					    u_xlat4.x = u_xlat4.x * vs_TEXCOORD5.y + 0.5;
					    u_xlat10 = u_xlat18 * 0.5 + u_xlat4.x;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.5 + u_xlat4.x;
					    u_xlat19 = u_xlat19 * u_xlat10;
					    u_xlat2 = vec4(u_xlat19) * u_xlat3 + u_xlat2;
					    u_xlat19 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.x = u_xlat19 * vs_TEXCOORD5.y;
					    u_xlat19 = u_xlat19 * vs_TEXCOORD5.y + 1.0;
					    u_xlat18 = u_xlat3.x * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat18 / u_xlat19;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2 = vec4(u_xlat18) * u_xlat2;
					    u_xlat18 = (-_BumpFace) + _BumpOutline;
					    u_xlat18 = u_xlat10 * u_xlat18 + _BumpFace;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat3.z = sqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat18) + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.xyz = u_xlat2.www * u_xlat3.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, (-u_xlat1.xyz));
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, (-u_xlat1.xyz));
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, (-u_xlat1.xyz));
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat6.x = u_xlat10 * u_xlat6.x + _FaceShininess;
					    u_xlat6.x = u_xlat6.x * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat6.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat19 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat19);
					    u_xlat4.xzw = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat4.xzw * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat5.x = dot(unity_SHAr, u_xlat3);
					    u_xlat5.y = dot(unity_SHAg, u_xlat3);
					    u_xlat5.z = dot(unity_SHAb, u_xlat3);
					    u_xlat3.xyz = u_xlat5.xyz + vs_TEXCOORD7.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz + _ReflectFaceColor.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat18 = dot(vs_TEXCOORD6.xyz, u_xlat1.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat18)) + vs_TEXCOORD6.xyz;
					    u_xlat10_1 = texture(_Cube, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat0.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 688
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %105 %117 %143 %158 %170 %221 %386 %494 %498 %577 %581 %603 %604 %627 %673 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpDecorate %22 ArrayStride 22 
					                                                      OpMemberDecorate %23 0 Offset 23 
					                                                      OpMemberDecorate %23 1 Offset 23 
					                                                      OpMemberDecorate %23 2 RelaxedPrecision 
					                                                      OpMemberDecorate %23 2 Offset 23 
					                                                      OpMemberDecorate %23 3 RelaxedPrecision 
					                                                      OpMemberDecorate %23 3 Offset 23 
					                                                      OpMemberDecorate %23 4 RelaxedPrecision 
					                                                      OpMemberDecorate %23 4 Offset 23 
					                                                      OpMemberDecorate %23 5 RelaxedPrecision 
					                                                      OpMemberDecorate %23 5 Offset 23 
					                                                      OpMemberDecorate %23 6 Offset 23 
					                                                      OpMemberDecorate %23 7 Offset 23 
					                                                      OpMemberDecorate %23 8 Offset 23 
					                                                      OpMemberDecorate %23 9 Offset 23 
					                                                      OpMemberDecorate %23 10 Offset 23 
					                                                      OpMemberDecorate %23 11 Offset 23 
					                                                      OpMemberDecorate %23 12 Offset 23 
					                                                      OpMemberDecorate %23 13 Offset 23 
					                                                      OpMemberDecorate %23 14 Offset 23 
					                                                      OpMemberDecorate %23 15 Offset 23 
					                                                      OpMemberDecorate %23 16 Offset 23 
					                                                      OpMemberDecorate %23 17 Offset 23 
					                                                      OpMemberDecorate %23 18 Offset 23 
					                                                      OpMemberDecorate %23 19 Offset 23 
					                                                      OpMemberDecorate %23 20 Offset 23 
					                                                      OpMemberDecorate %23 21 Offset 23 
					                                                      OpMemberDecorate %23 22 Offset 23 
					                                                      OpMemberDecorate %23 23 Offset 23 
					                                                      OpMemberDecorate %23 24 Offset 23 
					                                                      OpDecorate %23 Block 
					                                                      OpDecorate %25 DescriptorSet 25 
					                                                      OpDecorate %25 Binding 25 
					                                                      OpMemberDecorate %103 0 BuiltIn 103 
					                                                      OpMemberDecorate %103 1 BuiltIn 103 
					                                                      OpMemberDecorate %103 2 BuiltIn 103 
					                                                      OpDecorate %103 Block 
					                                                      OpDecorate %117 Location 117 
					                                                      OpDecorate vs_TEXCOORD0 Location 143 
					                                                      OpDecorate vs_TEXCOORD1 Location 158 
					                                                      OpDecorate %170 Location 170 
					                                                      OpDecorate vs_TEXCOORD5 Location 221 
					                                                      OpDecorate %386 Location 386 
					                                                      OpDecorate vs_TEXCOORD2 Location 494 
					                                                      OpDecorate %498 Location 498 
					                                                      OpDecorate vs_TEXCOORD3 Location 577 
					                                                      OpDecorate vs_TEXCOORD4 Location 581 
					                                                      OpDecorate %603 RelaxedPrecision 
					                                                      OpDecorate %603 Location 603 
					                                                      OpDecorate %604 RelaxedPrecision 
					                                                      OpDecorate %604 Location 604 
					                                                      OpDecorate %605 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD6 Location 627 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %648 RelaxedPrecision 
					                                                      OpDecorate %649 RelaxedPrecision 
					                                                      OpDecorate %651 RelaxedPrecision 
					                                                      OpDecorate %656 RelaxedPrecision 
					                                                      OpDecorate %658 RelaxedPrecision 
					                                                      OpDecorate %659 RelaxedPrecision 
					                                                      OpDecorate %660 RelaxedPrecision 
					                                                      OpDecorate %663 RelaxedPrecision 
					                                                      OpDecorate %664 RelaxedPrecision 
					                                                      OpDecorate %665 RelaxedPrecision 
					                                                      OpDecorate %669 RelaxedPrecision 
					                                                      OpDecorate %670 RelaxedPrecision 
					                                                      OpDecorate %671 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 673 
					                                                      OpDecorate %676 RelaxedPrecision 
					                                                      OpDecorate %677 RelaxedPrecision 
					                                                      OpDecorate %678 RelaxedPrecision 
					                                                      OpDecorate %679 RelaxedPrecision 
					                                                      OpDecorate %680 RelaxedPrecision 
					                                                      OpDecorate %681 RelaxedPrecision 
					                                                      OpDecorate %682 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %12 = OpTypeVector %6 2 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %7 %17 
					                                              %19 = OpTypeArray %7 %17 
					                                              %20 = OpTypeArray %7 %17 
					                                              %21 = OpTypeArray %7 %17 
					                                              %22 = OpTypeArray %7 %17 
					                                              %23 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %19 %7 %20 %21 %6 %22 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
					                                              %24 = OpTypePointer Uniform %23 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %25 = OpVariable Uniform 
					                                              %26 = OpTypeInt 32 1 
					                                          i32 %27 = OpConstant 16 
					                                              %28 = OpTypePointer Uniform %6 
					                                          i32 %31 = OpConstant 17 
					                               Private f32_4* %38 = OpVariable Private 
					                                          i32 %41 = OpConstant 6 
					                                          i32 %42 = OpConstant 1 
					                                              %43 = OpTypePointer Uniform %7 
					                                          i32 %47 = OpConstant 0 
					                                          i32 %55 = OpConstant 2 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %65 = OpConstant 3 
					                               Private f32_4* %80 = OpVariable Private 
					                                          i32 %83 = OpConstant 10 
					                                         u32 %101 = OpConstant 1 
					                                             %102 = OpTypeArray %6 %101 
					                                             %103 = OpTypeStruct %7 %6 %102 
					                                             %104 = OpTypePointer Output %103 
					        Output struct {f32_4; f32; f32[1];}* %105 = OpVariable Output 
					                                             %113 = OpTypePointer Output %7 
					                                             %115 = OpTypePointer Private %6 
					                                Private f32* %116 = OpVariable Private 
					                                Input f32_4* %117 = OpVariable Input 
					                                         u32 %118 = OpConstant 0 
					                                             %119 = OpTypePointer Input %6 
					                                         f32 %122 = OpConstant 3,674022E-40 
					                                         f32 %130 = OpConstant 3,674022E-40 
					                                         f32 %138 = OpConstant 3,674022E-40 
					                                       f32_2 %139 = OpConstantComposite %138 %138 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                                         i32 %146 = OpConstant 23 
					                                             %157 = OpTypePointer Output %12 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                         i32 %161 = OpConstant 24 
					                                Input f32_4* %170 = OpVariable Input 
					                                         i32 %173 = OpConstant 22 
					                                             %184 = OpTypeBool 
					                                             %185 = OpTypePointer Private %184 
					                               Private bool* %186 = OpVariable Private 
					                                         f32 %187 = OpConstant 3,674022E-40 
					                                         f32 %192 = OpConstant 3,674022E-40 
					                                Private f32* %194 = OpVariable Private 
					                                         i32 %195 = OpConstant 13 
					                                         i32 %199 = OpConstant 14 
					                                         f32 %210 = OpConstant 3,674022E-40 
					                                         i32 %212 = OpConstant 11 
					                                         i32 %217 = OpConstant 15 
					                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %223 = OpConstant 3,674022E-40 
					                                             %225 = OpTypePointer Output %6 
					                                         u32 %229 = OpConstant 3 
					                                         u32 %242 = OpConstant 2 
					                                         i32 %258 = OpConstant 9 
					                                         i32 %279 = OpConstant 19 
					                                         i32 %282 = OpConstant 20 
					                                         i32 %306 = OpConstant 18 
					                                         f32 %314 = OpConstant 3,674022E-40 
					                                         i32 %316 = OpConstant 21 
					                                             %331 = OpTypePointer Uniform %15 
					                                         i32 %335 = OpConstant 7 
					                                             %385 = OpTypePointer Input %15 
					                                Input f32_3* %386 = OpVariable Input 
					                                             %392 = OpTypePointer Private %26 
					                                Private i32* %393 = OpVariable Private 
					                                         u32 %397 = OpConstant 4294967295 
					                                Private i32* %400 = OpVariable Private 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_4* %498 = OpVariable Input 
					                                             %543 = OpTypePointer Private %15 
					                              Private f32_3* %544 = OpVariable Private 
					                                         i32 %560 = OpConstant 8 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %603 = OpVariable Output 
					                                Input f32_4* %604 = OpVariable Input 
					                                         i32 %608 = OpConstant 12 
					                                             %626 = OpTypePointer Output %15 
					                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
					                                Private f32* %637 = OpVariable Private 
					                              Private f32_4* %651 = OpVariable Private 
					                              Private f32_3* %656 = OpVariable Private 
					                                         i32 %667 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
					                                         i32 %674 = OpConstant 5 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %13 = OpLoad %11 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %29 = OpAccessChain %25 %27 
					                                          f32 %30 = OpLoad %29 
					                                 Uniform f32* %32 = OpAccessChain %25 %31 
					                                          f32 %33 = OpLoad %32 
					                                        f32_2 %34 = OpCompositeConstruct %30 %33 
					                                        f32_2 %35 = OpFAdd %14 %34 
					                                        f32_4 %36 = OpLoad %9 
					                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 2 3 
					                                                      OpStore %9 %37 
					                                        f32_4 %39 = OpLoad %9 
					                                        f32_4 %40 = OpVectorShuffle %39 %39 1 1 1 1 
					                               Uniform f32_4* %44 = OpAccessChain %25 %41 %42 
					                                        f32_4 %45 = OpLoad %44 
					                                        f32_4 %46 = OpFMul %40 %45 
					                                                      OpStore %38 %46 
					                               Uniform f32_4* %48 = OpAccessChain %25 %41 %47 
					                                        f32_4 %49 = OpLoad %48 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_4 %51 = OpVectorShuffle %50 %50 0 0 0 0 
					                                        f32_4 %52 = OpFMul %49 %51 
					                                        f32_4 %53 = OpLoad %38 
					                                        f32_4 %54 = OpFAdd %52 %53 
					                                                      OpStore %38 %54 
					                               Uniform f32_4* %56 = OpAccessChain %25 %41 %55 
					                                        f32_4 %57 = OpLoad %56 
					                                        f32_4 %58 = OpLoad %11 
					                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
					                                        f32_4 %60 = OpFMul %57 %59 
					                                        f32_4 %61 = OpLoad %38 
					                                        f32_4 %62 = OpFAdd %60 %61 
					                                                      OpStore %38 %62 
					                                        f32_4 %64 = OpLoad %38 
					                               Uniform f32_4* %66 = OpAccessChain %25 %41 %65 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_4 %68 = OpFAdd %64 %67 
					                                                      OpStore %63 %68 
					                               Uniform f32_4* %69 = OpAccessChain %25 %41 %65 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
					                                        f32_4 %72 = OpLoad %11 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
					                                        f32_3 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %38 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                        f32_3 %77 = OpFAdd %74 %76 
					                                        f32_4 %78 = OpLoad %38 
					                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
					                                                      OpStore %38 %79 
					                                        f32_4 %81 = OpLoad %63 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 1 1 1 1 
					                               Uniform f32_4* %84 = OpAccessChain %25 %83 %42 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpFMul %82 %85 
					                                                      OpStore %80 %86 
					                               Uniform f32_4* %87 = OpAccessChain %25 %83 %47 
					                                        f32_4 %88 = OpLoad %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpVectorShuffle %89 %89 0 0 0 0 
					                                        f32_4 %91 = OpFMul %88 %90 
					                                        f32_4 %92 = OpLoad %80 
					                                        f32_4 %93 = OpFAdd %91 %92 
					                                                      OpStore %80 %93 
					                               Uniform f32_4* %94 = OpAccessChain %25 %83 %55 
					                                        f32_4 %95 = OpLoad %94 
					                                        f32_4 %96 = OpLoad %63 
					                                        f32_4 %97 = OpVectorShuffle %96 %96 2 2 2 2 
					                                        f32_4 %98 = OpFMul %95 %97 
					                                        f32_4 %99 = OpLoad %80 
					                                       f32_4 %100 = OpFAdd %98 %99 
					                                                      OpStore %80 %100 
					                              Uniform f32_4* %106 = OpAccessChain %25 %83 %65 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_4 %108 = OpLoad %63 
					                                       f32_4 %109 = OpVectorShuffle %108 %108 3 3 3 3 
					                                       f32_4 %110 = OpFMul %107 %109 
					                                       f32_4 %111 = OpLoad %80 
					                                       f32_4 %112 = OpFAdd %110 %111 
					                               Output f32_4* %114 = OpAccessChain %105 %47 
					                                                      OpStore %114 %112 
					                                  Input f32* %120 = OpAccessChain %117 %118 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %123 = OpFMul %121 %122 
					                                                      OpStore %116 %123 
					                                         f32 %124 = OpLoad %116 
					                                         f32 %125 = OpExtInst %1 8 %124 
					                                Private f32* %126 = OpAccessChain %80 %118 
					                                                      OpStore %126 %125 
					                                Private f32* %127 = OpAccessChain %80 %118 
					                                         f32 %128 = OpLoad %127 
					                                         f32 %129 = OpFNegate %128 
					                                         f32 %131 = OpFMul %129 %130 
					                                  Input f32* %132 = OpAccessChain %117 %118 
					                                         f32 %133 = OpLoad %132 
					                                         f32 %134 = OpFAdd %131 %133 
					                                Private f32* %135 = OpAccessChain %80 %101 
					                                                      OpStore %135 %134 
					                                       f32_4 %136 = OpLoad %80 
					                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
					                                       f32_2 %140 = OpFMul %137 %139 
					                                       f32_4 %141 = OpLoad %80 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %80 %142 
					                                       f32_4 %144 = OpLoad %80 
					                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
					                              Uniform f32_4* %147 = OpAccessChain %25 %146 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
					                                       f32_2 %150 = OpFMul %145 %149 
					                              Uniform f32_4* %151 = OpAccessChain %25 %146 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
					                                       f32_2 %154 = OpFAdd %150 %153 
					                                       f32_4 %155 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %156 = OpVectorShuffle %155 %154 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %156 
					                                       f32_4 %159 = OpLoad %80 
					                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
					                              Uniform f32_4* %162 = OpAccessChain %25 %161 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
					                                       f32_2 %165 = OpFMul %160 %164 
					                              Uniform f32_4* %166 = OpAccessChain %25 %161 
					                                       f32_4 %167 = OpLoad %166 
					                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
					                                       f32_2 %169 = OpFAdd %165 %168 
					                                                      OpStore vs_TEXCOORD1 %169 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
					                              Uniform f32_4* %174 = OpAccessChain %25 %173 
					                                       f32_4 %175 = OpLoad %174 
					                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
					                                       f32_2 %177 = OpFMul %172 %176 
					                              Uniform f32_4* %178 = OpAccessChain %25 %173 
					                                       f32_4 %179 = OpLoad %178 
					                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
					                                       f32_2 %181 = OpFAdd %177 %180 
					                                       f32_4 %182 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %183 
					                                  Input f32* %188 = OpAccessChain %117 %101 
					                                         f32 %189 = OpLoad %188 
					                                        bool %190 = OpFOrdGreaterThanEqual %187 %189 
					                                                      OpStore %186 %190 
					                                        bool %191 = OpLoad %186 
					                                         f32 %193 = OpSelect %191 %192 %187 
					                                                      OpStore %116 %193 
					                                Uniform f32* %196 = OpAccessChain %25 %195 
					                                         f32 %197 = OpLoad %196 
					                                         f32 %198 = OpFNegate %197 
					                                Uniform f32* %200 = OpAccessChain %25 %199 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpFAdd %198 %201 
					                                                      OpStore %194 %202 
					                                         f32 %203 = OpLoad %116 
					                                         f32 %204 = OpLoad %194 
					                                         f32 %205 = OpFMul %203 %204 
					                                Uniform f32* %206 = OpAccessChain %25 %195 
					                                         f32 %207 = OpLoad %206 
					                                         f32 %208 = OpFAdd %205 %207 
					                                                      OpStore %116 %208 
					                                         f32 %209 = OpLoad %116 
					                                         f32 %211 = OpFMul %209 %210 
					                                Uniform f32* %213 = OpAccessChain %25 %212 
					                                         f32 %214 = OpLoad %213 
					                                         f32 %215 = OpFAdd %211 %214 
					                                                      OpStore %116 %215 
					                                         f32 %216 = OpLoad %116 
					                                Uniform f32* %218 = OpAccessChain %25 %217 
					                                         f32 %219 = OpLoad %218 
					                                         f32 %220 = OpFMul %216 %219 
					                                                      OpStore %116 %220 
					                                         f32 %222 = OpLoad %116 
					                                         f32 %224 = OpFMul %222 %223 
					                                 Output f32* %226 = OpAccessChain vs_TEXCOORD5 %118 
					                                                      OpStore %226 %224 
					                                Private f32* %227 = OpAccessChain %63 %101 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %230 = OpAccessChain %25 %83 %42 %229 
					                                         f32 %231 = OpLoad %230 
					                                         f32 %232 = OpFMul %228 %231 
					                                                      OpStore %116 %232 
					                                Uniform f32* %233 = OpAccessChain %25 %83 %47 %229 
					                                         f32 %234 = OpLoad %233 
					                                Private f32* %235 = OpAccessChain %63 %118 
					                                         f32 %236 = OpLoad %235 
					                                         f32 %237 = OpFMul %234 %236 
					                                         f32 %238 = OpLoad %116 
					                                         f32 %239 = OpFAdd %237 %238 
					                                                      OpStore %116 %239 
					                                Uniform f32* %240 = OpAccessChain %25 %83 %55 %229 
					                                         f32 %241 = OpLoad %240 
					                                Private f32* %243 = OpAccessChain %63 %242 
					                                         f32 %244 = OpLoad %243 
					                                         f32 %245 = OpFMul %241 %244 
					                                         f32 %246 = OpLoad %116 
					                                         f32 %247 = OpFAdd %245 %246 
					                                                      OpStore %116 %247 
					                                Uniform f32* %248 = OpAccessChain %25 %83 %65 %229 
					                                         f32 %249 = OpLoad %248 
					                                Private f32* %250 = OpAccessChain %63 %229 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpFMul %249 %251 
					                                         f32 %253 = OpLoad %116 
					                                         f32 %254 = OpFAdd %252 %253 
					                                                      OpStore %116 %254 
					                              Uniform f32_4* %255 = OpAccessChain %25 %42 
					                                       f32_4 %256 = OpLoad %255 
					                                       f32_2 %257 = OpVectorShuffle %256 %256 1 1 
					                              Uniform f32_4* %259 = OpAccessChain %25 %258 %42 
					                                       f32_4 %260 = OpLoad %259 
					                                       f32_2 %261 = OpVectorShuffle %260 %260 0 1 
					                                       f32_2 %262 = OpFMul %257 %261 
					                                       f32_4 %263 = OpLoad %63 
					                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 2 3 
					                                                      OpStore %63 %264 
					                              Uniform f32_4* %265 = OpAccessChain %25 %258 %47 
					                                       f32_4 %266 = OpLoad %265 
					                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
					                              Uniform f32_4* %268 = OpAccessChain %25 %42 
					                                       f32_4 %269 = OpLoad %268 
					                                       f32_2 %270 = OpVectorShuffle %269 %269 0 0 
					                                       f32_2 %271 = OpFMul %267 %270 
					                                       f32_4 %272 = OpLoad %63 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFAdd %271 %273 
					                                       f32_4 %275 = OpLoad %63 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %63 %276 
					                                       f32_4 %277 = OpLoad %63 
					                                       f32_2 %278 = OpVectorShuffle %277 %277 0 1 
					                                Uniform f32* %280 = OpAccessChain %25 %279 
					                                         f32 %281 = OpLoad %280 
					                                Uniform f32* %283 = OpAccessChain %25 %282 
					                                         f32 %284 = OpLoad %283 
					                                       f32_2 %285 = OpCompositeConstruct %281 %284 
					                                       f32_2 %286 = OpFMul %278 %285 
					                                       f32_4 %287 = OpLoad %63 
					                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 2 3 
					                                                      OpStore %63 %288 
					                                         f32 %289 = OpLoad %116 
					                                       f32_2 %290 = OpCompositeConstruct %289 %289 
					                                       f32_4 %291 = OpLoad %63 
					                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
					                                       f32_2 %293 = OpFDiv %290 %292 
					                                       f32_4 %294 = OpLoad %63 
					                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 2 3 
					                                                      OpStore %63 %295 
					                                       f32_4 %296 = OpLoad %63 
					                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
					                                       f32_4 %298 = OpLoad %63 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                         f32 %300 = OpDot %297 %299 
					                                                      OpStore %116 %300 
					                                         f32 %301 = OpLoad %116 
					                                         f32 %302 = OpExtInst %1 32 %301 
					                                                      OpStore %116 %302 
					                                  Input f32* %303 = OpAccessChain %117 %101 
					                                         f32 %304 = OpLoad %303 
					                                         f32 %305 = OpExtInst %1 4 %304 
					                                Uniform f32* %307 = OpAccessChain %25 %306 
					                                         f32 %308 = OpLoad %307 
					                                         f32 %309 = OpFMul %305 %308 
					                                                      OpStore %194 %309 
					                                         f32 %310 = OpLoad %116 
					                                         f32 %311 = OpLoad %194 
					                                         f32 %312 = OpFMul %310 %311 
					                                                      OpStore %116 %312 
					                                         f32 %313 = OpLoad %116 
					                                         f32 %315 = OpFMul %313 %314 
					                                                      OpStore %194 %315 
					                                Uniform f32* %317 = OpAccessChain %25 %316 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFNegate %318 
					                                         f32 %320 = OpFAdd %319 %192 
					                                Private f32* %321 = OpAccessChain %63 %118 
					                                                      OpStore %321 %320 
					                                         f32 %322 = OpLoad %194 
					                                Private f32* %323 = OpAccessChain %63 %118 
					                                         f32 %324 = OpLoad %323 
					                                         f32 %325 = OpFMul %322 %324 
					                                                      OpStore %194 %325 
					                                         f32 %326 = OpLoad %116 
					                                         f32 %327 = OpFMul %326 %314 
					                                         f32 %328 = OpLoad %194 
					                                         f32 %329 = OpFNegate %328 
					                                         f32 %330 = OpFAdd %327 %329 
					                                                      OpStore %116 %330 
					                              Uniform f32_3* %332 = OpAccessChain %25 %47 
					                                       f32_3 %333 = OpLoad %332 
					                                       f32_3 %334 = OpVectorShuffle %333 %333 1 1 1 
					                              Uniform f32_4* %336 = OpAccessChain %25 %335 %42 
					                                       f32_4 %337 = OpLoad %336 
					                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
					                                       f32_3 %339 = OpFMul %334 %338 
					                                       f32_4 %340 = OpLoad %63 
					                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
					                                                      OpStore %63 %341 
					                              Uniform f32_4* %342 = OpAccessChain %25 %335 %47 
					                                       f32_4 %343 = OpLoad %342 
					                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
					                              Uniform f32_3* %345 = OpAccessChain %25 %47 
					                                       f32_3 %346 = OpLoad %345 
					                                       f32_3 %347 = OpVectorShuffle %346 %346 0 0 0 
					                                       f32_3 %348 = OpFMul %344 %347 
					                                       f32_4 %349 = OpLoad %63 
					                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
					                                       f32_3 %351 = OpFAdd %348 %350 
					                                       f32_4 %352 = OpLoad %63 
					                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
					                                                      OpStore %63 %353 
					                              Uniform f32_4* %354 = OpAccessChain %25 %335 %55 
					                                       f32_4 %355 = OpLoad %354 
					                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
					                              Uniform f32_3* %357 = OpAccessChain %25 %47 
					                                       f32_3 %358 = OpLoad %357 
					                                       f32_3 %359 = OpVectorShuffle %358 %358 2 2 2 
					                                       f32_3 %360 = OpFMul %356 %359 
					                                       f32_4 %361 = OpLoad %63 
					                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
					                                       f32_3 %363 = OpFAdd %360 %362 
					                                       f32_4 %364 = OpLoad %63 
					                                       f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
					                                                      OpStore %63 %365 
					                                       f32_4 %366 = OpLoad %63 
					                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
					                              Uniform f32_4* %368 = OpAccessChain %25 %335 %65 
					                                       f32_4 %369 = OpLoad %368 
					                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %63 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %63 %373 
					                                  Input f32* %374 = OpAccessChain %11 %242 
					                                         f32 %375 = OpLoad %374 
					                                Private f32* %376 = OpAccessChain %9 %242 
					                                                      OpStore %376 %375 
					                                       f32_4 %377 = OpLoad %9 
					                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
					                                       f32_3 %379 = OpFNegate %378 
					                                       f32_4 %380 = OpLoad %63 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
					                                       f32_3 %382 = OpFAdd %379 %381 
					                                       f32_4 %383 = OpLoad %9 
					                                       f32_4 %384 = OpVectorShuffle %383 %382 4 5 6 3 
					                                                      OpStore %9 %384 
					                                       f32_3 %387 = OpLoad %386 
					                                       f32_4 %388 = OpLoad %9 
					                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
					                                         f32 %390 = OpDot %387 %389 
					                                Private f32* %391 = OpAccessChain %9 %118 
					                                                      OpStore %391 %390 
					                                Private f32* %394 = OpAccessChain %9 %118 
					                                         f32 %395 = OpLoad %394 
					                                        bool %396 = OpFOrdLessThan %187 %395 
					                                         u32 %398 = OpSelect %396 %397 %118 
					                                         i32 %399 = OpBitcast %398 
					                                                      OpStore %393 %399 
					                                Private f32* %401 = OpAccessChain %9 %118 
					                                         f32 %402 = OpLoad %401 
					                                        bool %403 = OpFOrdLessThan %402 %187 
					                                         u32 %404 = OpSelect %403 %397 %118 
					                                         i32 %405 = OpBitcast %404 
					                                                      OpStore %400 %405 
					                                         i32 %406 = OpLoad %393 
					                                         i32 %407 = OpSNegate %406 
					                                         i32 %408 = OpLoad %400 
					                                         i32 %409 = OpIAdd %407 %408 
					                                                      OpStore %400 %409 
					                                         i32 %410 = OpLoad %400 
					                                         f32 %411 = OpConvertSToF %410 
					                                Private f32* %412 = OpAccessChain %9 %118 
					                                                      OpStore %412 %411 
					                                       f32_4 %413 = OpLoad %9 
					                                       f32_3 %414 = OpVectorShuffle %413 %413 0 0 0 
					                                       f32_3 %415 = OpLoad %386 
					                                       f32_3 %416 = OpFMul %414 %415 
					                                       f32_4 %417 = OpLoad %9 
					                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
					                                                      OpStore %9 %418 
					                                       f32_4 %419 = OpLoad %9 
					                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
					                              Uniform f32_4* %421 = OpAccessChain %25 %335 %47 
					                                       f32_4 %422 = OpLoad %421 
					                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
					                                         f32 %424 = OpDot %420 %423 
					                                Private f32* %425 = OpAccessChain %63 %118 
					                                                      OpStore %425 %424 
					                                       f32_4 %426 = OpLoad %9 
					                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
					                              Uniform f32_4* %428 = OpAccessChain %25 %335 %42 
					                                       f32_4 %429 = OpLoad %428 
					                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
					                                         f32 %431 = OpDot %427 %430 
					                                Private f32* %432 = OpAccessChain %63 %101 
					                                                      OpStore %432 %431 
					                                       f32_4 %433 = OpLoad %9 
					                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
					                              Uniform f32_4* %435 = OpAccessChain %25 %335 %55 
					                                       f32_4 %436 = OpLoad %435 
					                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
					                                         f32 %438 = OpDot %434 %437 
					                                Private f32* %439 = OpAccessChain %63 %242 
					                                                      OpStore %439 %438 
					                                       f32_4 %440 = OpLoad %63 
					                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
					                                       f32_4 %442 = OpLoad %63 
					                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
					                                         f32 %444 = OpDot %441 %443 
					                                Private f32* %445 = OpAccessChain %9 %118 
					                                                      OpStore %445 %444 
					                                Private f32* %446 = OpAccessChain %9 %118 
					                                         f32 %447 = OpLoad %446 
					                                         f32 %448 = OpExtInst %1 32 %447 
					                                Private f32* %449 = OpAccessChain %9 %118 
					                                                      OpStore %449 %448 
					                                       f32_4 %450 = OpLoad %9 
					                                       f32_4 %451 = OpVectorShuffle %450 %450 0 0 0 0 
					                                       f32_4 %452 = OpLoad %63 
					                                       f32_4 %453 = OpVectorShuffle %452 %452 0 1 2 2 
					                                       f32_4 %454 = OpFMul %451 %453 
					                                                      OpStore %63 %454 
					                                       f32_4 %455 = OpLoad %38 
					                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
					                                       f32_3 %457 = OpFNegate %456 
					                              Uniform f32_3* %458 = OpAccessChain %25 %47 
					                                       f32_3 %459 = OpLoad %458 
					                                       f32_3 %460 = OpFAdd %457 %459 
					                                       f32_4 %461 = OpLoad %9 
					                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 6 3 
					                                                      OpStore %9 %462 
					                                       f32_4 %463 = OpLoad %9 
					                                       f32_3 %464 = OpVectorShuffle %463 %463 0 1 2 
					                                       f32_4 %465 = OpLoad %9 
					                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 2 
					                                         f32 %467 = OpDot %464 %466 
					                                Private f32* %468 = OpAccessChain %80 %118 
					                                                      OpStore %468 %467 
					                                Private f32* %469 = OpAccessChain %80 %118 
					                                         f32 %470 = OpLoad %469 
					                                         f32 %471 = OpExtInst %1 32 %470 
					                                Private f32* %472 = OpAccessChain %80 %118 
					                                                      OpStore %472 %471 
					                                       f32_4 %473 = OpLoad %9 
					                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
					                                       f32_4 %475 = OpLoad %80 
					                                       f32_3 %476 = OpVectorShuffle %475 %475 0 0 0 
					                                       f32_3 %477 = OpFMul %474 %476 
					                                       f32_4 %478 = OpLoad %80 
					                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 6 3 
					                                                      OpStore %80 %479 
					                                       f32_4 %480 = OpLoad %63 
					                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 3 
					                                       f32_4 %482 = OpLoad %80 
					                                       f32_3 %483 = OpVectorShuffle %482 %482 0 1 2 
					                                         f32 %484 = OpDot %481 %483 
					                                Private f32* %485 = OpAccessChain %80 %118 
					                                                      OpStore %485 %484 
					                                Private f32* %486 = OpAccessChain %80 %118 
					                                         f32 %487 = OpLoad %486 
					                                         f32 %488 = OpExtInst %1 4 %487 
					                                         f32 %489 = OpLoad %116 
					                                         f32 %490 = OpFMul %488 %489 
					                                         f32 %491 = OpLoad %194 
					                                         f32 %492 = OpFAdd %490 %491 
					                                 Output f32* %493 = OpAccessChain vs_TEXCOORD5 %101 
					                                                      OpStore %493 %492 
					                                Private f32* %495 = OpAccessChain %38 %118 
					                                         f32 %496 = OpLoad %495 
					                                 Output f32* %497 = OpAccessChain vs_TEXCOORD2 %229 
					                                                      OpStore %497 %496 
					                                       f32_4 %499 = OpLoad %498 
					                                       f32_3 %500 = OpVectorShuffle %499 %499 1 1 1 
					                              Uniform f32_4* %501 = OpAccessChain %25 %41 %42 
					                                       f32_4 %502 = OpLoad %501 
					                                       f32_3 %503 = OpVectorShuffle %502 %502 1 2 0 
					                                       f32_3 %504 = OpFMul %500 %503 
					                                       f32_4 %505 = OpLoad %80 
					                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 6 3 
					                                                      OpStore %80 %506 
					                              Uniform f32_4* %507 = OpAccessChain %25 %41 %47 
					                                       f32_4 %508 = OpLoad %507 
					                                       f32_3 %509 = OpVectorShuffle %508 %508 1 2 0 
					                                       f32_4 %510 = OpLoad %498 
					                                       f32_3 %511 = OpVectorShuffle %510 %510 0 0 0 
					                                       f32_3 %512 = OpFMul %509 %511 
					                                       f32_4 %513 = OpLoad %80 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
					                                       f32_3 %515 = OpFAdd %512 %514 
					                                       f32_4 %516 = OpLoad %80 
					                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
					                                                      OpStore %80 %517 
					                              Uniform f32_4* %518 = OpAccessChain %25 %41 %55 
					                                       f32_4 %519 = OpLoad %518 
					                                       f32_3 %520 = OpVectorShuffle %519 %519 1 2 0 
					                                       f32_4 %521 = OpLoad %498 
					                                       f32_3 %522 = OpVectorShuffle %521 %521 2 2 2 
					                                       f32_3 %523 = OpFMul %520 %522 
					                                       f32_4 %524 = OpLoad %80 
					                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
					                                       f32_3 %526 = OpFAdd %523 %525 
					                                       f32_4 %527 = OpLoad %80 
					                                       f32_4 %528 = OpVectorShuffle %527 %526 4 5 6 3 
					                                                      OpStore %80 %528 
					                                       f32_4 %529 = OpLoad %80 
					                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
					                                       f32_4 %531 = OpLoad %80 
					                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
					                                         f32 %533 = OpDot %530 %532 
					                                                      OpStore %116 %533 
					                                         f32 %534 = OpLoad %116 
					                                         f32 %535 = OpExtInst %1 32 %534 
					                                                      OpStore %116 %535 
					                                         f32 %536 = OpLoad %116 
					                                       f32_3 %537 = OpCompositeConstruct %536 %536 %536 
					                                       f32_4 %538 = OpLoad %80 
					                                       f32_3 %539 = OpVectorShuffle %538 %538 0 1 2 
					                                       f32_3 %540 = OpFMul %537 %539 
					                                       f32_4 %541 = OpLoad %80 
					                                       f32_4 %542 = OpVectorShuffle %541 %540 4 5 6 3 
					                                                      OpStore %80 %542 
					                                       f32_4 %545 = OpLoad %63 
					                                       f32_3 %546 = OpVectorShuffle %545 %545 3 0 1 
					                                       f32_4 %547 = OpLoad %80 
					                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
					                                       f32_3 %549 = OpFMul %546 %548 
					                                                      OpStore %544 %549 
					                                       f32_4 %550 = OpLoad %63 
					                                       f32_3 %551 = OpVectorShuffle %550 %550 1 3 0 
					                                       f32_4 %552 = OpLoad %80 
					                                       f32_3 %553 = OpVectorShuffle %552 %552 1 2 0 
					                                       f32_3 %554 = OpFMul %551 %553 
					                                       f32_3 %555 = OpLoad %544 
					                                       f32_3 %556 = OpFNegate %555 
					                                       f32_3 %557 = OpFAdd %554 %556 
					                                                      OpStore %544 %557 
					                                  Input f32* %558 = OpAccessChain %498 %229 
					                                         f32 %559 = OpLoad %558 
					                                Uniform f32* %561 = OpAccessChain %25 %560 %229 
					                                         f32 %562 = OpLoad %561 
					                                         f32 %563 = OpFMul %559 %562 
					                                                      OpStore %116 %563 
					                                         f32 %564 = OpLoad %116 
					                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
					                                       f32_3 %566 = OpLoad %544 
					                                       f32_3 %567 = OpFMul %565 %566 
					                                                      OpStore %544 %567 
					                                Private f32* %568 = OpAccessChain %544 %118 
					                                         f32 %569 = OpLoad %568 
					                                 Output f32* %570 = OpAccessChain vs_TEXCOORD2 %101 
					                                                      OpStore %570 %569 
					                                Private f32* %571 = OpAccessChain %63 %118 
					                                         f32 %572 = OpLoad %571 
					                                 Output f32* %573 = OpAccessChain vs_TEXCOORD2 %242 
					                                                      OpStore %573 %572 
					                                Private f32* %574 = OpAccessChain %80 %242 
					                                         f32 %575 = OpLoad %574 
					                                 Output f32* %576 = OpAccessChain vs_TEXCOORD2 %118 
					                                                      OpStore %576 %575 
					                                Private f32* %578 = OpAccessChain %80 %118 
					                                         f32 %579 = OpLoad %578 
					                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %118 
					                                                      OpStore %580 %579 
					                                Private f32* %582 = OpAccessChain %80 %101 
					                                         f32 %583 = OpLoad %582 
					                                 Output f32* %584 = OpAccessChain vs_TEXCOORD4 %118 
					                                                      OpStore %584 %583 
					                                Private f32* %585 = OpAccessChain %38 %101 
					                                         f32 %586 = OpLoad %585 
					                                 Output f32* %587 = OpAccessChain vs_TEXCOORD3 %229 
					                                                      OpStore %587 %586 
					                                Private f32* %588 = OpAccessChain %38 %242 
					                                         f32 %589 = OpLoad %588 
					                                 Output f32* %590 = OpAccessChain vs_TEXCOORD4 %229 
					                                                      OpStore %590 %589 
					                                Private f32* %591 = OpAccessChain %63 %101 
					                                         f32 %592 = OpLoad %591 
					                                 Output f32* %593 = OpAccessChain vs_TEXCOORD3 %242 
					                                                      OpStore %593 %592 
					                                Private f32* %594 = OpAccessChain %544 %101 
					                                         f32 %595 = OpLoad %594 
					                                 Output f32* %596 = OpAccessChain vs_TEXCOORD3 %101 
					                                                      OpStore %596 %595 
					                                Private f32* %597 = OpAccessChain %544 %242 
					                                         f32 %598 = OpLoad %597 
					                                 Output f32* %599 = OpAccessChain vs_TEXCOORD4 %101 
					                                                      OpStore %599 %598 
					                                Private f32* %600 = OpAccessChain %63 %229 
					                                         f32 %601 = OpLoad %600 
					                                 Output f32* %602 = OpAccessChain vs_TEXCOORD4 %242 
					                                                      OpStore %602 %601 
					                                       f32_4 %605 = OpLoad %604 
					                                                      OpStore %603 %605 
					                                       f32_4 %606 = OpLoad %9 
					                                       f32_3 %607 = OpVectorShuffle %606 %606 1 1 1 
					                              Uniform f32_4* %609 = OpAccessChain %25 %608 %42 
					                                       f32_4 %610 = OpLoad %609 
					                                       f32_3 %611 = OpVectorShuffle %610 %610 0 1 2 
					                                       f32_3 %612 = OpFMul %607 %611 
					                                       f32_4 %613 = OpLoad %38 
					                                       f32_4 %614 = OpVectorShuffle %613 %612 4 5 6 3 
					                                                      OpStore %38 %614 
					                              Uniform f32_4* %615 = OpAccessChain %25 %608 %47 
					                                       f32_4 %616 = OpLoad %615 
					                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
					                                       f32_4 %618 = OpLoad %9 
					                                       f32_3 %619 = OpVectorShuffle %618 %618 0 0 0 
					                                       f32_3 %620 = OpFMul %617 %619 
					                                       f32_4 %621 = OpLoad %38 
					                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
					                                       f32_3 %623 = OpFAdd %620 %622 
					                                       f32_4 %624 = OpLoad %9 
					                                       f32_4 %625 = OpVectorShuffle %624 %623 4 5 2 6 
					                                                      OpStore %9 %625 
					                              Uniform f32_4* %628 = OpAccessChain %25 %608 %55 
					                                       f32_4 %629 = OpLoad %628 
					                                       f32_3 %630 = OpVectorShuffle %629 %629 0 1 2 
					                                       f32_4 %631 = OpLoad %9 
					                                       f32_3 %632 = OpVectorShuffle %631 %631 2 2 2 
					                                       f32_3 %633 = OpFMul %630 %632 
					                                       f32_4 %634 = OpLoad %9 
					                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 3 
					                                       f32_3 %636 = OpFAdd %633 %635 
					                                                      OpStore vs_TEXCOORD6 %636 
					                                Private f32* %638 = OpAccessChain %63 %101 
					                                         f32 %639 = OpLoad %638 
					                                Private f32* %640 = OpAccessChain %63 %101 
					                                         f32 %641 = OpLoad %640 
					                                         f32 %642 = OpFMul %639 %641 
					                                                      OpStore %637 %642 
					                                Private f32* %643 = OpAccessChain %63 %118 
					                                         f32 %644 = OpLoad %643 
					                                Private f32* %645 = OpAccessChain %63 %118 
					                                         f32 %646 = OpLoad %645 
					                                         f32 %647 = OpFMul %644 %646 
					                                         f32 %648 = OpLoad %637 
					                                         f32 %649 = OpFNegate %648 
					                                         f32 %650 = OpFAdd %647 %649 
					                                                      OpStore %637 %650 
					                                       f32_4 %652 = OpLoad %63 
					                                       f32_4 %653 = OpVectorShuffle %652 %652 1 3 2 0 
					                                       f32_4 %654 = OpLoad %63 
					                                       f32_4 %655 = OpFMul %653 %654 
					                                                      OpStore %651 %655 
					                              Uniform f32_4* %657 = OpAccessChain %25 %55 
					                                       f32_4 %658 = OpLoad %657 
					                                       f32_4 %659 = OpLoad %651 
					                                         f32 %660 = OpDot %658 %659 
					                                Private f32* %661 = OpAccessChain %656 %118 
					                                                      OpStore %661 %660 
					                              Uniform f32_4* %662 = OpAccessChain %25 %65 
					                                       f32_4 %663 = OpLoad %662 
					                                       f32_4 %664 = OpLoad %651 
					                                         f32 %665 = OpDot %663 %664 
					                                Private f32* %666 = OpAccessChain %656 %101 
					                                                      OpStore %666 %665 
					                              Uniform f32_4* %668 = OpAccessChain %25 %667 
					                                       f32_4 %669 = OpLoad %668 
					                                       f32_4 %670 = OpLoad %651 
					                                         f32 %671 = OpDot %669 %670 
					                                Private f32* %672 = OpAccessChain %656 %242 
					                                                      OpStore %672 %671 
					                              Uniform f32_4* %675 = OpAccessChain %25 %674 
					                                       f32_4 %676 = OpLoad %675 
					                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 2 
					                                         f32 %678 = OpLoad %637 
					                                       f32_3 %679 = OpCompositeConstruct %678 %678 %678 
					                                       f32_3 %680 = OpFMul %677 %679 
					                                       f32_3 %681 = OpLoad %656 
					                                       f32_3 %682 = OpFAdd %680 %681 
					                                                      OpStore vs_TEXCOORD7 %682 
					                                 Output f32* %683 = OpAccessChain %105 %47 %101 
					                                         f32 %684 = OpLoad %683 
					                                         f32 %685 = OpFNegate %684 
					                                 Output f32* %686 = OpAccessChain %105 %47 %101 
					                                                      OpStore %686 %685 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 981
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %20 %25 %80 %108 %445 %465 %867 %929 %966 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate vs_TEXCOORD2 Location 11 
					                                                      OpDecorate vs_TEXCOORD3 Location 20 
					                                                      OpDecorate vs_TEXCOORD4 Location 25 
					                                                      OpDecorate %35 ArrayStride 35 
					                                                      OpMemberDecorate %36 0 Offset 36 
					                                                      OpMemberDecorate %36 1 Offset 36 
					                                                      OpMemberDecorate %36 2 RelaxedPrecision 
					                                                      OpMemberDecorate %36 2 Offset 36 
					                                                      OpMemberDecorate %36 3 RelaxedPrecision 
					                                                      OpMemberDecorate %36 3 Offset 36 
					                                                      OpMemberDecorate %36 4 RelaxedPrecision 
					                                                      OpMemberDecorate %36 4 Offset 36 
					                                                      OpMemberDecorate %36 5 RelaxedPrecision 
					                                                      OpMemberDecorate %36 5 Offset 36 
					                                                      OpMemberDecorate %36 6 Offset 36 
					                                                      OpMemberDecorate %36 7 RelaxedPrecision 
					                                                      OpMemberDecorate %36 7 Offset 36 
					                                                      OpMemberDecorate %36 8 RelaxedPrecision 
					                                                      OpMemberDecorate %36 8 Offset 36 
					                                                      OpMemberDecorate %36 9 Offset 36 
					                                                      OpMemberDecorate %36 10 Offset 36 
					                                                      OpMemberDecorate %36 11 RelaxedPrecision 
					                                                      OpMemberDecorate %36 11 Offset 36 
					                                                      OpMemberDecorate %36 12 Offset 36 
					                                                      OpMemberDecorate %36 13 Offset 36 
					                                                      OpMemberDecorate %36 14 Offset 36 
					                                                      OpMemberDecorate %36 15 RelaxedPrecision 
					                                                      OpMemberDecorate %36 15 Offset 36 
					                                                      OpMemberDecorate %36 16 Offset 36 
					                                                      OpMemberDecorate %36 17 Offset 36 
					                                                      OpMemberDecorate %36 18 Offset 36 
					                                                      OpMemberDecorate %36 19 Offset 36 
					                                                      OpMemberDecorate %36 20 Offset 36 
					                                                      OpMemberDecorate %36 21 Offset 36 
					                                                      OpMemberDecorate %36 22 Offset 36 
					                                                      OpMemberDecorate %36 23 Offset 36 
					                                                      OpMemberDecorate %36 24 RelaxedPrecision 
					                                                      OpMemberDecorate %36 24 Offset 36 
					                                                      OpMemberDecorate %36 25 RelaxedPrecision 
					                                                      OpMemberDecorate %36 25 Offset 36 
					                                                      OpMemberDecorate %36 26 Offset 36 
					                                                      OpMemberDecorate %36 27 Offset 36 
					                                                      OpMemberDecorate %36 28 Offset 36 
					                                                      OpMemberDecorate %36 29 Offset 36 
					                                                      OpMemberDecorate %36 30 Offset 36 
					                                                      OpMemberDecorate %36 31 RelaxedPrecision 
					                                                      OpMemberDecorate %36 31 Offset 36 
					                                                      OpMemberDecorate %36 32 RelaxedPrecision 
					                                                      OpMemberDecorate %36 32 Offset 36 
					                                                      OpDecorate %36 Block 
					                                                      OpDecorate %38 DescriptorSet 38 
					                                                      OpDecorate %38 Binding 38 
					                                                      OpDecorate %56 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %73 RelaxedPrecision 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %75 RelaxedPrecision 
					                                                      OpDecorate %76 RelaxedPrecision 
					                                                      OpDecorate %77 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD5 Location 80 
					                                                      OpDecorate vs_TEXCOORD0 Location 108 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %120 DescriptorSet 120 
					                                                      OpDecorate %120 Binding 120 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %124 DescriptorSet 124 
					                                                      OpDecorate %124 Binding 124 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate %387 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %389 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %426 RelaxedPrecision 
					                                                      OpDecorate %427 RelaxedPrecision 
					                                                      OpDecorate %429 RelaxedPrecision 
					                                                      OpDecorate %431 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 445 
					                                                      OpDecorate %448 RelaxedPrecision 
					                                                      OpDecorate %449 RelaxedPrecision 
					                                                      OpDecorate %449 DescriptorSet 449 
					                                                      OpDecorate %449 Binding 449 
					                                                      OpDecorate %450 RelaxedPrecision 
					                                                      OpDecorate %451 RelaxedPrecision 
					                                                      OpDecorate %451 DescriptorSet 451 
					                                                      OpDecorate %451 Binding 451 
					                                                      OpDecorate %452 RelaxedPrecision 
					                                                      OpDecorate %456 RelaxedPrecision 
					                                                      OpDecorate %457 RelaxedPrecision 
					                                                      OpDecorate %458 RelaxedPrecision 
					                                                      OpDecorate %461 RelaxedPrecision 
					                                                      OpDecorate %462 RelaxedPrecision 
					                                                      OpDecorate %463 RelaxedPrecision 
					                                                      OpDecorate %464 RelaxedPrecision 
					                                                      OpDecorate %465 RelaxedPrecision 
					                                                      OpDecorate %465 Location 465 
					                                                      OpDecorate %467 RelaxedPrecision 
					                                                      OpDecorate %469 RelaxedPrecision 
					                                                      OpDecorate %470 RelaxedPrecision 
					                                                      OpDecorate %472 RelaxedPrecision 
					                                                      OpDecorate %474 RelaxedPrecision 
					                                                      OpDecorate %476 RelaxedPrecision 
					                                                      OpDecorate %477 RelaxedPrecision 
					                                                      OpDecorate %494 RelaxedPrecision 
					                                                      OpDecorate %495 RelaxedPrecision 
					                                                      OpDecorate %495 DescriptorSet 495 
					                                                      OpDecorate %495 Binding 495 
					                                                      OpDecorate %496 RelaxedPrecision 
					                                                      OpDecorate %497 RelaxedPrecision 
					                                                      OpDecorate %497 DescriptorSet 497 
					                                                      OpDecorate %497 Binding 497 
					                                                      OpDecorate %498 RelaxedPrecision 
					                                                      OpDecorate %503 RelaxedPrecision 
					                                                      OpDecorate %506 RelaxedPrecision 
					                                                      OpDecorate %507 RelaxedPrecision 
					                                                      OpDecorate %508 RelaxedPrecision 
					                                                      OpDecorate %509 RelaxedPrecision 
					                                                      OpDecorate %510 RelaxedPrecision 
					                                                      OpDecorate %511 RelaxedPrecision 
					                                                      OpDecorate %512 RelaxedPrecision 
					                                                      OpDecorate %513 RelaxedPrecision 
					                                                      OpDecorate %514 RelaxedPrecision 
					                                                      OpDecorate %515 RelaxedPrecision 
					                                                      OpDecorate %516 RelaxedPrecision 
					                                                      OpDecorate %517 RelaxedPrecision 
					                                                      OpDecorate %520 RelaxedPrecision 
					                                                      OpDecorate %521 RelaxedPrecision 
					                                                      OpDecorate %522 RelaxedPrecision 
					                                                      OpDecorate %523 RelaxedPrecision 
					                                                      OpDecorate %524 RelaxedPrecision 
					                                                      OpDecorate %525 RelaxedPrecision 
					                                                      OpDecorate %526 RelaxedPrecision 
					                                                      OpDecorate %527 RelaxedPrecision 
					                                                      OpDecorate %531 RelaxedPrecision 
					                                                      OpDecorate %533 RelaxedPrecision 
					                                                      OpDecorate %534 RelaxedPrecision 
					                                                      OpDecorate %536 RelaxedPrecision 
					                                                      OpDecorate %537 RelaxedPrecision 
					                                                      OpDecorate %538 RelaxedPrecision 
					                                                      OpDecorate %540 RelaxedPrecision 
					                                                      OpDecorate %541 RelaxedPrecision 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate %543 RelaxedPrecision 
					                                                      OpDecorate %544 RelaxedPrecision 
					                                                      OpDecorate %546 RelaxedPrecision 
					                                                      OpDecorate %548 RelaxedPrecision 
					                                                      OpDecorate %549 RelaxedPrecision 
					                                                      OpDecorate %551 RelaxedPrecision 
					                                                      OpDecorate %552 RelaxedPrecision 
					                                                      OpDecorate %554 RelaxedPrecision 
					                                                      OpDecorate %555 RelaxedPrecision 
					                                                      OpDecorate %556 RelaxedPrecision 
					                                                      OpDecorate %557 RelaxedPrecision 
					                                                      OpDecorate %558 RelaxedPrecision 
					                                                      OpDecorate %559 RelaxedPrecision 
					                                                      OpDecorate %560 RelaxedPrecision 
					                                                      OpDecorate %561 RelaxedPrecision 
					                                                      OpDecorate %600 RelaxedPrecision 
					                                                      OpDecorate %602 RelaxedPrecision 
					                                                      OpDecorate %604 RelaxedPrecision 
					                                                      OpDecorate %605 RelaxedPrecision 
					                                                      OpDecorate %606 RelaxedPrecision 
					                                                      OpDecorate %607 RelaxedPrecision 
					                                                      OpDecorate %608 RelaxedPrecision 
					                                                      OpDecorate %609 RelaxedPrecision 
					                                                      OpDecorate %610 RelaxedPrecision 
					                                                      OpDecorate %611 RelaxedPrecision 
					                                                      OpDecorate %612 RelaxedPrecision 
					                                                      OpDecorate %613 RelaxedPrecision 
					                                                      OpDecorate %614 RelaxedPrecision 
					                                                      OpDecorate %615 RelaxedPrecision 
					                                                      OpDecorate %634 RelaxedPrecision 
					                                                      OpDecorate %635 RelaxedPrecision 
					                                                      OpDecorate %635 DescriptorSet 635 
					                                                      OpDecorate %635 Binding 635 
					                                                      OpDecorate %636 RelaxedPrecision 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %637 DescriptorSet 637 
					                                                      OpDecorate %637 Binding 637 
					                                                      OpDecorate %638 RelaxedPrecision 
					                                                      OpDecorate %643 RelaxedPrecision 
					                                                      OpDecorate %644 RelaxedPrecision 
					                                                      OpDecorate %645 RelaxedPrecision 
					                                                      OpDecorate %646 RelaxedPrecision 
					                                                      OpDecorate %647 RelaxedPrecision 
					                                                      OpDecorate %648 RelaxedPrecision 
					                                                      OpDecorate %651 RelaxedPrecision 
					                                                      OpDecorate %653 RelaxedPrecision 
					                                                      OpDecorate %654 RelaxedPrecision 
					                                                      OpDecorate %656 RelaxedPrecision 
					                                                      OpDecorate %657 RelaxedPrecision 
					                                                      OpDecorate %659 RelaxedPrecision 
					                                                      OpDecorate %662 RelaxedPrecision 
					                                                      OpDecorate %663 RelaxedPrecision 
					                                                      OpDecorate %664 RelaxedPrecision 
					                                                      OpDecorate %665 RelaxedPrecision 
					                                                      OpDecorate %666 RelaxedPrecision 
					                                                      OpDecorate %667 RelaxedPrecision 
					                                                      OpDecorate %668 RelaxedPrecision 
					                                                      OpDecorate %669 RelaxedPrecision 
					                                                      OpDecorate %670 RelaxedPrecision 
					                                                      OpDecorate %671 RelaxedPrecision 
					                                                      OpDecorate %672 RelaxedPrecision 
					                                                      OpDecorate %673 RelaxedPrecision 
					                                                      OpDecorate %675 RelaxedPrecision 
					                                                      OpDecorate %676 RelaxedPrecision 
					                                                      OpDecorate %683 RelaxedPrecision 
					                                                      OpDecorate %684 RelaxedPrecision 
					                                                      OpDecorate %734 RelaxedPrecision 
					                                                      OpDecorate %735 RelaxedPrecision 
					                                                      OpDecorate %736 RelaxedPrecision 
					                                                      OpDecorate %737 RelaxedPrecision 
					                                                      OpDecorate %738 RelaxedPrecision 
					                                                      OpDecorate %741 RelaxedPrecision 
					                                                      OpDecorate %742 RelaxedPrecision 
					                                                      OpDecorate %744 RelaxedPrecision 
					                                                      OpDecorate %745 RelaxedPrecision 
					                                                      OpDecorate %746 RelaxedPrecision 
					                                                      OpDecorate %747 RelaxedPrecision 
					                                                      OpDecorate %748 RelaxedPrecision 
					                                                      OpDecorate %753 RelaxedPrecision 
					                                                      OpDecorate %757 RelaxedPrecision 
					                                                      OpDecorate %758 RelaxedPrecision 
					                                                      OpDecorate %761 RelaxedPrecision 
					                                                      OpDecorate %762 RelaxedPrecision 
					                                                      OpDecorate %764 RelaxedPrecision 
					                                                      OpDecorate %767 RelaxedPrecision 
					                                                      OpDecorate %768 RelaxedPrecision 
					                                                      OpDecorate %771 RelaxedPrecision 
					                                                      OpDecorate %772 RelaxedPrecision 
					                                                      OpDecorate %775 RelaxedPrecision 
					                                                      OpDecorate %778 RelaxedPrecision 
					                                                      OpDecorate %785 RelaxedPrecision 
					                                                      OpDecorate %787 RelaxedPrecision 
					                                                      OpDecorate %788 RelaxedPrecision 
					                                                      OpDecorate %791 RelaxedPrecision 
					                                                      OpDecorate %792 RelaxedPrecision 
					                                                      OpDecorate %796 RelaxedPrecision 
					                                                      OpDecorate %797 RelaxedPrecision 
					                                                      OpDecorate %800 RelaxedPrecision 
					                                                      OpDecorate %801 RelaxedPrecision 
					                                                      OpDecorate %802 RelaxedPrecision 
					                                                      OpDecorate %803 RelaxedPrecision 
					                                                      OpDecorate %804 RelaxedPrecision 
					                                                      OpDecorate %805 RelaxedPrecision 
					                                                      OpDecorate %806 RelaxedPrecision 
					                                                      OpDecorate %812 RelaxedPrecision 
					                                                      OpDecorate %813 RelaxedPrecision 
					                                                      OpDecorate %817 RelaxedPrecision 
					                                                      OpDecorate %818 RelaxedPrecision 
					                                                      OpDecorate %820 RelaxedPrecision 
					                                                      OpDecorate %822 RelaxedPrecision 
					                                                      OpDecorate %824 RelaxedPrecision 
					                                                      OpDecorate %825 RelaxedPrecision 
					                                                      OpDecorate %826 RelaxedPrecision 
					                                                      OpDecorate %827 RelaxedPrecision 
					                                                      OpDecorate %828 RelaxedPrecision 
					                                                      OpDecorate %829 RelaxedPrecision 
					                                                      OpDecorate %830 RelaxedPrecision 
					                                                      OpDecorate %831 RelaxedPrecision 
					                                                      OpDecorate %832 RelaxedPrecision 
					                                                      OpDecorate %834 RelaxedPrecision 
					                                                      OpDecorate %835 RelaxedPrecision 
					                                                      OpDecorate %836 RelaxedPrecision 
					                                                      OpDecorate %837 RelaxedPrecision 
					                                                      OpDecorate %838 RelaxedPrecision 
					                                                      OpDecorate %839 RelaxedPrecision 
					                                                      OpDecorate %840 RelaxedPrecision 
					                                                      OpDecorate %841 RelaxedPrecision 
					                                                      OpDecorate %842 RelaxedPrecision 
					                                                      OpDecorate %843 RelaxedPrecision 
					                                                      OpDecorate %849 RelaxedPrecision 
					                                                      OpDecorate %855 RelaxedPrecision 
					                                                      OpDecorate %861 RelaxedPrecision 
					                                                      OpDecorate %865 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 867 
					                                                      OpDecorate %868 RelaxedPrecision 
					                                                      OpDecorate %869 RelaxedPrecision 
					                                                      OpDecorate %870 RelaxedPrecision 
					                                                      OpDecorate %872 RelaxedPrecision 
					                                                      OpDecorate %873 RelaxedPrecision 
					                                                      OpDecorate %874 RelaxedPrecision 
					                                                      OpDecorate %875 RelaxedPrecision 
					                                                      OpDecorate %876 RelaxedPrecision 
					                                                      OpDecorate %877 RelaxedPrecision 
					                                                      OpDecorate %878 RelaxedPrecision 
					                                                      OpDecorate %881 RelaxedPrecision 
					                                                      OpDecorate %882 RelaxedPrecision 
					                                                      OpDecorate %883 RelaxedPrecision 
					                                                      OpDecorate %886 RelaxedPrecision 
					                                                      OpDecorate %887 RelaxedPrecision 
					                                                      OpDecorate %888 RelaxedPrecision 
					                                                      OpDecorate %892 RelaxedPrecision 
					                                                      OpDecorate %893 RelaxedPrecision 
					                                                      OpDecorate %894 RelaxedPrecision 
					                                                      OpDecorate %895 RelaxedPrecision 
					                                                      OpDecorate %897 RelaxedPrecision 
					                                                      OpDecorate %898 RelaxedPrecision 
					                                                      OpDecorate %899 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD6 Location 929 
					                                                      OpDecorate %947 RelaxedPrecision 
					                                                      OpDecorate %950 RelaxedPrecision 
					                                                      OpDecorate %950 DescriptorSet 950 
					                                                      OpDecorate %950 Binding 950 
					                                                      OpDecorate %951 RelaxedPrecision 
					                                                      OpDecorate %952 RelaxedPrecision 
					                                                      OpDecorate %952 DescriptorSet 952 
					                                                      OpDecorate %952 Binding 952 
					                                                      OpDecorate %953 RelaxedPrecision 
					                                                      OpDecorate %959 RelaxedPrecision 
					                                                      OpDecorate %961 RelaxedPrecision 
					                                                      OpDecorate %966 RelaxedPrecision 
					                                                      OpDecorate %966 Location 966 
					                                                      OpDecorate %969 RelaxedPrecision 
					                                                      OpDecorate %970 RelaxedPrecision 
					                                                      OpDecorate %972 RelaxedPrecision 
					                                                      OpDecorate %977 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                              %12 = OpTypeInt 32 0 
					                                          u32 %13 = OpConstant 3 
					                                              %14 = OpTypePointer Input %6 
					                                          u32 %17 = OpConstant 0 
					                                              %18 = OpTypePointer Private %6 
					                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                          u32 %23 = OpConstant 1 
					                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
					                                          u32 %28 = OpConstant 2 
					                                              %30 = OpTypeVector %6 3 
					                                          u32 %34 = OpConstant 4 
					                                              %35 = OpTypeArray %7 %34 
					                                              %36 = OpTypeStruct %7 %30 %7 %7 %7 %7 %35 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 %6 %6 %6 %6 %6 
					                                              %37 = OpTypePointer Uniform %36 
					Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %38 = OpVariable Uniform 
					                                              %39 = OpTypeInt 32 1 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %30 
					                                 Private f32* %47 = OpVariable Private 
					                                              %55 = OpTypePointer Private %30 
					                               Private f32_3* %56 = OpVariable Private 
					                                          i32 %62 = OpConstant 2 
					                                              %63 = OpTypePointer Uniform %7 
					                                 Private f32* %68 = OpVariable Private 
					                                              %78 = OpTypeVector %6 2 
					                                              %79 = OpTypePointer Input %78 
					                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
					                                          i32 %83 = OpConstant 18 
					                                              %84 = OpTypePointer Uniform %6 
					                               Private f32_4* %89 = OpVariable Private 
					                                          f32 %90 = OpConstant 3,674022E-40 
					                                        f32_2 %91 = OpConstantComposite %90 %90 
					                                          i32 %92 = OpConstant 28 
					                                          i32 %95 = OpConstant 29 
					                                         f32 %102 = OpConstant 3,674022E-40 
					                              Private f32_4* %104 = OpVariable Private 
					                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                              Private f32_4* %117 = OpVariable Private 
					                                             %118 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %119 = OpTypePointer UniformConstant %118 
					        UniformConstant read_only Texture2D* %120 = OpVariable UniformConstant 
					                                             %122 = OpTypeSampler 
					                                             %123 = OpTypePointer UniformConstant %122 
					                    UniformConstant sampler* %124 = OpVariable UniformConstant 
					                                             %126 = OpTypeSampledImage %118 
					                                         f32 %162 = OpConstant 3,674022E-40 
					                                       f32_4 %163 = OpConstantComposite %162 %162 %162 %162 
					                                         i32 %165 = OpConstant 19 
					                                         i32 %168 = OpConstant 16 
					                                         f32 %175 = OpConstant 3,674022E-40 
					                                         i32 %184 = OpConstant 17 
					                                         i32 %191 = OpConstant 30 
					                                         f32 %198 = OpConstant 3,674022E-40 
					                                         f32 %202 = OpConstant 3,674022E-40 
					                                       f32_4 %203 = OpConstantComposite %202 %202 %202 %202 
					                                         f32 %210 = OpConstant 3,674022E-40 
					                                       f32_4 %211 = OpConstantComposite %210 %210 %210 %210 
					                                         f32 %213 = OpConstant 3,674022E-40 
					                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
					                                       f32_4 %219 = OpConstantComposite %90 %90 %90 %90 
					                                             %221 = OpTypePointer Private %78 
					                              Private f32_2* %222 = OpVariable Private 
					                                         i32 %223 = OpConstant 26 
					                                             %228 = OpTypeBool 
					                                             %229 = OpTypePointer Private %228 
					                               Private bool* %230 = OpVariable Private 
					                                             %243 = OpTypePointer Function %6 
					                               Private bool* %255 = OpVariable Private 
					                                             %262 = OpTypeVector %228 4 
					                                         f32 %266 = OpConstant 3,674022E-40 
					                                       f32_4 %267 = OpConstantComposite %266 %266 %266 %266 
					                                         i32 %275 = OpConstant 21 
					                                         i32 %294 = OpConstant 20 
					                                       f32_2 %348 = OpConstantComposite %90 %102 
					                                Private f32* %378 = OpVariable Private 
					                                Private f32* %386 = OpVariable Private 
					                                         i32 %402 = OpConstant 27 
					                              Private f32_4* %420 = OpVariable Private 
					                                         i32 %433 = OpConstant 13 
					                                         i32 %436 = OpConstant 14 
					                                         i32 %440 = OpConstant 0 
					                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                              Private f32_4* %448 = OpVariable Private 
					        UniformConstant read_only Texture2D* %449 = OpVariable UniformConstant 
					                    UniformConstant sampler* %451 = OpVariable UniformConstant 
					                              Private f32_3* %456 = OpVariable Private 
					                                         i32 %459 = OpConstant 15 
					                              Private f32_4* %464 = OpVariable Private 
					                                Input f32_4* %465 = OpVariable Input 
					                                Private f32* %472 = OpVariable Private 
					                                         i32 %478 = OpConstant 9 
					                                         i32 %481 = OpConstant 10 
					                              Private f32_4* %494 = OpVariable Private 
					        UniformConstant read_only Texture2D* %495 = OpVariable UniformConstant 
					                    UniformConstant sampler* %497 = OpVariable UniformConstant 
					                                         i32 %504 = OpConstant 11 
					                              Private f32_4* %508 = OpVariable Private 
					                              Private f32_4* %512 = OpVariable Private 
					                              Private f32_4* %544 = OpVariable Private 
					                                         i32 %577 = OpConstant 12 
					                              Private f32_4* %611 = OpVariable Private 
					                              Private f32_3* %616 = OpVariable Private 
					                                         i32 %617 = OpConstant 23 
					                                         i32 %621 = OpConstant 22 
					                              Private f32_3* %634 = OpVariable Private 
					        UniformConstant read_only Texture2D* %635 = OpVariable UniformConstant 
					                    UniformConstant sampler* %637 = OpVariable UniformConstant 
					                                       f32_2 %658 = OpConstantComposite %213 %213 
					                                         f32 %680 = OpConstant 3,674022E-40 
					                                       f32_3 %681 = OpConstantComposite %680 %680 %213 
					                                       f32_3 %687 = OpConstantComposite %102 %102 %90 
					                                Private f32* %764 = OpVariable Private 
					                                         i32 %765 = OpConstant 31 
					                                         i32 %769 = OpConstant 32 
					                                Private f32* %773 = OpVariable Private 
					                                         f32 %781 = OpConstant 3,674022E-40 
					                                         i32 %794 = OpConstant 7 
					                                         i32 %798 = OpConstant 8 
					                                Private f32* %820 = OpVariable Private 
					                                         f32 %823 = OpConstant 3,674022E-40 
					                              Private f32_3* %825 = OpVariable Private 
					                              Private f32_3* %831 = OpVariable Private 
					                                         i32 %847 = OpConstant 3 
					                                         i32 %853 = OpConstant 4 
					                                         i32 %859 = OpConstant 5 
					                                             %866 = OpTypePointer Input %30 
					                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
					                                       f32_3 %871 = OpConstantComposite %102 %102 %102 
					                                         i32 %879 = OpConstant 24 
					                                         i32 %884 = OpConstant 25 
					                              Private f32_3* %900 = OpVariable Private 
					                                         i32 %903 = OpConstant 6 
					                        Input f32_3* vs_TEXCOORD6 = OpVariable Input 
					                              Private f32_3* %947 = OpVariable Private 
					                                             %948 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %949 = OpTypePointer UniformConstant %948 
					      UniformConstant read_only TextureCube* %950 = OpVariable UniformConstant 
					                    UniformConstant sampler* %952 = OpVariable UniformConstant 
					                                             %954 = OpTypeSampledImage %948 
					                                             %965 = OpTypePointer Output %7 
					                               Output f32_4* %966 = OpVariable Output 
					                                             %978 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %244 = OpVariable Function 
					                                   Input f32* %15 = OpAccessChain vs_TEXCOORD2 %13 
					                                          f32 %16 = OpLoad %15 
					                                 Private f32* %19 = OpAccessChain %9 %17 
					                                                      OpStore %19 %16 
					                                   Input f32* %21 = OpAccessChain vs_TEXCOORD3 %13 
					                                          f32 %22 = OpLoad %21 
					                                 Private f32* %24 = OpAccessChain %9 %23 
					                                                      OpStore %24 %22 
					                                   Input f32* %26 = OpAccessChain vs_TEXCOORD4 %13 
					                                          f32 %27 = OpLoad %26 
					                                 Private f32* %29 = OpAccessChain %9 %28 
					                                                      OpStore %29 %27 
					                                        f32_4 %31 = OpLoad %9 
					                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
					                                        f32_3 %33 = OpFNegate %32 
					                               Uniform f32_3* %42 = OpAccessChain %38 %40 
					                                        f32_3 %43 = OpLoad %42 
					                                        f32_3 %44 = OpFAdd %33 %43 
					                                        f32_4 %45 = OpLoad %9 
					                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 6 3 
					                                                      OpStore %9 %46 
					                                        f32_4 %48 = OpLoad %9 
					                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
					                                          f32 %52 = OpDot %49 %51 
					                                                      OpStore %47 %52 
					                                          f32 %53 = OpLoad %47 
					                                          f32 %54 = OpExtInst %1 32 %53 
					                                                      OpStore %47 %54 
					                                        f32_4 %57 = OpLoad %9 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
					                                          f32 %59 = OpLoad %47 
					                                        f32_3 %60 = OpCompositeConstruct %59 %59 %59 
					                                        f32_3 %61 = OpFMul %58 %60 
					                               Uniform f32_4* %64 = OpAccessChain %38 %62 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
					                                        f32_3 %67 = OpFAdd %61 %66 
					                                                      OpStore %56 %67 
					                                        f32_3 %69 = OpLoad %56 
					                                        f32_3 %70 = OpLoad %56 
					                                          f32 %71 = OpDot %69 %70 
					                                                      OpStore %68 %71 
					                                          f32 %72 = OpLoad %68 
					                                          f32 %73 = OpExtInst %1 32 %72 
					                                                      OpStore %68 %73 
					                                          f32 %74 = OpLoad %68 
					                                        f32_3 %75 = OpCompositeConstruct %74 %74 %74 
					                                        f32_3 %76 = OpLoad %56 
					                                        f32_3 %77 = OpFMul %75 %76 
					                                                      OpStore %56 %77 
					                                   Input f32* %81 = OpAccessChain vs_TEXCOORD5 %17 
					                                          f32 %82 = OpLoad %81 
					                                 Uniform f32* %85 = OpAccessChain %38 %83 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFAdd %82 %86 
					                                 Private f32* %88 = OpAccessChain %9 %17 
					                                                      OpStore %88 %87 
					                                 Uniform f32* %93 = OpAccessChain %38 %92 
					                                          f32 %94 = OpLoad %93 
					                                 Uniform f32* %96 = OpAccessChain %38 %95 
					                                          f32 %97 = OpLoad %96 
					                                        f32_2 %98 = OpCompositeConstruct %94 %97 
					                                        f32_2 %99 = OpFDiv %91 %98 
					                                       f32_4 %100 = OpLoad %89 
					                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 2 3 
					                                                      OpStore %89 %101 
					                                Private f32* %103 = OpAccessChain %89 %28 
					                                                      OpStore %103 %102 
					                                       f32_4 %105 = OpLoad %89 
					                                       f32_4 %106 = OpVectorShuffle %105 %105 0 2 2 1 
					                                       f32_4 %107 = OpFNegate %106 
					                                       f32_4 %109 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
					                                       f32_4 %111 = OpFAdd %107 %110 
					                                                      OpStore %104 %111 
					                                       f32_4 %112 = OpLoad %89 
					                                       f32_4 %113 = OpVectorShuffle %112 %112 0 2 2 1 
					                                       f32_4 %114 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %115 = OpVectorShuffle %114 %114 0 1 0 1 
					                                       f32_4 %116 = OpFAdd %113 %115 
					                                                      OpStore %89 %116 
					                         read_only Texture2D %121 = OpLoad %120 
					                                     sampler %125 = OpLoad %124 
					                  read_only Texture2DSampled %127 = OpSampledImage %121 %125 
					                                       f32_4 %128 = OpLoad %104 
					                                       f32_2 %129 = OpVectorShuffle %128 %128 0 1 
					                                       f32_4 %130 = OpImageSampleImplicitLod %127 %129 
					                                         f32 %131 = OpCompositeExtract %130 3 
					                                Private f32* %132 = OpAccessChain %117 %17 
					                                                      OpStore %132 %131 
					                         read_only Texture2D %133 = OpLoad %120 
					                                     sampler %134 = OpLoad %124 
					                  read_only Texture2DSampled %135 = OpSampledImage %133 %134 
					                                       f32_4 %136 = OpLoad %104 
					                                       f32_2 %137 = OpVectorShuffle %136 %136 2 3 
					                                       f32_4 %138 = OpImageSampleImplicitLod %135 %137 
					                                         f32 %139 = OpCompositeExtract %138 3 
					                                Private f32* %140 = OpAccessChain %117 %28 
					                                                      OpStore %140 %139 
					                         read_only Texture2D %141 = OpLoad %120 
					                                     sampler %142 = OpLoad %124 
					                  read_only Texture2DSampled %143 = OpSampledImage %141 %142 
					                                       f32_4 %144 = OpLoad %89 
					                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
					                                       f32_4 %146 = OpImageSampleImplicitLod %143 %145 
					                                         f32 %147 = OpCompositeExtract %146 3 
					                                Private f32* %148 = OpAccessChain %117 %23 
					                                                      OpStore %148 %147 
					                         read_only Texture2D %149 = OpLoad %120 
					                                     sampler %150 = OpLoad %124 
					                  read_only Texture2DSampled %151 = OpSampledImage %149 %150 
					                                       f32_4 %152 = OpLoad %89 
					                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
					                                       f32_4 %154 = OpImageSampleImplicitLod %151 %153 
					                                         f32 %155 = OpCompositeExtract %154 3 
					                                Private f32* %156 = OpAccessChain %117 %13 
					                                                      OpStore %156 %155 
					                                       f32_4 %157 = OpLoad %9 
					                                       f32_4 %158 = OpVectorShuffle %157 %157 0 0 0 0 
					                                       f32_4 %159 = OpLoad %117 
					                                       f32_4 %160 = OpFAdd %158 %159 
					                                                      OpStore %9 %160 
					                                       f32_4 %161 = OpLoad %9 
					                                       f32_4 %164 = OpFAdd %161 %163 
					                                                      OpStore %9 %164 
					                                Uniform f32* %166 = OpAccessChain %38 %165 
					                                         f32 %167 = OpLoad %166 
					                                Uniform f32* %169 = OpAccessChain %38 %168 
					                                         f32 %170 = OpLoad %169 
					                                         f32 %171 = OpFAdd %167 %170 
					                                Private f32* %172 = OpAccessChain %89 %17 
					                                                      OpStore %172 %171 
					                                Private f32* %173 = OpAccessChain %89 %17 
					                                         f32 %174 = OpLoad %173 
					                                         f32 %176 = OpExtInst %1 40 %174 %175 
					                                Private f32* %177 = OpAccessChain %89 %17 
					                                                      OpStore %177 %176 
					                                       f32_4 %178 = OpLoad %9 
					                                       f32_4 %179 = OpLoad %89 
					                                       f32_4 %180 = OpVectorShuffle %179 %179 0 0 0 0 
					                                       f32_4 %181 = OpFDiv %178 %180 
					                                                      OpStore %9 %181 
					                                Private f32* %182 = OpAccessChain %89 %17 
					                                         f32 %183 = OpLoad %182 
					                                Uniform f32* %185 = OpAccessChain %38 %184 
					                                         f32 %186 = OpLoad %185 
					                                         f32 %187 = OpFMul %183 %186 
					                                Private f32* %188 = OpAccessChain %89 %17 
					                                                      OpStore %188 %187 
					                                Private f32* %189 = OpAccessChain %89 %17 
					                                         f32 %190 = OpLoad %189 
					                                Uniform f32* %192 = OpAccessChain %38 %191 
					                                         f32 %193 = OpLoad %192 
					                                         f32 %194 = OpFMul %190 %193 
					                                Private f32* %195 = OpAccessChain %89 %17 
					                                                      OpStore %195 %194 
					                                Private f32* %196 = OpAccessChain %89 %17 
					                                         f32 %197 = OpLoad %196 
					                                         f32 %199 = OpFMul %197 %198 
					                                Private f32* %200 = OpAccessChain %89 %17 
					                                                      OpStore %200 %199 
					                                       f32_4 %201 = OpLoad %9 
					                                       f32_4 %204 = OpFAdd %201 %203 
					                                                      OpStore %9 %204 
					                                       f32_4 %205 = OpLoad %9 
					                                       f32_4 %206 = OpCompositeConstruct %102 %102 %102 %102 
					                                       f32_4 %207 = OpCompositeConstruct %90 %90 %90 %90 
					                                       f32_4 %208 = OpExtInst %1 43 %205 %206 %207 
					                                                      OpStore %9 %208 
					                                       f32_4 %209 = OpLoad %9 
					                                       f32_4 %212 = OpFMul %209 %211 
					                                       f32_4 %215 = OpFAdd %212 %214 
					                                                      OpStore %104 %215 
					                                       f32_4 %216 = OpLoad %104 
					                                       f32_4 %217 = OpExtInst %1 4 %216 
					                                       f32_4 %218 = OpFNegate %217 
					                                       f32_4 %220 = OpFAdd %218 %219 
					                                                      OpStore %104 %220 
					                                Uniform f32* %224 = OpAccessChain %38 %223 
					                                         f32 %225 = OpLoad %224 
					                                         f32 %226 = OpFMul %225 %202 
					                                Private f32* %227 = OpAccessChain %222 %17 
					                                                      OpStore %227 %226 
					                                Private f32* %231 = OpAccessChain %222 %17 
					                                         f32 %232 = OpLoad %231 
					                                Private f32* %233 = OpAccessChain %222 %17 
					                                         f32 %234 = OpLoad %233 
					                                         f32 %235 = OpFNegate %234 
					                                        bool %236 = OpFOrdGreaterThanEqual %232 %235 
					                                                      OpStore %230 %236 
					                                Private f32* %237 = OpAccessChain %222 %17 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpExtInst %1 4 %238 
					                                         f32 %240 = OpExtInst %1 10 %239 
					                                Private f32* %241 = OpAccessChain %222 %17 
					                                                      OpStore %241 %240 
					                                        bool %242 = OpLoad %230 
					                                                      OpSelectionMerge %246 None 
					                                                      OpBranchConditional %242 %245 %249 
					                                             %245 = OpLabel 
					                                Private f32* %247 = OpAccessChain %222 %17 
					                                         f32 %248 = OpLoad %247 
					                                                      OpStore %244 %248 
					                                                      OpBranch %246 
					                                             %249 = OpLabel 
					                                Private f32* %250 = OpAccessChain %222 %17 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpFNegate %251 
					                                                      OpStore %244 %252 
					                                                      OpBranch %246 
					                                             %246 = OpLabel 
					                                         f32 %253 = OpLoad %244 
					                                Private f32* %254 = OpAccessChain %222 %17 
					                                                      OpStore %254 %253 
					                                Private f32* %256 = OpAccessChain %222 %17 
					                                         f32 %257 = OpLoad %256 
					                                        bool %258 = OpFOrdGreaterThanEqual %257 %202 
					                                                      OpStore %255 %258 
					                                        bool %259 = OpLoad %255 
					                                       f32_4 %260 = OpLoad %104 
					                                       f32_4 %261 = OpLoad %9 
					                                      bool_4 %263 = OpCompositeConstruct %259 %259 %259 %259 
					                                       f32_4 %264 = OpSelect %263 %260 %261 
					                                                      OpStore %9 %264 
					                                       f32_4 %265 = OpLoad %9 
					                                       f32_4 %268 = OpFMul %265 %267 
					                                                      OpStore %104 %268 
					                                       f32_4 %269 = OpLoad %104 
					                                       f32_4 %270 = OpExtInst %1 13 %269 
					                                                      OpStore %104 %270 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_4 %272 = OpFNegate %271 
					                                       f32_4 %273 = OpLoad %104 
					                                       f32_4 %274 = OpFAdd %272 %273 
					                                                      OpStore %104 %274 
					                                Uniform f32* %276 = OpAccessChain %38 %275 
					                                         f32 %277 = OpLoad %276 
					                                Uniform f32* %278 = OpAccessChain %38 %275 
					                                         f32 %279 = OpLoad %278 
					                                Uniform f32* %280 = OpAccessChain %38 %275 
					                                         f32 %281 = OpLoad %280 
					                                Uniform f32* %282 = OpAccessChain %38 %275 
					                                         f32 %283 = OpLoad %282 
					                                       f32_4 %284 = OpCompositeConstruct %277 %279 %281 %283 
					                                         f32 %285 = OpCompositeExtract %284 0 
					                                         f32 %286 = OpCompositeExtract %284 1 
					                                         f32 %287 = OpCompositeExtract %284 2 
					                                         f32 %288 = OpCompositeExtract %284 3 
					                                       f32_4 %289 = OpCompositeConstruct %285 %286 %287 %288 
					                                       f32_4 %290 = OpLoad %104 
					                                       f32_4 %291 = OpFMul %289 %290 
					                                       f32_4 %292 = OpLoad %9 
					                                       f32_4 %293 = OpFAdd %291 %292 
					                                                      OpStore %9 %293 
					                                Uniform f32* %295 = OpAccessChain %38 %294 
					                                         f32 %296 = OpLoad %295 
					                                         f32 %297 = OpFNegate %296 
					                                         f32 %298 = OpFAdd %297 %90 
					                                Private f32* %299 = OpAccessChain %222 %17 
					                                                      OpStore %299 %298 
					                                       f32_4 %300 = OpLoad %9 
					                                       f32_2 %301 = OpLoad %222 
					                                       f32_4 %302 = OpVectorShuffle %301 %301 0 0 0 0 
					                                       f32_4 %303 = OpExtInst %1 37 %300 %302 
					                                                      OpStore %9 %303 
					                                       f32_4 %304 = OpLoad %89 
					                                       f32_2 %305 = OpVectorShuffle %304 %304 0 0 
					                                       f32_4 %306 = OpLoad %9 
					                                       f32_2 %307 = OpVectorShuffle %306 %306 0 2 
					                                       f32_2 %308 = OpFMul %305 %307 
					                                       f32_4 %309 = OpLoad %9 
					                                       f32_4 %310 = OpVectorShuffle %309 %308 4 1 5 3 
					                                                      OpStore %9 %310 
					                                       f32_4 %311 = OpLoad %9 
					                                       f32_2 %312 = OpVectorShuffle %311 %311 3 1 
					                                       f32_4 %313 = OpLoad %89 
					                                       f32_2 %314 = OpVectorShuffle %313 %313 0 0 
					                                       f32_2 %315 = OpFMul %312 %314 
					                                       f32_4 %316 = OpLoad %9 
					                                       f32_2 %317 = OpVectorShuffle %316 %316 2 0 
					                                       f32_2 %318 = OpFNegate %317 
					                                       f32_2 %319 = OpFAdd %315 %318 
					                                       f32_4 %320 = OpLoad %9 
					                                       f32_4 %321 = OpVectorShuffle %320 %319 0 4 5 3 
					                                                      OpStore %9 %321 
					                                Private f32* %322 = OpAccessChain %9 %17 
					                                                      OpStore %322 %213 
					                                Private f32* %323 = OpAccessChain %9 %13 
					                                                      OpStore %323 %90 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_2 %325 = OpVectorShuffle %324 %324 0 1 
					                                       f32_4 %326 = OpLoad %9 
					                                       f32_2 %327 = OpVectorShuffle %326 %326 0 1 
					                                         f32 %328 = OpDot %325 %327 
					                                Private f32* %329 = OpAccessChain %89 %17 
					                                                      OpStore %329 %328 
					                                Private f32* %330 = OpAccessChain %89 %17 
					                                         f32 %331 = OpLoad %330 
					                                         f32 %332 = OpExtInst %1 32 %331 
					                                Private f32* %333 = OpAccessChain %89 %17 
					                                                      OpStore %333 %332 
					                                       f32_4 %334 = OpLoad %9 
					                                       f32_2 %335 = OpVectorShuffle %334 %334 2 3 
					                                       f32_4 %336 = OpLoad %9 
					                                       f32_2 %337 = OpVectorShuffle %336 %336 2 3 
					                                         f32 %338 = OpDot %335 %337 
					                                                      OpStore %47 %338 
					                                         f32 %339 = OpLoad %47 
					                                         f32 %340 = OpExtInst %1 32 %339 
					                                                      OpStore %47 %340 
					                                         f32 %341 = OpLoad %47 
					                                Private f32* %342 = OpAccessChain %9 %28 
					                                         f32 %343 = OpLoad %342 
					                                         f32 %344 = OpFMul %341 %343 
					                                Private f32* %345 = OpAccessChain %104 %17 
					                                                      OpStore %345 %344 
					                                         f32 %346 = OpLoad %47 
					                                       f32_2 %347 = OpCompositeConstruct %346 %346 
					                                       f32_2 %349 = OpFMul %347 %348 
					                                       f32_4 %350 = OpLoad %104 
					                                       f32_4 %351 = OpVectorShuffle %350 %349 0 4 5 3 
					                                                      OpStore %104 %351 
					                                Private f32* %352 = OpAccessChain %9 %28 
					                                                      OpStore %352 %102 
					                                       f32_4 %353 = OpLoad %89 
					                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
					                                       f32_4 %355 = OpLoad %9 
					                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
					                                       f32_3 %357 = OpFMul %354 %356 
					                                       f32_4 %358 = OpLoad %9 
					                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
					                                                      OpStore %9 %359 
					                                       f32_4 %360 = OpLoad %9 
					                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
					                                       f32_4 %362 = OpLoad %104 
					                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
					                                       f32_3 %364 = OpFMul %361 %363 
					                                       f32_4 %365 = OpLoad %89 
					                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
					                                                      OpStore %89 %366 
					                                       f32_4 %367 = OpLoad %104 
					                                       f32_3 %368 = OpVectorShuffle %367 %367 2 0 1 
					                                       f32_4 %369 = OpLoad %9 
					                                       f32_3 %370 = OpVectorShuffle %369 %369 1 2 0 
					                                       f32_3 %371 = OpFMul %368 %370 
					                                       f32_4 %372 = OpLoad %89 
					                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
					                                       f32_3 %374 = OpFNegate %373 
					                                       f32_3 %375 = OpFAdd %371 %374 
					                                       f32_4 %376 = OpLoad %9 
					                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
					                                                      OpStore %9 %377 
					                         read_only Texture2D %379 = OpLoad %120 
					                                     sampler %380 = OpLoad %124 
					                  read_only Texture2DSampled %381 = OpSampledImage %379 %380 
					                                       f32_4 %382 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
					                                       f32_4 %384 = OpImageSampleImplicitLod %381 %383 
					                                         f32 %385 = OpCompositeExtract %384 3 
					                                                      OpStore %378 %385 
					                                         f32 %387 = OpLoad %378 
					                                         f32 %388 = OpFNegate %387 
					                                         f32 %389 = OpFAdd %388 %202 
					                                                      OpStore %386 %389 
					                                         f32 %390 = OpLoad %386 
					                                  Input f32* %391 = OpAccessChain vs_TEXCOORD5 %17 
					                                         f32 %392 = OpLoad %391 
					                                         f32 %393 = OpFNegate %392 
					                                         f32 %394 = OpFAdd %390 %393 
					                                                      OpStore %47 %394 
					                                         f32 %395 = OpLoad %47 
					                                  Input f32* %396 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %397 = OpLoad %396 
					                                         f32 %398 = OpFMul %395 %397 
					                                         f32 %399 = OpFAdd %398 %202 
					                                                      OpStore %47 %399 
					                                Uniform f32* %400 = OpAccessChain %38 %168 
					                                         f32 %401 = OpLoad %400 
					                                Uniform f32* %403 = OpAccessChain %38 %402 
					                                         f32 %404 = OpLoad %403 
					                                         f32 %405 = OpFMul %401 %404 
					                                Private f32* %406 = OpAccessChain %89 %17 
					                                                      OpStore %406 %405 
					                                Private f32* %407 = OpAccessChain %89 %17 
					                                         f32 %408 = OpLoad %407 
					                                  Input f32* %409 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %410 = OpLoad %409 
					                                         f32 %411 = OpFMul %408 %410 
					                                Private f32* %412 = OpAccessChain %89 %17 
					                                                      OpStore %412 %411 
					                                Private f32* %413 = OpAccessChain %89 %17 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %414 %202 
					                                         f32 %416 = OpLoad %47 
					                                         f32 %417 = OpFAdd %415 %416 
					                                                      OpStore %68 %417 
					                                         f32 %418 = OpLoad %68 
					                                         f32 %419 = OpExtInst %1 43 %418 %102 %90 
					                                                      OpStore %68 %419 
					                                Private f32* %421 = OpAccessChain %89 %17 
					                                         f32 %422 = OpLoad %421 
					                                         f32 %423 = OpExtInst %1 37 %422 %90 
					                                Private f32* %424 = OpAccessChain %420 %17 
					                                                      OpStore %424 %423 
					                                Private f32* %425 = OpAccessChain %420 %17 
					                                         f32 %426 = OpLoad %425 
					                                         f32 %427 = OpExtInst %1 31 %426 
					                                Private f32* %428 = OpAccessChain %420 %17 
					                                                      OpStore %428 %427 
					                                         f32 %429 = OpLoad %68 
					                                Private f32* %430 = OpAccessChain %420 %17 
					                                         f32 %431 = OpLoad %430 
					                                         f32 %432 = OpFMul %429 %431 
					                                                      OpStore %68 %432 
					                                Uniform f32* %434 = OpAccessChain %38 %433 
					                                         f32 %435 = OpLoad %434 
					                                Uniform f32* %437 = OpAccessChain %38 %436 
					                                         f32 %438 = OpLoad %437 
					                                       f32_2 %439 = OpCompositeConstruct %435 %438 
					                              Uniform f32_4* %441 = OpAccessChain %38 %440 
					                                       f32_4 %442 = OpLoad %441 
					                                       f32_2 %443 = OpVectorShuffle %442 %442 1 1 
					                                       f32_2 %444 = OpFMul %439 %443 
					                                       f32_2 %446 = OpLoad vs_TEXCOORD1 
					                                       f32_2 %447 = OpFAdd %444 %446 
					                                                      OpStore %222 %447 
					                         read_only Texture2D %450 = OpLoad %449 
					                                     sampler %452 = OpLoad %451 
					                  read_only Texture2DSampled %453 = OpSampledImage %450 %452 
					                                       f32_2 %454 = OpLoad %222 
					                                       f32_4 %455 = OpImageSampleImplicitLod %453 %454 
					                                                      OpStore %448 %455 
					                                       f32_4 %457 = OpLoad %448 
					                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
					                              Uniform f32_4* %460 = OpAccessChain %38 %459 
					                                       f32_4 %461 = OpLoad %460 
					                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
					                                       f32_3 %463 = OpFMul %458 %462 
					                                                      OpStore %456 %463 
					                                  Input f32* %466 = OpAccessChain %465 %13 
					                                         f32 %467 = OpLoad %466 
					                                Uniform f32* %468 = OpAccessChain %38 %459 %13 
					                                         f32 %469 = OpLoad %468 
					                                         f32 %470 = OpFMul %467 %469 
					                                Private f32* %471 = OpAccessChain %464 %17 
					                                                      OpStore %471 %470 
					                                Private f32* %473 = OpAccessChain %448 %13 
					                                         f32 %474 = OpLoad %473 
					                                Private f32* %475 = OpAccessChain %464 %17 
					                                         f32 %476 = OpLoad %475 
					                                         f32 %477 = OpFMul %474 %476 
					                                                      OpStore %472 %477 
					                                Uniform f32* %479 = OpAccessChain %38 %478 
					                                         f32 %480 = OpLoad %479 
					                                Uniform f32* %482 = OpAccessChain %38 %481 
					                                         f32 %483 = OpLoad %482 
					                                       f32_2 %484 = OpCompositeConstruct %480 %483 
					                              Uniform f32_4* %485 = OpAccessChain %38 %440 
					                                       f32_4 %486 = OpLoad %485 
					                                       f32_2 %487 = OpVectorShuffle %486 %486 1 1 
					                                       f32_2 %488 = OpFMul %484 %487 
					                                       f32_4 %489 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
					                                       f32_2 %491 = OpFAdd %488 %490 
					                                       f32_4 %492 = OpLoad %117 
					                                       f32_4 %493 = OpVectorShuffle %492 %491 4 5 2 3 
					                                                      OpStore %117 %493 
					                         read_only Texture2D %496 = OpLoad %495 
					                                     sampler %498 = OpLoad %497 
					                  read_only Texture2DSampled %499 = OpSampledImage %496 %498 
					                                       f32_4 %500 = OpLoad %117 
					                                       f32_2 %501 = OpVectorShuffle %500 %500 0 1 
					                                       f32_4 %502 = OpImageSampleImplicitLod %499 %501 
					                                                      OpStore %494 %502 
					                                       f32_4 %503 = OpLoad %465 
					                              Uniform f32_4* %505 = OpAccessChain %38 %504 
					                                       f32_4 %506 = OpLoad %505 
					                                       f32_4 %507 = OpFMul %503 %506 
					                                                      OpStore %420 %507 
					                                       f32_4 %509 = OpLoad %494 
					                                       f32_4 %510 = OpLoad %420 
					                                       f32_4 %511 = OpFMul %509 %510 
					                                                      OpStore %508 %511 
					                                       f32_4 %513 = OpLoad %508 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 3 3 3 
					                                       f32_4 %515 = OpLoad %508 
					                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
					                                       f32_3 %517 = OpFMul %514 %516 
					                                       f32_4 %518 = OpLoad %512 
					                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
					                                                      OpStore %512 %519 
					                                       f32_3 %520 = OpLoad %456 
					                                         f32 %521 = OpLoad %472 
					                                       f32_3 %522 = OpCompositeConstruct %521 %521 %521 
					                                       f32_3 %523 = OpFMul %520 %522 
					                                       f32_4 %524 = OpLoad %512 
					                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
					                                       f32_3 %526 = OpFNegate %525 
					                                       f32_3 %527 = OpFAdd %523 %526 
					                                       f32_4 %528 = OpLoad %512 
					                                       f32_4 %529 = OpVectorShuffle %528 %527 4 5 6 3 
					                                                      OpStore %512 %529 
					                                Private f32* %530 = OpAccessChain %464 %17 
					                                         f32 %531 = OpLoad %530 
					                                Private f32* %532 = OpAccessChain %448 %13 
					                                         f32 %533 = OpLoad %532 
					                                         f32 %534 = OpFMul %531 %533 
					                                Private f32* %535 = OpAccessChain %508 %13 
					                                         f32 %536 = OpLoad %535 
					                                         f32 %537 = OpFNegate %536 
					                                         f32 %538 = OpFAdd %534 %537 
					                                Private f32* %539 = OpAccessChain %512 %13 
					                                                      OpStore %539 %538 
					                                         f32 %540 = OpLoad %68 
					                                       f32_4 %541 = OpCompositeConstruct %540 %540 %540 %540 
					                                       f32_4 %542 = OpLoad %512 
					                                       f32_4 %543 = OpFMul %541 %542 
					                                                      OpStore %464 %543 
					                                Private f32* %545 = OpAccessChain %420 %13 
					                                         f32 %546 = OpLoad %545 
					                                Private f32* %547 = OpAccessChain %494 %13 
					                                         f32 %548 = OpLoad %547 
					                                         f32 %549 = OpFMul %546 %548 
					                                Private f32* %550 = OpAccessChain %464 %13 
					                                         f32 %551 = OpLoad %550 
					                                         f32 %552 = OpFAdd %549 %551 
					                                Private f32* %553 = OpAccessChain %544 %13 
					                                                      OpStore %553 %552 
					                                       f32_4 %554 = OpLoad %508 
					                                       f32_3 %555 = OpVectorShuffle %554 %554 0 1 2 
					                                       f32_4 %556 = OpLoad %508 
					                                       f32_3 %557 = OpVectorShuffle %556 %556 3 3 3 
					                                       f32_3 %558 = OpFMul %555 %557 
					                                       f32_4 %559 = OpLoad %464 
					                                       f32_3 %560 = OpVectorShuffle %559 %559 0 1 2 
					                                       f32_3 %561 = OpFAdd %558 %560 
					                                       f32_4 %562 = OpLoad %544 
					                                       f32_4 %563 = OpVectorShuffle %562 %561 4 5 6 3 
					                                                      OpStore %544 %563 
					                                Private f32* %564 = OpAccessChain %89 %17 
					                                         f32 %565 = OpLoad %564 
					                                         f32 %566 = OpFNegate %565 
					                                         f32 %567 = OpFMul %566 %202 
					                                         f32 %568 = OpLoad %47 
					                                         f32 %569 = OpFAdd %567 %568 
					                                                      OpStore %68 %569 
					                                Private f32* %570 = OpAccessChain %89 %17 
					                                         f32 %571 = OpLoad %570 
					                                         f32 %572 = OpFMul %571 %202 
					                                         f32 %573 = OpLoad %47 
					                                         f32 %574 = OpFAdd %572 %573 
					                                                      OpStore %47 %574 
					                                         f32 %575 = OpLoad %47 
					                                         f32 %576 = OpExtInst %1 43 %575 %102 %90 
					                                                      OpStore %47 %576 
					                                Uniform f32* %578 = OpAccessChain %38 %577 
					                                         f32 %579 = OpLoad %578 
					                                Uniform f32* %580 = OpAccessChain %38 %402 
					                                         f32 %581 = OpLoad %580 
					                                         f32 %582 = OpFMul %579 %581 
					                                Private f32* %583 = OpAccessChain %89 %17 
					                                                      OpStore %583 %582 
					                                Private f32* %584 = OpAccessChain %89 %17 
					                                         f32 %585 = OpLoad %584 
					                                  Input f32* %586 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %587 = OpLoad %586 
					                                         f32 %588 = OpFMul %585 %587 
					                                Private f32* %589 = OpAccessChain %222 %17 
					                                                      OpStore %589 %588 
					                                Private f32* %590 = OpAccessChain %89 %17 
					                                         f32 %591 = OpLoad %590 
					                                  Input f32* %592 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %593 = OpLoad %592 
					                                         f32 %594 = OpFMul %591 %593 
					                                         f32 %595 = OpFAdd %594 %90 
					                                Private f32* %596 = OpAccessChain %512 %17 
					                                                      OpStore %596 %595 
					                                Private f32* %597 = OpAccessChain %222 %17 
					                                         f32 %598 = OpLoad %597 
					                                         f32 %599 = OpFMul %598 %202 
					                                         f32 %600 = OpLoad %68 
					                                         f32 %601 = OpFAdd %599 %600 
					                                                      OpStore %68 %601 
					                                         f32 %602 = OpLoad %68 
					                                Private f32* %603 = OpAccessChain %512 %17 
					                                         f32 %604 = OpLoad %603 
					                                         f32 %605 = OpFDiv %602 %604 
					                                                      OpStore %68 %605 
					                                         f32 %606 = OpLoad %68 
					                                         f32 %607 = OpExtInst %1 43 %606 %102 %90 
					                                                      OpStore %68 %607 
					                                         f32 %608 = OpLoad %68 
					                                         f32 %609 = OpFNegate %608 
					                                         f32 %610 = OpFAdd %609 %90 
					                                                      OpStore %68 %610 
					                                         f32 %612 = OpLoad %68 
					                                       f32_4 %613 = OpCompositeConstruct %612 %612 %612 %612 
					                                       f32_4 %614 = OpLoad %544 
					                                       f32_4 %615 = OpFMul %613 %614 
					                                                      OpStore %611 %615 
					                                Uniform f32* %618 = OpAccessChain %38 %617 
					                                         f32 %619 = OpLoad %618 
					                                         f32 %620 = OpFNegate %619 
					                                Uniform f32* %622 = OpAccessChain %38 %621 
					                                         f32 %623 = OpLoad %622 
					                                         f32 %624 = OpFAdd %620 %623 
					                                Private f32* %625 = OpAccessChain %616 %17 
					                                                      OpStore %625 %624 
					                                         f32 %626 = OpLoad %47 
					                                Private f32* %627 = OpAccessChain %616 %17 
					                                         f32 %628 = OpLoad %627 
					                                         f32 %629 = OpFMul %626 %628 
					                                Uniform f32* %630 = OpAccessChain %38 %617 
					                                         f32 %631 = OpLoad %630 
					                                         f32 %632 = OpFAdd %629 %631 
					                                Private f32* %633 = OpAccessChain %616 %17 
					                                                      OpStore %633 %632 
					                         read_only Texture2D %636 = OpLoad %635 
					                                     sampler %638 = OpLoad %637 
					                  read_only Texture2DSampled %639 = OpSampledImage %636 %638 
					                                       f32_4 %640 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %641 = OpVectorShuffle %640 %640 2 3 
					                                       f32_4 %642 = OpImageSampleImplicitLod %639 %641 
					                                       f32_3 %643 = OpVectorShuffle %642 %642 0 1 3 
					                                                      OpStore %634 %643 
					                                       f32_3 %644 = OpLoad %634 
					                                       f32_2 %645 = OpVectorShuffle %644 %644 0 0 
					                                       f32_3 %646 = OpLoad %634 
					                                       f32_2 %647 = OpVectorShuffle %646 %646 2 2 
					                                         f32 %648 = OpDot %645 %647 
					                                Private f32* %649 = OpAccessChain %512 %17 
					                                                      OpStore %649 %648 
					                                Private f32* %650 = OpAccessChain %634 %23 
					                                         f32 %651 = OpLoad %650 
					                                Private f32* %652 = OpAccessChain %634 %23 
					                                         f32 %653 = OpLoad %652 
					                                         f32 %654 = OpFAdd %651 %653 
					                                Private f32* %655 = OpAccessChain %512 %23 
					                                                      OpStore %655 %654 
					                                       f32_4 %656 = OpLoad %512 
					                                       f32_2 %657 = OpVectorShuffle %656 %656 0 1 
					                                       f32_2 %659 = OpFAdd %657 %658 
					                                       f32_4 %660 = OpLoad %512 
					                                       f32_4 %661 = OpVectorShuffle %660 %659 4 5 2 3 
					                                                      OpStore %512 %661 
					                                       f32_4 %662 = OpLoad %512 
					                                       f32_2 %663 = OpVectorShuffle %662 %662 0 1 
					                                       f32_4 %664 = OpLoad %512 
					                                       f32_2 %665 = OpVectorShuffle %664 %664 0 1 
					                                         f32 %666 = OpDot %663 %665 
					                                                      OpStore %68 %666 
					                                         f32 %667 = OpLoad %68 
					                                         f32 %668 = OpExtInst %1 37 %667 %90 
					                                                      OpStore %68 %668 
					                                         f32 %669 = OpLoad %68 
					                                         f32 %670 = OpFNegate %669 
					                                         f32 %671 = OpFAdd %670 %90 
					                                                      OpStore %68 %671 
					                                         f32 %672 = OpLoad %68 
					                                         f32 %673 = OpExtInst %1 31 %672 
					                                Private f32* %674 = OpAccessChain %512 %28 
					                                                      OpStore %674 %673 
					                                       f32_4 %675 = OpLoad %512 
					                                       f32_3 %676 = OpVectorShuffle %675 %675 0 1 2 
					                                       f32_3 %677 = OpLoad %616 
					                                       f32_3 %678 = OpVectorShuffle %677 %677 0 0 0 
					                                       f32_3 %679 = OpFMul %676 %678 
					                                       f32_3 %682 = OpFAdd %679 %681 
					                                                      OpStore %616 %682 
					                                       f32_4 %683 = OpLoad %611 
					                                       f32_3 %684 = OpVectorShuffle %683 %683 3 3 3 
					                                       f32_3 %685 = OpLoad %616 
					                                       f32_3 %686 = OpFMul %684 %685 
					                                       f32_3 %688 = OpFAdd %686 %687 
					                                                      OpStore %616 %688 
					                                       f32_4 %689 = OpLoad %9 
					                                       f32_3 %690 = OpVectorShuffle %689 %689 0 1 2 
					                                       f32_3 %691 = OpLoad %616 
					                                       f32_3 %692 = OpFNegate %691 
					                                       f32_3 %693 = OpFAdd %690 %692 
					                                       f32_4 %694 = OpLoad %9 
					                                       f32_4 %695 = OpVectorShuffle %694 %693 4 5 6 3 
					                                                      OpStore %9 %695 
					                                       f32_4 %696 = OpLoad %9 
					                                       f32_3 %697 = OpVectorShuffle %696 %696 0 1 2 
					                                       f32_4 %698 = OpLoad %9 
					                                       f32_3 %699 = OpVectorShuffle %698 %698 0 1 2 
					                                         f32 %700 = OpDot %697 %699 
					                                Private f32* %701 = OpAccessChain %616 %17 
					                                                      OpStore %701 %700 
					                                Private f32* %702 = OpAccessChain %616 %17 
					                                         f32 %703 = OpLoad %702 
					                                         f32 %704 = OpExtInst %1 32 %703 
					                                Private f32* %705 = OpAccessChain %616 %17 
					                                                      OpStore %705 %704 
					                                       f32_4 %706 = OpLoad %9 
					                                       f32_3 %707 = OpVectorShuffle %706 %706 0 1 2 
					                                       f32_3 %708 = OpLoad %616 
					                                       f32_3 %709 = OpVectorShuffle %708 %708 0 0 0 
					                                       f32_3 %710 = OpFMul %707 %709 
					                                       f32_4 %711 = OpLoad %9 
					                                       f32_4 %712 = OpVectorShuffle %711 %710 4 5 6 3 
					                                                      OpStore %9 %712 
					                                       f32_4 %713 = OpLoad vs_TEXCOORD2 
					                                       f32_3 %714 = OpVectorShuffle %713 %713 0 1 2 
					                                       f32_4 %715 = OpLoad %9 
					                                       f32_3 %716 = OpVectorShuffle %715 %715 0 1 2 
					                                       f32_3 %717 = OpFNegate %716 
					                                         f32 %718 = OpDot %714 %717 
					                                Private f32* %719 = OpAccessChain %512 %17 
					                                                      OpStore %719 %718 
					                                       f32_4 %720 = OpLoad vs_TEXCOORD3 
					                                       f32_3 %721 = OpVectorShuffle %720 %720 0 1 2 
					                                       f32_4 %722 = OpLoad %9 
					                                       f32_3 %723 = OpVectorShuffle %722 %722 0 1 2 
					                                       f32_3 %724 = OpFNegate %723 
					                                         f32 %725 = OpDot %721 %724 
					                                Private f32* %726 = OpAccessChain %512 %23 
					                                                      OpStore %726 %725 
					                                       f32_4 %727 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %728 = OpVectorShuffle %727 %727 0 1 2 
					                                       f32_4 %729 = OpLoad %9 
					                                       f32_3 %730 = OpVectorShuffle %729 %729 0 1 2 
					                                       f32_3 %731 = OpFNegate %730 
					                                         f32 %732 = OpDot %728 %731 
					                                Private f32* %733 = OpAccessChain %512 %28 
					                                                      OpStore %733 %732 
					                                       f32_4 %734 = OpLoad %512 
					                                       f32_3 %735 = OpVectorShuffle %734 %734 0 1 2 
					                                       f32_4 %736 = OpLoad %512 
					                                       f32_3 %737 = OpVectorShuffle %736 %736 0 1 2 
					                                         f32 %738 = OpDot %735 %737 
					                                Private f32* %739 = OpAccessChain %508 %17 
					                                                      OpStore %739 %738 
					                                Private f32* %740 = OpAccessChain %508 %17 
					                                         f32 %741 = OpLoad %740 
					                                         f32 %742 = OpExtInst %1 32 %741 
					                                Private f32* %743 = OpAccessChain %508 %17 
					                                                      OpStore %743 %742 
					                                       f32_4 %744 = OpLoad %508 
					                                       f32_3 %745 = OpVectorShuffle %744 %744 0 0 0 
					                                       f32_4 %746 = OpLoad %512 
					                                       f32_3 %747 = OpVectorShuffle %746 %746 0 1 2 
					                                       f32_3 %748 = OpFMul %745 %747 
					                                       f32_4 %749 = OpLoad %104 
					                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
					                                                      OpStore %104 %750 
					                                       f32_4 %751 = OpLoad %104 
					                                       f32_3 %752 = OpVectorShuffle %751 %751 0 1 2 
					                                       f32_3 %753 = OpLoad %56 
					                                         f32 %754 = OpDot %752 %753 
					                                Private f32* %755 = OpAccessChain %56 %17 
					                                                      OpStore %755 %754 
					                                Private f32* %756 = OpAccessChain %56 %17 
					                                         f32 %757 = OpLoad %756 
					                                         f32 %758 = OpExtInst %1 40 %757 %102 
					                                Private f32* %759 = OpAccessChain %56 %17 
					                                                      OpStore %759 %758 
					                                Private f32* %760 = OpAccessChain %56 %17 
					                                         f32 %761 = OpLoad %760 
					                                         f32 %762 = OpExtInst %1 30 %761 
					                                Private f32* %763 = OpAccessChain %508 %17 
					                                                      OpStore %763 %762 
					                                Uniform f32* %766 = OpAccessChain %38 %765 
					                                         f32 %767 = OpLoad %766 
					                                         f32 %768 = OpFNegate %767 
					                                Uniform f32* %770 = OpAccessChain %38 %769 
					                                         f32 %771 = OpLoad %770 
					                                         f32 %772 = OpFAdd %768 %771 
					                                                      OpStore %764 %772 
					                                         f32 %774 = OpLoad %47 
					                                         f32 %775 = OpLoad %764 
					                                         f32 %776 = OpFMul %774 %775 
					                                Uniform f32* %777 = OpAccessChain %38 %765 
					                                         f32 %778 = OpLoad %777 
					                                         f32 %779 = OpFAdd %776 %778 
					                                                      OpStore %773 %779 
					                                         f32 %780 = OpLoad %773 
					                                         f32 %782 = OpFMul %780 %781 
					                                Private f32* %783 = OpAccessChain %56 %17 
					                                                      OpStore %783 %782 
					                                Private f32* %784 = OpAccessChain %508 %17 
					                                         f32 %785 = OpLoad %784 
					                                Private f32* %786 = OpAccessChain %56 %17 
					                                         f32 %787 = OpLoad %786 
					                                         f32 %788 = OpFMul %785 %787 
					                                Private f32* %789 = OpAccessChain %508 %17 
					                                                      OpStore %789 %788 
					                                Private f32* %790 = OpAccessChain %508 %17 
					                                         f32 %791 = OpLoad %790 
					                                         f32 %792 = OpExtInst %1 29 %791 
					                                Private f32* %793 = OpAccessChain %508 %17 
					                                                      OpStore %793 %792 
					                              Uniform f32_4* %795 = OpAccessChain %38 %794 
					                                       f32_4 %796 = OpLoad %795 
					                                       f32_3 %797 = OpVectorShuffle %796 %796 0 1 2 
					                              Uniform f32_4* %799 = OpAccessChain %38 %798 
					                                       f32_4 %800 = OpLoad %799 
					                                       f32_3 %801 = OpVectorShuffle %800 %800 0 1 2 
					                                       f32_3 %802 = OpFMul %797 %801 
					                                                      OpStore %56 %802 
					                                       f32_4 %803 = OpLoad %508 
					                                       f32_3 %804 = OpVectorShuffle %803 %803 0 0 0 
					                                       f32_3 %805 = OpLoad %56 
					                                       f32_3 %806 = OpFMul %804 %805 
					                                       f32_4 %807 = OpLoad %508 
					                                       f32_4 %808 = OpVectorShuffle %807 %806 4 5 6 3 
					                                                      OpStore %508 %808 
					                                       f32_4 %809 = OpLoad %104 
					                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
					                              Uniform f32_4* %811 = OpAccessChain %38 %62 
					                                       f32_4 %812 = OpLoad %811 
					                                       f32_3 %813 = OpVectorShuffle %812 %812 0 1 2 
					                                         f32 %814 = OpDot %810 %813 
					                                Private f32* %815 = OpAccessChain %56 %17 
					                                                      OpStore %815 %814 
					                                Private f32* %816 = OpAccessChain %56 %17 
					                                         f32 %817 = OpLoad %816 
					                                         f32 %818 = OpExtInst %1 40 %817 %102 
					                                Private f32* %819 = OpAccessChain %56 %17 
					                                                      OpStore %819 %818 
					                                Private f32* %821 = OpAccessChain %611 %13 
					                                         f32 %822 = OpLoad %821 
					                                         f32 %824 = OpExtInst %1 40 %822 %823 
					                                                      OpStore %820 %824 
					                                       f32_4 %826 = OpLoad %611 
					                                       f32_3 %827 = OpVectorShuffle %826 %826 0 1 2 
					                                         f32 %828 = OpLoad %820 
					                                       f32_3 %829 = OpCompositeConstruct %828 %828 %828 
					                                       f32_3 %830 = OpFDiv %827 %829 
					                                                      OpStore %825 %830 
					                                       f32_3 %832 = OpLoad %825 
					                              Uniform f32_4* %833 = OpAccessChain %38 %794 
					                                       f32_4 %834 = OpLoad %833 
					                                       f32_3 %835 = OpVectorShuffle %834 %834 0 1 2 
					                                       f32_3 %836 = OpFMul %832 %835 
					                                                      OpStore %831 %836 
					                                       f32_3 %837 = OpLoad %831 
					                                       f32_3 %838 = OpLoad %56 
					                                       f32_3 %839 = OpVectorShuffle %838 %838 0 0 0 
					                                       f32_3 %840 = OpFMul %837 %839 
					                                       f32_4 %841 = OpLoad %508 
					                                       f32_3 %842 = OpVectorShuffle %841 %841 0 1 2 
					                                       f32_3 %843 = OpFAdd %840 %842 
					                                       f32_4 %844 = OpLoad %508 
					                                       f32_4 %845 = OpVectorShuffle %844 %843 4 5 6 3 
					                                                      OpStore %508 %845 
					                                Private f32* %846 = OpAccessChain %104 %13 
					                                                      OpStore %846 %90 
					                              Uniform f32_4* %848 = OpAccessChain %38 %847 
					                                       f32_4 %849 = OpLoad %848 
					                                       f32_4 %850 = OpLoad %104 
					                                         f32 %851 = OpDot %849 %850 
					                                Private f32* %852 = OpAccessChain %56 %17 
					                                                      OpStore %852 %851 
					                              Uniform f32_4* %854 = OpAccessChain %38 %853 
					                                       f32_4 %855 = OpLoad %854 
					                                       f32_4 %856 = OpLoad %104 
					                                         f32 %857 = OpDot %855 %856 
					                                Private f32* %858 = OpAccessChain %56 %23 
					                                                      OpStore %858 %857 
					                              Uniform f32_4* %860 = OpAccessChain %38 %859 
					                                       f32_4 %861 = OpLoad %860 
					                                       f32_4 %862 = OpLoad %104 
					                                         f32 %863 = OpDot %861 %862 
					                                Private f32* %864 = OpAccessChain %56 %28 
					                                                      OpStore %864 %863 
					                                       f32_3 %865 = OpLoad %56 
					                                       f32_3 %868 = OpLoad vs_TEXCOORD7 
					                                       f32_3 %869 = OpFAdd %865 %868 
					                                                      OpStore %56 %869 
					                                       f32_3 %870 = OpLoad %56 
					                                       f32_3 %872 = OpExtInst %1 40 %870 %871 
					                                                      OpStore %56 %872 
					                                       f32_3 %873 = OpLoad %825 
					                                       f32_3 %874 = OpLoad %56 
					                                       f32_3 %875 = OpFMul %873 %874 
					                                       f32_4 %876 = OpLoad %508 
					                                       f32_3 %877 = OpVectorShuffle %876 %876 0 1 2 
					                                       f32_3 %878 = OpFAdd %875 %877 
					                                                      OpStore %56 %878 
					                              Uniform f32_4* %880 = OpAccessChain %38 %879 
					                                       f32_4 %881 = OpLoad %880 
					                                       f32_3 %882 = OpVectorShuffle %881 %881 0 1 2 
					                                       f32_3 %883 = OpFNegate %882 
					                              Uniform f32_4* %885 = OpAccessChain %38 %884 
					                                       f32_4 %886 = OpLoad %885 
					                                       f32_3 %887 = OpVectorShuffle %886 %886 0 1 2 
					                                       f32_3 %888 = OpFAdd %883 %887 
					                                       f32_4 %889 = OpLoad %508 
					                                       f32_4 %890 = OpVectorShuffle %889 %888 4 5 6 3 
					                                                      OpStore %508 %890 
					                                         f32 %891 = OpLoad %47 
					                                       f32_3 %892 = OpCompositeConstruct %891 %891 %891 
					                                       f32_4 %893 = OpLoad %508 
					                                       f32_3 %894 = OpVectorShuffle %893 %893 0 1 2 
					                                       f32_3 %895 = OpFMul %892 %894 
					                              Uniform f32_4* %896 = OpAccessChain %38 %879 
					                                       f32_4 %897 = OpLoad %896 
					                                       f32_3 %898 = OpVectorShuffle %897 %897 0 1 2 
					                                       f32_3 %899 = OpFAdd %895 %898 
					                                                      OpStore %616 %899 
					                                       f32_4 %901 = OpLoad %9 
					                                       f32_3 %902 = OpVectorShuffle %901 %901 1 1 1 
					                              Uniform f32_4* %904 = OpAccessChain %38 %903 %40 
					                                       f32_4 %905 = OpLoad %904 
					                                       f32_3 %906 = OpVectorShuffle %905 %905 0 1 2 
					                                       f32_3 %907 = OpFMul %902 %906 
					                                                      OpStore %900 %907 
					                              Uniform f32_4* %908 = OpAccessChain %38 %903 %440 
					                                       f32_4 %909 = OpLoad %908 
					                                       f32_3 %910 = OpVectorShuffle %909 %909 0 1 2 
					                                       f32_4 %911 = OpLoad %9 
					                                       f32_3 %912 = OpVectorShuffle %911 %911 0 0 0 
					                                       f32_3 %913 = OpFMul %910 %912 
					                                       f32_3 %914 = OpLoad %900 
					                                       f32_3 %915 = OpFAdd %913 %914 
					                                       f32_4 %916 = OpLoad %9 
					                                       f32_4 %917 = OpVectorShuffle %916 %915 4 5 2 6 
					                                                      OpStore %9 %917 
					                              Uniform f32_4* %918 = OpAccessChain %38 %903 %62 
					                                       f32_4 %919 = OpLoad %918 
					                                       f32_3 %920 = OpVectorShuffle %919 %919 0 1 2 
					                                       f32_4 %921 = OpLoad %9 
					                                       f32_3 %922 = OpVectorShuffle %921 %921 2 2 2 
					                                       f32_3 %923 = OpFMul %920 %922 
					                                       f32_4 %924 = OpLoad %9 
					                                       f32_3 %925 = OpVectorShuffle %924 %924 0 1 3 
					                                       f32_3 %926 = OpFAdd %923 %925 
					                                       f32_4 %927 = OpLoad %9 
					                                       f32_4 %928 = OpVectorShuffle %927 %926 4 5 6 3 
					                                                      OpStore %9 %928 
					                                       f32_3 %930 = OpLoad vs_TEXCOORD6 
					                                       f32_4 %931 = OpLoad %9 
					                                       f32_3 %932 = OpVectorShuffle %931 %931 0 1 2 
					                                         f32 %933 = OpDot %930 %932 
					                                                      OpStore %47 %933 
					                                         f32 %934 = OpLoad %47 
					                                         f32 %935 = OpLoad %47 
					                                         f32 %936 = OpFAdd %934 %935 
					                                                      OpStore %47 %936 
					                                       f32_4 %937 = OpLoad %9 
					                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 2 
					                                         f32 %939 = OpLoad %47 
					                                       f32_3 %940 = OpCompositeConstruct %939 %939 %939 
					                                       f32_3 %941 = OpFNegate %940 
					                                       f32_3 %942 = OpFMul %938 %941 
					                                       f32_3 %943 = OpLoad vs_TEXCOORD6 
					                                       f32_3 %944 = OpFAdd %942 %943 
					                                       f32_4 %945 = OpLoad %9 
					                                       f32_4 %946 = OpVectorShuffle %945 %944 4 5 6 3 
					                                                      OpStore %9 %946 
					                       read_only TextureCube %951 = OpLoad %950 
					                                     sampler %953 = OpLoad %952 
					                read_only TextureCubeSampled %955 = OpSampledImage %951 %953 
					                                       f32_4 %956 = OpLoad %9 
					                                       f32_3 %957 = OpVectorShuffle %956 %956 0 1 2 
					                                       f32_4 %958 = OpImageSampleImplicitLod %955 %957 
					                                       f32_3 %959 = OpVectorShuffle %958 %958 0 1 2 
					                                                      OpStore %947 %959 
					                                       f32_3 %960 = OpLoad %616 
					                                       f32_3 %961 = OpLoad %947 
					                                       f32_3 %962 = OpFMul %960 %961 
					                                       f32_4 %963 = OpLoad %9 
					                                       f32_4 %964 = OpVectorShuffle %963 %962 4 5 6 3 
					                                                      OpStore %9 %964 
					                                       f32_4 %967 = OpLoad %9 
					                                       f32_3 %968 = OpVectorShuffle %967 %967 0 1 2 
					                                       f32_4 %969 = OpLoad %611 
					                                       f32_3 %970 = OpVectorShuffle %969 %969 3 3 3 
					                                       f32_3 %971 = OpFMul %968 %970 
					                                       f32_3 %972 = OpLoad %56 
					                                       f32_3 %973 = OpFAdd %971 %972 
					                                       f32_4 %974 = OpLoad %966 
					                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
					                                                      OpStore %966 %975 
					                                Private f32* %976 = OpAccessChain %611 %13 
					                                         f32 %977 = OpLoad %976 
					                                 Output f32* %979 = OpAccessChain %966 %13 
					                                                      OpStore %979 %977 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[3];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					int u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat16 = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat16 + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat15 * 0.5;
					    u_xlat15 = u_xlat2.y * unity_MatrixVP[1].w;
					    u_xlat15 = unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat2.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat16 = u_xlat15 * 1.5;
					    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat16);
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xxx;
					    u_xlat3.x = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat3.x) * u_xlat15 + u_xlat16;
					    u_xlat3.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.wxy * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.ywx * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat3.xyz = u_xlat0.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyw = _EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat2.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat2.xxxx + u_xlat3;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2.wwzw + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	vec4 unity_4LightAtten0;
					uniform 	vec4 unity_LightColor[8];
					uniform 	vec4 unity_SHBr;
					uniform 	vec4 unity_SHBg;
					uniform 	vec4 unity_SHBb;
					uniform 	vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _FaceDilate;
					uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _FaceTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					int u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat16 = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat16 + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat15 * 0.5;
					    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat16 = u_xlat15 * 1.5;
					    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat16);
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xxx;
					    u_xlat3.x = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat3.x) * u_xlat15 + u_xlat16;
					    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.wxy * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.ywx * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
					    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat2.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat2.xxxx + u_xlat3;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat2.wwzw + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_SHAr;
					uniform 	vec4 unity_SHAg;
					uniform 	vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _SpecColor;
					uniform 	float _FaceUVSpeedX;
					uniform 	float _FaceUVSpeedY;
					uniform 	vec4 _FaceColor;
					uniform 	float _OutlineSoftness;
					uniform 	float _OutlineUVSpeedX;
					uniform 	float _OutlineUVSpeedY;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _Bevel;
					uniform 	float _BevelOffset;
					uniform 	float _BevelWidth;
					uniform 	float _BevelClamp;
					uniform 	float _BevelRoundness;
					uniform 	float _BumpOutline;
					uniform 	float _BumpFace;
					uniform 	vec4 _ReflectFaceColor;
					uniform 	vec4 _ReflectOutlineColor;
					uniform 	float _ShaderFlags;
					uniform 	float _ScaleRatioA;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _FaceShininess;
					uniform 	float _OutlineShininess;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _FaceTex;
					UNITY_LOCATION(2) uniform  sampler2D _OutlineTex;
					UNITY_LOCATION(3) uniform  sampler2D _BumpMap;
					UNITY_LOCATION(4) uniform  samplerCube _Cube;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					float u_xlat16_4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb9;
					float u_xlat10;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat1 = vec4(u_xlat18) + u_xlat3;
					    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat18 = _BevelWidth + _OutlineWidth;
					    u_xlat18 = max(u_xlat18, 0.00999999978);
					    u_xlat1 = u_xlat1 / vec4(u_xlat18);
					    u_xlat18 = u_xlat18 * _Bevel;
					    u_xlat18 = u_xlat18 * _GradientScale;
					    u_xlat18 = u_xlat18 * -2.0;
					    u_xlat1 = u_xlat1 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2 = u_xlat1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = _ShaderFlags * 0.5;
					    u_xlatb9 = u_xlat3.x>=(-u_xlat3.x);
					    u_xlat3.x = fract(abs(u_xlat3.x));
					    u_xlat3.x = (u_xlatb9) ? u_xlat3.x : (-u_xlat3.x);
					    u_xlatb3 = u_xlat3.x>=0.5;
					    u_xlat1 = (bool(u_xlatb3)) ? u_xlat2 : u_xlat1;
					    u_xlat2 = u_xlat1 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat1 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat1;
					    u_xlat2.x = (-_BevelClamp) + 1.0;
					    u_xlat1 = min(u_xlat1, u_xlat2.xxxx);
					    u_xlat1.xz = vec2(u_xlat18) * u_xlat1.xz;
					    u_xlat1.yz = u_xlat1.wy * vec2(u_xlat18) + (-u_xlat1.zx);
					    u_xlat1.x = float(-1.0);
					    u_xlat1.w = float(1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat19 = dot(u_xlat1.zw, u_xlat1.zw);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.x = u_xlat19 * u_xlat1.z;
					    u_xlat2.yz = vec2(u_xlat19) * vec2(1.0, 0.0);
					    u_xlat1.z = 0.0;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat2.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_2 = texture(_OutlineTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;
					    u_xlat18 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat3.w = u_xlat10_2.w * u_xlat18;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.www;
					    u_xlat2.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_2 = texture(_FaceTex, u_xlat2.xy);
					    u_xlat4 = vs_COLOR0 * _FaceColor;
					    u_xlat2 = u_xlat10_2 * u_xlat4;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2) + u_xlat3;
					    u_xlat18 = _OutlineWidth * _ScaleRatioA;
					    u_xlat18 = u_xlat18 * vs_TEXCOORD5.y;
					    u_xlat19 = min(u_xlat18, 1.0);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = (-u_xlat10_4.w) + 0.5;
					    u_xlat4.x = u_xlat16_4 + (-vs_TEXCOORD5.x);
					    u_xlat4.x = u_xlat4.x * vs_TEXCOORD5.y + 0.5;
					    u_xlat10 = u_xlat18 * 0.5 + u_xlat4.x;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.5 + u_xlat4.x;
					    u_xlat19 = u_xlat19 * u_xlat10;
					    u_xlat2 = vec4(u_xlat19) * u_xlat3 + u_xlat2;
					    u_xlat19 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.x = u_xlat19 * vs_TEXCOORD5.y;
					    u_xlat19 = u_xlat19 * vs_TEXCOORD5.y + 1.0;
					    u_xlat18 = u_xlat3.x * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat18 / u_xlat19;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2 = vec4(u_xlat18) * u_xlat2;
					    u_xlat18 = (-_BumpFace) + _BumpOutline;
					    u_xlat18 = u_xlat10 * u_xlat18 + _BumpFace;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat3.z = sqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat18) + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.xyz = u_xlat2.www * u_xlat3.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, (-u_xlat1.xyz));
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, (-u_xlat1.xyz));
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, (-u_xlat1.xyz));
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat6.x = u_xlat10 * u_xlat6.x + _FaceShininess;
					    u_xlat6.x = u_xlat6.x * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat6.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat19 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat19);
					    u_xlat4.xzw = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat4.xzw * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat5.x = dot(unity_SHAr, u_xlat3);
					    u_xlat5.y = dot(unity_SHAg, u_xlat3);
					    u_xlat5.z = dot(unity_SHAb, u_xlat3);
					    u_xlat3.xyz = u_xlat5.xyz + vs_TEXCOORD7.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz + _ReflectFaceColor.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat18 = dot(vs_TEXCOORD6.xyz, u_xlat1.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat18)) + vs_TEXCOORD6.xyz;
					    u_xlat10_1 = texture(_Cube, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat0.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 821
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %107 %119 %145 %160 %172 %223 %388 %496 %573 %586 %590 %612 %613 %636 %811 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpDecorate %22 ArrayStride 22 
					                                                      OpDecorate %23 ArrayStride 23 
					                                                      OpDecorate %24 ArrayStride 24 
					                                                      OpMemberDecorate %25 0 Offset 25 
					                                                      OpMemberDecorate %25 1 Offset 25 
					                                                      OpMemberDecorate %25 2 Offset 25 
					                                                      OpMemberDecorate %25 3 Offset 25 
					                                                      OpMemberDecorate %25 4 Offset 25 
					                                                      OpMemberDecorate %25 5 RelaxedPrecision 
					                                                      OpMemberDecorate %25 5 Offset 25 
					                                                      OpMemberDecorate %25 6 RelaxedPrecision 
					                                                      OpMemberDecorate %25 6 Offset 25 
					                                                      OpMemberDecorate %25 7 RelaxedPrecision 
					                                                      OpMemberDecorate %25 7 Offset 25 
					                                                      OpMemberDecorate %25 8 RelaxedPrecision 
					                                                      OpMemberDecorate %25 8 Offset 25 
					                                                      OpMemberDecorate %25 9 RelaxedPrecision 
					                                                      OpMemberDecorate %25 9 Offset 25 
					                                                      OpMemberDecorate %25 10 RelaxedPrecision 
					                                                      OpMemberDecorate %25 10 Offset 25 
					                                                      OpMemberDecorate %25 11 Offset 25 
					                                                      OpMemberDecorate %25 12 Offset 25 
					                                                      OpMemberDecorate %25 13 Offset 25 
					                                                      OpMemberDecorate %25 14 Offset 25 
					                                                      OpMemberDecorate %25 15 Offset 25 
					                                                      OpMemberDecorate %25 16 Offset 25 
					                                                      OpMemberDecorate %25 17 Offset 25 
					                                                      OpMemberDecorate %25 18 Offset 25 
					                                                      OpMemberDecorate %25 19 Offset 25 
					                                                      OpMemberDecorate %25 20 Offset 25 
					                                                      OpMemberDecorate %25 21 Offset 25 
					                                                      OpMemberDecorate %25 22 Offset 25 
					                                                      OpMemberDecorate %25 23 Offset 25 
					                                                      OpMemberDecorate %25 24 Offset 25 
					                                                      OpMemberDecorate %25 25 Offset 25 
					                                                      OpMemberDecorate %25 26 Offset 25 
					                                                      OpMemberDecorate %25 27 Offset 25 
					                                                      OpMemberDecorate %25 28 Offset 25 
					                                                      OpMemberDecorate %25 29 Offset 25 
					                                                      OpDecorate %25 Block 
					                                                      OpDecorate %27 DescriptorSet 27 
					                                                      OpDecorate %27 Binding 27 
					                                                      OpMemberDecorate %105 0 BuiltIn 105 
					                                                      OpMemberDecorate %105 1 BuiltIn 105 
					                                                      OpMemberDecorate %105 2 BuiltIn 105 
					                                                      OpDecorate %105 Block 
					                                                      OpDecorate %119 Location 119 
					                                                      OpDecorate vs_TEXCOORD0 Location 145 
					                                                      OpDecorate vs_TEXCOORD1 Location 160 
					                                                      OpDecorate %172 Location 172 
					                                                      OpDecorate vs_TEXCOORD5 Location 223 
					                                                      OpDecorate %388 Location 388 
					                                                      OpDecorate %496 Location 496 
					                                                      OpDecorate vs_TEXCOORD2 Location 573 
					                                                      OpDecorate vs_TEXCOORD3 Location 586 
					                                                      OpDecorate vs_TEXCOORD4 Location 590 
					                                                      OpDecorate %612 RelaxedPrecision 
					                                                      OpDecorate %612 Location 612 
					                                                      OpDecorate %613 RelaxedPrecision 
					                                                      OpDecorate %613 Location 613 
					                                                      OpDecorate %614 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD6 Location 636 
					                                                      OpDecorate %703 RelaxedPrecision 
					                                                      OpDecorate %722 RelaxedPrecision 
					                                                      OpDecorate %723 RelaxedPrecision 
					                                                      OpDecorate %728 RelaxedPrecision 
					                                                      OpDecorate %729 RelaxedPrecision 
					                                                      OpDecorate %739 RelaxedPrecision 
					                                                      OpDecorate %740 RelaxedPrecision 
					                                                      OpDecorate %750 RelaxedPrecision 
					                                                      OpDecorate %751 RelaxedPrecision 
					                                                      OpDecorate %761 RelaxedPrecision 
					                                                      OpDecorate %774 RelaxedPrecision 
					                                                      OpDecorate %775 RelaxedPrecision 
					                                                      OpDecorate %778 RelaxedPrecision 
					                                                      OpDecorate %783 RelaxedPrecision 
					                                                      OpDecorate %786 RelaxedPrecision 
					                                                      OpDecorate %787 RelaxedPrecision 
					                                                      OpDecorate %788 RelaxedPrecision 
					                                                      OpDecorate %792 RelaxedPrecision 
					                                                      OpDecorate %793 RelaxedPrecision 
					                                                      OpDecorate %794 RelaxedPrecision 
					                                                      OpDecorate %798 RelaxedPrecision 
					                                                      OpDecorate %799 RelaxedPrecision 
					                                                      OpDecorate %800 RelaxedPrecision 
					                                                      OpDecorate %804 RelaxedPrecision 
					                                                      OpDecorate %805 RelaxedPrecision 
					                                                      OpDecorate %806 RelaxedPrecision 
					                                                      OpDecorate %807 RelaxedPrecision 
					                                                      OpDecorate %808 RelaxedPrecision 
					                                                      OpDecorate %809 RelaxedPrecision 
					                                                      OpDecorate %810 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 811 
					                                                      OpDecorate %814 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %12 = OpTypeVector %6 2 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 8 
					                                              %18 = OpTypeArray %7 %17 
					                                          u32 %19 = OpConstant 4 
					                                              %20 = OpTypeArray %7 %19 
					                                              %21 = OpTypeArray %7 %19 
					                                              %22 = OpTypeArray %7 %19 
					                                              %23 = OpTypeArray %7 %19 
					                                              %24 = OpTypeArray %7 %19 
					                                              %25 = OpTypeStruct %15 %7 %7 %7 %7 %7 %18 %7 %7 %7 %7 %20 %21 %7 %22 %23 %6 %24 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
					                                              %26 = OpTypePointer Uniform %25 
					Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %27 = OpVariable Uniform 
					                                              %28 = OpTypeInt 32 1 
					                                          i32 %29 = OpConstant 21 
					                                              %30 = OpTypePointer Uniform %6 
					                                          i32 %33 = OpConstant 22 
					                               Private f32_4* %40 = OpVariable Private 
					                                          i32 %43 = OpConstant 11 
					                                          i32 %44 = OpConstant 1 
					                                              %45 = OpTypePointer Uniform %7 
					                                          i32 %49 = OpConstant 0 
					                                          i32 %57 = OpConstant 2 
					                               Private f32_4* %65 = OpVariable Private 
					                                          i32 %67 = OpConstant 3 
					                               Private f32_4* %82 = OpVariable Private 
					                                          i32 %85 = OpConstant 15 
					                                         u32 %103 = OpConstant 1 
					                                             %104 = OpTypeArray %6 %103 
					                                             %105 = OpTypeStruct %7 %6 %104 
					                                             %106 = OpTypePointer Output %105 
					        Output struct {f32_4; f32; f32[1];}* %107 = OpVariable Output 
					                                             %115 = OpTypePointer Output %7 
					                                             %117 = OpTypePointer Private %6 
					                                Private f32* %118 = OpVariable Private 
					                                Input f32_4* %119 = OpVariable Input 
					                                         u32 %120 = OpConstant 0 
					                                             %121 = OpTypePointer Input %6 
					                                         f32 %124 = OpConstant 3,674022E-40 
					                                         f32 %132 = OpConstant 3,674022E-40 
					                                         f32 %140 = OpConstant 3,674022E-40 
					                                       f32_2 %141 = OpConstantComposite %140 %140 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                                         i32 %148 = OpConstant 28 
					                                             %159 = OpTypePointer Output %12 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                         i32 %163 = OpConstant 29 
					                                Input f32_4* %172 = OpVariable Input 
					                                         i32 %175 = OpConstant 27 
					                                             %186 = OpTypeBool 
					                                             %187 = OpTypePointer Private %186 
					                               Private bool* %188 = OpVariable Private 
					                                         f32 %189 = OpConstant 3,674022E-40 
					                                         f32 %194 = OpConstant 3,674022E-40 
					                                Private f32* %196 = OpVariable Private 
					                                         i32 %197 = OpConstant 18 
					                                         i32 %201 = OpConstant 19 
					                                         f32 %212 = OpConstant 3,674022E-40 
					                                         i32 %214 = OpConstant 16 
					                                         i32 %219 = OpConstant 20 
					                       Output f32_2* vs_TEXCOORD5 = OpVariable Output 
					                                         f32 %225 = OpConstant 3,674022E-40 
					                                             %227 = OpTypePointer Output %6 
					                                         u32 %231 = OpConstant 3 
					                                         u32 %244 = OpConstant 2 
					                                         i32 %260 = OpConstant 14 
					                                         i32 %281 = OpConstant 24 
					                                         i32 %284 = OpConstant 25 
					                                         i32 %308 = OpConstant 23 
					                                         f32 %316 = OpConstant 3,674022E-40 
					                                         i32 %318 = OpConstant 26 
					                                             %333 = OpTypePointer Uniform %15 
					                                         i32 %337 = OpConstant 12 
					                                             %387 = OpTypePointer Input %15 
					                                Input f32_3* %388 = OpVariable Input 
					                                             %394 = OpTypePointer Private %28 
					                                Private i32* %395 = OpVariable Private 
					                                         u32 %399 = OpConstant 4294967295 
					                                Private i32* %402 = OpVariable Private 
					                                Input f32_4* %496 = OpVariable Input 
					                              Private f32_4* %541 = OpVariable Private 
					                                         i32 %562 = OpConstant 13 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %612 = OpVariable Output 
					                                Input f32_4* %613 = OpVariable Input 
					                                         i32 %617 = OpConstant 17 
					                                             %635 = OpTypePointer Output %15 
					                       Output f32_3* vs_TEXCOORD6 = OpVariable Output 
					                                         i32 %668 = OpConstant 4 
					                                         f32 %695 = OpConstant 3,674022E-40 
					                                       f32_4 %696 = OpConstantComposite %695 %695 %695 %695 
					                                         i32 %701 = OpConstant 5 
					                                       f32_4 %705 = OpConstantComposite %194 %194 %194 %194 
					                                       f32_4 %713 = OpConstantComposite %189 %189 %189 %189 
					                                         i32 %720 = OpConstant 6 
					                                             %760 = OpTypePointer Private %15 
					                              Private f32_3* %761 = OpVariable Private 
					                              Private f32_4* %778 = OpVariable Private 
					                              Private f32_3* %783 = OpVariable Private 
					                                         i32 %784 = OpConstant 7 
					                                         i32 %790 = OpConstant 8 
					                                         i32 %796 = OpConstant 9 
					                                         i32 %802 = OpConstant 10 
					                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %13 = OpLoad %11 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %31 = OpAccessChain %27 %29 
					                                          f32 %32 = OpLoad %31 
					                                 Uniform f32* %34 = OpAccessChain %27 %33 
					                                          f32 %35 = OpLoad %34 
					                                        f32_2 %36 = OpCompositeConstruct %32 %35 
					                                        f32_2 %37 = OpFAdd %14 %36 
					                                        f32_4 %38 = OpLoad %9 
					                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 2 3 
					                                                      OpStore %9 %39 
					                                        f32_4 %41 = OpLoad %9 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 1 1 1 1 
					                               Uniform f32_4* %46 = OpAccessChain %27 %43 %44 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_4 %48 = OpFMul %42 %47 
					                                                      OpStore %40 %48 
					                               Uniform f32_4* %50 = OpAccessChain %27 %43 %49 
					                                        f32_4 %51 = OpLoad %50 
					                                        f32_4 %52 = OpLoad %9 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 0 0 0 0 
					                                        f32_4 %54 = OpFMul %51 %53 
					                                        f32_4 %55 = OpLoad %40 
					                                        f32_4 %56 = OpFAdd %54 %55 
					                                                      OpStore %40 %56 
					                               Uniform f32_4* %58 = OpAccessChain %27 %43 %57 
					                                        f32_4 %59 = OpLoad %58 
					                                        f32_4 %60 = OpLoad %11 
					                                        f32_4 %61 = OpVectorShuffle %60 %60 2 2 2 2 
					                                        f32_4 %62 = OpFMul %59 %61 
					                                        f32_4 %63 = OpLoad %40 
					                                        f32_4 %64 = OpFAdd %62 %63 
					                                                      OpStore %40 %64 
					                                        f32_4 %66 = OpLoad %40 
					                               Uniform f32_4* %68 = OpAccessChain %27 %43 %67 
					                                        f32_4 %69 = OpLoad %68 
					                                        f32_4 %70 = OpFAdd %66 %69 
					                                                      OpStore %65 %70 
					                               Uniform f32_4* %71 = OpAccessChain %27 %43 %67 
					                                        f32_4 %72 = OpLoad %71 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_4 %74 = OpLoad %11 
					                                        f32_3 %75 = OpVectorShuffle %74 %74 3 3 3 
					                                        f32_3 %76 = OpFMul %73 %75 
					                                        f32_4 %77 = OpLoad %40 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFAdd %76 %78 
					                                        f32_4 %80 = OpLoad %40 
					                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
					                                                      OpStore %40 %81 
					                                        f32_4 %83 = OpLoad %65 
					                                        f32_4 %84 = OpVectorShuffle %83 %83 1 1 1 1 
					                               Uniform f32_4* %86 = OpAccessChain %27 %85 %44 
					                                        f32_4 %87 = OpLoad %86 
					                                        f32_4 %88 = OpFMul %84 %87 
					                                                      OpStore %82 %88 
					                               Uniform f32_4* %89 = OpAccessChain %27 %85 %49 
					                                        f32_4 %90 = OpLoad %89 
					                                        f32_4 %91 = OpLoad %65 
					                                        f32_4 %92 = OpVectorShuffle %91 %91 0 0 0 0 
					                                        f32_4 %93 = OpFMul %90 %92 
					                                        f32_4 %94 = OpLoad %82 
					                                        f32_4 %95 = OpFAdd %93 %94 
					                                                      OpStore %82 %95 
					                               Uniform f32_4* %96 = OpAccessChain %27 %85 %57 
					                                        f32_4 %97 = OpLoad %96 
					                                        f32_4 %98 = OpLoad %65 
					                                        f32_4 %99 = OpVectorShuffle %98 %98 2 2 2 2 
					                                       f32_4 %100 = OpFMul %97 %99 
					                                       f32_4 %101 = OpLoad %82 
					                                       f32_4 %102 = OpFAdd %100 %101 
					                                                      OpStore %82 %102 
					                              Uniform f32_4* %108 = OpAccessChain %27 %85 %67 
					                                       f32_4 %109 = OpLoad %108 
					                                       f32_4 %110 = OpLoad %65 
					                                       f32_4 %111 = OpVectorShuffle %110 %110 3 3 3 3 
					                                       f32_4 %112 = OpFMul %109 %111 
					                                       f32_4 %113 = OpLoad %82 
					                                       f32_4 %114 = OpFAdd %112 %113 
					                               Output f32_4* %116 = OpAccessChain %107 %49 
					                                                      OpStore %116 %114 
					                                  Input f32* %122 = OpAccessChain %119 %120 
					                                         f32 %123 = OpLoad %122 
					                                         f32 %125 = OpFMul %123 %124 
					                                                      OpStore %118 %125 
					                                         f32 %126 = OpLoad %118 
					                                         f32 %127 = OpExtInst %1 8 %126 
					                                Private f32* %128 = OpAccessChain %82 %120 
					                                                      OpStore %128 %127 
					                                Private f32* %129 = OpAccessChain %82 %120 
					                                         f32 %130 = OpLoad %129 
					                                         f32 %131 = OpFNegate %130 
					                                         f32 %133 = OpFMul %131 %132 
					                                  Input f32* %134 = OpAccessChain %119 %120 
					                                         f32 %135 = OpLoad %134 
					                                         f32 %136 = OpFAdd %133 %135 
					                                Private f32* %137 = OpAccessChain %82 %103 
					                                                      OpStore %137 %136 
					                                       f32_4 %138 = OpLoad %82 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %142 = OpFMul %139 %141 
					                                       f32_4 %143 = OpLoad %82 
					                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 2 3 
					                                                      OpStore %82 %144 
					                                       f32_4 %146 = OpLoad %82 
					                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
					                              Uniform f32_4* %149 = OpAccessChain %27 %148 
					                                       f32_4 %150 = OpLoad %149 
					                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
					                                       f32_2 %152 = OpFMul %147 %151 
					                              Uniform f32_4* %153 = OpAccessChain %27 %148 
					                                       f32_4 %154 = OpLoad %153 
					                                       f32_2 %155 = OpVectorShuffle %154 %154 2 3 
					                                       f32_2 %156 = OpFAdd %152 %155 
					                                       f32_4 %157 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %158 = OpVectorShuffle %157 %156 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %158 
					                                       f32_4 %161 = OpLoad %82 
					                                       f32_2 %162 = OpVectorShuffle %161 %161 0 1 
					                              Uniform f32_4* %164 = OpAccessChain %27 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
					                                       f32_2 %167 = OpFMul %162 %166 
					                              Uniform f32_4* %168 = OpAccessChain %27 %163 
					                                       f32_4 %169 = OpLoad %168 
					                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
					                                       f32_2 %171 = OpFAdd %167 %170 
					                                                      OpStore vs_TEXCOORD1 %171 
					                                       f32_4 %173 = OpLoad %172 
					                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
					                              Uniform f32_4* %176 = OpAccessChain %27 %175 
					                                       f32_4 %177 = OpLoad %176 
					                                       f32_2 %178 = OpVectorShuffle %177 %177 0 1 
					                                       f32_2 %179 = OpFMul %174 %178 
					                              Uniform f32_4* %180 = OpAccessChain %27 %175 
					                                       f32_4 %181 = OpLoad %180 
					                                       f32_2 %182 = OpVectorShuffle %181 %181 2 3 
					                                       f32_2 %183 = OpFAdd %179 %182 
					                                       f32_4 %184 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %185 
					                                  Input f32* %190 = OpAccessChain %119 %103 
					                                         f32 %191 = OpLoad %190 
					                                        bool %192 = OpFOrdGreaterThanEqual %189 %191 
					                                                      OpStore %188 %192 
					                                        bool %193 = OpLoad %188 
					                                         f32 %195 = OpSelect %193 %194 %189 
					                                                      OpStore %118 %195 
					                                Uniform f32* %198 = OpAccessChain %27 %197 
					                                         f32 %199 = OpLoad %198 
					                                         f32 %200 = OpFNegate %199 
					                                Uniform f32* %202 = OpAccessChain %27 %201 
					                                         f32 %203 = OpLoad %202 
					                                         f32 %204 = OpFAdd %200 %203 
					                                                      OpStore %196 %204 
					                                         f32 %205 = OpLoad %118 
					                                         f32 %206 = OpLoad %196 
					                                         f32 %207 = OpFMul %205 %206 
					                                Uniform f32* %208 = OpAccessChain %27 %197 
					                                         f32 %209 = OpLoad %208 
					                                         f32 %210 = OpFAdd %207 %209 
					                                                      OpStore %118 %210 
					                                         f32 %211 = OpLoad %118 
					                                         f32 %213 = OpFMul %211 %212 
					                                Uniform f32* %215 = OpAccessChain %27 %214 
					                                         f32 %216 = OpLoad %215 
					                                         f32 %217 = OpFAdd %213 %216 
					                                                      OpStore %118 %217 
					                                         f32 %218 = OpLoad %118 
					                                Uniform f32* %220 = OpAccessChain %27 %219 
					                                         f32 %221 = OpLoad %220 
					                                         f32 %222 = OpFMul %218 %221 
					                                                      OpStore %118 %222 
					                                         f32 %224 = OpLoad %118 
					                                         f32 %226 = OpFMul %224 %225 
					                                 Output f32* %228 = OpAccessChain vs_TEXCOORD5 %120 
					                                                      OpStore %228 %226 
					                                Private f32* %229 = OpAccessChain %65 %103 
					                                         f32 %230 = OpLoad %229 
					                                Uniform f32* %232 = OpAccessChain %27 %85 %44 %231 
					                                         f32 %233 = OpLoad %232 
					                                         f32 %234 = OpFMul %230 %233 
					                                                      OpStore %118 %234 
					                                Uniform f32* %235 = OpAccessChain %27 %85 %49 %231 
					                                         f32 %236 = OpLoad %235 
					                                Private f32* %237 = OpAccessChain %65 %120 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpFMul %236 %238 
					                                         f32 %240 = OpLoad %118 
					                                         f32 %241 = OpFAdd %239 %240 
					                                                      OpStore %118 %241 
					                                Uniform f32* %242 = OpAccessChain %27 %85 %57 %231 
					                                         f32 %243 = OpLoad %242 
					                                Private f32* %245 = OpAccessChain %65 %244 
					                                         f32 %246 = OpLoad %245 
					                                         f32 %247 = OpFMul %243 %246 
					                                         f32 %248 = OpLoad %118 
					                                         f32 %249 = OpFAdd %247 %248 
					                                                      OpStore %118 %249 
					                                Uniform f32* %250 = OpAccessChain %27 %85 %67 %231 
					                                         f32 %251 = OpLoad %250 
					                                Private f32* %252 = OpAccessChain %65 %231 
					                                         f32 %253 = OpLoad %252 
					                                         f32 %254 = OpFMul %251 %253 
					                                         f32 %255 = OpLoad %118 
					                                         f32 %256 = OpFAdd %254 %255 
					                                                      OpStore %118 %256 
					                              Uniform f32_4* %257 = OpAccessChain %27 %44 
					                                       f32_4 %258 = OpLoad %257 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 1 1 
					                              Uniform f32_4* %261 = OpAccessChain %27 %260 %44 
					                                       f32_4 %262 = OpLoad %261 
					                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
					                                       f32_2 %264 = OpFMul %259 %263 
					                                       f32_4 %265 = OpLoad %65 
					                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 2 3 
					                                                      OpStore %65 %266 
					                              Uniform f32_4* %267 = OpAccessChain %27 %260 %49 
					                                       f32_4 %268 = OpLoad %267 
					                                       f32_2 %269 = OpVectorShuffle %268 %268 0 1 
					                              Uniform f32_4* %270 = OpAccessChain %27 %44 
					                                       f32_4 %271 = OpLoad %270 
					                                       f32_2 %272 = OpVectorShuffle %271 %271 0 0 
					                                       f32_2 %273 = OpFMul %269 %272 
					                                       f32_4 %274 = OpLoad %65 
					                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
					                                       f32_2 %276 = OpFAdd %273 %275 
					                                       f32_4 %277 = OpLoad %65 
					                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
					                                                      OpStore %65 %278 
					                                       f32_4 %279 = OpLoad %65 
					                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
					                                Uniform f32* %282 = OpAccessChain %27 %281 
					                                         f32 %283 = OpLoad %282 
					                                Uniform f32* %285 = OpAccessChain %27 %284 
					                                         f32 %286 = OpLoad %285 
					                                       f32_2 %287 = OpCompositeConstruct %283 %286 
					                                       f32_2 %288 = OpFMul %280 %287 
					                                       f32_4 %289 = OpLoad %65 
					                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
					                                                      OpStore %65 %290 
					                                         f32 %291 = OpLoad %118 
					                                       f32_2 %292 = OpCompositeConstruct %291 %291 
					                                       f32_4 %293 = OpLoad %65 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_2 %295 = OpFDiv %292 %294 
					                                       f32_4 %296 = OpLoad %65 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
					                                                      OpStore %65 %297 
					                                       f32_4 %298 = OpLoad %65 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                       f32_4 %300 = OpLoad %65 
					                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
					                                         f32 %302 = OpDot %299 %301 
					                                                      OpStore %118 %302 
					                                         f32 %303 = OpLoad %118 
					                                         f32 %304 = OpExtInst %1 32 %303 
					                                                      OpStore %118 %304 
					                                  Input f32* %305 = OpAccessChain %119 %103 
					                                         f32 %306 = OpLoad %305 
					                                         f32 %307 = OpExtInst %1 4 %306 
					                                Uniform f32* %309 = OpAccessChain %27 %308 
					                                         f32 %310 = OpLoad %309 
					                                         f32 %311 = OpFMul %307 %310 
					                                                      OpStore %196 %311 
					                                         f32 %312 = OpLoad %118 
					                                         f32 %313 = OpLoad %196 
					                                         f32 %314 = OpFMul %312 %313 
					                                                      OpStore %118 %314 
					                                         f32 %315 = OpLoad %118 
					                                         f32 %317 = OpFMul %315 %316 
					                                                      OpStore %196 %317 
					                                Uniform f32* %319 = OpAccessChain %27 %318 
					                                         f32 %320 = OpLoad %319 
					                                         f32 %321 = OpFNegate %320 
					                                         f32 %322 = OpFAdd %321 %194 
					                                Private f32* %323 = OpAccessChain %65 %120 
					                                                      OpStore %323 %322 
					                                         f32 %324 = OpLoad %196 
					                                Private f32* %325 = OpAccessChain %65 %120 
					                                         f32 %326 = OpLoad %325 
					                                         f32 %327 = OpFMul %324 %326 
					                                                      OpStore %196 %327 
					                                         f32 %328 = OpLoad %118 
					                                         f32 %329 = OpFMul %328 %316 
					                                         f32 %330 = OpLoad %196 
					                                         f32 %331 = OpFNegate %330 
					                                         f32 %332 = OpFAdd %329 %331 
					                                                      OpStore %118 %332 
					                              Uniform f32_3* %334 = OpAccessChain %27 %49 
					                                       f32_3 %335 = OpLoad %334 
					                                       f32_3 %336 = OpVectorShuffle %335 %335 1 1 1 
					                              Uniform f32_4* %338 = OpAccessChain %27 %337 %44 
					                                       f32_4 %339 = OpLoad %338 
					                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
					                                       f32_3 %341 = OpFMul %336 %340 
					                                       f32_4 %342 = OpLoad %65 
					                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
					                                                      OpStore %65 %343 
					                              Uniform f32_4* %344 = OpAccessChain %27 %337 %49 
					                                       f32_4 %345 = OpLoad %344 
					                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
					                              Uniform f32_3* %347 = OpAccessChain %27 %49 
					                                       f32_3 %348 = OpLoad %347 
					                                       f32_3 %349 = OpVectorShuffle %348 %348 0 0 0 
					                                       f32_3 %350 = OpFMul %346 %349 
					                                       f32_4 %351 = OpLoad %65 
					                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
					                                       f32_3 %353 = OpFAdd %350 %352 
					                                       f32_4 %354 = OpLoad %65 
					                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
					                                                      OpStore %65 %355 
					                              Uniform f32_4* %356 = OpAccessChain %27 %337 %57 
					                                       f32_4 %357 = OpLoad %356 
					                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
					                              Uniform f32_3* %359 = OpAccessChain %27 %49 
					                                       f32_3 %360 = OpLoad %359 
					                                       f32_3 %361 = OpVectorShuffle %360 %360 2 2 2 
					                                       f32_3 %362 = OpFMul %358 %361 
					                                       f32_4 %363 = OpLoad %65 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_3 %365 = OpFAdd %362 %364 
					                                       f32_4 %366 = OpLoad %65 
					                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
					                                                      OpStore %65 %367 
					                                       f32_4 %368 = OpLoad %65 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                              Uniform f32_4* %370 = OpAccessChain %27 %337 %67 
					                                       f32_4 %371 = OpLoad %370 
					                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
					                                       f32_3 %373 = OpFAdd %369 %372 
					                                       f32_4 %374 = OpLoad %65 
					                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
					                                                      OpStore %65 %375 
					                                  Input f32* %376 = OpAccessChain %11 %244 
					                                         f32 %377 = OpLoad %376 
					                                Private f32* %378 = OpAccessChain %9 %244 
					                                                      OpStore %378 %377 
					                                       f32_4 %379 = OpLoad %9 
					                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
					                                       f32_3 %381 = OpFNegate %380 
					                                       f32_4 %382 = OpLoad %65 
					                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
					                                       f32_3 %384 = OpFAdd %381 %383 
					                                       f32_4 %385 = OpLoad %9 
					                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
					                                                      OpStore %9 %386 
					                                       f32_3 %389 = OpLoad %388 
					                                       f32_4 %390 = OpLoad %9 
					                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
					                                         f32 %392 = OpDot %389 %391 
					                                Private f32* %393 = OpAccessChain %9 %120 
					                                                      OpStore %393 %392 
					                                Private f32* %396 = OpAccessChain %9 %120 
					                                         f32 %397 = OpLoad %396 
					                                        bool %398 = OpFOrdLessThan %189 %397 
					                                         u32 %400 = OpSelect %398 %399 %120 
					                                         i32 %401 = OpBitcast %400 
					                                                      OpStore %395 %401 
					                                Private f32* %403 = OpAccessChain %9 %120 
					                                         f32 %404 = OpLoad %403 
					                                        bool %405 = OpFOrdLessThan %404 %189 
					                                         u32 %406 = OpSelect %405 %399 %120 
					                                         i32 %407 = OpBitcast %406 
					                                                      OpStore %402 %407 
					                                         i32 %408 = OpLoad %395 
					                                         i32 %409 = OpSNegate %408 
					                                         i32 %410 = OpLoad %402 
					                                         i32 %411 = OpIAdd %409 %410 
					                                                      OpStore %402 %411 
					                                         i32 %412 = OpLoad %402 
					                                         f32 %413 = OpConvertSToF %412 
					                                Private f32* %414 = OpAccessChain %9 %120 
					                                                      OpStore %414 %413 
					                                       f32_4 %415 = OpLoad %9 
					                                       f32_3 %416 = OpVectorShuffle %415 %415 0 0 0 
					                                       f32_3 %417 = OpLoad %388 
					                                       f32_3 %418 = OpFMul %416 %417 
					                                       f32_4 %419 = OpLoad %9 
					                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
					                                                      OpStore %9 %420 
					                                       f32_4 %421 = OpLoad %9 
					                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
					                              Uniform f32_4* %423 = OpAccessChain %27 %337 %49 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
					                                         f32 %426 = OpDot %422 %425 
					                                Private f32* %427 = OpAccessChain %65 %120 
					                                                      OpStore %427 %426 
					                                       f32_4 %428 = OpLoad %9 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                              Uniform f32_4* %430 = OpAccessChain %27 %337 %44 
					                                       f32_4 %431 = OpLoad %430 
					                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
					                                         f32 %433 = OpDot %429 %432 
					                                Private f32* %434 = OpAccessChain %65 %103 
					                                                      OpStore %434 %433 
					                                       f32_4 %435 = OpLoad %9 
					                                       f32_3 %436 = OpVectorShuffle %435 %435 0 1 2 
					                              Uniform f32_4* %437 = OpAccessChain %27 %337 %57 
					                                       f32_4 %438 = OpLoad %437 
					                                       f32_3 %439 = OpVectorShuffle %438 %438 0 1 2 
					                                         f32 %440 = OpDot %436 %439 
					                                Private f32* %441 = OpAccessChain %65 %244 
					                                                      OpStore %441 %440 
					                                       f32_4 %442 = OpLoad %65 
					                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
					                                       f32_4 %444 = OpLoad %65 
					                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
					                                         f32 %446 = OpDot %443 %445 
					                                Private f32* %447 = OpAccessChain %9 %120 
					                                                      OpStore %447 %446 
					                                Private f32* %448 = OpAccessChain %9 %120 
					                                         f32 %449 = OpLoad %448 
					                                         f32 %450 = OpExtInst %1 32 %449 
					                                Private f32* %451 = OpAccessChain %9 %120 
					                                                      OpStore %451 %450 
					                                       f32_4 %452 = OpLoad %9 
					                                       f32_4 %453 = OpVectorShuffle %452 %452 0 0 0 0 
					                                       f32_4 %454 = OpLoad %65 
					                                       f32_4 %455 = OpVectorShuffle %454 %454 0 1 2 2 
					                                       f32_4 %456 = OpFMul %453 %455 
					                                                      OpStore %65 %456 
					                                       f32_4 %457 = OpLoad %40 
					                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
					                                       f32_3 %459 = OpFNegate %458 
					                              Uniform f32_3* %460 = OpAccessChain %27 %49 
					                                       f32_3 %461 = OpLoad %460 
					                                       f32_3 %462 = OpFAdd %459 %461 
					                                       f32_4 %463 = OpLoad %9 
					                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 6 3 
					                                                      OpStore %9 %464 
					                                       f32_4 %465 = OpLoad %9 
					                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 2 
					                                       f32_4 %467 = OpLoad %9 
					                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
					                                         f32 %469 = OpDot %466 %468 
					                                Private f32* %470 = OpAccessChain %82 %120 
					                                                      OpStore %470 %469 
					                                Private f32* %471 = OpAccessChain %82 %120 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpExtInst %1 32 %472 
					                                Private f32* %474 = OpAccessChain %82 %120 
					                                                      OpStore %474 %473 
					                                       f32_4 %475 = OpLoad %9 
					                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
					                                       f32_4 %477 = OpLoad %82 
					                                       f32_3 %478 = OpVectorShuffle %477 %477 0 0 0 
					                                       f32_3 %479 = OpFMul %476 %478 
					                                       f32_4 %480 = OpLoad %82 
					                                       f32_4 %481 = OpVectorShuffle %480 %479 4 5 6 3 
					                                                      OpStore %82 %481 
					                                       f32_4 %482 = OpLoad %65 
					                                       f32_3 %483 = OpVectorShuffle %482 %482 0 1 3 
					                                       f32_4 %484 = OpLoad %82 
					                                       f32_3 %485 = OpVectorShuffle %484 %484 0 1 2 
					                                         f32 %486 = OpDot %483 %485 
					                                Private f32* %487 = OpAccessChain %82 %120 
					                                                      OpStore %487 %486 
					                                Private f32* %488 = OpAccessChain %82 %120 
					                                         f32 %489 = OpLoad %488 
					                                         f32 %490 = OpExtInst %1 4 %489 
					                                         f32 %491 = OpLoad %118 
					                                         f32 %492 = OpFMul %490 %491 
					                                         f32 %493 = OpLoad %196 
					                                         f32 %494 = OpFAdd %492 %493 
					                                 Output f32* %495 = OpAccessChain vs_TEXCOORD5 %103 
					                                                      OpStore %495 %494 
					                                       f32_4 %497 = OpLoad %496 
					                                       f32_3 %498 = OpVectorShuffle %497 %497 1 1 1 
					                              Uniform f32_4* %499 = OpAccessChain %27 %43 %44 
					                                       f32_4 %500 = OpLoad %499 
					                                       f32_3 %501 = OpVectorShuffle %500 %500 1 2 0 
					                                       f32_3 %502 = OpFMul %498 %501 
					                                       f32_4 %503 = OpLoad %82 
					                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
					                                                      OpStore %82 %504 
					                              Uniform f32_4* %505 = OpAccessChain %27 %43 %49 
					                                       f32_4 %506 = OpLoad %505 
					                                       f32_3 %507 = OpVectorShuffle %506 %506 1 2 0 
					                                       f32_4 %508 = OpLoad %496 
					                                       f32_3 %509 = OpVectorShuffle %508 %508 0 0 0 
					                                       f32_3 %510 = OpFMul %507 %509 
					                                       f32_4 %511 = OpLoad %82 
					                                       f32_3 %512 = OpVectorShuffle %511 %511 0 1 2 
					                                       f32_3 %513 = OpFAdd %510 %512 
					                                       f32_4 %514 = OpLoad %82 
					                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 6 3 
					                                                      OpStore %82 %515 
					                              Uniform f32_4* %516 = OpAccessChain %27 %43 %57 
					                                       f32_4 %517 = OpLoad %516 
					                                       f32_3 %518 = OpVectorShuffle %517 %517 1 2 0 
					                                       f32_4 %519 = OpLoad %496 
					                                       f32_3 %520 = OpVectorShuffle %519 %519 2 2 2 
					                                       f32_3 %521 = OpFMul %518 %520 
					                                       f32_4 %522 = OpLoad %82 
					                                       f32_3 %523 = OpVectorShuffle %522 %522 0 1 2 
					                                       f32_3 %524 = OpFAdd %521 %523 
					                                       f32_4 %525 = OpLoad %82 
					                                       f32_4 %526 = OpVectorShuffle %525 %524 4 5 6 3 
					                                                      OpStore %82 %526 
					                                       f32_4 %527 = OpLoad %82 
					                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
					                                       f32_4 %529 = OpLoad %82 
					                                       f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
					                                         f32 %531 = OpDot %528 %530 
					                                                      OpStore %118 %531 
					                                         f32 %532 = OpLoad %118 
					                                         f32 %533 = OpExtInst %1 32 %532 
					                                                      OpStore %118 %533 
					                                         f32 %534 = OpLoad %118 
					                                       f32_3 %535 = OpCompositeConstruct %534 %534 %534 
					                                       f32_4 %536 = OpLoad %82 
					                                       f32_3 %537 = OpVectorShuffle %536 %536 0 1 2 
					                                       f32_3 %538 = OpFMul %535 %537 
					                                       f32_4 %539 = OpLoad %82 
					                                       f32_4 %540 = OpVectorShuffle %539 %538 4 5 6 3 
					                                                      OpStore %82 %540 
					                                       f32_4 %542 = OpLoad %65 
					                                       f32_3 %543 = OpVectorShuffle %542 %542 3 0 1 
					                                       f32_4 %544 = OpLoad %82 
					                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
					                                       f32_3 %546 = OpFMul %543 %545 
					                                       f32_4 %547 = OpLoad %541 
					                                       f32_4 %548 = OpVectorShuffle %547 %546 4 5 6 3 
					                                                      OpStore %541 %548 
					                                       f32_4 %549 = OpLoad %65 
					                                       f32_3 %550 = OpVectorShuffle %549 %549 1 3 0 
					                                       f32_4 %551 = OpLoad %82 
					                                       f32_3 %552 = OpVectorShuffle %551 %551 1 2 0 
					                                       f32_3 %553 = OpFMul %550 %552 
					                                       f32_4 %554 = OpLoad %541 
					                                       f32_3 %555 = OpVectorShuffle %554 %554 0 1 2 
					                                       f32_3 %556 = OpFNegate %555 
					                                       f32_3 %557 = OpFAdd %553 %556 
					                                       f32_4 %558 = OpLoad %541 
					                                       f32_4 %559 = OpVectorShuffle %558 %557 4 5 6 3 
					                                                      OpStore %541 %559 
					                                  Input f32* %560 = OpAccessChain %496 %231 
					                                         f32 %561 = OpLoad %560 
					                                Uniform f32* %563 = OpAccessChain %27 %562 %231 
					                                         f32 %564 = OpLoad %563 
					                                         f32 %565 = OpFMul %561 %564 
					                                                      OpStore %118 %565 
					                                         f32 %566 = OpLoad %118 
					                                       f32_3 %567 = OpCompositeConstruct %566 %566 %566 
					                                       f32_4 %568 = OpLoad %541 
					                                       f32_3 %569 = OpVectorShuffle %568 %568 0 1 2 
					                                       f32_3 %570 = OpFMul %567 %569 
					                                       f32_4 %571 = OpLoad %541 
					                                       f32_4 %572 = OpVectorShuffle %571 %570 4 5 6 3 
					                                                      OpStore %541 %572 
					                                Private f32* %574 = OpAccessChain %541 %120 
					                                         f32 %575 = OpLoad %574 
					                                 Output f32* %576 = OpAccessChain vs_TEXCOORD2 %103 
					                                                      OpStore %576 %575 
					                                Private f32* %577 = OpAccessChain %65 %120 
					                                         f32 %578 = OpLoad %577 
					                                 Output f32* %579 = OpAccessChain vs_TEXCOORD2 %244 
					                                                      OpStore %579 %578 
					                                Private f32* %580 = OpAccessChain %82 %244 
					                                         f32 %581 = OpLoad %580 
					                                 Output f32* %582 = OpAccessChain vs_TEXCOORD2 %120 
					                                                      OpStore %582 %581 
					                                Private f32* %583 = OpAccessChain %40 %120 
					                                         f32 %584 = OpLoad %583 
					                                 Output f32* %585 = OpAccessChain vs_TEXCOORD2 %231 
					                                                      OpStore %585 %584 
					                                Private f32* %587 = OpAccessChain %82 %120 
					                                         f32 %588 = OpLoad %587 
					                                 Output f32* %589 = OpAccessChain vs_TEXCOORD3 %120 
					                                                      OpStore %589 %588 
					                                Private f32* %591 = OpAccessChain %82 %103 
					                                         f32 %592 = OpLoad %591 
					                                 Output f32* %593 = OpAccessChain vs_TEXCOORD4 %120 
					                                                      OpStore %593 %592 
					                                Private f32* %594 = OpAccessChain %65 %103 
					                                         f32 %595 = OpLoad %594 
					                                 Output f32* %596 = OpAccessChain vs_TEXCOORD3 %244 
					                                                      OpStore %596 %595 
					                                Private f32* %597 = OpAccessChain %541 %103 
					                                         f32 %598 = OpLoad %597 
					                                 Output f32* %599 = OpAccessChain vs_TEXCOORD3 %103 
					                                                      OpStore %599 %598 
					                                Private f32* %600 = OpAccessChain %541 %244 
					                                         f32 %601 = OpLoad %600 
					                                 Output f32* %602 = OpAccessChain vs_TEXCOORD4 %103 
					                                                      OpStore %602 %601 
					                                Private f32* %603 = OpAccessChain %40 %103 
					                                         f32 %604 = OpLoad %603 
					                                 Output f32* %605 = OpAccessChain vs_TEXCOORD3 %231 
					                                                      OpStore %605 %604 
					                                Private f32* %606 = OpAccessChain %65 %231 
					                                         f32 %607 = OpLoad %606 
					                                 Output f32* %608 = OpAccessChain vs_TEXCOORD4 %244 
					                                                      OpStore %608 %607 
					                                Private f32* %609 = OpAccessChain %40 %244 
					                                         f32 %610 = OpLoad %609 
					                                 Output f32* %611 = OpAccessChain vs_TEXCOORD4 %231 
					                                                      OpStore %611 %610 
					                                       f32_4 %614 = OpLoad %613 
					                                                      OpStore %612 %614 
					                                       f32_4 %615 = OpLoad %9 
					                                       f32_3 %616 = OpVectorShuffle %615 %615 1 1 1 
					                              Uniform f32_4* %618 = OpAccessChain %27 %617 %44 
					                                       f32_4 %619 = OpLoad %618 
					                                       f32_3 %620 = OpVectorShuffle %619 %619 0 1 2 
					                                       f32_3 %621 = OpFMul %616 %620 
					                                       f32_4 %622 = OpLoad %82 
					                                       f32_4 %623 = OpVectorShuffle %622 %621 4 5 6 3 
					                                                      OpStore %82 %623 
					                              Uniform f32_4* %624 = OpAccessChain %27 %617 %49 
					                                       f32_4 %625 = OpLoad %624 
					                                       f32_3 %626 = OpVectorShuffle %625 %625 0 1 2 
					                                       f32_4 %627 = OpLoad %9 
					                                       f32_3 %628 = OpVectorShuffle %627 %627 0 0 0 
					                                       f32_3 %629 = OpFMul %626 %628 
					                                       f32_4 %630 = OpLoad %82 
					                                       f32_3 %631 = OpVectorShuffle %630 %630 0 1 2 
					                                       f32_3 %632 = OpFAdd %629 %631 
					                                       f32_4 %633 = OpLoad %9 
					                                       f32_4 %634 = OpVectorShuffle %633 %632 4 5 2 6 
					                                                      OpStore %9 %634 
					                              Uniform f32_4* %637 = OpAccessChain %27 %617 %57 
					                                       f32_4 %638 = OpLoad %637 
					                                       f32_3 %639 = OpVectorShuffle %638 %638 0 1 2 
					                                       f32_4 %640 = OpLoad %9 
					                                       f32_3 %641 = OpVectorShuffle %640 %640 2 2 2 
					                                       f32_3 %642 = OpFMul %639 %641 
					                                       f32_4 %643 = OpLoad %9 
					                                       f32_3 %644 = OpVectorShuffle %643 %643 0 1 3 
					                                       f32_3 %645 = OpFAdd %642 %644 
					                                                      OpStore vs_TEXCOORD6 %645 
					                                       f32_4 %646 = OpLoad %40 
					                                       f32_4 %647 = OpVectorShuffle %646 %646 1 1 1 1 
					                                       f32_4 %648 = OpFNegate %647 
					                              Uniform f32_4* %649 = OpAccessChain %27 %67 
					                                       f32_4 %650 = OpLoad %649 
					                                       f32_4 %651 = OpFAdd %648 %650 
					                                                      OpStore %9 %651 
					                                       f32_4 %652 = OpLoad %65 
					                                       f32_4 %653 = OpVectorShuffle %652 %652 1 1 1 1 
					                                       f32_4 %654 = OpLoad %9 
					                                       f32_4 %655 = OpFMul %653 %654 
					                                                      OpStore %82 %655 
					                                       f32_4 %656 = OpLoad %9 
					                                       f32_4 %657 = OpLoad %9 
					                                       f32_4 %658 = OpFMul %656 %657 
					                                                      OpStore %9 %658 
					                                       f32_4 %659 = OpLoad %40 
					                                       f32_4 %660 = OpVectorShuffle %659 %659 0 0 0 0 
					                                       f32_4 %661 = OpFNegate %660 
					                              Uniform f32_4* %662 = OpAccessChain %27 %57 
					                                       f32_4 %663 = OpLoad %662 
					                                       f32_4 %664 = OpFAdd %661 %663 
					                                                      OpStore %541 %664 
					                                       f32_4 %665 = OpLoad %40 
					                                       f32_4 %666 = OpVectorShuffle %665 %665 2 2 2 2 
					                                       f32_4 %667 = OpFNegate %666 
					                              Uniform f32_4* %669 = OpAccessChain %27 %668 
					                                       f32_4 %670 = OpLoad %669 
					                                       f32_4 %671 = OpFAdd %667 %670 
					                                                      OpStore %40 %671 
					                                       f32_4 %672 = OpLoad %541 
					                                       f32_4 %673 = OpLoad %65 
					                                       f32_4 %674 = OpVectorShuffle %673 %673 0 0 0 0 
					                                       f32_4 %675 = OpFMul %672 %674 
					                                       f32_4 %676 = OpLoad %82 
					                                       f32_4 %677 = OpFAdd %675 %676 
					                                                      OpStore %82 %677 
					                                       f32_4 %678 = OpLoad %541 
					                                       f32_4 %679 = OpLoad %541 
					                                       f32_4 %680 = OpFMul %678 %679 
					                                       f32_4 %681 = OpLoad %9 
					                                       f32_4 %682 = OpFAdd %680 %681 
					                                                      OpStore %9 %682 
					                                       f32_4 %683 = OpLoad %40 
					                                       f32_4 %684 = OpLoad %40 
					                                       f32_4 %685 = OpFMul %683 %684 
					                                       f32_4 %686 = OpLoad %9 
					                                       f32_4 %687 = OpFAdd %685 %686 
					                                                      OpStore %9 %687 
					                                       f32_4 %688 = OpLoad %40 
					                                       f32_4 %689 = OpLoad %65 
					                                       f32_4 %690 = OpVectorShuffle %689 %689 3 3 2 3 
					                                       f32_4 %691 = OpFMul %688 %690 
					                                       f32_4 %692 = OpLoad %82 
					                                       f32_4 %693 = OpFAdd %691 %692 
					                                                      OpStore %40 %693 
					                                       f32_4 %694 = OpLoad %9 
					                                       f32_4 %697 = OpExtInst %1 40 %694 %696 
					                                                      OpStore %9 %697 
					                                       f32_4 %698 = OpLoad %9 
					                                       f32_4 %699 = OpExtInst %1 32 %698 
					                                                      OpStore %82 %699 
					                                       f32_4 %700 = OpLoad %9 
					                              Uniform f32_4* %702 = OpAccessChain %27 %701 
					                                       f32_4 %703 = OpLoad %702 
					                                       f32_4 %704 = OpFMul %700 %703 
					                                       f32_4 %706 = OpFAdd %704 %705 
					                                                      OpStore %9 %706 
					                                       f32_4 %707 = OpLoad %9 
					                                       f32_4 %708 = OpFDiv %705 %707 
					                                                      OpStore %9 %708 
					                                       f32_4 %709 = OpLoad %40 
					                                       f32_4 %710 = OpLoad %82 
					                                       f32_4 %711 = OpFMul %709 %710 
					                                                      OpStore %40 %711 
					                                       f32_4 %712 = OpLoad %40 
					                                       f32_4 %714 = OpExtInst %1 40 %712 %713 
					                                                      OpStore %40 %714 
					                                       f32_4 %715 = OpLoad %9 
					                                       f32_4 %716 = OpLoad %40 
					                                       f32_4 %717 = OpFMul %715 %716 
					                                                      OpStore %9 %717 
					                                       f32_4 %718 = OpLoad %9 
					                                       f32_3 %719 = OpVectorShuffle %718 %718 1 1 1 
					                              Uniform f32_4* %721 = OpAccessChain %27 %720 %44 
					                                       f32_4 %722 = OpLoad %721 
					                                       f32_3 %723 = OpVectorShuffle %722 %722 0 1 2 
					                                       f32_3 %724 = OpFMul %719 %723 
					                                       f32_4 %725 = OpLoad %40 
					                                       f32_4 %726 = OpVectorShuffle %725 %724 4 5 6 3 
					                                                      OpStore %40 %726 
					                              Uniform f32_4* %727 = OpAccessChain %27 %720 %49 
					                                       f32_4 %728 = OpLoad %727 
					                                       f32_3 %729 = OpVectorShuffle %728 %728 0 1 2 
					                                       f32_4 %730 = OpLoad %9 
					                                       f32_3 %731 = OpVectorShuffle %730 %730 0 0 0 
					                                       f32_3 %732 = OpFMul %729 %731 
					                                       f32_4 %733 = OpLoad %40 
					                                       f32_3 %734 = OpVectorShuffle %733 %733 0 1 2 
					                                       f32_3 %735 = OpFAdd %732 %734 
					                                       f32_4 %736 = OpLoad %40 
					                                       f32_4 %737 = OpVectorShuffle %736 %735 4 5 6 3 
					                                                      OpStore %40 %737 
					                              Uniform f32_4* %738 = OpAccessChain %27 %720 %57 
					                                       f32_4 %739 = OpLoad %738 
					                                       f32_3 %740 = OpVectorShuffle %739 %739 0 1 2 
					                                       f32_4 %741 = OpLoad %9 
					                                       f32_3 %742 = OpVectorShuffle %741 %741 2 2 2 
					                                       f32_3 %743 = OpFMul %740 %742 
					                                       f32_4 %744 = OpLoad %40 
					                                       f32_3 %745 = OpVectorShuffle %744 %744 0 1 2 
					                                       f32_3 %746 = OpFAdd %743 %745 
					                                       f32_4 %747 = OpLoad %9 
					                                       f32_4 %748 = OpVectorShuffle %747 %746 4 5 6 3 
					                                                      OpStore %9 %748 
					                              Uniform f32_4* %749 = OpAccessChain %27 %720 %67 
					                                       f32_4 %750 = OpLoad %749 
					                                       f32_3 %751 = OpVectorShuffle %750 %750 0 1 2 
					                                       f32_4 %752 = OpLoad %9 
					                                       f32_3 %753 = OpVectorShuffle %752 %752 3 3 3 
					                                       f32_3 %754 = OpFMul %751 %753 
					                                       f32_4 %755 = OpLoad %9 
					                                       f32_3 %756 = OpVectorShuffle %755 %755 0 1 2 
					                                       f32_3 %757 = OpFAdd %754 %756 
					                                       f32_4 %758 = OpLoad %9 
					                                       f32_4 %759 = OpVectorShuffle %758 %757 4 5 6 3 
					                                                      OpStore %9 %759 
					                                Private f32* %762 = OpAccessChain %65 %103 
					                                         f32 %763 = OpLoad %762 
					                                Private f32* %764 = OpAccessChain %65 %103 
					                                         f32 %765 = OpLoad %764 
					                                         f32 %766 = OpFMul %763 %765 
					                                Private f32* %767 = OpAccessChain %761 %120 
					                                                      OpStore %767 %766 
					                                Private f32* %768 = OpAccessChain %65 %120 
					                                         f32 %769 = OpLoad %768 
					                                Private f32* %770 = OpAccessChain %65 %120 
					                                         f32 %771 = OpLoad %770 
					                                         f32 %772 = OpFMul %769 %771 
					                                Private f32* %773 = OpAccessChain %761 %120 
					                                         f32 %774 = OpLoad %773 
					                                         f32 %775 = OpFNegate %774 
					                                         f32 %776 = OpFAdd %772 %775 
					                                Private f32* %777 = OpAccessChain %761 %120 
					                                                      OpStore %777 %776 
					                                       f32_4 %779 = OpLoad %65 
					                                       f32_4 %780 = OpVectorShuffle %779 %779 1 3 2 0 
					                                       f32_4 %781 = OpLoad %65 
					                                       f32_4 %782 = OpFMul %780 %781 
					                                                      OpStore %778 %782 
					                              Uniform f32_4* %785 = OpAccessChain %27 %784 
					                                       f32_4 %786 = OpLoad %785 
					                                       f32_4 %787 = OpLoad %778 
					                                         f32 %788 = OpDot %786 %787 
					                                Private f32* %789 = OpAccessChain %783 %120 
					                                                      OpStore %789 %788 
					                              Uniform f32_4* %791 = OpAccessChain %27 %790 
					                                       f32_4 %792 = OpLoad %791 
					                                       f32_4 %793 = OpLoad %778 
					                                         f32 %794 = OpDot %792 %793 
					                                Private f32* %795 = OpAccessChain %783 %103 
					                                                      OpStore %795 %794 
					                              Uniform f32_4* %797 = OpAccessChain %27 %796 
					                                       f32_4 %798 = OpLoad %797 
					                                       f32_4 %799 = OpLoad %778 
					                                         f32 %800 = OpDot %798 %799 
					                                Private f32* %801 = OpAccessChain %783 %244 
					                                                      OpStore %801 %800 
					                              Uniform f32_4* %803 = OpAccessChain %27 %802 
					                                       f32_4 %804 = OpLoad %803 
					                                       f32_3 %805 = OpVectorShuffle %804 %804 0 1 2 
					                                       f32_3 %806 = OpLoad %761 
					                                       f32_3 %807 = OpVectorShuffle %806 %806 0 0 0 
					                                       f32_3 %808 = OpFMul %805 %807 
					                                       f32_3 %809 = OpLoad %783 
					                                       f32_3 %810 = OpFAdd %808 %809 
					                                                      OpStore %761 %810 
					                                       f32_4 %812 = OpLoad %9 
					                                       f32_3 %813 = OpVectorShuffle %812 %812 0 1 2 
					                                       f32_3 %814 = OpLoad %761 
					                                       f32_3 %815 = OpFAdd %813 %814 
					                                                      OpStore vs_TEXCOORD7 %815 
					                                 Output f32* %816 = OpAccessChain %107 %49 %103 
					                                         f32 %817 = OpLoad %816 
					                                         f32 %818 = OpFNegate %817 
					                                 Output f32* %819 = OpAccessChain %107 %49 %103 
					                                                      OpStore %819 %818 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 981
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %11 %20 %25 %80 %108 %445 %465 %867 %929 %966 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpDecorate vs_TEXCOORD2 Location 11 
					                                                      OpDecorate vs_TEXCOORD3 Location 20 
					                                                      OpDecorate vs_TEXCOORD4 Location 25 
					                                                      OpDecorate %35 ArrayStride 35 
					                                                      OpMemberDecorate %36 0 Offset 36 
					                                                      OpMemberDecorate %36 1 Offset 36 
					                                                      OpMemberDecorate %36 2 RelaxedPrecision 
					                                                      OpMemberDecorate %36 2 Offset 36 
					                                                      OpMemberDecorate %36 3 RelaxedPrecision 
					                                                      OpMemberDecorate %36 3 Offset 36 
					                                                      OpMemberDecorate %36 4 RelaxedPrecision 
					                                                      OpMemberDecorate %36 4 Offset 36 
					                                                      OpMemberDecorate %36 5 RelaxedPrecision 
					                                                      OpMemberDecorate %36 5 Offset 36 
					                                                      OpMemberDecorate %36 6 Offset 36 
					                                                      OpMemberDecorate %36 7 RelaxedPrecision 
					                                                      OpMemberDecorate %36 7 Offset 36 
					                                                      OpMemberDecorate %36 8 RelaxedPrecision 
					                                                      OpMemberDecorate %36 8 Offset 36 
					                                                      OpMemberDecorate %36 9 Offset 36 
					                                                      OpMemberDecorate %36 10 Offset 36 
					                                                      OpMemberDecorate %36 11 RelaxedPrecision 
					                                                      OpMemberDecorate %36 11 Offset 36 
					                                                      OpMemberDecorate %36 12 Offset 36 
					                                                      OpMemberDecorate %36 13 Offset 36 
					                                                      OpMemberDecorate %36 14 Offset 36 
					                                                      OpMemberDecorate %36 15 RelaxedPrecision 
					                                                      OpMemberDecorate %36 15 Offset 36 
					                                                      OpMemberDecorate %36 16 Offset 36 
					                                                      OpMemberDecorate %36 17 Offset 36 
					                                                      OpMemberDecorate %36 18 Offset 36 
					                                                      OpMemberDecorate %36 19 Offset 36 
					                                                      OpMemberDecorate %36 20 Offset 36 
					                                                      OpMemberDecorate %36 21 Offset 36 
					                                                      OpMemberDecorate %36 22 Offset 36 
					                                                      OpMemberDecorate %36 23 Offset 36 
					                                                      OpMemberDecorate %36 24 RelaxedPrecision 
					                                                      OpMemberDecorate %36 24 Offset 36 
					                                                      OpMemberDecorate %36 25 RelaxedPrecision 
					                                                      OpMemberDecorate %36 25 Offset 36 
					                                                      OpMemberDecorate %36 26 Offset 36 
					                                                      OpMemberDecorate %36 27 Offset 36 
					                                                      OpMemberDecorate %36 28 Offset 36 
					                                                      OpMemberDecorate %36 29 Offset 36 
					                                                      OpMemberDecorate %36 30 Offset 36 
					                                                      OpMemberDecorate %36 31 RelaxedPrecision 
					                                                      OpMemberDecorate %36 31 Offset 36 
					                                                      OpMemberDecorate %36 32 RelaxedPrecision 
					                                                      OpMemberDecorate %36 32 Offset 36 
					                                                      OpDecorate %36 Block 
					                                                      OpDecorate %38 DescriptorSet 38 
					                                                      OpDecorate %38 Binding 38 
					                                                      OpDecorate %56 RelaxedPrecision 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %71 RelaxedPrecision 
					                                                      OpDecorate %72 RelaxedPrecision 
					                                                      OpDecorate %73 RelaxedPrecision 
					                                                      OpDecorate %74 RelaxedPrecision 
					                                                      OpDecorate %75 RelaxedPrecision 
					                                                      OpDecorate %76 RelaxedPrecision 
					                                                      OpDecorate %77 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD5 Location 80 
					                                                      OpDecorate vs_TEXCOORD0 Location 108 
					                                                      OpDecorate %120 RelaxedPrecision 
					                                                      OpDecorate %120 DescriptorSet 120 
					                                                      OpDecorate %120 Binding 120 
					                                                      OpDecorate %121 RelaxedPrecision 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %124 DescriptorSet 124 
					                                                      OpDecorate %124 Binding 124 
					                                                      OpDecorate %125 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %134 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate %387 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %389 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %426 RelaxedPrecision 
					                                                      OpDecorate %427 RelaxedPrecision 
					                                                      OpDecorate %429 RelaxedPrecision 
					                                                      OpDecorate %431 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 445 
					                                                      OpDecorate %448 RelaxedPrecision 
					                                                      OpDecorate %449 RelaxedPrecision 
					                                                      OpDecorate %449 DescriptorSet 449 
					                                                      OpDecorate %449 Binding 449 
					                                                      OpDecorate %450 RelaxedPrecision 
					                                                      OpDecorate %451 RelaxedPrecision 
					                                                      OpDecorate %451 DescriptorSet 451 
					                                                      OpDecorate %451 Binding 451 
					                                                      OpDecorate %452 RelaxedPrecision 
					                                                      OpDecorate %456 RelaxedPrecision 
					                                                      OpDecorate %457 RelaxedPrecision 
					                                                      OpDecorate %458 RelaxedPrecision 
					                                                      OpDecorate %461 RelaxedPrecision 
					                                                      OpDecorate %462 RelaxedPrecision 
					                                                      OpDecorate %463 RelaxedPrecision 
					                                                      OpDecorate %464 RelaxedPrecision 
					                                                      OpDecorate %465 RelaxedPrecision 
					                                                      OpDecorate %465 Location 465 
					                                                      OpDecorate %467 RelaxedPrecision 
					                                                      OpDecorate %469 RelaxedPrecision 
					                                                      OpDecorate %470 RelaxedPrecision 
					                                                      OpDecorate %472 RelaxedPrecision 
					                                                      OpDecorate %474 RelaxedPrecision 
					                                                      OpDecorate %476 RelaxedPrecision 
					                                                      OpDecorate %477 RelaxedPrecision 
					                                                      OpDecorate %494 RelaxedPrecision 
					                                                      OpDecorate %495 RelaxedPrecision 
					                                                      OpDecorate %495 DescriptorSet 495 
					                                                      OpDecorate %495 Binding 495 
					                                                      OpDecorate %496 RelaxedPrecision 
					                                                      OpDecorate %497 RelaxedPrecision 
					                                                      OpDecorate %497 DescriptorSet 497 
					                                                      OpDecorate %497 Binding 497 
					                                                      OpDecorate %498 RelaxedPrecision 
					                                                      OpDecorate %503 RelaxedPrecision 
					                                                      OpDecorate %506 RelaxedPrecision 
					                                                      OpDecorate %507 RelaxedPrecision 
					                                                      OpDecorate %508 RelaxedPrecision 
					                                                      OpDecorate %509 RelaxedPrecision 
					                                                      OpDecorate %510 RelaxedPrecision 
					                                                      OpDecorate %511 RelaxedPrecision 
					                                                      OpDecorate %512 RelaxedPrecision 
					                                                      OpDecorate %513 RelaxedPrecision 
					                                                      OpDecorate %514 RelaxedPrecision 
					                                                      OpDecorate %515 RelaxedPrecision 
					                                                      OpDecorate %516 RelaxedPrecision 
					                                                      OpDecorate %517 RelaxedPrecision 
					                                                      OpDecorate %520 RelaxedPrecision 
					                                                      OpDecorate %521 RelaxedPrecision 
					                                                      OpDecorate %522 RelaxedPrecision 
					                                                      OpDecorate %523 RelaxedPrecision 
					                                                      OpDecorate %524 RelaxedPrecision 
					                                                      OpDecorate %525 RelaxedPrecision 
					                                                      OpDecorate %526 RelaxedPrecision 
					                                                      OpDecorate %527 RelaxedPrecision 
					                                                      OpDecorate %531 RelaxedPrecision 
					                                                      OpDecorate %533 RelaxedPrecision 
					                                                      OpDecorate %534 RelaxedPrecision 
					                                                      OpDecorate %536 RelaxedPrecision 
					                                                      OpDecorate %537 RelaxedPrecision 
					                                                      OpDecorate %538 RelaxedPrecision 
					                                                      OpDecorate %540 RelaxedPrecision 
					                                                      OpDecorate %541 RelaxedPrecision 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate %543 RelaxedPrecision 
					                                                      OpDecorate %544 RelaxedPrecision 
					                                                      OpDecorate %546 RelaxedPrecision 
					                                                      OpDecorate %548 RelaxedPrecision 
					                                                      OpDecorate %549 RelaxedPrecision 
					                                                      OpDecorate %551 RelaxedPrecision 
					                                                      OpDecorate %552 RelaxedPrecision 
					                                                      OpDecorate %554 RelaxedPrecision 
					                                                      OpDecorate %555 RelaxedPrecision 
					                                                      OpDecorate %556 RelaxedPrecision 
					                                                      OpDecorate %557 RelaxedPrecision 
					                                                      OpDecorate %558 RelaxedPrecision 
					                                                      OpDecorate %559 RelaxedPrecision 
					                                                      OpDecorate %560 RelaxedPrecision 
					                                                      OpDecorate %561 RelaxedPrecision 
					                                                      OpDecorate %600 RelaxedPrecision 
					                                                      OpDecorate %602 RelaxedPrecision 
					                                                      OpDecorate %604 RelaxedPrecision 
					                                                      OpDecorate %605 RelaxedPrecision 
					                                                      OpDecorate %606 RelaxedPrecision 
					                                                      OpDecorate %607 RelaxedPrecision 
					                                                      OpDecorate %608 RelaxedPrecision 
					                                                      OpDecorate %609 RelaxedPrecision 
					                                                      OpDecorate %610 RelaxedPrecision 
					                                                      OpDecorate %611 RelaxedPrecision 
					                                                      OpDecorate %612 RelaxedPrecision 
					                                                      OpDecorate %613 RelaxedPrecision 
					                                                      OpDecorate %614 RelaxedPrecision 
					                                                      OpDecorate %615 RelaxedPrecision 
					                                                      OpDecorate %634 RelaxedPrecision 
					                                                      OpDecorate %635 RelaxedPrecision 
					                                                      OpDecorate %635 DescriptorSet 635 
					                                                      OpDecorate %635 Binding 635 
					                                                      OpDecorate %636 RelaxedPrecision 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %637 DescriptorSet 637 
					                                                      OpDecorate %637 Binding 637 
					                                                      OpDecorate %638 RelaxedPrecision 
					                                                      OpDecorate %643 RelaxedPrecision 
					                                                      OpDecorate %644 RelaxedPrecision 
					                                                      OpDecorate %645 RelaxedPrecision 
					                                                      OpDecorate %646 RelaxedPrecision 
					                                                      OpDecorate %647 RelaxedPrecision 
					                                                      OpDecorate %648 RelaxedPrecision 
					                                                      OpDecorate %651 RelaxedPrecision 
					                                                      OpDecorate %653 RelaxedPrecision 
					                                                      OpDecorate %654 RelaxedPrecision 
					                                                      OpDecorate %656 RelaxedPrecision 
					                                                      OpDecorate %657 RelaxedPrecision 
					                                                      OpDecorate %659 RelaxedPrecision 
					                                                      OpDecorate %662 RelaxedPrecision 
					                                                      OpDecorate %663 RelaxedPrecision 
					                                                      OpDecorate %664 RelaxedPrecision 
					                                                      OpDecorate %665 RelaxedPrecision 
					                                                      OpDecorate %666 RelaxedPrecision 
					                                                      OpDecorate %667 RelaxedPrecision 
					                                                      OpDecorate %668 RelaxedPrecision 
					                                                      OpDecorate %669 RelaxedPrecision 
					                                                      OpDecorate %670 RelaxedPrecision 
					                                                      OpDecorate %671 RelaxedPrecision 
					                                                      OpDecorate %672 RelaxedPrecision 
					                                                      OpDecorate %673 RelaxedPrecision 
					                                                      OpDecorate %675 RelaxedPrecision 
					                                                      OpDecorate %676 RelaxedPrecision 
					                                                      OpDecorate %683 RelaxedPrecision 
					                                                      OpDecorate %684 RelaxedPrecision 
					                                                      OpDecorate %734 RelaxedPrecision 
					                                                      OpDecorate %735 RelaxedPrecision 
					                                                      OpDecorate %736 RelaxedPrecision 
					                                                      OpDecorate %737 RelaxedPrecision 
					                                                      OpDecorate %738 RelaxedPrecision 
					                                                      OpDecorate %741 RelaxedPrecision 
					                                                      OpDecorate %742 RelaxedPrecision 
					                                                      OpDecorate %744 RelaxedPrecision 
					                                                      OpDecorate %745 RelaxedPrecision 
					                                                      OpDecorate %746 RelaxedPrecision 
					                                                      OpDecorate %747 RelaxedPrecision 
					                                                      OpDecorate %748 RelaxedPrecision 
					                                                      OpDecorate %753 RelaxedPrecision 
					                                                      OpDecorate %757 RelaxedPrecision 
					                                                      OpDecorate %758 RelaxedPrecision 
					                                                      OpDecorate %761 RelaxedPrecision 
					                                                      OpDecorate %762 RelaxedPrecision 
					                                                      OpDecorate %764 RelaxedPrecision 
					                                                      OpDecorate %767 RelaxedPrecision 
					                                                      OpDecorate %768 RelaxedPrecision 
					                                                      OpDecorate %771 RelaxedPrecision 
					                                                      OpDecorate %772 RelaxedPrecision 
					                                                      OpDecorate %775 RelaxedPrecision 
					                                                      OpDecorate %778 RelaxedPrecision 
					                                                      OpDecorate %785 RelaxedPrecision 
					                                                      OpDecorate %787 RelaxedPrecision 
					                                                      OpDecorate %788 RelaxedPrecision 
					                                                      OpDecorate %791 RelaxedPrecision 
					                                                      OpDecorate %792 RelaxedPrecision 
					                                                      OpDecorate %796 RelaxedPrecision 
					                                                      OpDecorate %797 RelaxedPrecision 
					                                                      OpDecorate %800 RelaxedPrecision 
					                                                      OpDecorate %801 RelaxedPrecision 
					                                                      OpDecorate %802 RelaxedPrecision 
					                                                      OpDecorate %803 RelaxedPrecision 
					                                                      OpDecorate %804 RelaxedPrecision 
					                                                      OpDecorate %805 RelaxedPrecision 
					                                                      OpDecorate %806 RelaxedPrecision 
					                                                      OpDecorate %812 RelaxedPrecision 
					                                                      OpDecorate %813 RelaxedPrecision 
					                                                      OpDecorate %817 RelaxedPrecision 
					                                                      OpDecorate %818 RelaxedPrecision 
					                                                      OpDecorate %820 RelaxedPrecision 
					                                                      OpDecorate %822 RelaxedPrecision 
					                                                      OpDecorate %824 RelaxedPrecision 
					                                                      OpDecorate %825 RelaxedPrecision 
					                                                      OpDecorate %826 RelaxedPrecision 
					                                                      OpDecorate %827 RelaxedPrecision 
					                                                      OpDecorate %828 RelaxedPrecision 
					                                                      OpDecorate %829 RelaxedPrecision 
					                                                      OpDecorate %830 RelaxedPrecision 
					                                                      OpDecorate %831 RelaxedPrecision 
					                                                      OpDecorate %832 RelaxedPrecision 
					                                                      OpDecorate %834 RelaxedPrecision 
					                                                      OpDecorate %835 RelaxedPrecision 
					                                                      OpDecorate %836 RelaxedPrecision 
					                                                      OpDecorate %837 RelaxedPrecision 
					                                                      OpDecorate %838 RelaxedPrecision 
					                                                      OpDecorate %839 RelaxedPrecision 
					                                                      OpDecorate %840 RelaxedPrecision 
					                                                      OpDecorate %841 RelaxedPrecision 
					                                                      OpDecorate %842 RelaxedPrecision 
					                                                      OpDecorate %843 RelaxedPrecision 
					                                                      OpDecorate %849 RelaxedPrecision 
					                                                      OpDecorate %855 RelaxedPrecision 
					                                                      OpDecorate %861 RelaxedPrecision 
					                                                      OpDecorate %865 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 867 
					                                                      OpDecorate %868 RelaxedPrecision 
					                                                      OpDecorate %869 RelaxedPrecision 
					                                                      OpDecorate %870 RelaxedPrecision 
					                                                      OpDecorate %872 RelaxedPrecision 
					                                                      OpDecorate %873 RelaxedPrecision 
					                                                      OpDecorate %874 RelaxedPrecision 
					                                                      OpDecorate %875 RelaxedPrecision 
					                                                      OpDecorate %876 RelaxedPrecision 
					                                                      OpDecorate %877 RelaxedPrecision 
					                                                      OpDecorate %878 RelaxedPrecision 
					                                                      OpDecorate %881 RelaxedPrecision 
					                                                      OpDecorate %882 RelaxedPrecision 
					                                                      OpDecorate %883 RelaxedPrecision 
					                                                      OpDecorate %886 RelaxedPrecision 
					                                                      OpDecorate %887 RelaxedPrecision 
					                                                      OpDecorate %888 RelaxedPrecision 
					                                                      OpDecorate %892 RelaxedPrecision 
					                                                      OpDecorate %893 RelaxedPrecision 
					                                                      OpDecorate %894 RelaxedPrecision 
					                                                      OpDecorate %895 RelaxedPrecision 
					                                                      OpDecorate %897 RelaxedPrecision 
					                                                      OpDecorate %898 RelaxedPrecision 
					                                                      OpDecorate %899 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD6 Location 929 
					                                                      OpDecorate %947 RelaxedPrecision 
					                                                      OpDecorate %950 RelaxedPrecision 
					                                                      OpDecorate %950 DescriptorSet 950 
					                                                      OpDecorate %950 Binding 950 
					                                                      OpDecorate %951 RelaxedPrecision 
					                                                      OpDecorate %952 RelaxedPrecision 
					                                                      OpDecorate %952 DescriptorSet 952 
					                                                      OpDecorate %952 Binding 952 
					                                                      OpDecorate %953 RelaxedPrecision 
					                                                      OpDecorate %959 RelaxedPrecision 
					                                                      OpDecorate %961 RelaxedPrecision 
					                                                      OpDecorate %966 RelaxedPrecision 
					                                                      OpDecorate %966 Location 966 
					                                                      OpDecorate %969 RelaxedPrecision 
					                                                      OpDecorate %970 RelaxedPrecision 
					                                                      OpDecorate %972 RelaxedPrecision 
					                                                      OpDecorate %977 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                              %12 = OpTypeInt 32 0 
					                                          u32 %13 = OpConstant 3 
					                                              %14 = OpTypePointer Input %6 
					                                          u32 %17 = OpConstant 0 
					                                              %18 = OpTypePointer Private %6 
					                        Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                          u32 %23 = OpConstant 1 
					                        Input f32_4* vs_TEXCOORD4 = OpVariable Input 
					                                          u32 %28 = OpConstant 2 
					                                              %30 = OpTypeVector %6 3 
					                                          u32 %34 = OpConstant 4 
					                                              %35 = OpTypeArray %7 %34 
					                                              %36 = OpTypeStruct %7 %30 %7 %7 %7 %7 %35 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %6 %6 %6 %6 %6 %6 %6 
					                                              %37 = OpTypePointer Uniform %36 
					Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %38 = OpVariable Uniform 
					                                              %39 = OpTypeInt 32 1 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %30 
					                                 Private f32* %47 = OpVariable Private 
					                                              %55 = OpTypePointer Private %30 
					                               Private f32_3* %56 = OpVariable Private 
					                                          i32 %62 = OpConstant 2 
					                                              %63 = OpTypePointer Uniform %7 
					                                 Private f32* %68 = OpVariable Private 
					                                              %78 = OpTypeVector %6 2 
					                                              %79 = OpTypePointer Input %78 
					                        Input f32_2* vs_TEXCOORD5 = OpVariable Input 
					                                          i32 %83 = OpConstant 18 
					                                              %84 = OpTypePointer Uniform %6 
					                               Private f32_4* %89 = OpVariable Private 
					                                          f32 %90 = OpConstant 3,674022E-40 
					                                        f32_2 %91 = OpConstantComposite %90 %90 
					                                          i32 %92 = OpConstant 28 
					                                          i32 %95 = OpConstant 29 
					                                         f32 %102 = OpConstant 3,674022E-40 
					                              Private f32_4* %104 = OpVariable Private 
					                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                              Private f32_4* %117 = OpVariable Private 
					                                             %118 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                             %119 = OpTypePointer UniformConstant %118 
					        UniformConstant read_only Texture2D* %120 = OpVariable UniformConstant 
					                                             %122 = OpTypeSampler 
					                                             %123 = OpTypePointer UniformConstant %122 
					                    UniformConstant sampler* %124 = OpVariable UniformConstant 
					                                             %126 = OpTypeSampledImage %118 
					                                         f32 %162 = OpConstant 3,674022E-40 
					                                       f32_4 %163 = OpConstantComposite %162 %162 %162 %162 
					                                         i32 %165 = OpConstant 19 
					                                         i32 %168 = OpConstant 16 
					                                         f32 %175 = OpConstant 3,674022E-40 
					                                         i32 %184 = OpConstant 17 
					                                         i32 %191 = OpConstant 30 
					                                         f32 %198 = OpConstant 3,674022E-40 
					                                         f32 %202 = OpConstant 3,674022E-40 
					                                       f32_4 %203 = OpConstantComposite %202 %202 %202 %202 
					                                         f32 %210 = OpConstant 3,674022E-40 
					                                       f32_4 %211 = OpConstantComposite %210 %210 %210 %210 
					                                         f32 %213 = OpConstant 3,674022E-40 
					                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
					                                       f32_4 %219 = OpConstantComposite %90 %90 %90 %90 
					                                             %221 = OpTypePointer Private %78 
					                              Private f32_2* %222 = OpVariable Private 
					                                         i32 %223 = OpConstant 26 
					                                             %228 = OpTypeBool 
					                                             %229 = OpTypePointer Private %228 
					                               Private bool* %230 = OpVariable Private 
					                                             %243 = OpTypePointer Function %6 
					                               Private bool* %255 = OpVariable Private 
					                                             %262 = OpTypeVector %228 4 
					                                         f32 %266 = OpConstant 3,674022E-40 
					                                       f32_4 %267 = OpConstantComposite %266 %266 %266 %266 
					                                         i32 %275 = OpConstant 21 
					                                         i32 %294 = OpConstant 20 
					                                       f32_2 %348 = OpConstantComposite %90 %102 
					                                Private f32* %378 = OpVariable Private 
					                                Private f32* %386 = OpVariable Private 
					                                         i32 %402 = OpConstant 27 
					                              Private f32_4* %420 = OpVariable Private 
					                                         i32 %433 = OpConstant 13 
					                                         i32 %436 = OpConstant 14 
					                                         i32 %440 = OpConstant 0 
					                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                              Private f32_4* %448 = OpVariable Private 
					        UniformConstant read_only Texture2D* %449 = OpVariable UniformConstant 
					                    UniformConstant sampler* %451 = OpVariable UniformConstant 
					                              Private f32_3* %456 = OpVariable Private 
					                                         i32 %459 = OpConstant 15 
					                              Private f32_4* %464 = OpVariable Private 
					                                Input f32_4* %465 = OpVariable Input 
					                                Private f32* %472 = OpVariable Private 
					                                         i32 %478 = OpConstant 9 
					                                         i32 %481 = OpConstant 10 
					                              Private f32_4* %494 = OpVariable Private 
					        UniformConstant read_only Texture2D* %495 = OpVariable UniformConstant 
					                    UniformConstant sampler* %497 = OpVariable UniformConstant 
					                                         i32 %504 = OpConstant 11 
					                              Private f32_4* %508 = OpVariable Private 
					                              Private f32_4* %512 = OpVariable Private 
					                              Private f32_4* %544 = OpVariable Private 
					                                         i32 %577 = OpConstant 12 
					                              Private f32_4* %611 = OpVariable Private 
					                              Private f32_3* %616 = OpVariable Private 
					                                         i32 %617 = OpConstant 23 
					                                         i32 %621 = OpConstant 22 
					                              Private f32_3* %634 = OpVariable Private 
					        UniformConstant read_only Texture2D* %635 = OpVariable UniformConstant 
					                    UniformConstant sampler* %637 = OpVariable UniformConstant 
					                                       f32_2 %658 = OpConstantComposite %213 %213 
					                                         f32 %680 = OpConstant 3,674022E-40 
					                                       f32_3 %681 = OpConstantComposite %680 %680 %213 
					                                       f32_3 %687 = OpConstantComposite %102 %102 %90 
					                                Private f32* %764 = OpVariable Private 
					                                         i32 %765 = OpConstant 31 
					                                         i32 %769 = OpConstant 32 
					                                Private f32* %773 = OpVariable Private 
					                                         f32 %781 = OpConstant 3,674022E-40 
					                                         i32 %794 = OpConstant 7 
					                                         i32 %798 = OpConstant 8 
					                                Private f32* %820 = OpVariable Private 
					                                         f32 %823 = OpConstant 3,674022E-40 
					                              Private f32_3* %825 = OpVariable Private 
					                              Private f32_3* %831 = OpVariable Private 
					                                         i32 %847 = OpConstant 3 
					                                         i32 %853 = OpConstant 4 
					                                         i32 %859 = OpConstant 5 
					                                             %866 = OpTypePointer Input %30 
					                        Input f32_3* vs_TEXCOORD7 = OpVariable Input 
					                                       f32_3 %871 = OpConstantComposite %102 %102 %102 
					                                         i32 %879 = OpConstant 24 
					                                         i32 %884 = OpConstant 25 
					                              Private f32_3* %900 = OpVariable Private 
					                                         i32 %903 = OpConstant 6 
					                        Input f32_3* vs_TEXCOORD6 = OpVariable Input 
					                              Private f32_3* %947 = OpVariable Private 
					                                             %948 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %949 = OpTypePointer UniformConstant %948 
					      UniformConstant read_only TextureCube* %950 = OpVariable UniformConstant 
					                    UniformConstant sampler* %952 = OpVariable UniformConstant 
					                                             %954 = OpTypeSampledImage %948 
					                                             %965 = OpTypePointer Output %7 
					                               Output f32_4* %966 = OpVariable Output 
					                                             %978 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %244 = OpVariable Function 
					                                   Input f32* %15 = OpAccessChain vs_TEXCOORD2 %13 
					                                          f32 %16 = OpLoad %15 
					                                 Private f32* %19 = OpAccessChain %9 %17 
					                                                      OpStore %19 %16 
					                                   Input f32* %21 = OpAccessChain vs_TEXCOORD3 %13 
					                                          f32 %22 = OpLoad %21 
					                                 Private f32* %24 = OpAccessChain %9 %23 
					                                                      OpStore %24 %22 
					                                   Input f32* %26 = OpAccessChain vs_TEXCOORD4 %13 
					                                          f32 %27 = OpLoad %26 
					                                 Private f32* %29 = OpAccessChain %9 %28 
					                                                      OpStore %29 %27 
					                                        f32_4 %31 = OpLoad %9 
					                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
					                                        f32_3 %33 = OpFNegate %32 
					                               Uniform f32_3* %42 = OpAccessChain %38 %40 
					                                        f32_3 %43 = OpLoad %42 
					                                        f32_3 %44 = OpFAdd %33 %43 
					                                        f32_4 %45 = OpLoad %9 
					                                        f32_4 %46 = OpVectorShuffle %45 %44 4 5 6 3 
					                                                      OpStore %9 %46 
					                                        f32_4 %48 = OpLoad %9 
					                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
					                                        f32_4 %50 = OpLoad %9 
					                                        f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
					                                          f32 %52 = OpDot %49 %51 
					                                                      OpStore %47 %52 
					                                          f32 %53 = OpLoad %47 
					                                          f32 %54 = OpExtInst %1 32 %53 
					                                                      OpStore %47 %54 
					                                        f32_4 %57 = OpLoad %9 
					                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
					                                          f32 %59 = OpLoad %47 
					                                        f32_3 %60 = OpCompositeConstruct %59 %59 %59 
					                                        f32_3 %61 = OpFMul %58 %60 
					                               Uniform f32_4* %64 = OpAccessChain %38 %62 
					                                        f32_4 %65 = OpLoad %64 
					                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
					                                        f32_3 %67 = OpFAdd %61 %66 
					                                                      OpStore %56 %67 
					                                        f32_3 %69 = OpLoad %56 
					                                        f32_3 %70 = OpLoad %56 
					                                          f32 %71 = OpDot %69 %70 
					                                                      OpStore %68 %71 
					                                          f32 %72 = OpLoad %68 
					                                          f32 %73 = OpExtInst %1 32 %72 
					                                                      OpStore %68 %73 
					                                          f32 %74 = OpLoad %68 
					                                        f32_3 %75 = OpCompositeConstruct %74 %74 %74 
					                                        f32_3 %76 = OpLoad %56 
					                                        f32_3 %77 = OpFMul %75 %76 
					                                                      OpStore %56 %77 
					                                   Input f32* %81 = OpAccessChain vs_TEXCOORD5 %17 
					                                          f32 %82 = OpLoad %81 
					                                 Uniform f32* %85 = OpAccessChain %38 %83 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFAdd %82 %86 
					                                 Private f32* %88 = OpAccessChain %9 %17 
					                                                      OpStore %88 %87 
					                                 Uniform f32* %93 = OpAccessChain %38 %92 
					                                          f32 %94 = OpLoad %93 
					                                 Uniform f32* %96 = OpAccessChain %38 %95 
					                                          f32 %97 = OpLoad %96 
					                                        f32_2 %98 = OpCompositeConstruct %94 %97 
					                                        f32_2 %99 = OpFDiv %91 %98 
					                                       f32_4 %100 = OpLoad %89 
					                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 2 3 
					                                                      OpStore %89 %101 
					                                Private f32* %103 = OpAccessChain %89 %28 
					                                                      OpStore %103 %102 
					                                       f32_4 %105 = OpLoad %89 
					                                       f32_4 %106 = OpVectorShuffle %105 %105 0 2 2 1 
					                                       f32_4 %107 = OpFNegate %106 
					                                       f32_4 %109 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
					                                       f32_4 %111 = OpFAdd %107 %110 
					                                                      OpStore %104 %111 
					                                       f32_4 %112 = OpLoad %89 
					                                       f32_4 %113 = OpVectorShuffle %112 %112 0 2 2 1 
					                                       f32_4 %114 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %115 = OpVectorShuffle %114 %114 0 1 0 1 
					                                       f32_4 %116 = OpFAdd %113 %115 
					                                                      OpStore %89 %116 
					                         read_only Texture2D %121 = OpLoad %120 
					                                     sampler %125 = OpLoad %124 
					                  read_only Texture2DSampled %127 = OpSampledImage %121 %125 
					                                       f32_4 %128 = OpLoad %104 
					                                       f32_2 %129 = OpVectorShuffle %128 %128 0 1 
					                                       f32_4 %130 = OpImageSampleImplicitLod %127 %129 
					                                         f32 %131 = OpCompositeExtract %130 3 
					                                Private f32* %132 = OpAccessChain %117 %17 
					                                                      OpStore %132 %131 
					                         read_only Texture2D %133 = OpLoad %120 
					                                     sampler %134 = OpLoad %124 
					                  read_only Texture2DSampled %135 = OpSampledImage %133 %134 
					                                       f32_4 %136 = OpLoad %104 
					                                       f32_2 %137 = OpVectorShuffle %136 %136 2 3 
					                                       f32_4 %138 = OpImageSampleImplicitLod %135 %137 
					                                         f32 %139 = OpCompositeExtract %138 3 
					                                Private f32* %140 = OpAccessChain %117 %28 
					                                                      OpStore %140 %139 
					                         read_only Texture2D %141 = OpLoad %120 
					                                     sampler %142 = OpLoad %124 
					                  read_only Texture2DSampled %143 = OpSampledImage %141 %142 
					                                       f32_4 %144 = OpLoad %89 
					                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
					                                       f32_4 %146 = OpImageSampleImplicitLod %143 %145 
					                                         f32 %147 = OpCompositeExtract %146 3 
					                                Private f32* %148 = OpAccessChain %117 %23 
					                                                      OpStore %148 %147 
					                         read_only Texture2D %149 = OpLoad %120 
					                                     sampler %150 = OpLoad %124 
					                  read_only Texture2DSampled %151 = OpSampledImage %149 %150 
					                                       f32_4 %152 = OpLoad %89 
					                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
					                                       f32_4 %154 = OpImageSampleImplicitLod %151 %153 
					                                         f32 %155 = OpCompositeExtract %154 3 
					                                Private f32* %156 = OpAccessChain %117 %13 
					                                                      OpStore %156 %155 
					                                       f32_4 %157 = OpLoad %9 
					                                       f32_4 %158 = OpVectorShuffle %157 %157 0 0 0 0 
					                                       f32_4 %159 = OpLoad %117 
					                                       f32_4 %160 = OpFAdd %158 %159 
					                                                      OpStore %9 %160 
					                                       f32_4 %161 = OpLoad %9 
					                                       f32_4 %164 = OpFAdd %161 %163 
					                                                      OpStore %9 %164 
					                                Uniform f32* %166 = OpAccessChain %38 %165 
					                                         f32 %167 = OpLoad %166 
					                                Uniform f32* %169 = OpAccessChain %38 %168 
					                                         f32 %170 = OpLoad %169 
					                                         f32 %171 = OpFAdd %167 %170 
					                                Private f32* %172 = OpAccessChain %89 %17 
					                                                      OpStore %172 %171 
					                                Private f32* %173 = OpAccessChain %89 %17 
					                                         f32 %174 = OpLoad %173 
					                                         f32 %176 = OpExtInst %1 40 %174 %175 
					                                Private f32* %177 = OpAccessChain %89 %17 
					                                                      OpStore %177 %176 
					                                       f32_4 %178 = OpLoad %9 
					                                       f32_4 %179 = OpLoad %89 
					                                       f32_4 %180 = OpVectorShuffle %179 %179 0 0 0 0 
					                                       f32_4 %181 = OpFDiv %178 %180 
					                                                      OpStore %9 %181 
					                                Private f32* %182 = OpAccessChain %89 %17 
					                                         f32 %183 = OpLoad %182 
					                                Uniform f32* %185 = OpAccessChain %38 %184 
					                                         f32 %186 = OpLoad %185 
					                                         f32 %187 = OpFMul %183 %186 
					                                Private f32* %188 = OpAccessChain %89 %17 
					                                                      OpStore %188 %187 
					                                Private f32* %189 = OpAccessChain %89 %17 
					                                         f32 %190 = OpLoad %189 
					                                Uniform f32* %192 = OpAccessChain %38 %191 
					                                         f32 %193 = OpLoad %192 
					                                         f32 %194 = OpFMul %190 %193 
					                                Private f32* %195 = OpAccessChain %89 %17 
					                                                      OpStore %195 %194 
					                                Private f32* %196 = OpAccessChain %89 %17 
					                                         f32 %197 = OpLoad %196 
					                                         f32 %199 = OpFMul %197 %198 
					                                Private f32* %200 = OpAccessChain %89 %17 
					                                                      OpStore %200 %199 
					                                       f32_4 %201 = OpLoad %9 
					                                       f32_4 %204 = OpFAdd %201 %203 
					                                                      OpStore %9 %204 
					                                       f32_4 %205 = OpLoad %9 
					                                       f32_4 %206 = OpCompositeConstruct %102 %102 %102 %102 
					                                       f32_4 %207 = OpCompositeConstruct %90 %90 %90 %90 
					                                       f32_4 %208 = OpExtInst %1 43 %205 %206 %207 
					                                                      OpStore %9 %208 
					                                       f32_4 %209 = OpLoad %9 
					                                       f32_4 %212 = OpFMul %209 %211 
					                                       f32_4 %215 = OpFAdd %212 %214 
					                                                      OpStore %104 %215 
					                                       f32_4 %216 = OpLoad %104 
					                                       f32_4 %217 = OpExtInst %1 4 %216 
					                                       f32_4 %218 = OpFNegate %217 
					                                       f32_4 %220 = OpFAdd %218 %219 
					                                                      OpStore %104 %220 
					                                Uniform f32* %224 = OpAccessChain %38 %223 
					                                         f32 %225 = OpLoad %224 
					                                         f32 %226 = OpFMul %225 %202 
					                                Private f32* %227 = OpAccessChain %222 %17 
					                                                      OpStore %227 %226 
					                                Private f32* %231 = OpAccessChain %222 %17 
					                                         f32 %232 = OpLoad %231 
					                                Private f32* %233 = OpAccessChain %222 %17 
					                                         f32 %234 = OpLoad %233 
					                                         f32 %235 = OpFNegate %234 
					                                        bool %236 = OpFOrdGreaterThanEqual %232 %235 
					                                                      OpStore %230 %236 
					                                Private f32* %237 = OpAccessChain %222 %17 
					                                         f32 %238 = OpLoad %237 
					                                         f32 %239 = OpExtInst %1 4 %238 
					                                         f32 %240 = OpExtInst %1 10 %239 
					                                Private f32* %241 = OpAccessChain %222 %17 
					                                                      OpStore %241 %240 
					                                        bool %242 = OpLoad %230 
					                                                      OpSelectionMerge %246 None 
					                                                      OpBranchConditional %242 %245 %249 
					                                             %245 = OpLabel 
					                                Private f32* %247 = OpAccessChain %222 %17 
					                                         f32 %248 = OpLoad %247 
					                                                      OpStore %244 %248 
					                                                      OpBranch %246 
					                                             %249 = OpLabel 
					                                Private f32* %250 = OpAccessChain %222 %17 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpFNegate %251 
					                                                      OpStore %244 %252 
					                                                      OpBranch %246 
					                                             %246 = OpLabel 
					                                         f32 %253 = OpLoad %244 
					                                Private f32* %254 = OpAccessChain %222 %17 
					                                                      OpStore %254 %253 
					                                Private f32* %256 = OpAccessChain %222 %17 
					                                         f32 %257 = OpLoad %256 
					                                        bool %258 = OpFOrdGreaterThanEqual %257 %202 
					                                                      OpStore %255 %258 
					                                        bool %259 = OpLoad %255 
					                                       f32_4 %260 = OpLoad %104 
					                                       f32_4 %261 = OpLoad %9 
					                                      bool_4 %263 = OpCompositeConstruct %259 %259 %259 %259 
					                                       f32_4 %264 = OpSelect %263 %260 %261 
					                                                      OpStore %9 %264 
					                                       f32_4 %265 = OpLoad %9 
					                                       f32_4 %268 = OpFMul %265 %267 
					                                                      OpStore %104 %268 
					                                       f32_4 %269 = OpLoad %104 
					                                       f32_4 %270 = OpExtInst %1 13 %269 
					                                                      OpStore %104 %270 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_4 %272 = OpFNegate %271 
					                                       f32_4 %273 = OpLoad %104 
					                                       f32_4 %274 = OpFAdd %272 %273 
					                                                      OpStore %104 %274 
					                                Uniform f32* %276 = OpAccessChain %38 %275 
					                                         f32 %277 = OpLoad %276 
					                                Uniform f32* %278 = OpAccessChain %38 %275 
					                                         f32 %279 = OpLoad %278 
					                                Uniform f32* %280 = OpAccessChain %38 %275 
					                                         f32 %281 = OpLoad %280 
					                                Uniform f32* %282 = OpAccessChain %38 %275 
					                                         f32 %283 = OpLoad %282 
					                                       f32_4 %284 = OpCompositeConstruct %277 %279 %281 %283 
					                                         f32 %285 = OpCompositeExtract %284 0 
					                                         f32 %286 = OpCompositeExtract %284 1 
					                                         f32 %287 = OpCompositeExtract %284 2 
					                                         f32 %288 = OpCompositeExtract %284 3 
					                                       f32_4 %289 = OpCompositeConstruct %285 %286 %287 %288 
					                                       f32_4 %290 = OpLoad %104 
					                                       f32_4 %291 = OpFMul %289 %290 
					                                       f32_4 %292 = OpLoad %9 
					                                       f32_4 %293 = OpFAdd %291 %292 
					                                                      OpStore %9 %293 
					                                Uniform f32* %295 = OpAccessChain %38 %294 
					                                         f32 %296 = OpLoad %295 
					                                         f32 %297 = OpFNegate %296 
					                                         f32 %298 = OpFAdd %297 %90 
					                                Private f32* %299 = OpAccessChain %222 %17 
					                                                      OpStore %299 %298 
					                                       f32_4 %300 = OpLoad %9 
					                                       f32_2 %301 = OpLoad %222 
					                                       f32_4 %302 = OpVectorShuffle %301 %301 0 0 0 0 
					                                       f32_4 %303 = OpExtInst %1 37 %300 %302 
					                                                      OpStore %9 %303 
					                                       f32_4 %304 = OpLoad %89 
					                                       f32_2 %305 = OpVectorShuffle %304 %304 0 0 
					                                       f32_4 %306 = OpLoad %9 
					                                       f32_2 %307 = OpVectorShuffle %306 %306 0 2 
					                                       f32_2 %308 = OpFMul %305 %307 
					                                       f32_4 %309 = OpLoad %9 
					                                       f32_4 %310 = OpVectorShuffle %309 %308 4 1 5 3 
					                                                      OpStore %9 %310 
					                                       f32_4 %311 = OpLoad %9 
					                                       f32_2 %312 = OpVectorShuffle %311 %311 3 1 
					                                       f32_4 %313 = OpLoad %89 
					                                       f32_2 %314 = OpVectorShuffle %313 %313 0 0 
					                                       f32_2 %315 = OpFMul %312 %314 
					                                       f32_4 %316 = OpLoad %9 
					                                       f32_2 %317 = OpVectorShuffle %316 %316 2 0 
					                                       f32_2 %318 = OpFNegate %317 
					                                       f32_2 %319 = OpFAdd %315 %318 
					                                       f32_4 %320 = OpLoad %9 
					                                       f32_4 %321 = OpVectorShuffle %320 %319 0 4 5 3 
					                                                      OpStore %9 %321 
					                                Private f32* %322 = OpAccessChain %9 %17 
					                                                      OpStore %322 %213 
					                                Private f32* %323 = OpAccessChain %9 %13 
					                                                      OpStore %323 %90 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_2 %325 = OpVectorShuffle %324 %324 0 1 
					                                       f32_4 %326 = OpLoad %9 
					                                       f32_2 %327 = OpVectorShuffle %326 %326 0 1 
					                                         f32 %328 = OpDot %325 %327 
					                                Private f32* %329 = OpAccessChain %89 %17 
					                                                      OpStore %329 %328 
					                                Private f32* %330 = OpAccessChain %89 %17 
					                                         f32 %331 = OpLoad %330 
					                                         f32 %332 = OpExtInst %1 32 %331 
					                                Private f32* %333 = OpAccessChain %89 %17 
					                                                      OpStore %333 %332 
					                                       f32_4 %334 = OpLoad %9 
					                                       f32_2 %335 = OpVectorShuffle %334 %334 2 3 
					                                       f32_4 %336 = OpLoad %9 
					                                       f32_2 %337 = OpVectorShuffle %336 %336 2 3 
					                                         f32 %338 = OpDot %335 %337 
					                                                      OpStore %47 %338 
					                                         f32 %339 = OpLoad %47 
					                                         f32 %340 = OpExtInst %1 32 %339 
					                                                      OpStore %47 %340 
					                                         f32 %341 = OpLoad %47 
					                                Private f32* %342 = OpAccessChain %9 %28 
					                                         f32 %343 = OpLoad %342 
					                                         f32 %344 = OpFMul %341 %343 
					                                Private f32* %345 = OpAccessChain %104 %17 
					                                                      OpStore %345 %344 
					                                         f32 %346 = OpLoad %47 
					                                       f32_2 %347 = OpCompositeConstruct %346 %346 
					                                       f32_2 %349 = OpFMul %347 %348 
					                                       f32_4 %350 = OpLoad %104 
					                                       f32_4 %351 = OpVectorShuffle %350 %349 0 4 5 3 
					                                                      OpStore %104 %351 
					                                Private f32* %352 = OpAccessChain %9 %28 
					                                                      OpStore %352 %102 
					                                       f32_4 %353 = OpLoad %89 
					                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
					                                       f32_4 %355 = OpLoad %9 
					                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
					                                       f32_3 %357 = OpFMul %354 %356 
					                                       f32_4 %358 = OpLoad %9 
					                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
					                                                      OpStore %9 %359 
					                                       f32_4 %360 = OpLoad %9 
					                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
					                                       f32_4 %362 = OpLoad %104 
					                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
					                                       f32_3 %364 = OpFMul %361 %363 
					                                       f32_4 %365 = OpLoad %89 
					                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
					                                                      OpStore %89 %366 
					                                       f32_4 %367 = OpLoad %104 
					                                       f32_3 %368 = OpVectorShuffle %367 %367 2 0 1 
					                                       f32_4 %369 = OpLoad %9 
					                                       f32_3 %370 = OpVectorShuffle %369 %369 1 2 0 
					                                       f32_3 %371 = OpFMul %368 %370 
					                                       f32_4 %372 = OpLoad %89 
					                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
					                                       f32_3 %374 = OpFNegate %373 
					                                       f32_3 %375 = OpFAdd %371 %374 
					                                       f32_4 %376 = OpLoad %9 
					                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
					                                                      OpStore %9 %377 
					                         read_only Texture2D %379 = OpLoad %120 
					                                     sampler %380 = OpLoad %124 
					                  read_only Texture2DSampled %381 = OpSampledImage %379 %380 
					                                       f32_4 %382 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
					                                       f32_4 %384 = OpImageSampleImplicitLod %381 %383 
					                                         f32 %385 = OpCompositeExtract %384 3 
					                                                      OpStore %378 %385 
					                                         f32 %387 = OpLoad %378 
					                                         f32 %388 = OpFNegate %387 
					                                         f32 %389 = OpFAdd %388 %202 
					                                                      OpStore %386 %389 
					                                         f32 %390 = OpLoad %386 
					                                  Input f32* %391 = OpAccessChain vs_TEXCOORD5 %17 
					                                         f32 %392 = OpLoad %391 
					                                         f32 %393 = OpFNegate %392 
					                                         f32 %394 = OpFAdd %390 %393 
					                                                      OpStore %47 %394 
					                                         f32 %395 = OpLoad %47 
					                                  Input f32* %396 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %397 = OpLoad %396 
					                                         f32 %398 = OpFMul %395 %397 
					                                         f32 %399 = OpFAdd %398 %202 
					                                                      OpStore %47 %399 
					                                Uniform f32* %400 = OpAccessChain %38 %168 
					                                         f32 %401 = OpLoad %400 
					                                Uniform f32* %403 = OpAccessChain %38 %402 
					                                         f32 %404 = OpLoad %403 
					                                         f32 %405 = OpFMul %401 %404 
					                                Private f32* %406 = OpAccessChain %89 %17 
					                                                      OpStore %406 %405 
					                                Private f32* %407 = OpAccessChain %89 %17 
					                                         f32 %408 = OpLoad %407 
					                                  Input f32* %409 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %410 = OpLoad %409 
					                                         f32 %411 = OpFMul %408 %410 
					                                Private f32* %412 = OpAccessChain %89 %17 
					                                                      OpStore %412 %411 
					                                Private f32* %413 = OpAccessChain %89 %17 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %414 %202 
					                                         f32 %416 = OpLoad %47 
					                                         f32 %417 = OpFAdd %415 %416 
					                                                      OpStore %68 %417 
					                                         f32 %418 = OpLoad %68 
					                                         f32 %419 = OpExtInst %1 43 %418 %102 %90 
					                                                      OpStore %68 %419 
					                                Private f32* %421 = OpAccessChain %89 %17 
					                                         f32 %422 = OpLoad %421 
					                                         f32 %423 = OpExtInst %1 37 %422 %90 
					                                Private f32* %424 = OpAccessChain %420 %17 
					                                                      OpStore %424 %423 
					                                Private f32* %425 = OpAccessChain %420 %17 
					                                         f32 %426 = OpLoad %425 
					                                         f32 %427 = OpExtInst %1 31 %426 
					                                Private f32* %428 = OpAccessChain %420 %17 
					                                                      OpStore %428 %427 
					                                         f32 %429 = OpLoad %68 
					                                Private f32* %430 = OpAccessChain %420 %17 
					                                         f32 %431 = OpLoad %430 
					                                         f32 %432 = OpFMul %429 %431 
					                                                      OpStore %68 %432 
					                                Uniform f32* %434 = OpAccessChain %38 %433 
					                                         f32 %435 = OpLoad %434 
					                                Uniform f32* %437 = OpAccessChain %38 %436 
					                                         f32 %438 = OpLoad %437 
					                                       f32_2 %439 = OpCompositeConstruct %435 %438 
					                              Uniform f32_4* %441 = OpAccessChain %38 %440 
					                                       f32_4 %442 = OpLoad %441 
					                                       f32_2 %443 = OpVectorShuffle %442 %442 1 1 
					                                       f32_2 %444 = OpFMul %439 %443 
					                                       f32_2 %446 = OpLoad vs_TEXCOORD1 
					                                       f32_2 %447 = OpFAdd %444 %446 
					                                                      OpStore %222 %447 
					                         read_only Texture2D %450 = OpLoad %449 
					                                     sampler %452 = OpLoad %451 
					                  read_only Texture2DSampled %453 = OpSampledImage %450 %452 
					                                       f32_2 %454 = OpLoad %222 
					                                       f32_4 %455 = OpImageSampleImplicitLod %453 %454 
					                                                      OpStore %448 %455 
					                                       f32_4 %457 = OpLoad %448 
					                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
					                              Uniform f32_4* %460 = OpAccessChain %38 %459 
					                                       f32_4 %461 = OpLoad %460 
					                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
					                                       f32_3 %463 = OpFMul %458 %462 
					                                                      OpStore %456 %463 
					                                  Input f32* %466 = OpAccessChain %465 %13 
					                                         f32 %467 = OpLoad %466 
					                                Uniform f32* %468 = OpAccessChain %38 %459 %13 
					                                         f32 %469 = OpLoad %468 
					                                         f32 %470 = OpFMul %467 %469 
					                                Private f32* %471 = OpAccessChain %464 %17 
					                                                      OpStore %471 %470 
					                                Private f32* %473 = OpAccessChain %448 %13 
					                                         f32 %474 = OpLoad %473 
					                                Private f32* %475 = OpAccessChain %464 %17 
					                                         f32 %476 = OpLoad %475 
					                                         f32 %477 = OpFMul %474 %476 
					                                                      OpStore %472 %477 
					                                Uniform f32* %479 = OpAccessChain %38 %478 
					                                         f32 %480 = OpLoad %479 
					                                Uniform f32* %482 = OpAccessChain %38 %481 
					                                         f32 %483 = OpLoad %482 
					                                       f32_2 %484 = OpCompositeConstruct %480 %483 
					                              Uniform f32_4* %485 = OpAccessChain %38 %440 
					                                       f32_4 %486 = OpLoad %485 
					                                       f32_2 %487 = OpVectorShuffle %486 %486 1 1 
					                                       f32_2 %488 = OpFMul %484 %487 
					                                       f32_4 %489 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
					                                       f32_2 %491 = OpFAdd %488 %490 
					                                       f32_4 %492 = OpLoad %117 
					                                       f32_4 %493 = OpVectorShuffle %492 %491 4 5 2 3 
					                                                      OpStore %117 %493 
					                         read_only Texture2D %496 = OpLoad %495 
					                                     sampler %498 = OpLoad %497 
					                  read_only Texture2DSampled %499 = OpSampledImage %496 %498 
					                                       f32_4 %500 = OpLoad %117 
					                                       f32_2 %501 = OpVectorShuffle %500 %500 0 1 
					                                       f32_4 %502 = OpImageSampleImplicitLod %499 %501 
					                                                      OpStore %494 %502 
					                                       f32_4 %503 = OpLoad %465 
					                              Uniform f32_4* %505 = OpAccessChain %38 %504 
					                                       f32_4 %506 = OpLoad %505 
					                                       f32_4 %507 = OpFMul %503 %506 
					                                                      OpStore %420 %507 
					                                       f32_4 %509 = OpLoad %494 
					                                       f32_4 %510 = OpLoad %420 
					                                       f32_4 %511 = OpFMul %509 %510 
					                                                      OpStore %508 %511 
					                                       f32_4 %513 = OpLoad %508 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 3 3 3 
					                                       f32_4 %515 = OpLoad %508 
					                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
					                                       f32_3 %517 = OpFMul %514 %516 
					                                       f32_4 %518 = OpLoad %512 
					                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
					                                                      OpStore %512 %519 
					                                       f32_3 %520 = OpLoad %456 
					                                         f32 %521 = OpLoad %472 
					                                       f32_3 %522 = OpCompositeConstruct %521 %521 %521 
					                                       f32_3 %523 = OpFMul %520 %522 
					                                       f32_4 %524 = OpLoad %512 
					                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
					                                       f32_3 %526 = OpFNegate %525 
					                                       f32_3 %527 = OpFAdd %523 %526 
					                                       f32_4 %528 = OpLoad %512 
					                                       f32_4 %529 = OpVectorShuffle %528 %527 4 5 6 3 
					                                                      OpStore %512 %529 
					                                Private f32* %530 = OpAccessChain %464 %17 
					                                         f32 %531 = OpLoad %530 
					                                Private f32* %532 = OpAccessChain %448 %13 
					                                         f32 %533 = OpLoad %532 
					                                         f32 %534 = OpFMul %531 %533 
					                                Private f32* %535 = OpAccessChain %508 %13 
					                                         f32 %536 = OpLoad %535 
					                                         f32 %537 = OpFNegate %536 
					                                         f32 %538 = OpFAdd %534 %537 
					                                Private f32* %539 = OpAccessChain %512 %13 
					                                                      OpStore %539 %538 
					                                         f32 %540 = OpLoad %68 
					                                       f32_4 %541 = OpCompositeConstruct %540 %540 %540 %540 
					                                       f32_4 %542 = OpLoad %512 
					                                       f32_4 %543 = OpFMul %541 %542 
					                                                      OpStore %464 %543 
					                                Private f32* %545 = OpAccessChain %420 %13 
					                                         f32 %546 = OpLoad %545 
					                                Private f32* %547 = OpAccessChain %494 %13 
					                                         f32 %548 = OpLoad %547 
					                                         f32 %549 = OpFMul %546 %548 
					                                Private f32* %550 = OpAccessChain %464 %13 
					                                         f32 %551 = OpLoad %550 
					                                         f32 %552 = OpFAdd %549 %551 
					                                Private f32* %553 = OpAccessChain %544 %13 
					                                                      OpStore %553 %552 
					                                       f32_4 %554 = OpLoad %508 
					                                       f32_3 %555 = OpVectorShuffle %554 %554 0 1 2 
					                                       f32_4 %556 = OpLoad %508 
					                                       f32_3 %557 = OpVectorShuffle %556 %556 3 3 3 
					                                       f32_3 %558 = OpFMul %555 %557 
					                                       f32_4 %559 = OpLoad %464 
					                                       f32_3 %560 = OpVectorShuffle %559 %559 0 1 2 
					                                       f32_3 %561 = OpFAdd %558 %560 
					                                       f32_4 %562 = OpLoad %544 
					                                       f32_4 %563 = OpVectorShuffle %562 %561 4 5 6 3 
					                                                      OpStore %544 %563 
					                                Private f32* %564 = OpAccessChain %89 %17 
					                                         f32 %565 = OpLoad %564 
					                                         f32 %566 = OpFNegate %565 
					                                         f32 %567 = OpFMul %566 %202 
					                                         f32 %568 = OpLoad %47 
					                                         f32 %569 = OpFAdd %567 %568 
					                                                      OpStore %68 %569 
					                                Private f32* %570 = OpAccessChain %89 %17 
					                                         f32 %571 = OpLoad %570 
					                                         f32 %572 = OpFMul %571 %202 
					                                         f32 %573 = OpLoad %47 
					                                         f32 %574 = OpFAdd %572 %573 
					                                                      OpStore %47 %574 
					                                         f32 %575 = OpLoad %47 
					                                         f32 %576 = OpExtInst %1 43 %575 %102 %90 
					                                                      OpStore %47 %576 
					                                Uniform f32* %578 = OpAccessChain %38 %577 
					                                         f32 %579 = OpLoad %578 
					                                Uniform f32* %580 = OpAccessChain %38 %402 
					                                         f32 %581 = OpLoad %580 
					                                         f32 %582 = OpFMul %579 %581 
					                                Private f32* %583 = OpAccessChain %89 %17 
					                                                      OpStore %583 %582 
					                                Private f32* %584 = OpAccessChain %89 %17 
					                                         f32 %585 = OpLoad %584 
					                                  Input f32* %586 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %587 = OpLoad %586 
					                                         f32 %588 = OpFMul %585 %587 
					                                Private f32* %589 = OpAccessChain %222 %17 
					                                                      OpStore %589 %588 
					                                Private f32* %590 = OpAccessChain %89 %17 
					                                         f32 %591 = OpLoad %590 
					                                  Input f32* %592 = OpAccessChain vs_TEXCOORD5 %23 
					                                         f32 %593 = OpLoad %592 
					                                         f32 %594 = OpFMul %591 %593 
					                                         f32 %595 = OpFAdd %594 %90 
					                                Private f32* %596 = OpAccessChain %512 %17 
					                                                      OpStore %596 %595 
					                                Private f32* %597 = OpAccessChain %222 %17 
					                                         f32 %598 = OpLoad %597 
					                                         f32 %599 = OpFMul %598 %202 
					                                         f32 %600 = OpLoad %68 
					                                         f32 %601 = OpFAdd %599 %600 
					                                                      OpStore %68 %601 
					                                         f32 %602 = OpLoad %68 
					                                Private f32* %603 = OpAccessChain %512 %17 
					                                         f32 %604 = OpLoad %603 
					                                         f32 %605 = OpFDiv %602 %604 
					                                                      OpStore %68 %605 
					                                         f32 %606 = OpLoad %68 
					                                         f32 %607 = OpExtInst %1 43 %606 %102 %90 
					                                                      OpStore %68 %607 
					                                         f32 %608 = OpLoad %68 
					                                         f32 %609 = OpFNegate %608 
					                                         f32 %610 = OpFAdd %609 %90 
					                                                      OpStore %68 %610 
					                                         f32 %612 = OpLoad %68 
					                                       f32_4 %613 = OpCompositeConstruct %612 %612 %612 %612 
					                                       f32_4 %614 = OpLoad %544 
					                                       f32_4 %615 = OpFMul %613 %614 
					                                                      OpStore %611 %615 
					                                Uniform f32* %618 = OpAccessChain %38 %617 
					                                         f32 %619 = OpLoad %618 
					                                         f32 %620 = OpFNegate %619 
					                                Uniform f32* %622 = OpAccessChain %38 %621 
					                                         f32 %623 = OpLoad %622 
					                                         f32 %624 = OpFAdd %620 %623 
					                                Private f32* %625 = OpAccessChain %616 %17 
					                                                      OpStore %625 %624 
					                                         f32 %626 = OpLoad %47 
					                                Private f32* %627 = OpAccessChain %616 %17 
					                                         f32 %628 = OpLoad %627 
					                                         f32 %629 = OpFMul %626 %628 
					                                Uniform f32* %630 = OpAccessChain %38 %617 
					                                         f32 %631 = OpLoad %630 
					                                         f32 %632 = OpFAdd %629 %631 
					                                Private f32* %633 = OpAccessChain %616 %17 
					                                                      OpStore %633 %632 
					                         read_only Texture2D %636 = OpLoad %635 
					                                     sampler %638 = OpLoad %637 
					                  read_only Texture2DSampled %639 = OpSampledImage %636 %638 
					                                       f32_4 %640 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %641 = OpVectorShuffle %640 %640 2 3 
					                                       f32_4 %642 = OpImageSampleImplicitLod %639 %641 
					                                       f32_3 %643 = OpVectorShuffle %642 %642 0 1 3 
					                                                      OpStore %634 %643 
					                                       f32_3 %644 = OpLoad %634 
					                                       f32_2 %645 = OpVectorShuffle %644 %644 0 0 
					                                       f32_3 %646 = OpLoad %634 
					                                       f32_2 %647 = OpVectorShuffle %646 %646 2 2 
					                                         f32 %648 = OpDot %645 %647 
					                                Private f32* %649 = OpAccessChain %512 %17 
					                                                      OpStore %649 %648 
					                                Private f32* %650 = OpAccessChain %634 %23 
					                                         f32 %651 = OpLoad %650 
					                                Private f32* %652 = OpAccessChain %634 %23 
					                                         f32 %653 = OpLoad %652 
					                                         f32 %654 = OpFAdd %651 %653 
					                                Private f32* %655 = OpAccessChain %512 %23 
					                                                      OpStore %655 %654 
					                                       f32_4 %656 = OpLoad %512 
					                                       f32_2 %657 = OpVectorShuffle %656 %656 0 1 
					                                       f32_2 %659 = OpFAdd %657 %658 
					                                       f32_4 %660 = OpLoad %512 
					                                       f32_4 %661 = OpVectorShuffle %660 %659 4 5 2 3 
					                                                      OpStore %512 %661 
					                                       f32_4 %662 = OpLoad %512 
					                                       f32_2 %663 = OpVectorShuffle %662 %662 0 1 
					                                       f32_4 %664 = OpLoad %512 
					                                       f32_2 %665 = OpVectorShuffle %664 %664 0 1 
					                                         f32 %666 = OpDot %663 %665 
					                                                      OpStore %68 %666 
					                                         f32 %667 = OpLoad %68 
					                                         f32 %668 = OpExtInst %1 37 %667 %90 
					                                                      OpStore %68 %668 
					                                         f32 %669 = OpLoad %68 
					                                         f32 %670 = OpFNegate %669 
					                                         f32 %671 = OpFAdd %670 %90 
					                                                      OpStore %68 %671 
					                                         f32 %672 = OpLoad %68 
					                                         f32 %673 = OpExtInst %1 31 %672 
					                                Private f32* %674 = OpAccessChain %512 %28 
					                                                      OpStore %674 %673 
					                                       f32_4 %675 = OpLoad %512 
					                                       f32_3 %676 = OpVectorShuffle %675 %675 0 1 2 
					                                       f32_3 %677 = OpLoad %616 
					                                       f32_3 %678 = OpVectorShuffle %677 %677 0 0 0 
					                                       f32_3 %679 = OpFMul %676 %678 
					                                       f32_3 %682 = OpFAdd %679 %681 
					                                                      OpStore %616 %682 
					                                       f32_4 %683 = OpLoad %611 
					                                       f32_3 %684 = OpVectorShuffle %683 %683 3 3 3 
					                                       f32_3 %685 = OpLoad %616 
					                                       f32_3 %686 = OpFMul %684 %685 
					                                       f32_3 %688 = OpFAdd %686 %687 
					                                                      OpStore %616 %688 
					                                       f32_4 %689 = OpLoad %9 
					                                       f32_3 %690 = OpVectorShuffle %689 %689 0 1 2 
					                                       f32_3 %691 = OpLoad %616 
					                                       f32_3 %692 = OpFNegate %691 
					                                       f32_3 %693 = OpFAdd %690 %692 
					                                       f32_4 %694 = OpLoad %9 
					                                       f32_4 %695 = OpVectorShuffle %694 %693 4 5 6 3 
					                                                      OpStore %9 %695 
					                                       f32_4 %696 = OpLoad %9 
					                                       f32_3 %697 = OpVectorShuffle %696 %696 0 1 2 
					                                       f32_4 %698 = OpLoad %9 
					                                       f32_3 %699 = OpVectorShuffle %698 %698 0 1 2 
					                                         f32 %700 = OpDot %697 %699 
					                                Private f32* %701 = OpAccessChain %616 %17 
					                                                      OpStore %701 %700 
					                                Private f32* %702 = OpAccessChain %616 %17 
					                                         f32 %703 = OpLoad %702 
					                                         f32 %704 = OpExtInst %1 32 %703 
					                                Private f32* %705 = OpAccessChain %616 %17 
					                                                      OpStore %705 %704 
					                                       f32_4 %706 = OpLoad %9 
					                                       f32_3 %707 = OpVectorShuffle %706 %706 0 1 2 
					                                       f32_3 %708 = OpLoad %616 
					                                       f32_3 %709 = OpVectorShuffle %708 %708 0 0 0 
					                                       f32_3 %710 = OpFMul %707 %709 
					                                       f32_4 %711 = OpLoad %9 
					                                       f32_4 %712 = OpVectorShuffle %711 %710 4 5 6 3 
					                                                      OpStore %9 %712 
					                                       f32_4 %713 = OpLoad vs_TEXCOORD2 
					                                       f32_3 %714 = OpVectorShuffle %713 %713 0 1 2 
					                                       f32_4 %715 = OpLoad %9 
					                                       f32_3 %716 = OpVectorShuffle %715 %715 0 1 2 
					                                       f32_3 %717 = OpFNegate %716 
					                                         f32 %718 = OpDot %714 %717 
					                                Private f32* %719 = OpAccessChain %512 %17 
					                                                      OpStore %719 %718 
					                                       f32_4 %720 = OpLoad vs_TEXCOORD3 
					                                       f32_3 %721 = OpVectorShuffle %720 %720 0 1 2 
					                                       f32_4 %722 = OpLoad %9 
					                                       f32_3 %723 = OpVectorShuffle %722 %722 0 1 2 
					                                       f32_3 %724 = OpFNegate %723 
					                                         f32 %725 = OpDot %721 %724 
					                                Private f32* %726 = OpAccessChain %512 %23 
					                                                      OpStore %726 %725 
					                                       f32_4 %727 = OpLoad vs_TEXCOORD4 
					                                       f32_3 %728 = OpVectorShuffle %727 %727 0 1 2 
					                                       f32_4 %729 = OpLoad %9 
					                                       f32_3 %730 = OpVectorShuffle %729 %729 0 1 2 
					                                       f32_3 %731 = OpFNegate %730 
					                                         f32 %732 = OpDot %728 %731 
					                                Private f32* %733 = OpAccessChain %512 %28 
					                                                      OpStore %733 %732 
					                                       f32_4 %734 = OpLoad %512 
					                                       f32_3 %735 = OpVectorShuffle %734 %734 0 1 2 
					                                       f32_4 %736 = OpLoad %512 
					                                       f32_3 %737 = OpVectorShuffle %736 %736 0 1 2 
					                                         f32 %738 = OpDot %735 %737 
					                                Private f32* %739 = OpAccessChain %508 %17 
					                                                      OpStore %739 %738 
					                                Private f32* %740 = OpAccessChain %508 %17 
					                                         f32 %741 = OpLoad %740 
					                                         f32 %742 = OpExtInst %1 32 %741 
					                                Private f32* %743 = OpAccessChain %508 %17 
					                                                      OpStore %743 %742 
					                                       f32_4 %744 = OpLoad %508 
					                                       f32_3 %745 = OpVectorShuffle %744 %744 0 0 0 
					                                       f32_4 %746 = OpLoad %512 
					                                       f32_3 %747 = OpVectorShuffle %746 %746 0 1 2 
					                                       f32_3 %748 = OpFMul %745 %747 
					                                       f32_4 %749 = OpLoad %104 
					                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
					                                                      OpStore %104 %750 
					                                       f32_4 %751 = OpLoad %104 
					                                       f32_3 %752 = OpVectorShuffle %751 %751 0 1 2 
					                                       f32_3 %753 = OpLoad %56 
					                                         f32 %754 = OpDot %752 %753 
					                                Private f32* %755 = OpAccessChain %56 %17 
					                                                      OpStore %755 %754 
					                                Private f32* %756 = OpAccessChain %56 %17 
					                                         f32 %757 = OpLoad %756 
					                                         f32 %758 = OpExtInst %1 40 %757 %102 
					                                Private f32* %759 = OpAccessChain %56 %17 
					                                                      OpStore %759 %758 
					                                Private f32* %760 = OpAccessChain %56 %17 
					                                         f32 %761 = OpLoad %760 
					                                         f32 %762 = OpExtInst %1 30 %761 
					                                Private f32* %763 = OpAccessChain %508 %17 
					                                                      OpStore %763 %762 
					                                Uniform f32* %766 = OpAccessChain %38 %765 
					                                         f32 %767 = OpLoad %766 
					                                         f32 %768 = OpFNegate %767 
					                                Uniform f32* %770 = OpAccessChain %38 %769 
					                                         f32 %771 = OpLoad %770 
					                                         f32 %772 = OpFAdd %768 %771 
					                                                      OpStore %764 %772 
					                                         f32 %774 = OpLoad %47 
					                                         f32 %775 = OpLoad %764 
					                                         f32 %776 = OpFMul %774 %775 
					                                Uniform f32* %777 = OpAccessChain %38 %765 
					                                         f32 %778 = OpLoad %777 
					                                         f32 %779 = OpFAdd %776 %778 
					                                                      OpStore %773 %779 
					                                         f32 %780 = OpLoad %773 
					                                         f32 %782 = OpFMul %780 %781 
					                                Private f32* %783 = OpAccessChain %56 %17 
					                                                      OpStore %783 %782 
					                                Private f32* %784 = OpAccessChain %508 %17 
					                                         f32 %785 = OpLoad %784 
					                                Private f32* %786 = OpAccessChain %56 %17 
					                                         f32 %787 = OpLoad %786 
					                                         f32 %788 = OpFMul %785 %787 
					                                Private f32* %789 = OpAccessChain %508 %17 
					                                                      OpStore %789 %788 
					                                Private f32* %790 = OpAccessChain %508 %17 
					                                         f32 %791 = OpLoad %790 
					                                         f32 %792 = OpExtInst %1 29 %791 
					                                Private f32* %793 = OpAccessChain %508 %17 
					                                                      OpStore %793 %792 
					                              Uniform f32_4* %795 = OpAccessChain %38 %794 
					                                       f32_4 %796 = OpLoad %795 
					                                       f32_3 %797 = OpVectorShuffle %796 %796 0 1 2 
					                              Uniform f32_4* %799 = OpAccessChain %38 %798 
					                                       f32_4 %800 = OpLoad %799 
					                                       f32_3 %801 = OpVectorShuffle %800 %800 0 1 2 
					                                       f32_3 %802 = OpFMul %797 %801 
					                                                      OpStore %56 %802 
					                                       f32_4 %803 = OpLoad %508 
					                                       f32_3 %804 = OpVectorShuffle %803 %803 0 0 0 
					                                       f32_3 %805 = OpLoad %56 
					                                       f32_3 %806 = OpFMul %804 %805 
					                                       f32_4 %807 = OpLoad %508 
					                                       f32_4 %808 = OpVectorShuffle %807 %806 4 5 6 3 
					                                                      OpStore %508 %808 
					                                       f32_4 %809 = OpLoad %104 
					                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
					                              Uniform f32_4* %811 = OpAccessChain %38 %62 
					                                       f32_4 %812 = OpLoad %811 
					                                       f32_3 %813 = OpVectorShuffle %812 %812 0 1 2 
					                                         f32 %814 = OpDot %810 %813 
					                                Private f32* %815 = OpAccessChain %56 %17 
					                                                      OpStore %815 %814 
					                                Private f32* %816 = OpAccessChain %56 %17 
					                                         f32 %817 = OpLoad %816 
					                                         f32 %818 = OpExtInst %1 40 %817 %102 
					                                Private f32* %819 = OpAccessChain %56 %17 
					                                                      OpStore %819 %818 
					                                Private f32* %821 = OpAccessChain %611 %13 
					                                         f32 %822 = OpLoad %821 
					                                         f32 %824 = OpExtInst %1 40 %822 %823 
					                                                      OpStore %820 %824 
					                                       f32_4 %826 = OpLoad %611 
					                                       f32_3 %827 = OpVectorShuffle %826 %826 0 1 2 
					                                         f32 %828 = OpLoad %820 
					                                       f32_3 %829 = OpCompositeConstruct %828 %828 %828 
					                                       f32_3 %830 = OpFDiv %827 %829 
					                                                      OpStore %825 %830 
					                                       f32_3 %832 = OpLoad %825 
					                              Uniform f32_4* %833 = OpAccessChain %38 %794 
					                                       f32_4 %834 = OpLoad %833 
					                                       f32_3 %835 = OpVectorShuffle %834 %834 0 1 2 
					                                       f32_3 %836 = OpFMul %832 %835 
					                                                      OpStore %831 %836 
					                                       f32_3 %837 = OpLoad %831 
					                                       f32_3 %838 = OpLoad %56 
					                                       f32_3 %839 = OpVectorShuffle %838 %838 0 0 0 
					                                       f32_3 %840 = OpFMul %837 %839 
					                                       f32_4 %841 = OpLoad %508 
					                                       f32_3 %842 = OpVectorShuffle %841 %841 0 1 2 
					                                       f32_3 %843 = OpFAdd %840 %842 
					                                       f32_4 %844 = OpLoad %508 
					                                       f32_4 %845 = OpVectorShuffle %844 %843 4 5 6 3 
					                                                      OpStore %508 %845 
					                                Private f32* %846 = OpAccessChain %104 %13 
					                                                      OpStore %846 %90 
					                              Uniform f32_4* %848 = OpAccessChain %38 %847 
					                                       f32_4 %849 = OpLoad %848 
					                                       f32_4 %850 = OpLoad %104 
					                                         f32 %851 = OpDot %849 %850 
					                                Private f32* %852 = OpAccessChain %56 %17 
					                                                      OpStore %852 %851 
					                              Uniform f32_4* %854 = OpAccessChain %38 %853 
					                                       f32_4 %855 = OpLoad %854 
					                                       f32_4 %856 = OpLoad %104 
					                                         f32 %857 = OpDot %855 %856 
					                                Private f32* %858 = OpAccessChain %56 %23 
					                                                      OpStore %858 %857 
					                              Uniform f32_4* %860 = OpAccessChain %38 %859 
					                                       f32_4 %861 = OpLoad %860 
					                                       f32_4 %862 = OpLoad %104 
					                                         f32 %863 = OpDot %861 %862 
					                                Private f32* %864 = OpAccessChain %56 %28 
					                                                      OpStore %864 %863 
					                                       f32_3 %865 = OpLoad %56 
					                                       f32_3 %868 = OpLoad vs_TEXCOORD7 
					                                       f32_3 %869 = OpFAdd %865 %868 
					                                                      OpStore %56 %869 
					                                       f32_3 %870 = OpLoad %56 
					                                       f32_3 %872 = OpExtInst %1 40 %870 %871 
					                                                      OpStore %56 %872 
					                                       f32_3 %873 = OpLoad %825 
					                                       f32_3 %874 = OpLoad %56 
					                                       f32_3 %875 = OpFMul %873 %874 
					                                       f32_4 %876 = OpLoad %508 
					                                       f32_3 %877 = OpVectorShuffle %876 %876 0 1 2 
					                                       f32_3 %878 = OpFAdd %875 %877 
					                                                      OpStore %56 %878 
					                              Uniform f32_4* %880 = OpAccessChain %38 %879 
					                                       f32_4 %881 = OpLoad %880 
					                                       f32_3 %882 = OpVectorShuffle %881 %881 0 1 2 
					                                       f32_3 %883 = OpFNegate %882 
					                              Uniform f32_4* %885 = OpAccessChain %38 %884 
					                                       f32_4 %886 = OpLoad %885 
					                                       f32_3 %887 = OpVectorShuffle %886 %886 0 1 2 
					                                       f32_3 %888 = OpFAdd %883 %887 
					                                       f32_4 %889 = OpLoad %508 
					                                       f32_4 %890 = OpVectorShuffle %889 %888 4 5 6 3 
					                                                      OpStore %508 %890 
					                                         f32 %891 = OpLoad %47 
					                                       f32_3 %892 = OpCompositeConstruct %891 %891 %891 
					                                       f32_4 %893 = OpLoad %508 
					                                       f32_3 %894 = OpVectorShuffle %893 %893 0 1 2 
					                                       f32_3 %895 = OpFMul %892 %894 
					                              Uniform f32_4* %896 = OpAccessChain %38 %879 
					                                       f32_4 %897 = OpLoad %896 
					                                       f32_3 %898 = OpVectorShuffle %897 %897 0 1 2 
					                                       f32_3 %899 = OpFAdd %895 %898 
					                                                      OpStore %616 %899 
					                                       f32_4 %901 = OpLoad %9 
					                                       f32_3 %902 = OpVectorShuffle %901 %901 1 1 1 
					                              Uniform f32_4* %904 = OpAccessChain %38 %903 %40 
					                                       f32_4 %905 = OpLoad %904 
					                                       f32_3 %906 = OpVectorShuffle %905 %905 0 1 2 
					                                       f32_3 %907 = OpFMul %902 %906 
					                                                      OpStore %900 %907 
					                              Uniform f32_4* %908 = OpAccessChain %38 %903 %440 
					                                       f32_4 %909 = OpLoad %908 
					                                       f32_3 %910 = OpVectorShuffle %909 %909 0 1 2 
					                                       f32_4 %911 = OpLoad %9 
					                                       f32_3 %912 = OpVectorShuffle %911 %911 0 0 0 
					                                       f32_3 %913 = OpFMul %910 %912 
					                                       f32_3 %914 = OpLoad %900 
					                                       f32_3 %915 = OpFAdd %913 %914 
					                                       f32_4 %916 = OpLoad %9 
					                                       f32_4 %917 = OpVectorShuffle %916 %915 4 5 2 6 
					                                                      OpStore %9 %917 
					                              Uniform f32_4* %918 = OpAccessChain %38 %903 %62 
					                                       f32_4 %919 = OpLoad %918 
					                                       f32_3 %920 = OpVectorShuffle %919 %919 0 1 2 
					                                       f32_4 %921 = OpLoad %9 
					                                       f32_3 %922 = OpVectorShuffle %921 %921 2 2 2 
					                                       f32_3 %923 = OpFMul %920 %922 
					                                       f32_4 %924 = OpLoad %9 
					                                       f32_3 %925 = OpVectorShuffle %924 %924 0 1 3 
					                                       f32_3 %926 = OpFAdd %923 %925 
					                                       f32_4 %927 = OpLoad %9 
					                                       f32_4 %928 = OpVectorShuffle %927 %926 4 5 6 3 
					                                                      OpStore %9 %928 
					                                       f32_3 %930 = OpLoad vs_TEXCOORD6 
					                                       f32_4 %931 = OpLoad %9 
					                                       f32_3 %932 = OpVectorShuffle %931 %931 0 1 2 
					                                         f32 %933 = OpDot %930 %932 
					                                                      OpStore %47 %933 
					                                         f32 %934 = OpLoad %47 
					                                         f32 %935 = OpLoad %47 
					                                         f32 %936 = OpFAdd %934 %935 
					                                                      OpStore %47 %936 
					                                       f32_4 %937 = OpLoad %9 
					                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 2 
					                                         f32 %939 = OpLoad %47 
					                                       f32_3 %940 = OpCompositeConstruct %939 %939 %939 
					                                       f32_3 %941 = OpFNegate %940 
					                                       f32_3 %942 = OpFMul %938 %941 
					                                       f32_3 %943 = OpLoad vs_TEXCOORD6 
					                                       f32_3 %944 = OpFAdd %942 %943 
					                                       f32_4 %945 = OpLoad %9 
					                                       f32_4 %946 = OpVectorShuffle %945 %944 4 5 6 3 
					                                                      OpStore %9 %946 
					                       read_only TextureCube %951 = OpLoad %950 
					                                     sampler %953 = OpLoad %952 
					                read_only TextureCubeSampled %955 = OpSampledImage %951 %953 
					                                       f32_4 %956 = OpLoad %9 
					                                       f32_3 %957 = OpVectorShuffle %956 %956 0 1 2 
					                                       f32_4 %958 = OpImageSampleImplicitLod %955 %957 
					                                       f32_3 %959 = OpVectorShuffle %958 %958 0 1 2 
					                                                      OpStore %947 %959 
					                                       f32_3 %960 = OpLoad %616 
					                                       f32_3 %961 = OpLoad %947 
					                                       f32_3 %962 = OpFMul %960 %961 
					                                       f32_4 %963 = OpLoad %9 
					                                       f32_4 %964 = OpVectorShuffle %963 %962 4 5 6 3 
					                                                      OpStore %9 %964 
					                                       f32_4 %967 = OpLoad %9 
					                                       f32_3 %968 = OpVectorShuffle %967 %967 0 1 2 
					                                       f32_4 %969 = OpLoad %611 
					                                       f32_3 %970 = OpVectorShuffle %969 %969 3 3 3 
					                                       f32_3 %971 = OpFMul %968 %970 
					                                       f32_3 %972 = OpLoad %56 
					                                       f32_3 %973 = OpFAdd %971 %972 
					                                       f32_4 %974 = OpLoad %966 
					                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
					                                                      OpStore %966 %975 
					                                Private f32* %976 = OpAccessChain %611 %13 
					                                         f32 %977 = OpLoad %976 
					                                 Output f32* %979 = OpAccessChain %966 %13 
					                                                      OpStore %979 %977 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 _ReflectFaceColor;
						vec4 _ReflectOutlineColor;
						vec4 unused_0_20[12];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_23[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_29[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _Cube;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					float u_xlat16_4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb9;
					float u_xlat10;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat1 = vec4(u_xlat18) + u_xlat3;
					    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat18 = _BevelWidth + _OutlineWidth;
					    u_xlat18 = max(u_xlat18, 0.00999999978);
					    u_xlat1 = u_xlat1 / vec4(u_xlat18);
					    u_xlat18 = u_xlat18 * _Bevel;
					    u_xlat18 = u_xlat18 * _GradientScale;
					    u_xlat18 = u_xlat18 * -2.0;
					    u_xlat1 = u_xlat1 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2 = u_xlat1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = _ShaderFlags * 0.5;
					    u_xlatb9 = u_xlat3.x>=(-u_xlat3.x);
					    u_xlat3.x = fract(abs(u_xlat3.x));
					    u_xlat3.x = (u_xlatb9) ? u_xlat3.x : (-u_xlat3.x);
					    u_xlatb3 = u_xlat3.x>=0.5;
					    u_xlat1 = (bool(u_xlatb3)) ? u_xlat2 : u_xlat1;
					    u_xlat2 = u_xlat1 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat1 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat1;
					    u_xlat2.x = (-_BevelClamp) + 1.0;
					    u_xlat1 = min(u_xlat1, u_xlat2.xxxx);
					    u_xlat1.xz = vec2(u_xlat18) * u_xlat1.xz;
					    u_xlat1.yz = u_xlat1.wy * vec2(u_xlat18) + (-u_xlat1.zx);
					    u_xlat1.x = float(-1.0);
					    u_xlat1.w = float(1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat19 = dot(u_xlat1.zw, u_xlat1.zw);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.x = u_xlat19 * u_xlat1.z;
					    u_xlat2.yz = vec2(u_xlat19) * vec2(1.0, 0.0);
					    u_xlat1.z = 0.0;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat2.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_2 = texture(_OutlineTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;
					    u_xlat18 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat3.w = u_xlat10_2.w * u_xlat18;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.www;
					    u_xlat2.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_2 = texture(_FaceTex, u_xlat2.xy);
					    u_xlat4 = vs_COLOR0 * _FaceColor;
					    u_xlat2 = u_xlat10_2 * u_xlat4;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2) + u_xlat3;
					    u_xlat18 = _OutlineWidth * _ScaleRatioA;
					    u_xlat18 = u_xlat18 * vs_TEXCOORD5.y;
					    u_xlat19 = min(u_xlat18, 1.0);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = (-u_xlat10_4.w) + 0.5;
					    u_xlat4.x = u_xlat16_4 + (-vs_TEXCOORD5.x);
					    u_xlat4.x = u_xlat4.x * vs_TEXCOORD5.y + 0.5;
					    u_xlat10 = u_xlat18 * 0.5 + u_xlat4.x;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.5 + u_xlat4.x;
					    u_xlat19 = u_xlat19 * u_xlat10;
					    u_xlat2 = vec4(u_xlat19) * u_xlat3 + u_xlat2;
					    u_xlat19 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.x = u_xlat19 * vs_TEXCOORD5.y;
					    u_xlat19 = u_xlat19 * vs_TEXCOORD5.y + 1.0;
					    u_xlat18 = u_xlat3.x * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat18 / u_xlat19;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2 = vec4(u_xlat18) * u_xlat2;
					    u_xlat18 = (-_BumpFace) + _BumpOutline;
					    u_xlat18 = u_xlat10 * u_xlat18 + _BumpFace;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat3.z = sqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat18) + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.xyz = u_xlat2.www * u_xlat3.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, (-u_xlat1.xyz));
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, (-u_xlat1.xyz));
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, (-u_xlat1.xyz));
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat6.x = u_xlat10 * u_xlat6.x + _FaceShininess;
					    u_xlat6.x = u_xlat6.x * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat6.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat19 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat19);
					    u_xlat4.xzw = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat4.xzw * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat5.x = dot(unity_SHAr, u_xlat3);
					    u_xlat5.y = dot(unity_SHAg, u_xlat3);
					    u_xlat5.z = dot(unity_SHAb, u_xlat3);
					    u_xlat3.xyz = u_xlat5.xyz + vs_TEXCOORD7.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz + _ReflectFaceColor.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat18 = dot(vs_TEXCOORD6.xyz, u_xlat1.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat18)) + vs_TEXCOORD6.xyz;
					    u_xlat10_1 = texture(_Cube, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat0.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 _ReflectFaceColor;
						vec4 _ReflectOutlineColor;
						vec4 unused_0_20[12];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_23[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_29[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _Cube;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					float u_xlat16_4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb9;
					float u_xlat10;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.y = vs_TEXCOORD3.w;
					    u_xlat0.z = vs_TEXCOORD4.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat1 = vec4(u_xlat18) + u_xlat3;
					    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat18 = _BevelWidth + _OutlineWidth;
					    u_xlat18 = max(u_xlat18, 0.00999999978);
					    u_xlat1 = u_xlat1 / vec4(u_xlat18);
					    u_xlat18 = u_xlat18 * _Bevel;
					    u_xlat18 = u_xlat18 * _GradientScale;
					    u_xlat18 = u_xlat18 * -2.0;
					    u_xlat1 = u_xlat1 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2 = u_xlat1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = _ShaderFlags * 0.5;
					    u_xlatb9 = u_xlat3.x>=(-u_xlat3.x);
					    u_xlat3.x = fract(abs(u_xlat3.x));
					    u_xlat3.x = (u_xlatb9) ? u_xlat3.x : (-u_xlat3.x);
					    u_xlatb3 = u_xlat3.x>=0.5;
					    u_xlat1 = (bool(u_xlatb3)) ? u_xlat2 : u_xlat1;
					    u_xlat2 = u_xlat1 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat1 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat1;
					    u_xlat2.x = (-_BevelClamp) + 1.0;
					    u_xlat1 = min(u_xlat1, u_xlat2.xxxx);
					    u_xlat1.xz = vec2(u_xlat18) * u_xlat1.xz;
					    u_xlat1.yz = u_xlat1.wy * vec2(u_xlat18) + (-u_xlat1.zx);
					    u_xlat1.x = float(-1.0);
					    u_xlat1.w = float(1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat19 = dot(u_xlat1.zw, u_xlat1.zw);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.x = u_xlat19 * u_xlat1.z;
					    u_xlat2.yz = vec2(u_xlat19) * vec2(1.0, 0.0);
					    u_xlat1.z = 0.0;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat2.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_2 = texture(_OutlineTex, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;
					    u_xlat18 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat3.w = u_xlat10_2.w * u_xlat18;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.www;
					    u_xlat2.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_2 = texture(_FaceTex, u_xlat2.xy);
					    u_xlat4 = vs_COLOR0 * _FaceColor;
					    u_xlat2 = u_xlat10_2 * u_xlat4;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2) + u_xlat3;
					    u_xlat18 = _OutlineWidth * _ScaleRatioA;
					    u_xlat18 = u_xlat18 * vs_TEXCOORD5.y;
					    u_xlat19 = min(u_xlat18, 1.0);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = (-u_xlat10_4.w) + 0.5;
					    u_xlat4.x = u_xlat16_4 + (-vs_TEXCOORD5.x);
					    u_xlat4.x = u_xlat4.x * vs_TEXCOORD5.y + 0.5;
					    u_xlat10 = u_xlat18 * 0.5 + u_xlat4.x;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.5 + u_xlat4.x;
					    u_xlat19 = u_xlat19 * u_xlat10;
					    u_xlat2 = vec4(u_xlat19) * u_xlat3 + u_xlat2;
					    u_xlat19 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.x = u_xlat19 * vs_TEXCOORD5.y;
					    u_xlat19 = u_xlat19 * vs_TEXCOORD5.y + 1.0;
					    u_xlat18 = u_xlat3.x * 0.5 + u_xlat18;
					    u_xlat18 = u_xlat18 / u_xlat19;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2 = vec4(u_xlat18) * u_xlat2;
					    u_xlat18 = (-_BumpFace) + _BumpOutline;
					    u_xlat18 = u_xlat10 * u_xlat18 + _BumpFace;
					    u_xlat3 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat3.w * u_xlat3.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat3.z = sqrt(u_xlat19);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat18) + vec3(-0.0, -0.0, -1.0);
					    u_xlat3.xyz = u_xlat2.www * u_xlat3.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.xyz);
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, (-u_xlat1.xyz));
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, (-u_xlat1.xyz));
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, (-u_xlat1.xyz));
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat6.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat6.x = u_xlat10 * u_xlat6.x + _FaceShininess;
					    u_xlat6.x = u_xlat6.x * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat6.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat19 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat19);
					    u_xlat4.xzw = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat4.xzw * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat5.x = dot(unity_SHAr, u_xlat3);
					    u_xlat5.y = dot(unity_SHAg, u_xlat3);
					    u_xlat5.z = dot(unity_SHAb, u_xlat3);
					    u_xlat3.xyz = u_xlat5.xyz + vs_TEXCOORD7.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz + _ReflectFaceColor.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat18 = dot(vs_TEXCOORD6.xyz, u_xlat1.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat18)) + vs_TEXCOORD6.xyz;
					    u_xlat10_1 = texture(_Cube, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat10_1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat0.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha One, SrcAlpha One
			ColorMask RGB -1
			ZWrite Off
			Cull Off
			GpuProgramID 100962
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[2];
						float _FaceDilate;
						vec4 unused_0_4[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_6[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_17;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					vec3 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = u_xlat2.y * unity_MatrixVP[1].w;
					    u_xlat15 = unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat2.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat2.x = u_xlat15 * 1.5;
					    u_xlat7.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat2.x = u_xlat7.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat2.x);
					    u_xlat7.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat7.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat7.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat3.y = dot(u_xlat0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.z = dot(u_xlat0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.x = dot(u_xlat0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat3.xyz = (-u_xlat7.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat7.x = dot(u_xlat0.yzx, u_xlat7.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat7.x) * u_xlat15 + u_xlat2.x;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat2.x = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat15 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat3.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = _EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "POINT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _FaceDilate;
					uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _FaceTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					vec3 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat2.x = u_xlat15 * 1.5;
					    u_xlat7.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat2.x = u_xlat7.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat2.x);
					    u_xlat7.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat7.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat3.xyz = (-u_xlat7.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat7.x = dot(u_xlat0.yzx, u_xlat7.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat7.x) * u_xlat15 + u_xlat2.x;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat2.x = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat15 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD8.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _FaceUVSpeedX;
					uniform 	float _FaceUVSpeedY;
					uniform 	vec4 _FaceColor;
					uniform 	float _OutlineSoftness;
					uniform 	float _OutlineUVSpeedX;
					uniform 	float _OutlineUVSpeedY;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _Bevel;
					uniform 	float _BevelOffset;
					uniform 	float _BevelWidth;
					uniform 	float _BevelClamp;
					uniform 	float _BevelRoundness;
					uniform 	float _BumpOutline;
					uniform 	float _BumpFace;
					uniform 	float _ShaderFlags;
					uniform 	float _ScaleRatioA;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _FaceShininess;
					uniform 	float _OutlineShininess;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _FaceTex;
					UNITY_LOCATION(2) uniform  sampler2D _OutlineTex;
					UNITY_LOCATION(3) uniform  sampler2D _BumpMap;
					UNITY_LOCATION(4) uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat5 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat5 = u_xlat13 * u_xlat5 + _FaceShininess;
					    u_xlat5 = u_xlat5 * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat5 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10_2 = texture(_LightTexture0, vec2(u_xlat5));
					    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "POINT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 649
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %95 %107 %133 %148 %160 %325 %414 %436 %486 %490 %565 %569 %585 %586 %603 %635 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpDecorate %22 ArrayStride 22 
					                                                      OpDecorate %23 ArrayStride 23 
					                                                      OpMemberDecorate %24 0 Offset 24 
					                                                      OpMemberDecorate %24 1 Offset 24 
					                                                      OpMemberDecorate %24 2 Offset 24 
					                                                      OpMemberDecorate %24 3 Offset 24 
					                                                      OpMemberDecorate %24 4 Offset 24 
					                                                      OpMemberDecorate %24 5 Offset 24 
					                                                      OpMemberDecorate %24 6 Offset 24 
					                                                      OpMemberDecorate %24 7 Offset 24 
					                                                      OpMemberDecorate %24 8 Offset 24 
					                                                      OpMemberDecorate %24 9 Offset 24 
					                                                      OpMemberDecorate %24 10 Offset 24 
					                                                      OpMemberDecorate %24 11 Offset 24 
					                                                      OpMemberDecorate %24 12 Offset 24 
					                                                      OpMemberDecorate %24 13 Offset 24 
					                                                      OpMemberDecorate %24 14 Offset 24 
					                                                      OpMemberDecorate %24 15 Offset 24 
					                                                      OpMemberDecorate %24 16 Offset 24 
					                                                      OpMemberDecorate %24 17 Offset 24 
					                                                      OpMemberDecorate %24 18 Offset 24 
					                                                      OpMemberDecorate %24 19 Offset 24 
					                                                      OpMemberDecorate %24 20 Offset 24 
					                                                      OpMemberDecorate %24 21 Offset 24 
					                                                      OpDecorate %24 Block 
					                                                      OpDecorate %26 DescriptorSet 26 
					                                                      OpDecorate %26 Binding 26 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate %107 Location 107 
					                                                      OpDecorate vs_TEXCOORD0 Location 133 
					                                                      OpDecorate vs_TEXCOORD1 Location 148 
					                                                      OpDecorate %160 Location 160 
					                                                      OpDecorate %325 Location 325 
					                                                      OpDecorate vs_TEXCOORD5 Location 414 
					                                                      OpDecorate vs_TEXCOORD6 Location 436 
					                                                      OpDecorate vs_TEXCOORD2 Location 486 
					                                                      OpDecorate %490 Location 490 
					                                                      OpDecorate vs_TEXCOORD3 Location 565 
					                                                      OpDecorate vs_TEXCOORD4 Location 569 
					                                                      OpDecorate %585 RelaxedPrecision 
					                                                      OpDecorate %585 Location 585 
					                                                      OpDecorate %586 RelaxedPrecision 
					                                                      OpDecorate %586 Location 586 
					                                                      OpDecorate %587 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 603 
					                                                      OpDecorate vs_TEXCOORD8 Location 635 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %13 = OpTypeVector %6 2 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeArray %10 %17 
					                                              %23 = OpTypeArray %10 %17 
					                                              %24 = OpTypeStruct %7 %10 %18 %19 %10 %20 %21 %22 %6 %23 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %10 %10 
					                                              %25 = OpTypePointer Uniform %24 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %26 = OpVariable Uniform 
					                                              %27 = OpTypeInt 32 1 
					                                          i32 %28 = OpConstant 13 
					                                              %29 = OpTypePointer Uniform %6 
					                                          i32 %32 = OpConstant 14 
					                                              %39 = OpTypePointer Private %10 
					                               Private f32_4* %40 = OpVariable Private 
					                                          i32 %43 = OpConstant 2 
					                                          i32 %44 = OpConstant 1 
					                                              %45 = OpTypePointer Uniform %10 
					                                          i32 %49 = OpConstant 0 
					                               Private f32_4* %64 = OpVariable Private 
					                                          i32 %66 = OpConstant 3 
					                               Private f32_4* %70 = OpVariable Private 
					                                          i32 %73 = OpConstant 6 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %10 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                             %103 = OpTypePointer Output %10 
					                                             %105 = OpTypePointer Private %6 
					                                Private f32* %106 = OpVariable Private 
					                                Input f32_4* %107 = OpVariable Input 
					                                         u32 %108 = OpConstant 0 
					                                             %109 = OpTypePointer Input %6 
					                                         f32 %112 = OpConstant 3,674022E-40 
					                                         f32 %120 = OpConstant 3,674022E-40 
					                                         f32 %128 = OpConstant 3,674022E-40 
					                                       f32_2 %129 = OpConstantComposite %128 %128 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                                         i32 %136 = OpConstant 20 
					                                             %147 = OpTypePointer Output %13 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                         i32 %151 = OpConstant 21 
					                                Input f32_4* %160 = OpVariable Input 
					                                         i32 %163 = OpConstant 19 
					                                         u32 %176 = OpConstant 3 
					                                         u32 %189 = OpConstant 2 
					                                         i32 %205 = OpConstant 5 
					                                         i32 %226 = OpConstant 16 
					                                         i32 %229 = OpConstant 17 
					                                         i32 %253 = OpConstant 15 
					                                         f32 %263 = OpConstant 3,674022E-40 
					                              Private f32_3* %266 = OpVariable Private 
					                                         i32 %267 = OpConstant 18 
					                                         f32 %271 = OpConstant 3,674022E-40 
					                                             %286 = OpTypePointer Uniform %7 
					                                             %324 = OpTypePointer Input %7 
					                                Input f32_3* %325 = OpVariable Input 
					                                             %330 = OpTypePointer Private %27 
					                                Private i32* %331 = OpVariable Private 
					                                         f32 %332 = OpConstant 3,674022E-40 
					                                             %335 = OpTypeBool 
					                                         u32 %337 = OpConstant 4294967295 
					                                Private i32* %340 = OpVariable Private 
					                                             %413 = OpTypePointer Output %7 
					                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
					                       Output f32_2* vs_TEXCOORD6 = OpVariable Output 
					                                             %445 = OpTypePointer Output %6 
					                                             %447 = OpTypePointer Private %335 
					                               Private bool* %448 = OpVariable Private 
					                                         i32 %454 = OpConstant 10 
					                                         i32 %458 = OpConstant 11 
					                                         f32 %471 = OpConstant 3,674022E-40 
					                                         i32 %473 = OpConstant 8 
					                                         i32 %478 = OpConstant 12 
					                                         f32 %483 = OpConstant 3,674022E-40 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_4* %490 = OpVariable Input 
					                              Private f32_3* %535 = OpVariable Private 
					                                Private f32* %548 = OpVariable Private 
					                                         i32 %551 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %585 = OpVariable Output 
					                                Input f32_4* %586 = OpVariable Input 
					                                         i32 %590 = OpConstant 9 
					                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
					                                         i32 %614 = OpConstant 7 
					                       Output f32_3* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %14 = OpLoad %12 
					                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
					                                 Uniform f32* %30 = OpAccessChain %26 %28 
					                                          f32 %31 = OpLoad %30 
					                                 Uniform f32* %33 = OpAccessChain %26 %32 
					                                          f32 %34 = OpLoad %33 
					                                        f32_2 %35 = OpCompositeConstruct %31 %34 
					                                        f32_2 %36 = OpFAdd %15 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                        f32_3 %38 = OpVectorShuffle %37 %36 3 4 2 
					                                                      OpStore %9 %38 
					                                        f32_3 %41 = OpLoad %9 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 1 1 1 1 
					                               Uniform f32_4* %46 = OpAccessChain %26 %43 %44 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_4 %48 = OpFMul %42 %47 
					                                                      OpStore %40 %48 
					                               Uniform f32_4* %50 = OpAccessChain %26 %43 %49 
					                                        f32_4 %51 = OpLoad %50 
					                                        f32_3 %52 = OpLoad %9 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 0 0 0 0 
					                                        f32_4 %54 = OpFMul %51 %53 
					                                        f32_4 %55 = OpLoad %40 
					                                        f32_4 %56 = OpFAdd %54 %55 
					                                                      OpStore %40 %56 
					                               Uniform f32_4* %57 = OpAccessChain %26 %43 %43 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %12 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 2 2 2 2 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %40 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %40 %63 
					                                        f32_4 %65 = OpLoad %40 
					                               Uniform f32_4* %67 = OpAccessChain %26 %43 %66 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFAdd %65 %68 
					                                                      OpStore %64 %69 
					                                        f32_4 %71 = OpLoad %64 
					                                        f32_4 %72 = OpVectorShuffle %71 %71 1 1 1 1 
					                               Uniform f32_4* %74 = OpAccessChain %26 %73 %44 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpFMul %72 %75 
					                                                      OpStore %70 %76 
					                               Uniform f32_4* %77 = OpAccessChain %26 %73 %49 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %64 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 0 0 0 0 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %70 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %70 %83 
					                               Uniform f32_4* %84 = OpAccessChain %26 %73 %43 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %64 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 2 2 2 2 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %70 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %70 %90 
					                               Uniform f32_4* %96 = OpAccessChain %26 %73 %66 
					                                        f32_4 %97 = OpLoad %96 
					                                        f32_4 %98 = OpLoad %64 
					                                        f32_4 %99 = OpVectorShuffle %98 %98 3 3 3 3 
					                                       f32_4 %100 = OpFMul %97 %99 
					                                       f32_4 %101 = OpLoad %70 
					                                       f32_4 %102 = OpFAdd %100 %101 
					                               Output f32_4* %104 = OpAccessChain %95 %49 
					                                                      OpStore %104 %102 
					                                  Input f32* %110 = OpAccessChain %107 %108 
					                                         f32 %111 = OpLoad %110 
					                                         f32 %113 = OpFMul %111 %112 
					                                                      OpStore %106 %113 
					                                         f32 %114 = OpLoad %106 
					                                         f32 %115 = OpExtInst %1 8 %114 
					                                Private f32* %116 = OpAccessChain %70 %108 
					                                                      OpStore %116 %115 
					                                Private f32* %117 = OpAccessChain %70 %108 
					                                         f32 %118 = OpLoad %117 
					                                         f32 %119 = OpFNegate %118 
					                                         f32 %121 = OpFMul %119 %120 
					                                  Input f32* %122 = OpAccessChain %107 %108 
					                                         f32 %123 = OpLoad %122 
					                                         f32 %124 = OpFAdd %121 %123 
					                                Private f32* %125 = OpAccessChain %70 %91 
					                                                      OpStore %125 %124 
					                                       f32_4 %126 = OpLoad %70 
					                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
					                                       f32_2 %130 = OpFMul %127 %129 
					                                       f32_4 %131 = OpLoad %70 
					                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
					                                                      OpStore %70 %132 
					                                       f32_4 %134 = OpLoad %70 
					                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
					                              Uniform f32_4* %137 = OpAccessChain %26 %136 
					                                       f32_4 %138 = OpLoad %137 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpFMul %135 %139 
					                              Uniform f32_4* %141 = OpAccessChain %26 %136 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
					                                       f32_2 %144 = OpFAdd %140 %143 
					                                       f32_4 %145 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %146 = OpVectorShuffle %145 %144 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %146 
					                                       f32_4 %149 = OpLoad %70 
					                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
					                              Uniform f32_4* %152 = OpAccessChain %26 %151 
					                                       f32_4 %153 = OpLoad %152 
					                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
					                                       f32_2 %155 = OpFMul %150 %154 
					                              Uniform f32_4* %156 = OpAccessChain %26 %151 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
					                                       f32_2 %159 = OpFAdd %155 %158 
					                                                      OpStore vs_TEXCOORD1 %159 
					                                       f32_4 %161 = OpLoad %160 
					                                       f32_2 %162 = OpVectorShuffle %161 %161 0 1 
					                              Uniform f32_4* %164 = OpAccessChain %26 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
					                                       f32_2 %167 = OpFMul %162 %166 
					                              Uniform f32_4* %168 = OpAccessChain %26 %163 
					                                       f32_4 %169 = OpLoad %168 
					                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
					                                       f32_2 %171 = OpFAdd %167 %170 
					                                       f32_4 %172 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %173 
					                                Private f32* %174 = OpAccessChain %64 %91 
					                                         f32 %175 = OpLoad %174 
					                                Uniform f32* %177 = OpAccessChain %26 %73 %44 %176 
					                                         f32 %178 = OpLoad %177 
					                                         f32 %179 = OpFMul %175 %178 
					                                                      OpStore %106 %179 
					                                Uniform f32* %180 = OpAccessChain %26 %73 %49 %176 
					                                         f32 %181 = OpLoad %180 
					                                Private f32* %182 = OpAccessChain %64 %108 
					                                         f32 %183 = OpLoad %182 
					                                         f32 %184 = OpFMul %181 %183 
					                                         f32 %185 = OpLoad %106 
					                                         f32 %186 = OpFAdd %184 %185 
					                                                      OpStore %106 %186 
					                                Uniform f32* %187 = OpAccessChain %26 %73 %43 %176 
					                                         f32 %188 = OpLoad %187 
					                                Private f32* %190 = OpAccessChain %64 %189 
					                                         f32 %191 = OpLoad %190 
					                                         f32 %192 = OpFMul %188 %191 
					                                         f32 %193 = OpLoad %106 
					                                         f32 %194 = OpFAdd %192 %193 
					                                                      OpStore %106 %194 
					                                Uniform f32* %195 = OpAccessChain %26 %73 %66 %176 
					                                         f32 %196 = OpLoad %195 
					                                Private f32* %197 = OpAccessChain %64 %176 
					                                         f32 %198 = OpLoad %197 
					                                         f32 %199 = OpFMul %196 %198 
					                                         f32 %200 = OpLoad %106 
					                                         f32 %201 = OpFAdd %199 %200 
					                                                      OpStore %106 %201 
					                              Uniform f32_4* %202 = OpAccessChain %26 %44 
					                                       f32_4 %203 = OpLoad %202 
					                                       f32_2 %204 = OpVectorShuffle %203 %203 1 1 
					                              Uniform f32_4* %206 = OpAccessChain %26 %205 %44 
					                                       f32_4 %207 = OpLoad %206 
					                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
					                                       f32_2 %209 = OpFMul %204 %208 
					                                       f32_4 %210 = OpLoad %64 
					                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 2 3 
					                                                      OpStore %64 %211 
					                              Uniform f32_4* %212 = OpAccessChain %26 %205 %49 
					                                       f32_4 %213 = OpLoad %212 
					                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
					                              Uniform f32_4* %215 = OpAccessChain %26 %44 
					                                       f32_4 %216 = OpLoad %215 
					                                       f32_2 %217 = OpVectorShuffle %216 %216 0 0 
					                                       f32_2 %218 = OpFMul %214 %217 
					                                       f32_4 %219 = OpLoad %64 
					                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
					                                       f32_2 %221 = OpFAdd %218 %220 
					                                       f32_4 %222 = OpLoad %64 
					                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 2 3 
					                                                      OpStore %64 %223 
					                                       f32_4 %224 = OpLoad %64 
					                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
					                                Uniform f32* %227 = OpAccessChain %26 %226 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %230 = OpAccessChain %26 %229 
					                                         f32 %231 = OpLoad %230 
					                                       f32_2 %232 = OpCompositeConstruct %228 %231 
					                                       f32_2 %233 = OpFMul %225 %232 
					                                       f32_4 %234 = OpLoad %64 
					                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
					                                                      OpStore %64 %235 
					                                         f32 %236 = OpLoad %106 
					                                       f32_2 %237 = OpCompositeConstruct %236 %236 
					                                       f32_4 %238 = OpLoad %64 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_2 %240 = OpFDiv %237 %239 
					                                       f32_4 %241 = OpLoad %64 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 2 3 
					                                                      OpStore %64 %242 
					                                       f32_4 %243 = OpLoad %64 
					                                       f32_2 %244 = OpVectorShuffle %243 %243 0 1 
					                                       f32_4 %245 = OpLoad %64 
					                                       f32_2 %246 = OpVectorShuffle %245 %245 0 1 
					                                         f32 %247 = OpDot %244 %246 
					                                                      OpStore %106 %247 
					                                         f32 %248 = OpLoad %106 
					                                         f32 %249 = OpExtInst %1 32 %248 
					                                                      OpStore %106 %249 
					                                  Input f32* %250 = OpAccessChain %107 %91 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpExtInst %1 4 %251 
					                                Uniform f32* %254 = OpAccessChain %26 %253 
					                                         f32 %255 = OpLoad %254 
					                                         f32 %256 = OpFMul %252 %255 
					                                Private f32* %257 = OpAccessChain %64 %108 
					                                                      OpStore %257 %256 
					                                         f32 %258 = OpLoad %106 
					                                Private f32* %259 = OpAccessChain %64 %108 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %258 %260 
					                                                      OpStore %106 %261 
					                                         f32 %262 = OpLoad %106 
					                                         f32 %264 = OpFMul %262 %263 
					                                Private f32* %265 = OpAccessChain %64 %108 
					                                                      OpStore %265 %264 
					                                Uniform f32* %268 = OpAccessChain %26 %267 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpFNegate %269 
					                                         f32 %272 = OpFAdd %270 %271 
					                                Private f32* %273 = OpAccessChain %266 %108 
					                                                      OpStore %273 %272 
					                                Private f32* %274 = OpAccessChain %266 %108 
					                                         f32 %275 = OpLoad %274 
					                                Private f32* %276 = OpAccessChain %64 %108 
					                                         f32 %277 = OpLoad %276 
					                                         f32 %278 = OpFMul %275 %277 
					                                Private f32* %279 = OpAccessChain %64 %108 
					                                                      OpStore %279 %278 
					                                         f32 %280 = OpLoad %106 
					                                         f32 %281 = OpFMul %280 %263 
					                                Private f32* %282 = OpAccessChain %64 %108 
					                                         f32 %283 = OpLoad %282 
					                                         f32 %284 = OpFNegate %283 
					                                         f32 %285 = OpFAdd %281 %284 
					                                                      OpStore %106 %285 
					                              Uniform f32_3* %287 = OpAccessChain %26 %49 
					                                       f32_3 %288 = OpLoad %287 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
					                              Uniform f32_4* %290 = OpAccessChain %26 %66 %44 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %289 %292 
					                                                      OpStore %266 %293 
					                              Uniform f32_4* %294 = OpAccessChain %26 %66 %49 
					                                       f32_4 %295 = OpLoad %294 
					                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
					                              Uniform f32_3* %297 = OpAccessChain %26 %49 
					                                       f32_3 %298 = OpLoad %297 
					                                       f32_3 %299 = OpVectorShuffle %298 %298 0 0 0 
					                                       f32_3 %300 = OpFMul %296 %299 
					                                       f32_3 %301 = OpLoad %266 
					                                       f32_3 %302 = OpFAdd %300 %301 
					                                                      OpStore %266 %302 
					                              Uniform f32_4* %303 = OpAccessChain %26 %66 %43 
					                                       f32_4 %304 = OpLoad %303 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
					                              Uniform f32_3* %306 = OpAccessChain %26 %49 
					                                       f32_3 %307 = OpLoad %306 
					                                       f32_3 %308 = OpVectorShuffle %307 %307 2 2 2 
					                                       f32_3 %309 = OpFMul %305 %308 
					                                       f32_3 %310 = OpLoad %266 
					                                       f32_3 %311 = OpFAdd %309 %310 
					                                                      OpStore %266 %311 
					                                       f32_3 %312 = OpLoad %266 
					                              Uniform f32_4* %313 = OpAccessChain %26 %66 %66 
					                                       f32_4 %314 = OpLoad %313 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
					                                       f32_3 %316 = OpFAdd %312 %315 
					                                                      OpStore %266 %316 
					                                  Input f32* %317 = OpAccessChain %12 %189 
					                                         f32 %318 = OpLoad %317 
					                                Private f32* %319 = OpAccessChain %9 %189 
					                                                      OpStore %319 %318 
					                                       f32_3 %320 = OpLoad %9 
					                                       f32_3 %321 = OpFNegate %320 
					                                       f32_3 %322 = OpLoad %266 
					                                       f32_3 %323 = OpFAdd %321 %322 
					                                                      OpStore %9 %323 
					                                       f32_3 %326 = OpLoad %325 
					                                       f32_3 %327 = OpLoad %9 
					                                         f32 %328 = OpDot %326 %327 
					                                Private f32* %329 = OpAccessChain %9 %108 
					                                                      OpStore %329 %328 
					                                Private f32* %333 = OpAccessChain %9 %108 
					                                         f32 %334 = OpLoad %333 
					                                        bool %336 = OpFOrdLessThan %332 %334 
					                                         u32 %338 = OpSelect %336 %337 %108 
					                                         i32 %339 = OpBitcast %338 
					                                                      OpStore %331 %339 
					                                Private f32* %341 = OpAccessChain %9 %108 
					                                         f32 %342 = OpLoad %341 
					                                        bool %343 = OpFOrdLessThan %342 %332 
					                                         u32 %344 = OpSelect %343 %337 %108 
					                                         i32 %345 = OpBitcast %344 
					                                                      OpStore %340 %345 
					                                         i32 %346 = OpLoad %331 
					                                         i32 %347 = OpSNegate %346 
					                                         i32 %348 = OpLoad %340 
					                                         i32 %349 = OpIAdd %347 %348 
					                                                      OpStore %340 %349 
					                                         i32 %350 = OpLoad %340 
					                                         f32 %351 = OpConvertSToF %350 
					                                Private f32* %352 = OpAccessChain %9 %108 
					                                                      OpStore %352 %351 
					                                       f32_3 %353 = OpLoad %9 
					                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
					                                       f32_3 %355 = OpLoad %325 
					                                       f32_3 %356 = OpFMul %354 %355 
					                                                      OpStore %9 %356 
					                                       f32_3 %357 = OpLoad %9 
					                              Uniform f32_4* %358 = OpAccessChain %26 %66 %49 
					                                       f32_4 %359 = OpLoad %358 
					                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
					                                         f32 %361 = OpDot %357 %360 
					                                Private f32* %362 = OpAccessChain %70 %91 
					                                                      OpStore %362 %361 
					                                       f32_3 %363 = OpLoad %9 
					                              Uniform f32_4* %364 = OpAccessChain %26 %66 %44 
					                                       f32_4 %365 = OpLoad %364 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
					                                         f32 %367 = OpDot %363 %366 
					                                Private f32* %368 = OpAccessChain %70 %189 
					                                                      OpStore %368 %367 
					                                       f32_3 %369 = OpLoad %9 
					                              Uniform f32_4* %370 = OpAccessChain %26 %66 %43 
					                                       f32_4 %371 = OpLoad %370 
					                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
					                                         f32 %373 = OpDot %369 %372 
					                                Private f32* %374 = OpAccessChain %70 %108 
					                                                      OpStore %374 %373 
					                                       f32_4 %375 = OpLoad %70 
					                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
					                                       f32_4 %377 = OpLoad %70 
					                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
					                                         f32 %379 = OpDot %376 %378 
					                                Private f32* %380 = OpAccessChain %9 %108 
					                                                      OpStore %380 %379 
					                                Private f32* %381 = OpAccessChain %9 %108 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpExtInst %1 32 %382 
					                                Private f32* %384 = OpAccessChain %9 %108 
					                                                      OpStore %384 %383 
					                                       f32_3 %385 = OpLoad %9 
					                                       f32_3 %386 = OpVectorShuffle %385 %385 0 0 0 
					                                       f32_4 %387 = OpLoad %70 
					                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
					                                       f32_3 %389 = OpFMul %386 %388 
					                                                      OpStore %9 %389 
					                              Uniform f32_4* %390 = OpAccessChain %26 %43 %66 
					                                       f32_4 %391 = OpLoad %390 
					                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
					                                       f32_4 %393 = OpLoad %12 
					                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
					                                       f32_3 %395 = OpFMul %392 %394 
					                                       f32_4 %396 = OpLoad %40 
					                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
					                                       f32_3 %398 = OpFAdd %395 %397 
					                                                      OpStore %266 %398 
					                              Uniform f32_4* %399 = OpAccessChain %26 %43 %66 
					                                       f32_4 %400 = OpLoad %399 
					                                       f32_4 %401 = OpLoad %12 
					                                       f32_4 %402 = OpVectorShuffle %401 %401 3 3 3 3 
					                                       f32_4 %403 = OpFMul %400 %402 
					                                       f32_4 %404 = OpLoad %40 
					                                       f32_4 %405 = OpFAdd %403 %404 
					                                                      OpStore %40 %405 
					                                       f32_3 %406 = OpLoad %266 
					                                       f32_3 %407 = OpFNegate %406 
					                              Uniform f32_3* %408 = OpAccessChain %26 %49 
					                                       f32_3 %409 = OpLoad %408 
					                                       f32_3 %410 = OpFAdd %407 %409 
					                                       f32_4 %411 = OpLoad %70 
					                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
					                                                      OpStore %70 %412 
					                                       f32_3 %415 = OpLoad %266 
					                                                      OpStore vs_TEXCOORD5 %415 
					                                       f32_4 %416 = OpLoad %70 
					                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
					                                       f32_4 %418 = OpLoad %70 
					                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
					                                         f32 %420 = OpDot %417 %419 
					                                Private f32* %421 = OpAccessChain %266 %108 
					                                                      OpStore %421 %420 
					                                Private f32* %422 = OpAccessChain %266 %108 
					                                         f32 %423 = OpLoad %422 
					                                         f32 %424 = OpExtInst %1 32 %423 
					                                Private f32* %425 = OpAccessChain %266 %108 
					                                                      OpStore %425 %424 
					                                       f32_3 %426 = OpLoad %266 
					                                       f32_3 %427 = OpVectorShuffle %426 %426 0 0 0 
					                                       f32_4 %428 = OpLoad %70 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFMul %427 %429 
					                                                      OpStore %266 %430 
					                                       f32_3 %431 = OpLoad %9 
					                                       f32_3 %432 = OpVectorShuffle %431 %431 1 2 0 
					                                       f32_3 %433 = OpLoad %266 
					                                         f32 %434 = OpDot %432 %433 
					                                Private f32* %435 = OpAccessChain %266 %108 
					                                                      OpStore %435 %434 
					                                Private f32* %437 = OpAccessChain %266 %108 
					                                         f32 %438 = OpLoad %437 
					                                         f32 %439 = OpExtInst %1 4 %438 
					                                         f32 %440 = OpLoad %106 
					                                         f32 %441 = OpFMul %439 %440 
					                                Private f32* %442 = OpAccessChain %64 %108 
					                                         f32 %443 = OpLoad %442 
					                                         f32 %444 = OpFAdd %441 %443 
					                                 Output f32* %446 = OpAccessChain vs_TEXCOORD6 %91 
					                                                      OpStore %446 %444 
					                                  Input f32* %449 = OpAccessChain %107 %91 
					                                         f32 %450 = OpLoad %449 
					                                        bool %451 = OpFOrdGreaterThanEqual %332 %450 
					                                                      OpStore %448 %451 
					                                        bool %452 = OpLoad %448 
					                                         f32 %453 = OpSelect %452 %271 %332 
					                                                      OpStore %106 %453 
					                                Uniform f32* %455 = OpAccessChain %26 %454 
					                                         f32 %456 = OpLoad %455 
					                                         f32 %457 = OpFNegate %456 
					                                Uniform f32* %459 = OpAccessChain %26 %458 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpFAdd %457 %460 
					                                Private f32* %462 = OpAccessChain %64 %108 
					                                                      OpStore %462 %461 
					                                         f32 %463 = OpLoad %106 
					                                Private f32* %464 = OpAccessChain %64 %108 
					                                         f32 %465 = OpLoad %464 
					                                         f32 %466 = OpFMul %463 %465 
					                                Uniform f32* %467 = OpAccessChain %26 %454 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFAdd %466 %468 
					                                                      OpStore %106 %469 
					                                         f32 %470 = OpLoad %106 
					                                         f32 %472 = OpFMul %470 %471 
					                                Uniform f32* %474 = OpAccessChain %26 %473 
					                                         f32 %475 = OpLoad %474 
					                                         f32 %476 = OpFAdd %472 %475 
					                                                      OpStore %106 %476 
					                                         f32 %477 = OpLoad %106 
					                                Uniform f32* %479 = OpAccessChain %26 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFMul %477 %480 
					                                                      OpStore %106 %481 
					                                         f32 %482 = OpLoad %106 
					                                         f32 %484 = OpFMul %482 %483 
					                                 Output f32* %485 = OpAccessChain vs_TEXCOORD6 %108 
					                                                      OpStore %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %91 
					                                         f32 %488 = OpLoad %487 
					                                 Output f32* %489 = OpAccessChain vs_TEXCOORD2 %189 
					                                                      OpStore %489 %488 
					                                       f32_4 %491 = OpLoad %490 
					                                       f32_3 %492 = OpVectorShuffle %491 %491 1 1 1 
					                              Uniform f32_4* %493 = OpAccessChain %26 %43 %44 
					                                       f32_4 %494 = OpLoad %493 
					                                       f32_3 %495 = OpVectorShuffle %494 %494 1 2 0 
					                                       f32_3 %496 = OpFMul %492 %495 
					                                       f32_4 %497 = OpLoad %64 
					                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
					                                                      OpStore %64 %498 
					                              Uniform f32_4* %499 = OpAccessChain %26 %43 %49 
					                                       f32_4 %500 = OpLoad %499 
					                                       f32_3 %501 = OpVectorShuffle %500 %500 1 2 0 
					                                       f32_4 %502 = OpLoad %490 
					                                       f32_3 %503 = OpVectorShuffle %502 %502 0 0 0 
					                                       f32_3 %504 = OpFMul %501 %503 
					                                       f32_4 %505 = OpLoad %64 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
					                                       f32_3 %507 = OpFAdd %504 %506 
					                                       f32_4 %508 = OpLoad %64 
					                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
					                                                      OpStore %64 %509 
					                              Uniform f32_4* %510 = OpAccessChain %26 %43 %43 
					                                       f32_4 %511 = OpLoad %510 
					                                       f32_3 %512 = OpVectorShuffle %511 %511 1 2 0 
					                                       f32_4 %513 = OpLoad %490 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 2 2 2 
					                                       f32_3 %515 = OpFMul %512 %514 
					                                       f32_4 %516 = OpLoad %64 
					                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
					                                       f32_3 %518 = OpFAdd %515 %517 
					                                       f32_4 %519 = OpLoad %64 
					                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
					                                                      OpStore %64 %520 
					                                       f32_4 %521 = OpLoad %64 
					                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
					                                       f32_4 %523 = OpLoad %64 
					                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
					                                         f32 %525 = OpDot %522 %524 
					                                                      OpStore %106 %525 
					                                         f32 %526 = OpLoad %106 
					                                         f32 %527 = OpExtInst %1 32 %526 
					                                                      OpStore %106 %527 
					                                         f32 %528 = OpLoad %106 
					                                       f32_3 %529 = OpCompositeConstruct %528 %528 %528 
					                                       f32_4 %530 = OpLoad %64 
					                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
					                                       f32_3 %532 = OpFMul %529 %531 
					                                       f32_4 %533 = OpLoad %64 
					                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
					                                                      OpStore %64 %534 
					                                       f32_3 %536 = OpLoad %9 
					                                       f32_4 %537 = OpLoad %64 
					                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 2 
					                                       f32_3 %539 = OpFMul %536 %538 
					                                                      OpStore %535 %539 
					                                       f32_3 %540 = OpLoad %9 
					                                       f32_3 %541 = OpVectorShuffle %540 %540 2 0 1 
					                                       f32_4 %542 = OpLoad %64 
					                                       f32_3 %543 = OpVectorShuffle %542 %542 1 2 0 
					                                       f32_3 %544 = OpFMul %541 %543 
					                                       f32_3 %545 = OpLoad %535 
					                                       f32_3 %546 = OpFNegate %545 
					                                       f32_3 %547 = OpFAdd %544 %546 
					                                                      OpStore %535 %547 
					                                  Input f32* %549 = OpAccessChain %490 %176 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %26 %551 %176 
					                                         f32 %553 = OpLoad %552 
					                                         f32 %554 = OpFMul %550 %553 
					                                                      OpStore %548 %554 
					                                         f32 %555 = OpLoad %548 
					                                       f32_3 %556 = OpCompositeConstruct %555 %555 %555 
					                                       f32_3 %557 = OpLoad %535 
					                                       f32_3 %558 = OpFMul %556 %557 
					                                                      OpStore %535 %558 
					                                Private f32* %559 = OpAccessChain %535 %108 
					                                         f32 %560 = OpLoad %559 
					                                 Output f32* %561 = OpAccessChain vs_TEXCOORD2 %91 
					                                                      OpStore %561 %560 
					                                Private f32* %562 = OpAccessChain %64 %189 
					                                         f32 %563 = OpLoad %562 
					                                 Output f32* %564 = OpAccessChain vs_TEXCOORD2 %108 
					                                                      OpStore %564 %563 
					                                Private f32* %566 = OpAccessChain %9 %189 
					                                         f32 %567 = OpLoad %566 
					                                 Output f32* %568 = OpAccessChain vs_TEXCOORD3 %189 
					                                                      OpStore %568 %567 
					                                Private f32* %570 = OpAccessChain %9 %108 
					                                         f32 %571 = OpLoad %570 
					                                 Output f32* %572 = OpAccessChain vs_TEXCOORD4 %189 
					                                                      OpStore %572 %571 
					                                Private f32* %573 = OpAccessChain %64 %108 
					                                         f32 %574 = OpLoad %573 
					                                 Output f32* %575 = OpAccessChain vs_TEXCOORD3 %108 
					                                                      OpStore %575 %574 
					                                Private f32* %576 = OpAccessChain %64 %91 
					                                         f32 %577 = OpLoad %576 
					                                 Output f32* %578 = OpAccessChain vs_TEXCOORD4 %108 
					                                                      OpStore %578 %577 
					                                Private f32* %579 = OpAccessChain %535 %91 
					                                         f32 %580 = OpLoad %579 
					                                 Output f32* %581 = OpAccessChain vs_TEXCOORD3 %91 
					                                                      OpStore %581 %580 
					                                Private f32* %582 = OpAccessChain %535 %189 
					                                         f32 %583 = OpLoad %582 
					                                 Output f32* %584 = OpAccessChain vs_TEXCOORD4 %91 
					                                                      OpStore %584 %583 
					                                       f32_4 %587 = OpLoad %586 
					                                                      OpStore %585 %587 
					                                       f32_4 %588 = OpLoad %70 
					                                       f32_3 %589 = OpVectorShuffle %588 %588 1 1 1 
					                              Uniform f32_4* %591 = OpAccessChain %26 %590 %44 
					                                       f32_4 %592 = OpLoad %591 
					                                       f32_3 %593 = OpVectorShuffle %592 %592 0 1 2 
					                                       f32_3 %594 = OpFMul %589 %593 
					                                                      OpStore %9 %594 
					                              Uniform f32_4* %595 = OpAccessChain %26 %590 %49 
					                                       f32_4 %596 = OpLoad %595 
					                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
					                                       f32_4 %598 = OpLoad %70 
					                                       f32_3 %599 = OpVectorShuffle %598 %598 0 0 0 
					                                       f32_3 %600 = OpFMul %597 %599 
					                                       f32_3 %601 = OpLoad %9 
					                                       f32_3 %602 = OpFAdd %600 %601 
					                                                      OpStore %9 %602 
					                              Uniform f32_4* %604 = OpAccessChain %26 %590 %43 
					                                       f32_4 %605 = OpLoad %604 
					                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 2 
					                                       f32_4 %607 = OpLoad %70 
					                                       f32_3 %608 = OpVectorShuffle %607 %607 2 2 2 
					                                       f32_3 %609 = OpFMul %606 %608 
					                                       f32_3 %610 = OpLoad %9 
					                                       f32_3 %611 = OpFAdd %609 %610 
					                                                      OpStore vs_TEXCOORD7 %611 
					                                       f32_4 %612 = OpLoad %40 
					                                       f32_3 %613 = OpVectorShuffle %612 %612 1 1 1 
					                              Uniform f32_4* %615 = OpAccessChain %26 %614 %44 
					                                       f32_4 %616 = OpLoad %615 
					                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
					                                       f32_3 %618 = OpFMul %613 %617 
					                                                      OpStore %9 %618 
					                              Uniform f32_4* %619 = OpAccessChain %26 %614 %49 
					                                       f32_4 %620 = OpLoad %619 
					                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
					                                       f32_4 %622 = OpLoad %40 
					                                       f32_3 %623 = OpVectorShuffle %622 %622 0 0 0 
					                                       f32_3 %624 = OpFMul %621 %623 
					                                       f32_3 %625 = OpLoad %9 
					                                       f32_3 %626 = OpFAdd %624 %625 
					                                                      OpStore %9 %626 
					                              Uniform f32_4* %627 = OpAccessChain %26 %614 %43 
					                                       f32_4 %628 = OpLoad %627 
					                                       f32_3 %629 = OpVectorShuffle %628 %628 0 1 2 
					                                       f32_4 %630 = OpLoad %40 
					                                       f32_3 %631 = OpVectorShuffle %630 %630 2 2 2 
					                                       f32_3 %632 = OpFMul %629 %631 
					                                       f32_3 %633 = OpLoad %9 
					                                       f32_3 %634 = OpFAdd %632 %633 
					                                                      OpStore %9 %634 
					                              Uniform f32_4* %636 = OpAccessChain %26 %614 %66 
					                                       f32_4 %637 = OpLoad %636 
					                                       f32_3 %638 = OpVectorShuffle %637 %637 0 1 2 
					                                       f32_4 %639 = OpLoad %40 
					                                       f32_3 %640 = OpVectorShuffle %639 %639 3 3 3 
					                                       f32_3 %641 = OpFMul %638 %640 
					                                       f32_3 %642 = OpLoad %9 
					                                       f32_3 %643 = OpFAdd %641 %642 
					                                                      OpStore vs_TEXCOORD8 %643 
					                                 Output f32* %644 = OpAccessChain %95 %49 %91 
					                                         f32 %645 = OpLoad %644 
					                                         f32 %646 = OpFNegate %645 
					                                 Output f32* %647 = OpAccessChain %95 %49 %91 
					                                                      OpStore %647 %646 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 922
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %53 %401 %421 %678 %685 %692 %715 %899 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate vs_TEXCOORD6 Location 12 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpMemberDecorate %21 0 Offset 21 
					                                                      OpMemberDecorate %21 1 Offset 21 
					                                                      OpMemberDecorate %21 2 Offset 21 
					                                                      OpMemberDecorate %21 3 RelaxedPrecision 
					                                                      OpMemberDecorate %21 3 Offset 21 
					                                                      OpMemberDecorate %21 4 RelaxedPrecision 
					                                                      OpMemberDecorate %21 4 Offset 21 
					                                                      OpMemberDecorate %21 5 Offset 21 
					                                                      OpMemberDecorate %21 6 Offset 21 
					                                                      OpMemberDecorate %21 7 Offset 21 
					                                                      OpMemberDecorate %21 8 RelaxedPrecision 
					                                                      OpMemberDecorate %21 8 Offset 21 
					                                                      OpMemberDecorate %21 9 Offset 21 
					                                                      OpMemberDecorate %21 10 Offset 21 
					                                                      OpMemberDecorate %21 11 Offset 21 
					                                                      OpMemberDecorate %21 12 RelaxedPrecision 
					                                                      OpMemberDecorate %21 12 Offset 21 
					                                                      OpMemberDecorate %21 13 Offset 21 
					                                                      OpMemberDecorate %21 14 Offset 21 
					                                                      OpMemberDecorate %21 15 Offset 21 
					                                                      OpMemberDecorate %21 16 Offset 21 
					                                                      OpMemberDecorate %21 17 Offset 21 
					                                                      OpMemberDecorate %21 18 Offset 21 
					                                                      OpMemberDecorate %21 19 Offset 21 
					                                                      OpMemberDecorate %21 20 Offset 21 
					                                                      OpMemberDecorate %21 21 Offset 21 
					                                                      OpMemberDecorate %21 22 Offset 21 
					                                                      OpMemberDecorate %21 23 Offset 21 
					                                                      OpMemberDecorate %21 24 Offset 21 
					                                                      OpMemberDecorate %21 25 Offset 21 
					                                                      OpMemberDecorate %21 26 RelaxedPrecision 
					                                                      OpMemberDecorate %21 26 Offset 21 
					                                                      OpMemberDecorate %21 27 RelaxedPrecision 
					                                                      OpMemberDecorate %21 27 Offset 21 
					                                                      OpDecorate %21 Block 
					                                                      OpDecorate %23 DescriptorSet 23 
					                                                      OpDecorate %23 Binding 23 
					                                                      OpDecorate vs_TEXCOORD0 Location 53 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %65 DescriptorSet 65 
					                                                      OpDecorate %65 Binding 65 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %69 DescriptorSet 69 
					                                                      OpDecorate %69 Binding 69 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %326 RelaxedPrecision 
					                                                      OpDecorate %327 RelaxedPrecision 
					                                                      OpDecorate %328 RelaxedPrecision 
					                                                      OpDecorate %333 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %335 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %338 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 401 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %405 DescriptorSet 405 
					                                                      OpDecorate %405 Binding 405 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %407 DescriptorSet 407 
					                                                      OpDecorate %407 Binding 407 
					                                                      OpDecorate %408 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %413 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %417 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %421 Location 421 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %426 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %450 RelaxedPrecision 
					                                                      OpDecorate %451 RelaxedPrecision 
					                                                      OpDecorate %451 DescriptorSet 451 
					                                                      OpDecorate %451 Binding 451 
					                                                      OpDecorate %452 RelaxedPrecision 
					                                                      OpDecorate %453 RelaxedPrecision 
					                                                      OpDecorate %453 DescriptorSet 453 
					                                                      OpDecorate %453 Binding 453 
					                                                      OpDecorate %454 RelaxedPrecision 
					                                                      OpDecorate %459 RelaxedPrecision 
					                                                      OpDecorate %460 RelaxedPrecision 
					                                                      OpDecorate %463 RelaxedPrecision 
					                                                      OpDecorate %464 RelaxedPrecision 
					                                                      OpDecorate %465 RelaxedPrecision 
					                                                      OpDecorate %466 RelaxedPrecision 
					                                                      OpDecorate %467 RelaxedPrecision 
					                                                      OpDecorate %468 RelaxedPrecision 
					                                                      OpDecorate %469 RelaxedPrecision 
					                                                      OpDecorate %470 RelaxedPrecision 
					                                                      OpDecorate %471 RelaxedPrecision 
					                                                      OpDecorate %472 RelaxedPrecision 
					                                                      OpDecorate %473 RelaxedPrecision 
					                                                      OpDecorate %474 RelaxedPrecision 
					                                                      OpDecorate %475 RelaxedPrecision 
					                                                      OpDecorate %476 RelaxedPrecision 
					                                                      OpDecorate %477 RelaxedPrecision 
					                                                      OpDecorate %478 RelaxedPrecision 
					                                                      OpDecorate %479 RelaxedPrecision 
					                                                      OpDecorate %480 RelaxedPrecision 
					                                                      OpDecorate %481 RelaxedPrecision 
					                                                      OpDecorate %485 RelaxedPrecision 
					                                                      OpDecorate %487 RelaxedPrecision 
					                                                      OpDecorate %488 RelaxedPrecision 
					                                                      OpDecorate %490 RelaxedPrecision 
					                                                      OpDecorate %491 RelaxedPrecision 
					                                                      OpDecorate %492 RelaxedPrecision 
					                                                      OpDecorate %494 RelaxedPrecision 
					                                                      OpDecorate %495 RelaxedPrecision 
					                                                      OpDecorate %496 RelaxedPrecision 
					                                                      OpDecorate %497 RelaxedPrecision 
					                                                      OpDecorate %498 RelaxedPrecision 
					                                                      OpDecorate %500 RelaxedPrecision 
					                                                      OpDecorate %502 RelaxedPrecision 
					                                                      OpDecorate %503 RelaxedPrecision 
					                                                      OpDecorate %505 RelaxedPrecision 
					                                                      OpDecorate %506 RelaxedPrecision 
					                                                      OpDecorate %508 RelaxedPrecision 
					                                                      OpDecorate %509 RelaxedPrecision 
					                                                      OpDecorate %510 RelaxedPrecision 
					                                                      OpDecorate %511 RelaxedPrecision 
					                                                      OpDecorate %512 RelaxedPrecision 
					                                                      OpDecorate %513 RelaxedPrecision 
					                                                      OpDecorate %514 RelaxedPrecision 
					                                                      OpDecorate %515 RelaxedPrecision 
					                                                      OpDecorate %556 RelaxedPrecision 
					                                                      OpDecorate %560 RelaxedPrecision 
					                                                      OpDecorate %562 RelaxedPrecision 
					                                                      OpDecorate %563 RelaxedPrecision 
					                                                      OpDecorate %566 RelaxedPrecision 
					                                                      OpDecorate %567 RelaxedPrecision 
					                                                      OpDecorate %570 RelaxedPrecision 
					                                                      OpDecorate %571 RelaxedPrecision 
					                                                      OpDecorate %572 RelaxedPrecision 
					                                                      OpDecorate %574 RelaxedPrecision 
					                                                      OpDecorate %575 RelaxedPrecision 
					                                                      OpDecorate %576 RelaxedPrecision 
					                                                      OpDecorate %577 RelaxedPrecision 
					                                                      OpDecorate %578 RelaxedPrecision 
					                                                      OpDecorate %597 RelaxedPrecision 
					                                                      OpDecorate %598 RelaxedPrecision 
					                                                      OpDecorate %598 DescriptorSet 598 
					                                                      OpDecorate %598 Binding 598 
					                                                      OpDecorate %599 RelaxedPrecision 
					                                                      OpDecorate %600 RelaxedPrecision 
					                                                      OpDecorate %600 DescriptorSet 600 
					                                                      OpDecorate %600 Binding 600 
					                                                      OpDecorate %601 RelaxedPrecision 
					                                                      OpDecorate %606 RelaxedPrecision 
					                                                      OpDecorate %607 RelaxedPrecision 
					                                                      OpDecorate %608 RelaxedPrecision 
					                                                      OpDecorate %609 RelaxedPrecision 
					                                                      OpDecorate %610 RelaxedPrecision 
					                                                      OpDecorate %611 RelaxedPrecision 
					                                                      OpDecorate %614 RelaxedPrecision 
					                                                      OpDecorate %616 RelaxedPrecision 
					                                                      OpDecorate %617 RelaxedPrecision 
					                                                      OpDecorate %619 RelaxedPrecision 
					                                                      OpDecorate %620 RelaxedPrecision 
					                                                      OpDecorate %622 RelaxedPrecision 
					                                                      OpDecorate %625 RelaxedPrecision 
					                                                      OpDecorate %626 RelaxedPrecision 
					                                                      OpDecorate %627 RelaxedPrecision 
					                                                      OpDecorate %628 RelaxedPrecision 
					                                                      OpDecorate %629 RelaxedPrecision 
					                                                      OpDecorate %630 RelaxedPrecision 
					                                                      OpDecorate %631 RelaxedPrecision 
					                                                      OpDecorate %632 RelaxedPrecision 
					                                                      OpDecorate %633 RelaxedPrecision 
					                                                      OpDecorate %634 RelaxedPrecision 
					                                                      OpDecorate %635 RelaxedPrecision 
					                                                      OpDecorate %636 RelaxedPrecision 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %639 RelaxedPrecision 
					                                                      OpDecorate %640 RelaxedPrecision 
					                                                      OpDecorate %647 RelaxedPrecision 
					                                                      OpDecorate %648 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 678 
					                                                      OpDecorate vs_TEXCOORD3 Location 685 
					                                                      OpDecorate vs_TEXCOORD4 Location 692 
					                                                      OpDecorate %699 RelaxedPrecision 
					                                                      OpDecorate %700 RelaxedPrecision 
					                                                      OpDecorate %701 RelaxedPrecision 
					                                                      OpDecorate %702 RelaxedPrecision 
					                                                      OpDecorate %703 RelaxedPrecision 
					                                                      OpDecorate %704 RelaxedPrecision 
					                                                      OpDecorate %707 RelaxedPrecision 
					                                                      OpDecorate %708 RelaxedPrecision 
					                                                      OpDecorate %710 RelaxedPrecision 
					                                                      OpDecorate %711 RelaxedPrecision 
					                                                      OpDecorate %712 RelaxedPrecision 
					                                                      OpDecorate %713 RelaxedPrecision 
					                                                      OpDecorate %714 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD5 Location 715 
					                                                      OpDecorate %754 RelaxedPrecision 
					                                                      OpDecorate %758 RelaxedPrecision 
					                                                      OpDecorate %759 RelaxedPrecision 
					                                                      OpDecorate %760 RelaxedPrecision 
					                                                      OpDecorate %761 RelaxedPrecision 
					                                                      OpDecorate %762 RelaxedPrecision 
					                                                      OpDecorate %765 RelaxedPrecision 
					                                                      OpDecorate %766 RelaxedPrecision 
					                                                      OpDecorate %768 RelaxedPrecision 
					                                                      OpDecorate %769 RelaxedPrecision 
					                                                      OpDecorate %770 RelaxedPrecision 
					                                                      OpDecorate %771 RelaxedPrecision 
					                                                      OpDecorate %772 RelaxedPrecision 
					                                                      OpDecorate %775 RelaxedPrecision 
					                                                      OpDecorate %776 RelaxedPrecision 
					                                                      OpDecorate %777 RelaxedPrecision 
					                                                      OpDecorate %778 RelaxedPrecision 
					                                                      OpDecorate %780 RelaxedPrecision 
					                                                      OpDecorate %781 RelaxedPrecision 
					                                                      OpDecorate %783 RelaxedPrecision 
					                                                      OpDecorate %787 RelaxedPrecision 
					                                                      OpDecorate %788 RelaxedPrecision 
					                                                      OpDecorate %790 RelaxedPrecision 
					                                                      OpDecorate %793 RelaxedPrecision 
					                                                      OpDecorate %794 RelaxedPrecision 
					                                                      OpDecorate %797 RelaxedPrecision 
					                                                      OpDecorate %798 RelaxedPrecision 
					                                                      OpDecorate %801 RelaxedPrecision 
					                                                      OpDecorate %804 RelaxedPrecision 
					                                                      OpDecorate %813 RelaxedPrecision 
					                                                      OpDecorate %815 RelaxedPrecision 
					                                                      OpDecorate %816 RelaxedPrecision 
					                                                      OpDecorate %819 RelaxedPrecision 
					                                                      OpDecorate %820 RelaxedPrecision 
					                                                      OpDecorate %855 DescriptorSet 855 
					                                                      OpDecorate %855 Binding 855 
					                                                      OpDecorate %857 DescriptorSet 857 
					                                                      OpDecorate %857 Binding 857 
					                                                      OpDecorate %868 RelaxedPrecision 
					                                                      OpDecorate %869 RelaxedPrecision 
					                                                      OpDecorate %873 RelaxedPrecision 
					                                                      OpDecorate %874 RelaxedPrecision 
					                                                      OpDecorate %877 RelaxedPrecision 
					                                                      OpDecorate %878 RelaxedPrecision 
					                                                      OpDecorate %879 RelaxedPrecision 
					                                                      OpDecorate %882 RelaxedPrecision 
					                                                      OpDecorate %883 RelaxedPrecision 
					                                                      OpDecorate %884 RelaxedPrecision 
					                                                      OpDecorate %885 RelaxedPrecision 
					                                                      OpDecorate %886 RelaxedPrecision 
					                                                      OpDecorate %888 RelaxedPrecision 
					                                                      OpDecorate %890 RelaxedPrecision 
					                                                      OpDecorate %891 RelaxedPrecision 
					                                                      OpDecorate %892 RelaxedPrecision 
					                                                      OpDecorate %893 RelaxedPrecision 
					                                                      OpDecorate %894 RelaxedPrecision 
					                                                      OpDecorate %895 RelaxedPrecision 
					                                                      OpDecorate %899 RelaxedPrecision 
					                                                      OpDecorate %899 Location 899 
					                                                      OpDecorate %901 RelaxedPrecision 
					                                                      OpDecorate %904 RelaxedPrecision 
					                                                      OpDecorate %905 RelaxedPrecision 
					                                                      OpDecorate %906 RelaxedPrecision 
					                                                      OpDecorate %907 RelaxedPrecision 
					                                                      OpDecorate %908 RelaxedPrecision 
					                                                      OpDecorate %911 RelaxedPrecision 
					                                                      OpDecorate %912 RelaxedPrecision 
					                                                      OpDecorate %913 RelaxedPrecision 
					                                                      OpDecorate %914 RelaxedPrecision 
					                                                      OpDecorate %915 RelaxedPrecision 
					                                                      OpDecorate %916 RelaxedPrecision 
					                                                      OpDecorate %917 RelaxedPrecision 
					                                                      OpDecorate %918 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 2 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_2* vs_TEXCOORD6 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 0 
					                                              %15 = OpTypePointer Input %6 
					                                              %18 = OpTypeVector %6 3 
					                                          u32 %19 = OpConstant 4 
					                                              %20 = OpTypeArray %7 %19 
					                                              %21 = OpTypeStruct %7 %18 %7 %7 %7 %20 %6 %6 %7 %6 %6 %6 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %22 = OpTypePointer Uniform %21 
					Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %23 = OpVariable Uniform 
					                                              %24 = OpTypeInt 32 1 
					                                          i32 %25 = OpConstant 15 
					                                              %26 = OpTypePointer Uniform %6 
					                                              %30 = OpTypePointer Private %6 
					                               Private f32_4* %32 = OpVariable Private 
					                                          f32 %33 = OpConstant 3,674022E-40 
					                                        f32_2 %34 = OpConstantComposite %33 %33 
					                                          i32 %35 = OpConstant 23 
					                                          i32 %38 = OpConstant 24 
					                                          f32 %45 = OpConstant 3,674022E-40 
					                                          u32 %46 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %52 = OpTypePointer Input %7 
					                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                               Private f32_4* %62 = OpVariable Private 
					                                              %63 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %64 = OpTypePointer UniformConstant %63 
					         UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
					                                              %67 = OpTypeSampler 
					                                              %68 = OpTypePointer UniformConstant %67 
					                     UniformConstant sampler* %69 = OpVariable UniformConstant 
					                                              %71 = OpTypeSampledImage %63 
					                                          u32 %76 = OpConstant 3 
					                                          u32 %94 = OpConstant 1 
					                                         f32 %109 = OpConstant 3,674022E-40 
					                                       f32_4 %110 = OpConstantComposite %109 %109 %109 %109 
					                                         i32 %112 = OpConstant 16 
					                                         i32 %115 = OpConstant 13 
					                                         f32 %122 = OpConstant 3,674022E-40 
					                                         i32 %131 = OpConstant 14 
					                                         i32 %138 = OpConstant 25 
					                                         f32 %145 = OpConstant 3,674022E-40 
					                                         f32 %149 = OpConstant 3,674022E-40 
					                                       f32_4 %150 = OpConstantComposite %149 %149 %149 %149 
					                                         f32 %157 = OpConstant 3,674022E-40 
					                                       f32_4 %158 = OpConstantComposite %157 %157 %157 %157 
					                                         f32 %160 = OpConstant 3,674022E-40 
					                                       f32_4 %161 = OpConstantComposite %160 %160 %160 %160 
					                                       f32_4 %166 = OpConstantComposite %33 %33 %33 %33 
					                                             %168 = OpTypePointer Private %10 
					                              Private f32_2* %169 = OpVariable Private 
					                                         i32 %170 = OpConstant 21 
					                                             %175 = OpTypeBool 
					                                             %176 = OpTypePointer Private %175 
					                               Private bool* %177 = OpVariable Private 
					                                             %190 = OpTypePointer Function %6 
					                               Private bool* %202 = OpVariable Private 
					                                             %209 = OpTypeVector %175 4 
					                                         f32 %213 = OpConstant 3,674022E-40 
					                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
					                                         i32 %222 = OpConstant 18 
					                                         i32 %241 = OpConstant 17 
					                                Private f32* %281 = OpVariable Private 
					                                       f32_2 %296 = OpConstantComposite %33 %45 
					                                Private f32* %326 = OpVariable Private 
					                                Private f32* %334 = OpVariable Private 
					                                         i32 %350 = OpConstant 22 
					                              Private f32_4* %361 = OpVariable Private 
					                                             %372 = OpTypePointer Private %18 
					                              Private f32_3* %373 = OpVariable Private 
					                                         i32 %388 = OpConstant 10 
					                                         i32 %391 = OpConstant 11 
					                                         i32 %395 = OpConstant 0 
					                                             %396 = OpTypePointer Uniform %7 
					                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                              Private f32_4* %404 = OpVariable Private 
					        UniformConstant read_only Texture2D* %405 = OpVariable UniformConstant 
					                    UniformConstant sampler* %407 = OpVariable UniformConstant 
					                              Private f32_3* %412 = OpVariable Private 
					                                         i32 %415 = OpConstant 12 
					                              Private f32_4* %420 = OpVariable Private 
					                                Input f32_4* %421 = OpVariable Input 
					                                Private f32* %428 = OpVariable Private 
					                                         i32 %434 = OpConstant 6 
					                                         i32 %437 = OpConstant 7 
					                              Private f32_4* %450 = OpVariable Private 
					        UniformConstant read_only Texture2D* %451 = OpVariable UniformConstant 
					                    UniformConstant sampler* %453 = OpVariable UniformConstant 
					                              Private f32_4* %459 = OpVariable Private 
					                                         i32 %461 = OpConstant 8 
					                              Private f32_4* %465 = OpVariable Private 
					                              Private f32_4* %474 = OpVariable Private 
					                              Private f32_4* %498 = OpVariable Private 
					                                         i32 %532 = OpConstant 9 
					                              Private f32_4* %574 = OpVariable Private 
					                              Private f32_3* %579 = OpVariable Private 
					                                         i32 %580 = OpConstant 20 
					                                         i32 %584 = OpConstant 19 
					                              Private f32_3* %597 = OpVariable Private 
					        UniformConstant read_only Texture2D* %598 = OpVariable UniformConstant 
					                    UniformConstant sampler* %600 = OpVariable UniformConstant 
					                                       f32_2 %621 = OpConstantComposite %160 %160 
					                                Private f32* %625 = OpVariable Private 
					                                         f32 %644 = OpConstant 3,674022E-40 
					                                       f32_3 %645 = OpConstantComposite %644 %644 %160 
					                                       f32_3 %651 = OpConstantComposite %45 %45 %33 
					                                             %677 = OpTypePointer Input %18 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                              Private f32_3* %699 = OpVariable Private 
					                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
					                                         i32 %718 = OpConstant 2 
					                                Private f32* %723 = OpVariable Private 
					                              Private f32_3* %733 = OpVariable Private 
					                                         i32 %736 = OpConstant 1 
					                                             %737 = OpTypePointer Uniform %18 
					                                       f32_2 %782 = OpConstantComposite %45 %45 
					                                Private f32* %790 = OpVariable Private 
					                                         i32 %791 = OpConstant 26 
					                                         i32 %795 = OpConstant 27 
					                              Private f32_3* %799 = OpVariable Private 
					                                         f32 %809 = OpConstant 3,674022E-40 
					                                         i32 %824 = OpConstant 5 
					                                         i32 %846 = OpConstant 3 
					        UniformConstant read_only Texture2D* %855 = OpVariable UniformConstant 
					                    UniformConstant sampler* %857 = OpVariable UniformConstant 
					                                         i32 %875 = OpConstant 4 
					                                         f32 %889 = OpConstant 3,674022E-40 
					                                             %898 = OpTypePointer Output %7 
					                               Output f32_4* %899 = OpVariable Output 
					                                             %902 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %191 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD6 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Uniform f32* %27 = OpAccessChain %23 %25 
					                                          f32 %28 = OpLoad %27 
					                                          f32 %29 = OpFAdd %17 %28 
					                                 Private f32* %31 = OpAccessChain %9 %14 
					                                                      OpStore %31 %29 
					                                 Uniform f32* %36 = OpAccessChain %23 %35 
					                                          f32 %37 = OpLoad %36 
					                                 Uniform f32* %39 = OpAccessChain %23 %38 
					                                          f32 %40 = OpLoad %39 
					                                        f32_2 %41 = OpCompositeConstruct %37 %40 
					                                        f32_2 %42 = OpFDiv %34 %41 
					                                        f32_4 %43 = OpLoad %32 
					                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 2 3 
					                                                      OpStore %32 %44 
					                                 Private f32* %47 = OpAccessChain %32 %46 
					                                                      OpStore %47 %45 
					                                        f32_4 %49 = OpLoad %32 
					                                        f32_4 %50 = OpVectorShuffle %49 %49 0 2 2 1 
					                                        f32_4 %51 = OpFNegate %50 
					                                        f32_4 %54 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %55 = OpVectorShuffle %54 %54 0 1 0 1 
					                                        f32_4 %56 = OpFAdd %51 %55 
					                                                      OpStore %48 %56 
					                                        f32_4 %57 = OpLoad %32 
					                                        f32_4 %58 = OpVectorShuffle %57 %57 0 2 2 1 
					                                        f32_4 %59 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 1 0 1 
					                                        f32_4 %61 = OpFAdd %58 %60 
					                                                      OpStore %32 %61 
					                          read_only Texture2D %66 = OpLoad %65 
					                                      sampler %70 = OpLoad %69 
					                   read_only Texture2DSampled %72 = OpSampledImage %66 %70 
					                                        f32_4 %73 = OpLoad %48 
					                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                                        f32_4 %75 = OpImageSampleImplicitLod %72 %74 
					                                          f32 %77 = OpCompositeExtract %75 3 
					                                 Private f32* %78 = OpAccessChain %62 %14 
					                                                      OpStore %78 %77 
					                          read_only Texture2D %79 = OpLoad %65 
					                                      sampler %80 = OpLoad %69 
					                   read_only Texture2DSampled %81 = OpSampledImage %79 %80 
					                                        f32_4 %82 = OpLoad %48 
					                                        f32_2 %83 = OpVectorShuffle %82 %82 2 3 
					                                        f32_4 %84 = OpImageSampleImplicitLod %81 %83 
					                                          f32 %85 = OpCompositeExtract %84 3 
					                                 Private f32* %86 = OpAccessChain %62 %46 
					                                                      OpStore %86 %85 
					                          read_only Texture2D %87 = OpLoad %65 
					                                      sampler %88 = OpLoad %69 
					                   read_only Texture2DSampled %89 = OpSampledImage %87 %88 
					                                        f32_4 %90 = OpLoad %32 
					                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
					                                        f32_4 %92 = OpImageSampleImplicitLod %89 %91 
					                                          f32 %93 = OpCompositeExtract %92 3 
					                                 Private f32* %95 = OpAccessChain %62 %94 
					                                                      OpStore %95 %93 
					                          read_only Texture2D %96 = OpLoad %65 
					                                      sampler %97 = OpLoad %69 
					                   read_only Texture2DSampled %98 = OpSampledImage %96 %97 
					                                        f32_4 %99 = OpLoad %32 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 2 3 
					                                       f32_4 %101 = OpImageSampleImplicitLod %98 %100 
					                                         f32 %102 = OpCompositeExtract %101 3 
					                                Private f32* %103 = OpAccessChain %62 %76 
					                                                      OpStore %103 %102 
					                                       f32_4 %104 = OpLoad %9 
					                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
					                                       f32_4 %106 = OpLoad %62 
					                                       f32_4 %107 = OpFAdd %105 %106 
					                                                      OpStore %9 %107 
					                                       f32_4 %108 = OpLoad %9 
					                                       f32_4 %111 = OpFAdd %108 %110 
					                                                      OpStore %9 %111 
					                                Uniform f32* %113 = OpAccessChain %23 %112 
					                                         f32 %114 = OpLoad %113 
					                                Uniform f32* %116 = OpAccessChain %23 %115 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFAdd %114 %117 
					                                Private f32* %119 = OpAccessChain %32 %14 
					                                                      OpStore %119 %118 
					                                Private f32* %120 = OpAccessChain %32 %14 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %123 = OpExtInst %1 40 %121 %122 
					                                Private f32* %124 = OpAccessChain %32 %14 
					                                                      OpStore %124 %123 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_4 %126 = OpLoad %32 
					                                       f32_4 %127 = OpVectorShuffle %126 %126 0 0 0 0 
					                                       f32_4 %128 = OpFDiv %125 %127 
					                                                      OpStore %9 %128 
					                                Private f32* %129 = OpAccessChain %32 %14 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %23 %131 
					                                         f32 %133 = OpLoad %132 
					                                         f32 %134 = OpFMul %130 %133 
					                                Private f32* %135 = OpAccessChain %32 %14 
					                                                      OpStore %135 %134 
					                                Private f32* %136 = OpAccessChain %32 %14 
					                                         f32 %137 = OpLoad %136 
					                                Uniform f32* %139 = OpAccessChain %23 %138 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %137 %140 
					                                Private f32* %142 = OpAccessChain %32 %14 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %32 %14 
					                                         f32 %144 = OpLoad %143 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %32 %14 
					                                                      OpStore %147 %146 
					                                       f32_4 %148 = OpLoad %9 
					                                       f32_4 %151 = OpFAdd %148 %150 
					                                                      OpStore %9 %151 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_4 %153 = OpCompositeConstruct %45 %45 %45 %45 
					                                       f32_4 %154 = OpCompositeConstruct %33 %33 %33 %33 
					                                       f32_4 %155 = OpExtInst %1 43 %152 %153 %154 
					                                                      OpStore %9 %155 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_4 %159 = OpFMul %156 %158 
					                                       f32_4 %162 = OpFAdd %159 %161 
					                                                      OpStore %48 %162 
					                                       f32_4 %163 = OpLoad %48 
					                                       f32_4 %164 = OpExtInst %1 4 %163 
					                                       f32_4 %165 = OpFNegate %164 
					                                       f32_4 %167 = OpFAdd %165 %166 
					                                                      OpStore %48 %167 
					                                Uniform f32* %171 = OpAccessChain %23 %170 
					                                         f32 %172 = OpLoad %171 
					                                         f32 %173 = OpFMul %172 %149 
					                                Private f32* %174 = OpAccessChain %169 %14 
					                                                      OpStore %174 %173 
					                                Private f32* %178 = OpAccessChain %169 %14 
					                                         f32 %179 = OpLoad %178 
					                                Private f32* %180 = OpAccessChain %169 %14 
					                                         f32 %181 = OpLoad %180 
					                                         f32 %182 = OpFNegate %181 
					                                        bool %183 = OpFOrdGreaterThanEqual %179 %182 
					                                                      OpStore %177 %183 
					                                Private f32* %184 = OpAccessChain %169 %14 
					                                         f32 %185 = OpLoad %184 
					                                         f32 %186 = OpExtInst %1 4 %185 
					                                         f32 %187 = OpExtInst %1 10 %186 
					                                Private f32* %188 = OpAccessChain %169 %14 
					                                                      OpStore %188 %187 
					                                        bool %189 = OpLoad %177 
					                                                      OpSelectionMerge %193 None 
					                                                      OpBranchConditional %189 %192 %196 
					                                             %192 = OpLabel 
					                                Private f32* %194 = OpAccessChain %169 %14 
					                                         f32 %195 = OpLoad %194 
					                                                      OpStore %191 %195 
					                                                      OpBranch %193 
					                                             %196 = OpLabel 
					                                Private f32* %197 = OpAccessChain %169 %14 
					                                         f32 %198 = OpLoad %197 
					                                         f32 %199 = OpFNegate %198 
					                                                      OpStore %191 %199 
					                                                      OpBranch %193 
					                                             %193 = OpLabel 
					                                         f32 %200 = OpLoad %191 
					                                Private f32* %201 = OpAccessChain %169 %14 
					                                                      OpStore %201 %200 
					                                Private f32* %203 = OpAccessChain %169 %14 
					                                         f32 %204 = OpLoad %203 
					                                        bool %205 = OpFOrdGreaterThanEqual %204 %149 
					                                                      OpStore %202 %205 
					                                        bool %206 = OpLoad %202 
					                                       f32_4 %207 = OpLoad %48 
					                                       f32_4 %208 = OpLoad %9 
					                                      bool_4 %210 = OpCompositeConstruct %206 %206 %206 %206 
					                                       f32_4 %211 = OpSelect %210 %207 %208 
					                                                      OpStore %9 %211 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %215 = OpFMul %212 %214 
					                                                      OpStore %48 %215 
					                                       f32_4 %216 = OpLoad %48 
					                                       f32_4 %217 = OpExtInst %1 13 %216 
					                                                      OpStore %48 %217 
					                                       f32_4 %218 = OpLoad %9 
					                                       f32_4 %219 = OpFNegate %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpFAdd %219 %220 
					                                                      OpStore %48 %221 
					                                Uniform f32* %223 = OpAccessChain %23 %222 
					                                         f32 %224 = OpLoad %223 
					                                Uniform f32* %225 = OpAccessChain %23 %222 
					                                         f32 %226 = OpLoad %225 
					                                Uniform f32* %227 = OpAccessChain %23 %222 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %229 = OpAccessChain %23 %222 
					                                         f32 %230 = OpLoad %229 
					                                       f32_4 %231 = OpCompositeConstruct %224 %226 %228 %230 
					                                         f32 %232 = OpCompositeExtract %231 0 
					                                         f32 %233 = OpCompositeExtract %231 1 
					                                         f32 %234 = OpCompositeExtract %231 2 
					                                         f32 %235 = OpCompositeExtract %231 3 
					                                       f32_4 %236 = OpCompositeConstruct %232 %233 %234 %235 
					                                       f32_4 %237 = OpLoad %48 
					                                       f32_4 %238 = OpFMul %236 %237 
					                                       f32_4 %239 = OpLoad %9 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %9 %240 
					                                Uniform f32* %242 = OpAccessChain %23 %241 
					                                         f32 %243 = OpLoad %242 
					                                         f32 %244 = OpFNegate %243 
					                                         f32 %245 = OpFAdd %244 %33 
					                                Private f32* %246 = OpAccessChain %169 %14 
					                                                      OpStore %246 %245 
					                                       f32_4 %247 = OpLoad %9 
					                                       f32_2 %248 = OpLoad %169 
					                                       f32_4 %249 = OpVectorShuffle %248 %248 0 0 0 0 
					                                       f32_4 %250 = OpExtInst %1 37 %247 %249 
					                                                      OpStore %9 %250 
					                                       f32_4 %251 = OpLoad %32 
					                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
					                                       f32_4 %253 = OpLoad %9 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 2 
					                                       f32_2 %255 = OpFMul %252 %254 
					                                       f32_4 %256 = OpLoad %9 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 1 5 3 
					                                                      OpStore %9 %257 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 3 1 
					                                       f32_4 %260 = OpLoad %32 
					                                       f32_2 %261 = OpVectorShuffle %260 %260 0 0 
					                                       f32_2 %262 = OpFMul %259 %261 
					                                       f32_4 %263 = OpLoad %9 
					                                       f32_2 %264 = OpVectorShuffle %263 %263 2 0 
					                                       f32_2 %265 = OpFNegate %264 
					                                       f32_2 %266 = OpFAdd %262 %265 
					                                       f32_4 %267 = OpLoad %9 
					                                       f32_4 %268 = OpVectorShuffle %267 %266 0 4 5 3 
					                                                      OpStore %9 %268 
					                                Private f32* %269 = OpAccessChain %9 %14 
					                                                      OpStore %269 %160 
					                                Private f32* %270 = OpAccessChain %9 %76 
					                                                      OpStore %270 %33 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
					                                       f32_4 %273 = OpLoad %9 
					                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
					                                         f32 %275 = OpDot %272 %274 
					                                Private f32* %276 = OpAccessChain %32 %14 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %32 %14 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpExtInst %1 32 %278 
					                                Private f32* %280 = OpAccessChain %32 %14 
					                                                      OpStore %280 %279 
					                                       f32_4 %282 = OpLoad %9 
					                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
					                                       f32_4 %284 = OpLoad %9 
					                                       f32_2 %285 = OpVectorShuffle %284 %284 2 3 
					                                         f32 %286 = OpDot %283 %285 
					                                                      OpStore %281 %286 
					                                         f32 %287 = OpLoad %281 
					                                         f32 %288 = OpExtInst %1 32 %287 
					                                                      OpStore %281 %288 
					                                         f32 %289 = OpLoad %281 
					                                Private f32* %290 = OpAccessChain %9 %46 
					                                         f32 %291 = OpLoad %290 
					                                         f32 %292 = OpFMul %289 %291 
					                                Private f32* %293 = OpAccessChain %48 %14 
					                                                      OpStore %293 %292 
					                                         f32 %294 = OpLoad %281 
					                                       f32_2 %295 = OpCompositeConstruct %294 %294 
					                                       f32_2 %297 = OpFMul %295 %296 
					                                       f32_4 %298 = OpLoad %48 
					                                       f32_4 %299 = OpVectorShuffle %298 %297 0 4 5 3 
					                                                      OpStore %48 %299 
					                                Private f32* %300 = OpAccessChain %9 %46 
					                                                      OpStore %300 %45 
					                                       f32_4 %301 = OpLoad %32 
					                                       f32_3 %302 = OpVectorShuffle %301 %301 0 0 0 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_3 %305 = OpFMul %302 %304 
					                                       f32_4 %306 = OpLoad %9 
					                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
					                                                      OpStore %9 %307 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_4 %310 = OpLoad %48 
					                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                                       f32_3 %312 = OpFMul %309 %311 
					                                       f32_4 %313 = OpLoad %32 
					                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
					                                                      OpStore %32 %314 
					                                       f32_4 %315 = OpLoad %48 
					                                       f32_3 %316 = OpVectorShuffle %315 %315 2 0 1 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 1 2 0 
					                                       f32_3 %319 = OpFMul %316 %318 
					                                       f32_4 %320 = OpLoad %32 
					                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
					                                       f32_3 %322 = OpFNegate %321 
					                                       f32_3 %323 = OpFAdd %319 %322 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
					                                                      OpStore %9 %325 
					                         read_only Texture2D %327 = OpLoad %65 
					                                     sampler %328 = OpLoad %69 
					                  read_only Texture2DSampled %329 = OpSampledImage %327 %328 
					                                       f32_4 %330 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %331 = OpVectorShuffle %330 %330 0 1 
					                                       f32_4 %332 = OpImageSampleImplicitLod %329 %331 
					                                         f32 %333 = OpCompositeExtract %332 3 
					                                                      OpStore %326 %333 
					                                         f32 %335 = OpLoad %326 
					                                         f32 %336 = OpFNegate %335 
					                                         f32 %337 = OpFAdd %336 %149 
					                                                      OpStore %334 %337 
					                                         f32 %338 = OpLoad %334 
					                                  Input f32* %339 = OpAccessChain vs_TEXCOORD6 %14 
					                                         f32 %340 = OpLoad %339 
					                                         f32 %341 = OpFNegate %340 
					                                         f32 %342 = OpFAdd %338 %341 
					                                                      OpStore %281 %342 
					                                         f32 %343 = OpLoad %281 
					                                  Input f32* %344 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %345 = OpLoad %344 
					                                         f32 %346 = OpFMul %343 %345 
					                                         f32 %347 = OpFAdd %346 %149 
					                                                      OpStore %281 %347 
					                                Uniform f32* %348 = OpAccessChain %23 %115 
					                                         f32 %349 = OpLoad %348 
					                                Uniform f32* %351 = OpAccessChain %23 %350 
					                                         f32 %352 = OpLoad %351 
					                                         f32 %353 = OpFMul %349 %352 
					                                Private f32* %354 = OpAccessChain %32 %14 
					                                                      OpStore %354 %353 
					                                Private f32* %355 = OpAccessChain %32 %14 
					                                         f32 %356 = OpLoad %355 
					                                  Input f32* %357 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %358 = OpLoad %357 
					                                         f32 %359 = OpFMul %356 %358 
					                                Private f32* %360 = OpAccessChain %32 %14 
					                                                      OpStore %360 %359 
					                                Private f32* %362 = OpAccessChain %32 %14 
					                                         f32 %363 = OpLoad %362 
					                                         f32 %364 = OpFMul %363 %149 
					                                         f32 %365 = OpLoad %281 
					                                         f32 %366 = OpFAdd %364 %365 
					                                Private f32* %367 = OpAccessChain %361 %14 
					                                                      OpStore %367 %366 
					                                Private f32* %368 = OpAccessChain %361 %14 
					                                         f32 %369 = OpLoad %368 
					                                         f32 %370 = OpExtInst %1 43 %369 %45 %33 
					                                Private f32* %371 = OpAccessChain %361 %14 
					                                                      OpStore %371 %370 
					                                Private f32* %374 = OpAccessChain %32 %14 
					                                         f32 %375 = OpLoad %374 
					                                         f32 %376 = OpExtInst %1 37 %375 %33 
					                                Private f32* %377 = OpAccessChain %373 %14 
					                                                      OpStore %377 %376 
					                                Private f32* %378 = OpAccessChain %373 %14 
					                                         f32 %379 = OpLoad %378 
					                                         f32 %380 = OpExtInst %1 31 %379 
					                                Private f32* %381 = OpAccessChain %373 %14 
					                                                      OpStore %381 %380 
					                                Private f32* %382 = OpAccessChain %373 %14 
					                                         f32 %383 = OpLoad %382 
					                                Private f32* %384 = OpAccessChain %361 %14 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpFMul %383 %385 
					                                Private f32* %387 = OpAccessChain %361 %14 
					                                                      OpStore %387 %386 
					                                Uniform f32* %389 = OpAccessChain %23 %388 
					                                         f32 %390 = OpLoad %389 
					                                Uniform f32* %392 = OpAccessChain %23 %391 
					                                         f32 %393 = OpLoad %392 
					                                       f32_2 %394 = OpCompositeConstruct %390 %393 
					                              Uniform f32_4* %397 = OpAccessChain %23 %395 
					                                       f32_4 %398 = OpLoad %397 
					                                       f32_2 %399 = OpVectorShuffle %398 %398 1 1 
					                                       f32_2 %400 = OpFMul %394 %399 
					                                       f32_2 %402 = OpLoad vs_TEXCOORD1 
					                                       f32_2 %403 = OpFAdd %400 %402 
					                                                      OpStore %169 %403 
					                         read_only Texture2D %406 = OpLoad %405 
					                                     sampler %408 = OpLoad %407 
					                  read_only Texture2DSampled %409 = OpSampledImage %406 %408 
					                                       f32_2 %410 = OpLoad %169 
					                                       f32_4 %411 = OpImageSampleImplicitLod %409 %410 
					                                                      OpStore %404 %411 
					                                       f32_4 %413 = OpLoad %404 
					                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
					                              Uniform f32_4* %416 = OpAccessChain %23 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
					                                       f32_3 %419 = OpFMul %414 %418 
					                                                      OpStore %412 %419 
					                                  Input f32* %422 = OpAccessChain %421 %76 
					                                         f32 %423 = OpLoad %422 
					                                Uniform f32* %424 = OpAccessChain %23 %415 %76 
					                                         f32 %425 = OpLoad %424 
					                                         f32 %426 = OpFMul %423 %425 
					                                Private f32* %427 = OpAccessChain %420 %14 
					                                                      OpStore %427 %426 
					                                Private f32* %429 = OpAccessChain %404 %76 
					                                         f32 %430 = OpLoad %429 
					                                Private f32* %431 = OpAccessChain %420 %14 
					                                         f32 %432 = OpLoad %431 
					                                         f32 %433 = OpFMul %430 %432 
					                                                      OpStore %428 %433 
					                                Uniform f32* %435 = OpAccessChain %23 %434 
					                                         f32 %436 = OpLoad %435 
					                                Uniform f32* %438 = OpAccessChain %23 %437 
					                                         f32 %439 = OpLoad %438 
					                                       f32_2 %440 = OpCompositeConstruct %436 %439 
					                              Uniform f32_4* %441 = OpAccessChain %23 %395 
					                                       f32_4 %442 = OpLoad %441 
					                                       f32_2 %443 = OpVectorShuffle %442 %442 1 1 
					                                       f32_2 %444 = OpFMul %440 %443 
					                                       f32_4 %445 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFAdd %444 %446 
					                                       f32_4 %448 = OpLoad %62 
					                                       f32_4 %449 = OpVectorShuffle %448 %447 4 5 2 3 
					                                                      OpStore %62 %449 
					                         read_only Texture2D %452 = OpLoad %451 
					                                     sampler %454 = OpLoad %453 
					                  read_only Texture2DSampled %455 = OpSampledImage %452 %454 
					                                       f32_4 %456 = OpLoad %62 
					                                       f32_2 %457 = OpVectorShuffle %456 %456 0 1 
					                                       f32_4 %458 = OpImageSampleImplicitLod %455 %457 
					                                                      OpStore %450 %458 
					                                       f32_4 %460 = OpLoad %421 
					                              Uniform f32_4* %462 = OpAccessChain %23 %461 
					                                       f32_4 %463 = OpLoad %462 
					                                       f32_4 %464 = OpFMul %460 %463 
					                                                      OpStore %459 %464 
					                                       f32_4 %466 = OpLoad %450 
					                                       f32_4 %467 = OpLoad %459 
					                                       f32_4 %468 = OpFMul %466 %467 
					                                                      OpStore %465 %468 
					                                       f32_4 %469 = OpLoad %465 
					                                       f32_3 %470 = OpVectorShuffle %469 %469 3 3 3 
					                                       f32_4 %471 = OpLoad %465 
					                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
					                                       f32_3 %473 = OpFMul %470 %472 
					                                                      OpStore %373 %473 
					                                       f32_3 %475 = OpLoad %412 
					                                         f32 %476 = OpLoad %428 
					                                       f32_3 %477 = OpCompositeConstruct %476 %476 %476 
					                                       f32_3 %478 = OpFMul %475 %477 
					                                       f32_3 %479 = OpLoad %373 
					                                       f32_3 %480 = OpFNegate %479 
					                                       f32_3 %481 = OpFAdd %478 %480 
					                                       f32_4 %482 = OpLoad %474 
					                                       f32_4 %483 = OpVectorShuffle %482 %481 4 5 6 3 
					                                                      OpStore %474 %483 
					                                Private f32* %484 = OpAccessChain %420 %14 
					                                         f32 %485 = OpLoad %484 
					                                Private f32* %486 = OpAccessChain %404 %76 
					                                         f32 %487 = OpLoad %486 
					                                         f32 %488 = OpFMul %485 %487 
					                                Private f32* %489 = OpAccessChain %465 %76 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFNegate %490 
					                                         f32 %492 = OpFAdd %488 %491 
					                                Private f32* %493 = OpAccessChain %474 %76 
					                                                      OpStore %493 %492 
					                                       f32_4 %494 = OpLoad %361 
					                                       f32_4 %495 = OpVectorShuffle %494 %494 0 0 0 0 
					                                       f32_4 %496 = OpLoad %474 
					                                       f32_4 %497 = OpFMul %495 %496 
					                                                      OpStore %420 %497 
					                                Private f32* %499 = OpAccessChain %459 %76 
					                                         f32 %500 = OpLoad %499 
					                                Private f32* %501 = OpAccessChain %450 %76 
					                                         f32 %502 = OpLoad %501 
					                                         f32 %503 = OpFMul %500 %502 
					                                Private f32* %504 = OpAccessChain %420 %76 
					                                         f32 %505 = OpLoad %504 
					                                         f32 %506 = OpFAdd %503 %505 
					                                Private f32* %507 = OpAccessChain %498 %76 
					                                                      OpStore %507 %506 
					                                       f32_4 %508 = OpLoad %465 
					                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
					                                       f32_4 %510 = OpLoad %465 
					                                       f32_3 %511 = OpVectorShuffle %510 %510 3 3 3 
					                                       f32_3 %512 = OpFMul %509 %511 
					                                       f32_4 %513 = OpLoad %420 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
					                                       f32_3 %515 = OpFAdd %512 %514 
					                                       f32_4 %516 = OpLoad %498 
					                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
					                                                      OpStore %498 %517 
					                                Private f32* %518 = OpAccessChain %32 %14 
					                                         f32 %519 = OpLoad %518 
					                                         f32 %520 = OpFNegate %519 
					                                         f32 %521 = OpFMul %520 %149 
					                                         f32 %522 = OpLoad %281 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %361 %14 
					                                                      OpStore %524 %523 
					                                Private f32* %525 = OpAccessChain %32 %14 
					                                         f32 %526 = OpLoad %525 
					                                         f32 %527 = OpFMul %526 %149 
					                                         f32 %528 = OpLoad %281 
					                                         f32 %529 = OpFAdd %527 %528 
					                                                      OpStore %281 %529 
					                                         f32 %530 = OpLoad %281 
					                                         f32 %531 = OpExtInst %1 43 %530 %45 %33 
					                                                      OpStore %281 %531 
					                                Uniform f32* %533 = OpAccessChain %23 %532 
					                                         f32 %534 = OpLoad %533 
					                                Uniform f32* %535 = OpAccessChain %23 %350 
					                                         f32 %536 = OpLoad %535 
					                                         f32 %537 = OpFMul %534 %536 
					                                Private f32* %538 = OpAccessChain %32 %14 
					                                                      OpStore %538 %537 
					                                Private f32* %539 = OpAccessChain %32 %14 
					                                         f32 %540 = OpLoad %539 
					                                  Input f32* %541 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %542 = OpLoad %541 
					                                         f32 %543 = OpFMul %540 %542 
					                                Private f32* %544 = OpAccessChain %169 %14 
					                                                      OpStore %544 %543 
					                                Private f32* %545 = OpAccessChain %32 %14 
					                                         f32 %546 = OpLoad %545 
					                                  Input f32* %547 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %548 = OpLoad %547 
					                                         f32 %549 = OpFMul %546 %548 
					                                         f32 %550 = OpFAdd %549 %33 
					                                Private f32* %551 = OpAccessChain %373 %14 
					                                                      OpStore %551 %550 
					                                Private f32* %552 = OpAccessChain %169 %14 
					                                         f32 %553 = OpLoad %552 
					                                         f32 %554 = OpFMul %553 %149 
					                                Private f32* %555 = OpAccessChain %361 %14 
					                                         f32 %556 = OpLoad %555 
					                                         f32 %557 = OpFAdd %554 %556 
					                                Private f32* %558 = OpAccessChain %361 %14 
					                                                      OpStore %558 %557 
					                                Private f32* %559 = OpAccessChain %361 %14 
					                                         f32 %560 = OpLoad %559 
					                                Private f32* %561 = OpAccessChain %373 %14 
					                                         f32 %562 = OpLoad %561 
					                                         f32 %563 = OpFDiv %560 %562 
					                                Private f32* %564 = OpAccessChain %361 %14 
					                                                      OpStore %564 %563 
					                                Private f32* %565 = OpAccessChain %361 %14 
					                                         f32 %566 = OpLoad %565 
					                                         f32 %567 = OpExtInst %1 43 %566 %45 %33 
					                                Private f32* %568 = OpAccessChain %361 %14 
					                                                      OpStore %568 %567 
					                                Private f32* %569 = OpAccessChain %361 %14 
					                                         f32 %570 = OpLoad %569 
					                                         f32 %571 = OpFNegate %570 
					                                         f32 %572 = OpFAdd %571 %33 
					                                Private f32* %573 = OpAccessChain %361 %14 
					                                                      OpStore %573 %572 
					                                       f32_4 %575 = OpLoad %498 
					                                       f32_4 %576 = OpLoad %361 
					                                       f32_4 %577 = OpVectorShuffle %576 %576 0 0 0 0 
					                                       f32_4 %578 = OpFMul %575 %577 
					                                                      OpStore %574 %578 
					                                Uniform f32* %581 = OpAccessChain %23 %580 
					                                         f32 %582 = OpLoad %581 
					                                         f32 %583 = OpFNegate %582 
					                                Uniform f32* %585 = OpAccessChain %23 %584 
					                                         f32 %586 = OpLoad %585 
					                                         f32 %587 = OpFAdd %583 %586 
					                                Private f32* %588 = OpAccessChain %579 %14 
					                                                      OpStore %588 %587 
					                                         f32 %589 = OpLoad %281 
					                                Private f32* %590 = OpAccessChain %579 %14 
					                                         f32 %591 = OpLoad %590 
					                                         f32 %592 = OpFMul %589 %591 
					                                Uniform f32* %593 = OpAccessChain %23 %580 
					                                         f32 %594 = OpLoad %593 
					                                         f32 %595 = OpFAdd %592 %594 
					                                Private f32* %596 = OpAccessChain %579 %14 
					                                                      OpStore %596 %595 
					                         read_only Texture2D %599 = OpLoad %598 
					                                     sampler %601 = OpLoad %600 
					                  read_only Texture2DSampled %602 = OpSampledImage %599 %601 
					                                       f32_4 %603 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
					                                       f32_4 %605 = OpImageSampleImplicitLod %602 %604 
					                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 3 
					                                                      OpStore %597 %606 
					                                       f32_3 %607 = OpLoad %597 
					                                       f32_2 %608 = OpVectorShuffle %607 %607 0 0 
					                                       f32_3 %609 = OpLoad %597 
					                                       f32_2 %610 = OpVectorShuffle %609 %609 2 2 
					                                         f32 %611 = OpDot %608 %610 
					                                Private f32* %612 = OpAccessChain %361 %14 
					                                                      OpStore %612 %611 
					                                Private f32* %613 = OpAccessChain %597 %94 
					                                         f32 %614 = OpLoad %613 
					                                Private f32* %615 = OpAccessChain %597 %94 
					                                         f32 %616 = OpLoad %615 
					                                         f32 %617 = OpFAdd %614 %616 
					                                Private f32* %618 = OpAccessChain %361 %94 
					                                                      OpStore %618 %617 
					                                       f32_4 %619 = OpLoad %361 
					                                       f32_2 %620 = OpVectorShuffle %619 %619 0 1 
					                                       f32_2 %622 = OpFAdd %620 %621 
					                                       f32_4 %623 = OpLoad %361 
					                                       f32_4 %624 = OpVectorShuffle %623 %622 4 5 2 3 
					                                                      OpStore %361 %624 
					                                       f32_4 %626 = OpLoad %361 
					                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
					                                       f32_4 %628 = OpLoad %361 
					                                       f32_2 %629 = OpVectorShuffle %628 %628 0 1 
					                                         f32 %630 = OpDot %627 %629 
					                                                      OpStore %625 %630 
					                                         f32 %631 = OpLoad %625 
					                                         f32 %632 = OpExtInst %1 37 %631 %33 
					                                                      OpStore %625 %632 
					                                         f32 %633 = OpLoad %625 
					                                         f32 %634 = OpFNegate %633 
					                                         f32 %635 = OpFAdd %634 %33 
					                                                      OpStore %625 %635 
					                                         f32 %636 = OpLoad %625 
					                                         f32 %637 = OpExtInst %1 31 %636 
					                                Private f32* %638 = OpAccessChain %361 %46 
					                                                      OpStore %638 %637 
					                                       f32_4 %639 = OpLoad %361 
					                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
					                                       f32_3 %641 = OpLoad %579 
					                                       f32_3 %642 = OpVectorShuffle %641 %641 0 0 0 
					                                       f32_3 %643 = OpFMul %640 %642 
					                                       f32_3 %646 = OpFAdd %643 %645 
					                                                      OpStore %579 %646 
					                                       f32_4 %647 = OpLoad %574 
					                                       f32_3 %648 = OpVectorShuffle %647 %647 3 3 3 
					                                       f32_3 %649 = OpLoad %579 
					                                       f32_3 %650 = OpFMul %648 %649 
					                                       f32_3 %652 = OpFAdd %650 %651 
					                                                      OpStore %579 %652 
					                                       f32_4 %653 = OpLoad %9 
					                                       f32_3 %654 = OpVectorShuffle %653 %653 0 1 2 
					                                       f32_3 %655 = OpLoad %579 
					                                       f32_3 %656 = OpFNegate %655 
					                                       f32_3 %657 = OpFAdd %654 %656 
					                                       f32_4 %658 = OpLoad %9 
					                                       f32_4 %659 = OpVectorShuffle %658 %657 4 5 6 3 
					                                                      OpStore %9 %659 
					                                       f32_4 %660 = OpLoad %9 
					                                       f32_3 %661 = OpVectorShuffle %660 %660 0 1 2 
					                                       f32_4 %662 = OpLoad %9 
					                                       f32_3 %663 = OpVectorShuffle %662 %662 0 1 2 
					                                         f32 %664 = OpDot %661 %663 
					                                Private f32* %665 = OpAccessChain %579 %14 
					                                                      OpStore %665 %664 
					                                Private f32* %666 = OpAccessChain %579 %14 
					                                         f32 %667 = OpLoad %666 
					                                         f32 %668 = OpExtInst %1 32 %667 
					                                Private f32* %669 = OpAccessChain %579 %14 
					                                                      OpStore %669 %668 
					                                       f32_4 %670 = OpLoad %9 
					                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
					                                       f32_3 %672 = OpLoad %579 
					                                       f32_3 %673 = OpVectorShuffle %672 %672 0 0 0 
					                                       f32_3 %674 = OpFMul %671 %673 
					                                       f32_4 %675 = OpLoad %9 
					                                       f32_4 %676 = OpVectorShuffle %675 %674 4 5 6 3 
					                                                      OpStore %9 %676 
					                                       f32_3 %679 = OpLoad vs_TEXCOORD2 
					                                       f32_4 %680 = OpLoad %9 
					                                       f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
					                                       f32_3 %682 = OpFNegate %681 
					                                         f32 %683 = OpDot %679 %682 
					                                Private f32* %684 = OpAccessChain %361 %14 
					                                                      OpStore %684 %683 
					                                       f32_3 %686 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %687 = OpLoad %9 
					                                       f32_3 %688 = OpVectorShuffle %687 %687 0 1 2 
					                                       f32_3 %689 = OpFNegate %688 
					                                         f32 %690 = OpDot %686 %689 
					                                Private f32* %691 = OpAccessChain %361 %94 
					                                                      OpStore %691 %690 
					                                       f32_3 %693 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %694 = OpLoad %9 
					                                       f32_3 %695 = OpVectorShuffle %694 %694 0 1 2 
					                                       f32_3 %696 = OpFNegate %695 
					                                         f32 %697 = OpDot %693 %696 
					                                Private f32* %698 = OpAccessChain %361 %46 
					                                                      OpStore %698 %697 
					                                       f32_4 %700 = OpLoad %361 
					                                       f32_3 %701 = OpVectorShuffle %700 %700 0 1 2 
					                                       f32_4 %702 = OpLoad %361 
					                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
					                                         f32 %704 = OpDot %701 %703 
					                                Private f32* %705 = OpAccessChain %699 %14 
					                                                      OpStore %705 %704 
					                                Private f32* %706 = OpAccessChain %699 %14 
					                                         f32 %707 = OpLoad %706 
					                                         f32 %708 = OpExtInst %1 32 %707 
					                                Private f32* %709 = OpAccessChain %699 %14 
					                                                      OpStore %709 %708 
					                                       f32_3 %710 = OpLoad %699 
					                                       f32_3 %711 = OpVectorShuffle %710 %710 0 0 0 
					                                       f32_4 %712 = OpLoad %361 
					                                       f32_3 %713 = OpVectorShuffle %712 %712 0 1 2 
					                                       f32_3 %714 = OpFMul %711 %713 
					                                                      OpStore %699 %714 
					                                       f32_3 %716 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %717 = OpFNegate %716 
					                              Uniform f32_4* %719 = OpAccessChain %23 %718 
					                                       f32_4 %720 = OpLoad %719 
					                                       f32_3 %721 = OpVectorShuffle %720 %720 0 1 2 
					                                       f32_3 %722 = OpFAdd %717 %721 
					                                                      OpStore %579 %722 
					                                       f32_3 %724 = OpLoad %579 
					                                       f32_3 %725 = OpLoad %579 
					                                         f32 %726 = OpDot %724 %725 
					                                                      OpStore %723 %726 
					                                         f32 %727 = OpLoad %723 
					                                         f32 %728 = OpExtInst %1 32 %727 
					                                                      OpStore %723 %728 
					                                         f32 %729 = OpLoad %723 
					                                       f32_3 %730 = OpCompositeConstruct %729 %729 %729 
					                                       f32_3 %731 = OpLoad %579 
					                                       f32_3 %732 = OpFMul %730 %731 
					                                                      OpStore %579 %732 
					                                       f32_3 %734 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %735 = OpFNegate %734 
					                              Uniform f32_3* %738 = OpAccessChain %23 %736 
					                                       f32_3 %739 = OpLoad %738 
					                                       f32_3 %740 = OpFAdd %735 %739 
					                                                      OpStore %733 %740 
					                                       f32_3 %741 = OpLoad %733 
					                                       f32_3 %742 = OpLoad %733 
					                                         f32 %743 = OpDot %741 %742 
					                                                      OpStore %723 %743 
					                                         f32 %744 = OpLoad %723 
					                                         f32 %745 = OpExtInst %1 32 %744 
					                                                      OpStore %723 %745 
					                                       f32_3 %746 = OpLoad %733 
					                                         f32 %747 = OpLoad %723 
					                                       f32_3 %748 = OpCompositeConstruct %747 %747 %747 
					                                       f32_3 %749 = OpFMul %746 %748 
					                                       f32_3 %750 = OpLoad %579 
					                                       f32_3 %751 = OpFAdd %749 %750 
					                                       f32_4 %752 = OpLoad %361 
					                                       f32_4 %753 = OpVectorShuffle %752 %751 4 5 6 3 
					                                                      OpStore %361 %753 
					                                       f32_3 %754 = OpLoad %699 
					                                       f32_3 %755 = OpLoad %579 
					                                         f32 %756 = OpDot %754 %755 
					                                Private f32* %757 = OpAccessChain %361 %76 
					                                                      OpStore %757 %756 
					                                       f32_4 %758 = OpLoad %361 
					                                       f32_3 %759 = OpVectorShuffle %758 %758 0 1 2 
					                                       f32_4 %760 = OpLoad %361 
					                                       f32_3 %761 = OpVectorShuffle %760 %760 0 1 2 
					                                         f32 %762 = OpDot %759 %761 
					                                Private f32* %763 = OpAccessChain %474 %14 
					                                                      OpStore %763 %762 
					                                Private f32* %764 = OpAccessChain %474 %14 
					                                         f32 %765 = OpLoad %764 
					                                         f32 %766 = OpExtInst %1 32 %765 
					                                Private f32* %767 = OpAccessChain %474 %14 
					                                                      OpStore %767 %766 
					                                       f32_4 %768 = OpLoad %361 
					                                       f32_3 %769 = OpVectorShuffle %768 %768 0 1 2 
					                                       f32_4 %770 = OpLoad %474 
					                                       f32_3 %771 = OpVectorShuffle %770 %770 0 0 0 
					                                       f32_3 %772 = OpFMul %769 %771 
					                                       f32_4 %773 = OpLoad %361 
					                                       f32_4 %774 = OpVectorShuffle %773 %772 4 5 6 3 
					                                                      OpStore %361 %774 
					                                       f32_3 %775 = OpLoad %699 
					                                       f32_4 %776 = OpLoad %361 
					                                       f32_3 %777 = OpVectorShuffle %776 %776 0 1 2 
					                                         f32 %778 = OpDot %775 %777 
					                                Private f32* %779 = OpAccessChain %361 %14 
					                                                      OpStore %779 %778 
					                                       f32_4 %780 = OpLoad %361 
					                                       f32_2 %781 = OpVectorShuffle %780 %780 0 3 
					                                       f32_2 %783 = OpExtInst %1 40 %781 %782 
					                                       f32_4 %784 = OpLoad %361 
					                                       f32_4 %785 = OpVectorShuffle %784 %783 4 1 2 5 
					                                                      OpStore %361 %785 
					                                Private f32* %786 = OpAccessChain %361 %14 
					                                         f32 %787 = OpLoad %786 
					                                         f32 %788 = OpExtInst %1 30 %787 
					                                Private f32* %789 = OpAccessChain %699 %14 
					                                                      OpStore %789 %788 
					                                Uniform f32* %792 = OpAccessChain %23 %791 
					                                         f32 %793 = OpLoad %792 
					                                         f32 %794 = OpFNegate %793 
					                                Uniform f32* %796 = OpAccessChain %23 %795 
					                                         f32 %797 = OpLoad %796 
					                                         f32 %798 = OpFAdd %794 %797 
					                                                      OpStore %790 %798 
					                                         f32 %800 = OpLoad %281 
					                                         f32 %801 = OpLoad %790 
					                                         f32 %802 = OpFMul %800 %801 
					                                Uniform f32* %803 = OpAccessChain %23 %791 
					                                         f32 %804 = OpLoad %803 
					                                         f32 %805 = OpFAdd %802 %804 
					                                Private f32* %806 = OpAccessChain %799 %14 
					                                                      OpStore %806 %805 
					                                Private f32* %807 = OpAccessChain %799 %14 
					                                         f32 %808 = OpLoad %807 
					                                         f32 %810 = OpFMul %808 %809 
					                                Private f32* %811 = OpAccessChain %361 %14 
					                                                      OpStore %811 %810 
					                                Private f32* %812 = OpAccessChain %699 %14 
					                                         f32 %813 = OpLoad %812 
					                                Private f32* %814 = OpAccessChain %361 %14 
					                                         f32 %815 = OpLoad %814 
					                                         f32 %816 = OpFMul %813 %815 
					                                Private f32* %817 = OpAccessChain %699 %14 
					                                                      OpStore %817 %816 
					                                Private f32* %818 = OpAccessChain %699 %14 
					                                         f32 %819 = OpLoad %818 
					                                         f32 %820 = OpExtInst %1 29 %819 
					                                Private f32* %821 = OpAccessChain %699 %14 
					                                                      OpStore %821 %820 
					                                       f32_3 %822 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %823 = OpVectorShuffle %822 %822 1 1 1 
					                              Uniform f32_4* %825 = OpAccessChain %23 %824 %736 
					                                       f32_4 %826 = OpLoad %825 
					                                       f32_3 %827 = OpVectorShuffle %826 %826 0 1 2 
					                                       f32_3 %828 = OpFMul %823 %827 
					                                                      OpStore %799 %828 
					                              Uniform f32_4* %829 = OpAccessChain %23 %824 %395 
					                                       f32_4 %830 = OpLoad %829 
					                                       f32_3 %831 = OpVectorShuffle %830 %830 0 1 2 
					                                       f32_3 %832 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %833 = OpVectorShuffle %832 %832 0 0 0 
					                                       f32_3 %834 = OpFMul %831 %833 
					                                       f32_3 %835 = OpLoad %799 
					                                       f32_3 %836 = OpFAdd %834 %835 
					                                                      OpStore %799 %836 
					                              Uniform f32_4* %837 = OpAccessChain %23 %824 %718 
					                                       f32_4 %838 = OpLoad %837 
					                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
					                                       f32_3 %840 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %841 = OpVectorShuffle %840 %840 2 2 2 
					                                       f32_3 %842 = OpFMul %839 %841 
					                                       f32_3 %843 = OpLoad %799 
					                                       f32_3 %844 = OpFAdd %842 %843 
					                                                      OpStore %799 %844 
					                                       f32_3 %845 = OpLoad %799 
					                              Uniform f32_4* %847 = OpAccessChain %23 %824 %846 
					                                       f32_4 %848 = OpLoad %847 
					                                       f32_3 %849 = OpVectorShuffle %848 %848 0 1 2 
					                                       f32_3 %850 = OpFAdd %845 %849 
					                                                      OpStore %799 %850 
					                                       f32_3 %851 = OpLoad %799 
					                                       f32_3 %852 = OpLoad %799 
					                                         f32 %853 = OpDot %851 %852 
					                                Private f32* %854 = OpAccessChain %799 %14 
					                                                      OpStore %854 %853 
					                         read_only Texture2D %856 = OpLoad %855 
					                                     sampler %858 = OpLoad %857 
					                  read_only Texture2DSampled %859 = OpSampledImage %856 %858 
					                                       f32_3 %860 = OpLoad %799 
					                                       f32_2 %861 = OpVectorShuffle %860 %860 0 0 
					                                       f32_4 %862 = OpImageSampleImplicitLod %859 %861 
					                                         f32 %863 = OpCompositeExtract %862 0 
					                                Private f32* %864 = OpAccessChain %799 %14 
					                                                      OpStore %864 %863 
					                                       f32_3 %865 = OpLoad %799 
					                                       f32_3 %866 = OpVectorShuffle %865 %865 0 0 0 
					                              Uniform f32_4* %867 = OpAccessChain %23 %846 
					                                       f32_4 %868 = OpLoad %867 
					                                       f32_3 %869 = OpVectorShuffle %868 %868 0 1 2 
					                                       f32_3 %870 = OpFMul %866 %869 
					                                       f32_4 %871 = OpLoad %361 
					                                       f32_4 %872 = OpVectorShuffle %871 %870 4 5 6 3 
					                                                      OpStore %361 %872 
					                                       f32_4 %873 = OpLoad %361 
					                                       f32_3 %874 = OpVectorShuffle %873 %873 0 1 2 
					                              Uniform f32_4* %876 = OpAccessChain %23 %875 
					                                       f32_4 %877 = OpLoad %876 
					                                       f32_3 %878 = OpVectorShuffle %877 %877 0 1 2 
					                                       f32_3 %879 = OpFMul %874 %878 
					                                       f32_4 %880 = OpLoad %474 
					                                       f32_4 %881 = OpVectorShuffle %880 %879 4 5 6 3 
					                                                      OpStore %474 %881 
					                                       f32_3 %882 = OpLoad %699 
					                                       f32_3 %883 = OpVectorShuffle %882 %882 0 0 0 
					                                       f32_4 %884 = OpLoad %474 
					                                       f32_3 %885 = OpVectorShuffle %884 %884 0 1 2 
					                                       f32_3 %886 = OpFMul %883 %885 
					                                                      OpStore %699 %886 
					                                Private f32* %887 = OpAccessChain %574 %76 
					                                         f32 %888 = OpLoad %887 
					                                         f32 %890 = OpExtInst %1 40 %888 %889 
					                                                      OpStore %334 %890 
					                                       f32_4 %891 = OpLoad %574 
					                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
					                                         f32 %893 = OpLoad %334 
					                                       f32_3 %894 = OpCompositeConstruct %893 %893 %893 
					                                       f32_3 %895 = OpFDiv %892 %894 
					                                       f32_4 %896 = OpLoad %459 
					                                       f32_4 %897 = OpVectorShuffle %896 %895 4 5 6 3 
					                                                      OpStore %459 %897 
					                                Private f32* %900 = OpAccessChain %574 %76 
					                                         f32 %901 = OpLoad %900 
					                                 Output f32* %903 = OpAccessChain %899 %76 
					                                                      OpStore %903 %901 
					                                       f32_4 %904 = OpLoad %361 
					                                       f32_3 %905 = OpVectorShuffle %904 %904 0 1 2 
					                                       f32_4 %906 = OpLoad %459 
					                                       f32_3 %907 = OpVectorShuffle %906 %906 0 1 2 
					                                       f32_3 %908 = OpFMul %905 %907 
					                                       f32_4 %909 = OpLoad %361 
					                                       f32_4 %910 = OpVectorShuffle %909 %908 4 5 6 3 
					                                                      OpStore %361 %910 
					                                       f32_4 %911 = OpLoad %361 
					                                       f32_3 %912 = OpVectorShuffle %911 %911 0 1 2 
					                                       f32_4 %913 = OpLoad %361 
					                                       f32_3 %914 = OpVectorShuffle %913 %913 3 3 3 
					                                       f32_3 %915 = OpFMul %912 %914 
					                                       f32_3 %916 = OpLoad %699 
					                                       f32_3 %917 = OpFAdd %915 %916 
					                                                      OpStore %699 %917 
					                                       f32_3 %918 = OpLoad %699 
					                                       f32_4 %919 = OpLoad %899 
					                                       f32_4 %920 = OpVectorShuffle %919 %918 4 5 6 3 
					                                                      OpStore %899 %920 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat12);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat12 = u_xlat2.y * unity_MatrixVP[1].w;
					    u_xlat12 = unity_MatrixVP[0].w * u_xlat2.x + u_xlat12;
					    u_xlat12 = unity_MatrixVP[2].w * u_xlat2.z + u_xlat12;
					    u_xlat12 = unity_MatrixVP[3].w * u_xlat2.w + u_xlat12;
					    u_xlat2.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat2.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat12) / u_xlat2.xy;
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat13 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat13 = u_xlat12 * 1.5;
					    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat12 = u_xlat12 * 1.5 + (-u_xlat13);
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati4 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati4) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat0.yzx, u_xlat1.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat1.x) * u_xlat12 + u_xlat13;
					    u_xlatb12 = 0.0>=in_TEXCOORD1.y;
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat1.x = (-_WeightNormal) + _WeightBold;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _WeightNormal;
					    u_xlat12 = u_xlat12 * 0.25 + _FaceDilate;
					    u_xlat12 = u_xlat12 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat12 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat4 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat4) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	float _FaceDilate;
					uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _FaceTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat12);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat12 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
					    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat12;
					    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat12;
					    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat12;
					    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat12) / u_xlat2.xy;
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat13 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat13 = u_xlat12 * 1.5;
					    u_xlat2.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat13 = u_xlat13 * u_xlat2.x;
					    u_xlat12 = u_xlat12 * 1.5 + (-u_xlat13);
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati4 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati4) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat0.yzx, u_xlat1.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat1.x) * u_xlat12 + u_xlat13;
					    u_xlatb12 = 0.0>=in_TEXCOORD1.y;
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat1.x = (-_WeightNormal) + _WeightBold;
					    u_xlat12 = u_xlat12 * u_xlat1.x + _WeightNormal;
					    u_xlat12 = u_xlat12 * 0.25 + _FaceDilate;
					    u_xlat12 = u_xlat12 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat12 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat4 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat4) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat2.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _SpecColor;
					uniform 	float _FaceUVSpeedX;
					uniform 	float _FaceUVSpeedY;
					uniform 	vec4 _FaceColor;
					uniform 	float _OutlineSoftness;
					uniform 	float _OutlineUVSpeedX;
					uniform 	float _OutlineUVSpeedY;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _Bevel;
					uniform 	float _BevelOffset;
					uniform 	float _BevelWidth;
					uniform 	float _BevelClamp;
					uniform 	float _BevelRoundness;
					uniform 	float _BumpOutline;
					uniform 	float _BumpFace;
					uniform 	float _ShaderFlags;
					uniform 	float _ScaleRatioA;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _FaceShininess;
					uniform 	float _OutlineShininess;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _FaceTex;
					UNITY_LOCATION(2) uniform  sampler2D _OutlineTex;
					UNITY_LOCATION(3) uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10 = u_xlat13 * u_xlat10 + _FaceShininess;
					    u_xlat10 = u_xlat10 * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat2.x = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat2.xxx;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 628
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %105 %117 %143 %158 %170 %341 %415 %441 %490 %494 %576 %580 %596 %597 %614 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpDecorate %22 ArrayStride 22 
					                                                      OpMemberDecorate %23 0 Offset 23 
					                                                      OpMemberDecorate %23 1 Offset 23 
					                                                      OpMemberDecorate %23 2 Offset 23 
					                                                      OpMemberDecorate %23 3 Offset 23 
					                                                      OpMemberDecorate %23 4 Offset 23 
					                                                      OpMemberDecorate %23 5 Offset 23 
					                                                      OpMemberDecorate %23 6 Offset 23 
					                                                      OpMemberDecorate %23 7 Offset 23 
					                                                      OpMemberDecorate %23 8 Offset 23 
					                                                      OpMemberDecorate %23 9 Offset 23 
					                                                      OpMemberDecorate %23 10 Offset 23 
					                                                      OpMemberDecorate %23 11 Offset 23 
					                                                      OpMemberDecorate %23 12 Offset 23 
					                                                      OpMemberDecorate %23 13 Offset 23 
					                                                      OpMemberDecorate %23 14 Offset 23 
					                                                      OpMemberDecorate %23 15 Offset 23 
					                                                      OpMemberDecorate %23 16 Offset 23 
					                                                      OpMemberDecorate %23 17 Offset 23 
					                                                      OpMemberDecorate %23 18 Offset 23 
					                                                      OpMemberDecorate %23 19 Offset 23 
					                                                      OpMemberDecorate %23 20 Offset 23 
					                                                      OpDecorate %23 Block 
					                                                      OpDecorate %25 DescriptorSet 25 
					                                                      OpDecorate %25 Binding 25 
					                                                      OpMemberDecorate %103 0 BuiltIn 103 
					                                                      OpMemberDecorate %103 1 BuiltIn 103 
					                                                      OpMemberDecorate %103 2 BuiltIn 103 
					                                                      OpDecorate %103 Block 
					                                                      OpDecorate %117 Location 117 
					                                                      OpDecorate vs_TEXCOORD0 Location 143 
					                                                      OpDecorate vs_TEXCOORD1 Location 158 
					                                                      OpDecorate %170 Location 170 
					                                                      OpDecorate %341 Location 341 
					                                                      OpDecorate vs_TEXCOORD5 Location 415 
					                                                      OpDecorate vs_TEXCOORD6 Location 441 
					                                                      OpDecorate vs_TEXCOORD2 Location 490 
					                                                      OpDecorate %494 Location 494 
					                                                      OpDecorate vs_TEXCOORD3 Location 576 
					                                                      OpDecorate vs_TEXCOORD4 Location 580 
					                                                      OpDecorate %596 RelaxedPrecision 
					                                                      OpDecorate %596 Location 596 
					                                                      OpDecorate %597 RelaxedPrecision 
					                                                      OpDecorate %597 Location 597 
					                                                      OpDecorate %598 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 614 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %13 = OpTypeVector %6 2 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeArray %10 %17 
					                                              %23 = OpTypeStruct %7 %10 %18 %19 %10 %20 %21 %6 %22 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %10 %10 
					                                              %24 = OpTypePointer Uniform %23 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %25 = OpVariable Uniform 
					                                              %26 = OpTypeInt 32 1 
					                                          i32 %27 = OpConstant 12 
					                                              %28 = OpTypePointer Uniform %6 
					                                          i32 %31 = OpConstant 13 
					                                              %38 = OpTypePointer Private %10 
					                               Private f32_4* %39 = OpVariable Private 
					                                          i32 %42 = OpConstant 2 
					                                          i32 %43 = OpConstant 1 
					                                              %44 = OpTypePointer Uniform %10 
					                                          i32 %48 = OpConstant 0 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %65 = OpConstant 3 
					                               Private f32_4* %80 = OpVariable Private 
					                                          i32 %83 = OpConstant 6 
					                                         u32 %101 = OpConstant 1 
					                                             %102 = OpTypeArray %6 %101 
					                                             %103 = OpTypeStruct %10 %6 %102 
					                                             %104 = OpTypePointer Output %103 
					        Output struct {f32_4; f32; f32[1];}* %105 = OpVariable Output 
					                                             %113 = OpTypePointer Output %10 
					                                             %115 = OpTypePointer Private %6 
					                                Private f32* %116 = OpVariable Private 
					                                Input f32_4* %117 = OpVariable Input 
					                                         u32 %118 = OpConstant 0 
					                                             %119 = OpTypePointer Input %6 
					                                         f32 %122 = OpConstant 3,674022E-40 
					                                         f32 %130 = OpConstant 3,674022E-40 
					                                         f32 %138 = OpConstant 3,674022E-40 
					                                       f32_2 %139 = OpConstantComposite %138 %138 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                                         i32 %146 = OpConstant 19 
					                                             %157 = OpTypePointer Output %13 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                         i32 %161 = OpConstant 20 
					                                Input f32_4* %170 = OpVariable Input 
					                                         i32 %173 = OpConstant 18 
					                                         u32 %186 = OpConstant 3 
					                                         u32 %199 = OpConstant 2 
					                                         i32 %215 = OpConstant 5 
					                                         i32 %236 = OpConstant 15 
					                                         i32 %239 = OpConstant 16 
					                                Private f32* %260 = OpVariable Private 
					                                         i32 %264 = OpConstant 14 
					                                         f32 %272 = OpConstant 3,674022E-40 
					                                         i32 %274 = OpConstant 17 
					                                         f32 %278 = OpConstant 3,674022E-40 
					                                             %290 = OpTypePointer Uniform %7 
					                                             %340 = OpTypePointer Input %7 
					                                Input f32_3* %341 = OpVariable Input 
					                                             %346 = OpTypePointer Private %26 
					                                Private i32* %347 = OpVariable Private 
					                                         f32 %348 = OpConstant 3,674022E-40 
					                                             %351 = OpTypeBool 
					                                         u32 %353 = OpConstant 4294967295 
					                                Private i32* %356 = OpVariable Private 
					                                             %414 = OpTypePointer Output %7 
					                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
					                       Output f32_2* vs_TEXCOORD6 = OpVariable Output 
					                                             %449 = OpTypePointer Output %6 
					                                             %451 = OpTypePointer Private %351 
					                               Private bool* %452 = OpVariable Private 
					                                         i32 %458 = OpConstant 9 
					                                         i32 %462 = OpConstant 10 
					                                         f32 %475 = OpConstant 3,674022E-40 
					                                         i32 %477 = OpConstant 7 
					                                         i32 %482 = OpConstant 11 
					                                         f32 %487 = OpConstant 3,674022E-40 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_4* %494 = OpVariable Input 
					                                Private f32* %556 = OpVariable Private 
					                                         i32 %559 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %596 = OpVariable Output 
					                                Input f32_4* %597 = OpVariable Input 
					                                         i32 %601 = OpConstant 8 
					                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %14 = OpLoad %12 
					                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
					                                 Uniform f32* %29 = OpAccessChain %25 %27 
					                                          f32 %30 = OpLoad %29 
					                                 Uniform f32* %32 = OpAccessChain %25 %31 
					                                          f32 %33 = OpLoad %32 
					                                        f32_2 %34 = OpCompositeConstruct %30 %33 
					                                        f32_2 %35 = OpFAdd %15 %34 
					                                        f32_3 %36 = OpLoad %9 
					                                        f32_3 %37 = OpVectorShuffle %36 %35 3 4 2 
					                                                      OpStore %9 %37 
					                                        f32_3 %40 = OpLoad %9 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
					                               Uniform f32_4* %45 = OpAccessChain %25 %42 %43 
					                                        f32_4 %46 = OpLoad %45 
					                                        f32_4 %47 = OpFMul %41 %46 
					                                                      OpStore %39 %47 
					                               Uniform f32_4* %49 = OpAccessChain %25 %42 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_3 %51 = OpLoad %9 
					                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
					                                        f32_4 %53 = OpFMul %50 %52 
					                                        f32_4 %54 = OpLoad %39 
					                                        f32_4 %55 = OpFAdd %53 %54 
					                                                      OpStore %39 %55 
					                               Uniform f32_4* %56 = OpAccessChain %25 %42 %42 
					                                        f32_4 %57 = OpLoad %56 
					                                        f32_4 %58 = OpLoad %12 
					                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
					                                        f32_4 %60 = OpFMul %57 %59 
					                                        f32_4 %61 = OpLoad %39 
					                                        f32_4 %62 = OpFAdd %60 %61 
					                                                      OpStore %39 %62 
					                                        f32_4 %64 = OpLoad %39 
					                               Uniform f32_4* %66 = OpAccessChain %25 %42 %65 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_4 %68 = OpFAdd %64 %67 
					                                                      OpStore %63 %68 
					                               Uniform f32_4* %69 = OpAccessChain %25 %42 %65 
					                                        f32_4 %70 = OpLoad %69 
					                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
					                                        f32_4 %72 = OpLoad %12 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
					                                        f32_3 %74 = OpFMul %71 %73 
					                                        f32_4 %75 = OpLoad %39 
					                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
					                                        f32_3 %77 = OpFAdd %74 %76 
					                                        f32_4 %78 = OpLoad %39 
					                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
					                                                      OpStore %39 %79 
					                                        f32_4 %81 = OpLoad %63 
					                                        f32_4 %82 = OpVectorShuffle %81 %81 1 1 1 1 
					                               Uniform f32_4* %84 = OpAccessChain %25 %83 %43 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpFMul %82 %85 
					                                                      OpStore %80 %86 
					                               Uniform f32_4* %87 = OpAccessChain %25 %83 %48 
					                                        f32_4 %88 = OpLoad %87 
					                                        f32_4 %89 = OpLoad %63 
					                                        f32_4 %90 = OpVectorShuffle %89 %89 0 0 0 0 
					                                        f32_4 %91 = OpFMul %88 %90 
					                                        f32_4 %92 = OpLoad %80 
					                                        f32_4 %93 = OpFAdd %91 %92 
					                                                      OpStore %80 %93 
					                               Uniform f32_4* %94 = OpAccessChain %25 %83 %42 
					                                        f32_4 %95 = OpLoad %94 
					                                        f32_4 %96 = OpLoad %63 
					                                        f32_4 %97 = OpVectorShuffle %96 %96 2 2 2 2 
					                                        f32_4 %98 = OpFMul %95 %97 
					                                        f32_4 %99 = OpLoad %80 
					                                       f32_4 %100 = OpFAdd %98 %99 
					                                                      OpStore %80 %100 
					                              Uniform f32_4* %106 = OpAccessChain %25 %83 %65 
					                                       f32_4 %107 = OpLoad %106 
					                                       f32_4 %108 = OpLoad %63 
					                                       f32_4 %109 = OpVectorShuffle %108 %108 3 3 3 3 
					                                       f32_4 %110 = OpFMul %107 %109 
					                                       f32_4 %111 = OpLoad %80 
					                                       f32_4 %112 = OpFAdd %110 %111 
					                               Output f32_4* %114 = OpAccessChain %105 %48 
					                                                      OpStore %114 %112 
					                                  Input f32* %120 = OpAccessChain %117 %118 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %123 = OpFMul %121 %122 
					                                                      OpStore %116 %123 
					                                         f32 %124 = OpLoad %116 
					                                         f32 %125 = OpExtInst %1 8 %124 
					                                Private f32* %126 = OpAccessChain %80 %118 
					                                                      OpStore %126 %125 
					                                Private f32* %127 = OpAccessChain %80 %118 
					                                         f32 %128 = OpLoad %127 
					                                         f32 %129 = OpFNegate %128 
					                                         f32 %131 = OpFMul %129 %130 
					                                  Input f32* %132 = OpAccessChain %117 %118 
					                                         f32 %133 = OpLoad %132 
					                                         f32 %134 = OpFAdd %131 %133 
					                                Private f32* %135 = OpAccessChain %80 %101 
					                                                      OpStore %135 %134 
					                                       f32_4 %136 = OpLoad %80 
					                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
					                                       f32_2 %140 = OpFMul %137 %139 
					                                       f32_4 %141 = OpLoad %80 
					                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 3 
					                                                      OpStore %80 %142 
					                                       f32_4 %144 = OpLoad %80 
					                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
					                              Uniform f32_4* %147 = OpAccessChain %25 %146 
					                                       f32_4 %148 = OpLoad %147 
					                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
					                                       f32_2 %150 = OpFMul %145 %149 
					                              Uniform f32_4* %151 = OpAccessChain %25 %146 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_2 %153 = OpVectorShuffle %152 %152 2 3 
					                                       f32_2 %154 = OpFAdd %150 %153 
					                                       f32_4 %155 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %156 = OpVectorShuffle %155 %154 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %156 
					                                       f32_4 %159 = OpLoad %80 
					                                       f32_2 %160 = OpVectorShuffle %159 %159 0 1 
					                              Uniform f32_4* %162 = OpAccessChain %25 %161 
					                                       f32_4 %163 = OpLoad %162 
					                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
					                                       f32_2 %165 = OpFMul %160 %164 
					                              Uniform f32_4* %166 = OpAccessChain %25 %161 
					                                       f32_4 %167 = OpLoad %166 
					                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
					                                       f32_2 %169 = OpFAdd %165 %168 
					                                                      OpStore vs_TEXCOORD1 %169 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
					                              Uniform f32_4* %174 = OpAccessChain %25 %173 
					                                       f32_4 %175 = OpLoad %174 
					                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
					                                       f32_2 %177 = OpFMul %172 %176 
					                              Uniform f32_4* %178 = OpAccessChain %25 %173 
					                                       f32_4 %179 = OpLoad %178 
					                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
					                                       f32_2 %181 = OpFAdd %177 %180 
					                                       f32_4 %182 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %183 
					                                Private f32* %184 = OpAccessChain %63 %101 
					                                         f32 %185 = OpLoad %184 
					                                Uniform f32* %187 = OpAccessChain %25 %83 %43 %186 
					                                         f32 %188 = OpLoad %187 
					                                         f32 %189 = OpFMul %185 %188 
					                                                      OpStore %116 %189 
					                                Uniform f32* %190 = OpAccessChain %25 %83 %48 %186 
					                                         f32 %191 = OpLoad %190 
					                                Private f32* %192 = OpAccessChain %63 %118 
					                                         f32 %193 = OpLoad %192 
					                                         f32 %194 = OpFMul %191 %193 
					                                         f32 %195 = OpLoad %116 
					                                         f32 %196 = OpFAdd %194 %195 
					                                                      OpStore %116 %196 
					                                Uniform f32* %197 = OpAccessChain %25 %83 %42 %186 
					                                         f32 %198 = OpLoad %197 
					                                Private f32* %200 = OpAccessChain %63 %199 
					                                         f32 %201 = OpLoad %200 
					                                         f32 %202 = OpFMul %198 %201 
					                                         f32 %203 = OpLoad %116 
					                                         f32 %204 = OpFAdd %202 %203 
					                                                      OpStore %116 %204 
					                                Uniform f32* %205 = OpAccessChain %25 %83 %65 %186 
					                                         f32 %206 = OpLoad %205 
					                                Private f32* %207 = OpAccessChain %63 %186 
					                                         f32 %208 = OpLoad %207 
					                                         f32 %209 = OpFMul %206 %208 
					                                         f32 %210 = OpLoad %116 
					                                         f32 %211 = OpFAdd %209 %210 
					                                                      OpStore %116 %211 
					                              Uniform f32_4* %212 = OpAccessChain %25 %43 
					                                       f32_4 %213 = OpLoad %212 
					                                       f32_2 %214 = OpVectorShuffle %213 %213 1 1 
					                              Uniform f32_4* %216 = OpAccessChain %25 %215 %43 
					                                       f32_4 %217 = OpLoad %216 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
					                                       f32_2 %219 = OpFMul %214 %218 
					                                       f32_4 %220 = OpLoad %63 
					                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 2 3 
					                                                      OpStore %63 %221 
					                              Uniform f32_4* %222 = OpAccessChain %25 %215 %48 
					                                       f32_4 %223 = OpLoad %222 
					                                       f32_2 %224 = OpVectorShuffle %223 %223 0 1 
					                              Uniform f32_4* %225 = OpAccessChain %25 %43 
					                                       f32_4 %226 = OpLoad %225 
					                                       f32_2 %227 = OpVectorShuffle %226 %226 0 0 
					                                       f32_2 %228 = OpFMul %224 %227 
					                                       f32_4 %229 = OpLoad %63 
					                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
					                                       f32_2 %231 = OpFAdd %228 %230 
					                                       f32_4 %232 = OpLoad %63 
					                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 2 3 
					                                                      OpStore %63 %233 
					                                       f32_4 %234 = OpLoad %63 
					                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
					                                Uniform f32* %237 = OpAccessChain %25 %236 
					                                         f32 %238 = OpLoad %237 
					                                Uniform f32* %240 = OpAccessChain %25 %239 
					                                         f32 %241 = OpLoad %240 
					                                       f32_2 %242 = OpCompositeConstruct %238 %241 
					                                       f32_2 %243 = OpFMul %235 %242 
					                                       f32_4 %244 = OpLoad %63 
					                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
					                                                      OpStore %63 %245 
					                                         f32 %246 = OpLoad %116 
					                                       f32_2 %247 = OpCompositeConstruct %246 %246 
					                                       f32_4 %248 = OpLoad %63 
					                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
					                                       f32_2 %250 = OpFDiv %247 %249 
					                                       f32_4 %251 = OpLoad %63 
					                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 2 3 
					                                                      OpStore %63 %252 
					                                       f32_4 %253 = OpLoad %63 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
					                                       f32_4 %255 = OpLoad %63 
					                                       f32_2 %256 = OpVectorShuffle %255 %255 0 1 
					                                         f32 %257 = OpDot %254 %256 
					                                                      OpStore %116 %257 
					                                         f32 %258 = OpLoad %116 
					                                         f32 %259 = OpExtInst %1 32 %258 
					                                                      OpStore %116 %259 
					                                  Input f32* %261 = OpAccessChain %117 %101 
					                                         f32 %262 = OpLoad %261 
					                                         f32 %263 = OpExtInst %1 4 %262 
					                                Uniform f32* %265 = OpAccessChain %25 %264 
					                                         f32 %266 = OpLoad %265 
					                                         f32 %267 = OpFMul %263 %266 
					                                                      OpStore %260 %267 
					                                         f32 %268 = OpLoad %116 
					                                         f32 %269 = OpLoad %260 
					                                         f32 %270 = OpFMul %268 %269 
					                                                      OpStore %116 %270 
					                                         f32 %271 = OpLoad %116 
					                                         f32 %273 = OpFMul %271 %272 
					                                                      OpStore %260 %273 
					                                Uniform f32* %275 = OpAccessChain %25 %274 
					                                         f32 %276 = OpLoad %275 
					                                         f32 %277 = OpFNegate %276 
					                                         f32 %279 = OpFAdd %277 %278 
					                                Private f32* %280 = OpAccessChain %63 %118 
					                                                      OpStore %280 %279 
					                                         f32 %281 = OpLoad %260 
					                                Private f32* %282 = OpAccessChain %63 %118 
					                                         f32 %283 = OpLoad %282 
					                                         f32 %284 = OpFMul %281 %283 
					                                                      OpStore %260 %284 
					                                         f32 %285 = OpLoad %116 
					                                         f32 %286 = OpFMul %285 %272 
					                                         f32 %287 = OpLoad %260 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %289 = OpFAdd %286 %288 
					                                                      OpStore %116 %289 
					                              Uniform f32_3* %291 = OpAccessChain %25 %48 
					                                       f32_3 %292 = OpLoad %291 
					                                       f32_3 %293 = OpVectorShuffle %292 %292 1 1 1 
					                              Uniform f32_4* %294 = OpAccessChain %25 %65 %43 
					                                       f32_4 %295 = OpLoad %294 
					                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
					                                       f32_3 %297 = OpFMul %293 %296 
					                                       f32_4 %298 = OpLoad %63 
					                                       f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
					                                                      OpStore %63 %299 
					                              Uniform f32_4* %300 = OpAccessChain %25 %65 %48 
					                                       f32_4 %301 = OpLoad %300 
					                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
					                              Uniform f32_3* %303 = OpAccessChain %25 %48 
					                                       f32_3 %304 = OpLoad %303 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
					                                       f32_3 %306 = OpFMul %302 %305 
					                                       f32_4 %307 = OpLoad %63 
					                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
					                                       f32_3 %309 = OpFAdd %306 %308 
					                                       f32_4 %310 = OpLoad %63 
					                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
					                                                      OpStore %63 %311 
					                              Uniform f32_4* %312 = OpAccessChain %25 %65 %42 
					                                       f32_4 %313 = OpLoad %312 
					                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
					                              Uniform f32_3* %315 = OpAccessChain %25 %48 
					                                       f32_3 %316 = OpLoad %315 
					                                       f32_3 %317 = OpVectorShuffle %316 %316 2 2 2 
					                                       f32_3 %318 = OpFMul %314 %317 
					                                       f32_4 %319 = OpLoad %63 
					                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
					                                       f32_3 %321 = OpFAdd %318 %320 
					                                       f32_4 %322 = OpLoad %63 
					                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
					                                                      OpStore %63 %323 
					                                       f32_4 %324 = OpLoad %63 
					                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
					                              Uniform f32_4* %326 = OpAccessChain %25 %65 %65 
					                                       f32_4 %327 = OpLoad %326 
					                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
					                                       f32_3 %329 = OpFAdd %325 %328 
					                                       f32_4 %330 = OpLoad %63 
					                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
					                                                      OpStore %63 %331 
					                                  Input f32* %332 = OpAccessChain %12 %199 
					                                         f32 %333 = OpLoad %332 
					                                Private f32* %334 = OpAccessChain %9 %199 
					                                                      OpStore %334 %333 
					                                       f32_3 %335 = OpLoad %9 
					                                       f32_3 %336 = OpFNegate %335 
					                                       f32_4 %337 = OpLoad %63 
					                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
					                                       f32_3 %339 = OpFAdd %336 %338 
					                                                      OpStore %9 %339 
					                                       f32_3 %342 = OpLoad %341 
					                                       f32_3 %343 = OpLoad %9 
					                                         f32 %344 = OpDot %342 %343 
					                                Private f32* %345 = OpAccessChain %9 %118 
					                                                      OpStore %345 %344 
					                                Private f32* %349 = OpAccessChain %9 %118 
					                                         f32 %350 = OpLoad %349 
					                                        bool %352 = OpFOrdLessThan %348 %350 
					                                         u32 %354 = OpSelect %352 %353 %118 
					                                         i32 %355 = OpBitcast %354 
					                                                      OpStore %347 %355 
					                                Private f32* %357 = OpAccessChain %9 %118 
					                                         f32 %358 = OpLoad %357 
					                                        bool %359 = OpFOrdLessThan %358 %348 
					                                         u32 %360 = OpSelect %359 %353 %118 
					                                         i32 %361 = OpBitcast %360 
					                                                      OpStore %356 %361 
					                                         i32 %362 = OpLoad %347 
					                                         i32 %363 = OpSNegate %362 
					                                         i32 %364 = OpLoad %356 
					                                         i32 %365 = OpIAdd %363 %364 
					                                                      OpStore %356 %365 
					                                         i32 %366 = OpLoad %356 
					                                         f32 %367 = OpConvertSToF %366 
					                                Private f32* %368 = OpAccessChain %9 %118 
					                                                      OpStore %368 %367 
					                                       f32_3 %369 = OpLoad %9 
					                                       f32_3 %370 = OpVectorShuffle %369 %369 0 0 0 
					                                       f32_3 %371 = OpLoad %341 
					                                       f32_3 %372 = OpFMul %370 %371 
					                                                      OpStore %9 %372 
					                                       f32_3 %373 = OpLoad %9 
					                              Uniform f32_4* %374 = OpAccessChain %25 %65 %48 
					                                       f32_4 %375 = OpLoad %374 
					                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
					                                         f32 %377 = OpDot %373 %376 
					                                Private f32* %378 = OpAccessChain %63 %101 
					                                                      OpStore %378 %377 
					                                       f32_3 %379 = OpLoad %9 
					                              Uniform f32_4* %380 = OpAccessChain %25 %65 %43 
					                                       f32_4 %381 = OpLoad %380 
					                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
					                                         f32 %383 = OpDot %379 %382 
					                                Private f32* %384 = OpAccessChain %63 %199 
					                                                      OpStore %384 %383 
					                                       f32_3 %385 = OpLoad %9 
					                              Uniform f32_4* %386 = OpAccessChain %25 %65 %42 
					                                       f32_4 %387 = OpLoad %386 
					                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
					                                         f32 %389 = OpDot %385 %388 
					                                Private f32* %390 = OpAccessChain %63 %118 
					                                                      OpStore %390 %389 
					                                       f32_4 %391 = OpLoad %63 
					                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
					                                       f32_4 %393 = OpLoad %63 
					                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
					                                         f32 %395 = OpDot %392 %394 
					                                Private f32* %396 = OpAccessChain %9 %118 
					                                                      OpStore %396 %395 
					                                Private f32* %397 = OpAccessChain %9 %118 
					                                         f32 %398 = OpLoad %397 
					                                         f32 %399 = OpExtInst %1 32 %398 
					                                Private f32* %400 = OpAccessChain %9 %118 
					                                                      OpStore %400 %399 
					                                       f32_3 %401 = OpLoad %9 
					                                       f32_3 %402 = OpVectorShuffle %401 %401 0 0 0 
					                                       f32_4 %403 = OpLoad %63 
					                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
					                                       f32_3 %405 = OpFMul %402 %404 
					                                                      OpStore %9 %405 
					                                       f32_4 %406 = OpLoad %39 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFNegate %407 
					                              Uniform f32_3* %409 = OpAccessChain %25 %48 
					                                       f32_3 %410 = OpLoad %409 
					                                       f32_3 %411 = OpFAdd %408 %410 
					                                       f32_4 %412 = OpLoad %63 
					                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 6 3 
					                                                      OpStore %63 %413 
					                                       f32_4 %416 = OpLoad %39 
					                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
					                                                      OpStore vs_TEXCOORD5 %417 
					                                       f32_4 %418 = OpLoad %63 
					                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
					                                       f32_4 %420 = OpLoad %63 
					                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
					                                         f32 %422 = OpDot %419 %421 
					                                Private f32* %423 = OpAccessChain %39 %118 
					                                                      OpStore %423 %422 
					                                Private f32* %424 = OpAccessChain %39 %118 
					                                         f32 %425 = OpLoad %424 
					                                         f32 %426 = OpExtInst %1 32 %425 
					                                Private f32* %427 = OpAccessChain %39 %118 
					                                                      OpStore %427 %426 
					                                       f32_4 %428 = OpLoad %39 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 0 0 
					                                       f32_4 %430 = OpLoad %63 
					                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
					                                       f32_3 %432 = OpFMul %429 %431 
					                                       f32_4 %433 = OpLoad %39 
					                                       f32_4 %434 = OpVectorShuffle %433 %432 4 5 6 3 
					                                                      OpStore %39 %434 
					                                       f32_3 %435 = OpLoad %9 
					                                       f32_3 %436 = OpVectorShuffle %435 %435 1 2 0 
					                                       f32_4 %437 = OpLoad %39 
					                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
					                                         f32 %439 = OpDot %436 %438 
					                                Private f32* %440 = OpAccessChain %39 %118 
					                                                      OpStore %440 %439 
					                                Private f32* %442 = OpAccessChain %39 %118 
					                                         f32 %443 = OpLoad %442 
					                                         f32 %444 = OpExtInst %1 4 %443 
					                                         f32 %445 = OpLoad %116 
					                                         f32 %446 = OpFMul %444 %445 
					                                         f32 %447 = OpLoad %260 
					                                         f32 %448 = OpFAdd %446 %447 
					                                 Output f32* %450 = OpAccessChain vs_TEXCOORD6 %101 
					                                                      OpStore %450 %448 
					                                  Input f32* %453 = OpAccessChain %117 %101 
					                                         f32 %454 = OpLoad %453 
					                                        bool %455 = OpFOrdGreaterThanEqual %348 %454 
					                                                      OpStore %452 %455 
					                                        bool %456 = OpLoad %452 
					                                         f32 %457 = OpSelect %456 %278 %348 
					                                                      OpStore %116 %457 
					                                Uniform f32* %459 = OpAccessChain %25 %458 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpFNegate %460 
					                                Uniform f32* %463 = OpAccessChain %25 %462 
					                                         f32 %464 = OpLoad %463 
					                                         f32 %465 = OpFAdd %461 %464 
					                                Private f32* %466 = OpAccessChain %39 %118 
					                                                      OpStore %466 %465 
					                                         f32 %467 = OpLoad %116 
					                                Private f32* %468 = OpAccessChain %39 %118 
					                                         f32 %469 = OpLoad %468 
					                                         f32 %470 = OpFMul %467 %469 
					                                Uniform f32* %471 = OpAccessChain %25 %458 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %470 %472 
					                                                      OpStore %116 %473 
					                                         f32 %474 = OpLoad %116 
					                                         f32 %476 = OpFMul %474 %475 
					                                Uniform f32* %478 = OpAccessChain %25 %477 
					                                         f32 %479 = OpLoad %478 
					                                         f32 %480 = OpFAdd %476 %479 
					                                                      OpStore %116 %480 
					                                         f32 %481 = OpLoad %116 
					                                Uniform f32* %483 = OpAccessChain %25 %482 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpFMul %481 %484 
					                                                      OpStore %116 %485 
					                                         f32 %486 = OpLoad %116 
					                                         f32 %488 = OpFMul %486 %487 
					                                 Output f32* %489 = OpAccessChain vs_TEXCOORD6 %118 
					                                                      OpStore %489 %488 
					                                Private f32* %491 = OpAccessChain %9 %101 
					                                         f32 %492 = OpLoad %491 
					                                 Output f32* %493 = OpAccessChain vs_TEXCOORD2 %199 
					                                                      OpStore %493 %492 
					                                       f32_4 %495 = OpLoad %494 
					                                       f32_3 %496 = OpVectorShuffle %495 %495 1 1 1 
					                              Uniform f32_4* %497 = OpAccessChain %25 %42 %43 
					                                       f32_4 %498 = OpLoad %497 
					                                       f32_3 %499 = OpVectorShuffle %498 %498 1 2 0 
					                                       f32_3 %500 = OpFMul %496 %499 
					                                       f32_4 %501 = OpLoad %39 
					                                       f32_4 %502 = OpVectorShuffle %501 %500 4 5 6 3 
					                                                      OpStore %39 %502 
					                              Uniform f32_4* %503 = OpAccessChain %25 %42 %48 
					                                       f32_4 %504 = OpLoad %503 
					                                       f32_3 %505 = OpVectorShuffle %504 %504 1 2 0 
					                                       f32_4 %506 = OpLoad %494 
					                                       f32_3 %507 = OpVectorShuffle %506 %506 0 0 0 
					                                       f32_3 %508 = OpFMul %505 %507 
					                                       f32_4 %509 = OpLoad %39 
					                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
					                                       f32_3 %511 = OpFAdd %508 %510 
					                                       f32_4 %512 = OpLoad %39 
					                                       f32_4 %513 = OpVectorShuffle %512 %511 4 5 6 3 
					                                                      OpStore %39 %513 
					                              Uniform f32_4* %514 = OpAccessChain %25 %42 %42 
					                                       f32_4 %515 = OpLoad %514 
					                                       f32_3 %516 = OpVectorShuffle %515 %515 1 2 0 
					                                       f32_4 %517 = OpLoad %494 
					                                       f32_3 %518 = OpVectorShuffle %517 %517 2 2 2 
					                                       f32_3 %519 = OpFMul %516 %518 
					                                       f32_4 %520 = OpLoad %39 
					                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
					                                       f32_3 %522 = OpFAdd %519 %521 
					                                       f32_4 %523 = OpLoad %39 
					                                       f32_4 %524 = OpVectorShuffle %523 %522 4 5 6 3 
					                                                      OpStore %39 %524 
					                                       f32_4 %525 = OpLoad %39 
					                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
					                                       f32_4 %527 = OpLoad %39 
					                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
					                                         f32 %529 = OpDot %526 %528 
					                                                      OpStore %116 %529 
					                                         f32 %530 = OpLoad %116 
					                                         f32 %531 = OpExtInst %1 32 %530 
					                                                      OpStore %116 %531 
					                                         f32 %532 = OpLoad %116 
					                                       f32_3 %533 = OpCompositeConstruct %532 %532 %532 
					                                       f32_4 %534 = OpLoad %39 
					                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
					                                       f32_3 %536 = OpFMul %533 %535 
					                                       f32_4 %537 = OpLoad %39 
					                                       f32_4 %538 = OpVectorShuffle %537 %536 4 5 6 3 
					                                                      OpStore %39 %538 
					                                       f32_3 %539 = OpLoad %9 
					                                       f32_4 %540 = OpLoad %39 
					                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
					                                       f32_3 %542 = OpFMul %539 %541 
					                                       f32_4 %543 = OpLoad %80 
					                                       f32_4 %544 = OpVectorShuffle %543 %542 4 5 6 3 
					                                                      OpStore %80 %544 
					                                       f32_3 %545 = OpLoad %9 
					                                       f32_3 %546 = OpVectorShuffle %545 %545 2 0 1 
					                                       f32_4 %547 = OpLoad %39 
					                                       f32_3 %548 = OpVectorShuffle %547 %547 1 2 0 
					                                       f32_3 %549 = OpFMul %546 %548 
					                                       f32_4 %550 = OpLoad %80 
					                                       f32_3 %551 = OpVectorShuffle %550 %550 0 1 2 
					                                       f32_3 %552 = OpFNegate %551 
					                                       f32_3 %553 = OpFAdd %549 %552 
					                                       f32_4 %554 = OpLoad %80 
					                                       f32_4 %555 = OpVectorShuffle %554 %553 4 5 6 3 
					                                                      OpStore %80 %555 
					                                  Input f32* %557 = OpAccessChain %494 %186 
					                                         f32 %558 = OpLoad %557 
					                                Uniform f32* %560 = OpAccessChain %25 %559 %186 
					                                         f32 %561 = OpLoad %560 
					                                         f32 %562 = OpFMul %558 %561 
					                                                      OpStore %556 %562 
					                                         f32 %563 = OpLoad %556 
					                                       f32_3 %564 = OpCompositeConstruct %563 %563 %563 
					                                       f32_4 %565 = OpLoad %80 
					                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
					                                       f32_3 %567 = OpFMul %564 %566 
					                                       f32_4 %568 = OpLoad %80 
					                                       f32_4 %569 = OpVectorShuffle %568 %567 4 5 6 3 
					                                                      OpStore %80 %569 
					                                Private f32* %570 = OpAccessChain %80 %118 
					                                         f32 %571 = OpLoad %570 
					                                 Output f32* %572 = OpAccessChain vs_TEXCOORD2 %101 
					                                                      OpStore %572 %571 
					                                Private f32* %573 = OpAccessChain %39 %199 
					                                         f32 %574 = OpLoad %573 
					                                 Output f32* %575 = OpAccessChain vs_TEXCOORD2 %118 
					                                                      OpStore %575 %574 
					                                Private f32* %577 = OpAccessChain %9 %199 
					                                         f32 %578 = OpLoad %577 
					                                 Output f32* %579 = OpAccessChain vs_TEXCOORD3 %199 
					                                                      OpStore %579 %578 
					                                Private f32* %581 = OpAccessChain %9 %118 
					                                         f32 %582 = OpLoad %581 
					                                 Output f32* %583 = OpAccessChain vs_TEXCOORD4 %199 
					                                                      OpStore %583 %582 
					                                Private f32* %584 = OpAccessChain %39 %118 
					                                         f32 %585 = OpLoad %584 
					                                 Output f32* %586 = OpAccessChain vs_TEXCOORD3 %118 
					                                                      OpStore %586 %585 
					                                Private f32* %587 = OpAccessChain %39 %101 
					                                         f32 %588 = OpLoad %587 
					                                 Output f32* %589 = OpAccessChain vs_TEXCOORD4 %118 
					                                                      OpStore %589 %588 
					                                Private f32* %590 = OpAccessChain %80 %101 
					                                         f32 %591 = OpLoad %590 
					                                 Output f32* %592 = OpAccessChain vs_TEXCOORD3 %101 
					                                                      OpStore %592 %591 
					                                Private f32* %593 = OpAccessChain %80 %199 
					                                         f32 %594 = OpLoad %593 
					                                 Output f32* %595 = OpAccessChain vs_TEXCOORD4 %101 
					                                                      OpStore %595 %594 
					                                       f32_4 %598 = OpLoad %597 
					                                                      OpStore %596 %598 
					                                       f32_4 %599 = OpLoad %63 
					                                       f32_3 %600 = OpVectorShuffle %599 %599 1 1 1 
					                              Uniform f32_4* %602 = OpAccessChain %25 %601 %43 
					                                       f32_4 %603 = OpLoad %602 
					                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
					                                       f32_3 %605 = OpFMul %600 %604 
					                                                      OpStore %9 %605 
					                              Uniform f32_4* %606 = OpAccessChain %25 %601 %48 
					                                       f32_4 %607 = OpLoad %606 
					                                       f32_3 %608 = OpVectorShuffle %607 %607 0 1 2 
					                                       f32_4 %609 = OpLoad %63 
					                                       f32_3 %610 = OpVectorShuffle %609 %609 0 0 0 
					                                       f32_3 %611 = OpFMul %608 %610 
					                                       f32_3 %612 = OpLoad %9 
					                                       f32_3 %613 = OpFAdd %611 %612 
					                                                      OpStore %9 %613 
					                              Uniform f32_4* %615 = OpAccessChain %25 %601 %42 
					                                       f32_4 %616 = OpLoad %615 
					                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
					                                       f32_4 %618 = OpLoad %63 
					                                       f32_3 %619 = OpVectorShuffle %618 %618 2 2 2 
					                                       f32_3 %620 = OpFMul %617 %619 
					                                       f32_3 %621 = OpLoad %9 
					                                       f32_3 %622 = OpFAdd %620 %621 
					                                                      OpStore vs_TEXCOORD7 %622 
					                                 Output f32* %623 = OpAccessChain %105 %48 %101 
					                                         f32 %624 = OpLoad %623 
					                                         f32 %625 = OpFNegate %624 
					                                 Output f32* %626 = OpAccessChain %105 %48 %101 
					                                                      OpStore %626 %625 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 855
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %51 %399 %419 %676 %683 %690 %713 %831 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate vs_TEXCOORD6 Location 12 
					                                                      OpMemberDecorate %19 0 Offset 19 
					                                                      OpMemberDecorate %19 1 Offset 19 
					                                                      OpMemberDecorate %19 2 RelaxedPrecision 
					                                                      OpMemberDecorate %19 2 Offset 19 
					                                                      OpMemberDecorate %19 3 RelaxedPrecision 
					                                                      OpMemberDecorate %19 3 Offset 19 
					                                                      OpMemberDecorate %19 4 RelaxedPrecision 
					                                                      OpMemberDecorate %19 4 Offset 19 
					                                                      OpMemberDecorate %19 5 Offset 19 
					                                                      OpMemberDecorate %19 6 Offset 19 
					                                                      OpMemberDecorate %19 7 RelaxedPrecision 
					                                                      OpMemberDecorate %19 7 Offset 19 
					                                                      OpMemberDecorate %19 8 Offset 19 
					                                                      OpMemberDecorate %19 9 Offset 19 
					                                                      OpMemberDecorate %19 10 Offset 19 
					                                                      OpMemberDecorate %19 11 RelaxedPrecision 
					                                                      OpMemberDecorate %19 11 Offset 19 
					                                                      OpMemberDecorate %19 12 Offset 19 
					                                                      OpMemberDecorate %19 13 Offset 19 
					                                                      OpMemberDecorate %19 14 Offset 19 
					                                                      OpMemberDecorate %19 15 Offset 19 
					                                                      OpMemberDecorate %19 16 Offset 19 
					                                                      OpMemberDecorate %19 17 Offset 19 
					                                                      OpMemberDecorate %19 18 Offset 19 
					                                                      OpMemberDecorate %19 19 Offset 19 
					                                                      OpMemberDecorate %19 20 Offset 19 
					                                                      OpMemberDecorate %19 21 Offset 19 
					                                                      OpMemberDecorate %19 22 Offset 19 
					                                                      OpMemberDecorate %19 23 Offset 19 
					                                                      OpMemberDecorate %19 24 Offset 19 
					                                                      OpMemberDecorate %19 25 RelaxedPrecision 
					                                                      OpMemberDecorate %19 25 Offset 19 
					                                                      OpMemberDecorate %19 26 RelaxedPrecision 
					                                                      OpMemberDecorate %19 26 Offset 19 
					                                                      OpDecorate %19 Block 
					                                                      OpDecorate %21 DescriptorSet 21 
					                                                      OpDecorate %21 Binding 21 
					                                                      OpDecorate vs_TEXCOORD0 Location 51 
					                                                      OpDecorate %63 RelaxedPrecision 
					                                                      OpDecorate %63 DescriptorSet 63 
					                                                      OpDecorate %63 Binding 63 
					                                                      OpDecorate %64 RelaxedPrecision 
					                                                      OpDecorate %67 RelaxedPrecision 
					                                                      OpDecorate %67 DescriptorSet 67 
					                                                      OpDecorate %67 Binding 67 
					                                                      OpDecorate %68 RelaxedPrecision 
					                                                      OpDecorate %77 RelaxedPrecision 
					                                                      OpDecorate %78 RelaxedPrecision 
					                                                      OpDecorate %85 RelaxedPrecision 
					                                                      OpDecorate %86 RelaxedPrecision 
					                                                      OpDecorate %94 RelaxedPrecision 
					                                                      OpDecorate %95 RelaxedPrecision 
					                                                      OpDecorate %324 RelaxedPrecision 
					                                                      OpDecorate %325 RelaxedPrecision 
					                                                      OpDecorate %326 RelaxedPrecision 
					                                                      OpDecorate %331 RelaxedPrecision 
					                                                      OpDecorate %332 RelaxedPrecision 
					                                                      OpDecorate %333 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %335 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %367 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %371 RelaxedPrecision 
					                                                      OpDecorate %377 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %384 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 399 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %403 RelaxedPrecision 
					                                                      OpDecorate %403 DescriptorSet 403 
					                                                      OpDecorate %403 Binding 403 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %405 DescriptorSet 405 
					                                                      OpDecorate %405 Binding 405 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %410 RelaxedPrecision 
					                                                      OpDecorate %411 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %415 RelaxedPrecision 
					                                                      OpDecorate %416 RelaxedPrecision 
					                                                      OpDecorate %417 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %419 Location 419 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %424 RelaxedPrecision 
					                                                      OpDecorate %426 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %431 RelaxedPrecision 
					                                                      OpDecorate %448 RelaxedPrecision 
					                                                      OpDecorate %449 RelaxedPrecision 
					                                                      OpDecorate %449 DescriptorSet 449 
					                                                      OpDecorate %449 Binding 449 
					                                                      OpDecorate %450 RelaxedPrecision 
					                                                      OpDecorate %451 RelaxedPrecision 
					                                                      OpDecorate %451 DescriptorSet 451 
					                                                      OpDecorate %451 Binding 451 
					                                                      OpDecorate %452 RelaxedPrecision 
					                                                      OpDecorate %457 RelaxedPrecision 
					                                                      OpDecorate %458 RelaxedPrecision 
					                                                      OpDecorate %461 RelaxedPrecision 
					                                                      OpDecorate %462 RelaxedPrecision 
					                                                      OpDecorate %463 RelaxedPrecision 
					                                                      OpDecorate %464 RelaxedPrecision 
					                                                      OpDecorate %465 RelaxedPrecision 
					                                                      OpDecorate %466 RelaxedPrecision 
					                                                      OpDecorate %467 RelaxedPrecision 
					                                                      OpDecorate %468 RelaxedPrecision 
					                                                      OpDecorate %469 RelaxedPrecision 
					                                                      OpDecorate %470 RelaxedPrecision 
					                                                      OpDecorate %471 RelaxedPrecision 
					                                                      OpDecorate %472 RelaxedPrecision 
					                                                      OpDecorate %473 RelaxedPrecision 
					                                                      OpDecorate %474 RelaxedPrecision 
					                                                      OpDecorate %475 RelaxedPrecision 
					                                                      OpDecorate %476 RelaxedPrecision 
					                                                      OpDecorate %477 RelaxedPrecision 
					                                                      OpDecorate %478 RelaxedPrecision 
					                                                      OpDecorate %479 RelaxedPrecision 
					                                                      OpDecorate %483 RelaxedPrecision 
					                                                      OpDecorate %485 RelaxedPrecision 
					                                                      OpDecorate %486 RelaxedPrecision 
					                                                      OpDecorate %488 RelaxedPrecision 
					                                                      OpDecorate %489 RelaxedPrecision 
					                                                      OpDecorate %490 RelaxedPrecision 
					                                                      OpDecorate %492 RelaxedPrecision 
					                                                      OpDecorate %493 RelaxedPrecision 
					                                                      OpDecorate %494 RelaxedPrecision 
					                                                      OpDecorate %495 RelaxedPrecision 
					                                                      OpDecorate %496 RelaxedPrecision 
					                                                      OpDecorate %498 RelaxedPrecision 
					                                                      OpDecorate %500 RelaxedPrecision 
					                                                      OpDecorate %501 RelaxedPrecision 
					                                                      OpDecorate %503 RelaxedPrecision 
					                                                      OpDecorate %504 RelaxedPrecision 
					                                                      OpDecorate %506 RelaxedPrecision 
					                                                      OpDecorate %507 RelaxedPrecision 
					                                                      OpDecorate %508 RelaxedPrecision 
					                                                      OpDecorate %509 RelaxedPrecision 
					                                                      OpDecorate %510 RelaxedPrecision 
					                                                      OpDecorate %511 RelaxedPrecision 
					                                                      OpDecorate %512 RelaxedPrecision 
					                                                      OpDecorate %513 RelaxedPrecision 
					                                                      OpDecorate %554 RelaxedPrecision 
					                                                      OpDecorate %558 RelaxedPrecision 
					                                                      OpDecorate %560 RelaxedPrecision 
					                                                      OpDecorate %561 RelaxedPrecision 
					                                                      OpDecorate %564 RelaxedPrecision 
					                                                      OpDecorate %565 RelaxedPrecision 
					                                                      OpDecorate %568 RelaxedPrecision 
					                                                      OpDecorate %569 RelaxedPrecision 
					                                                      OpDecorate %570 RelaxedPrecision 
					                                                      OpDecorate %572 RelaxedPrecision 
					                                                      OpDecorate %573 RelaxedPrecision 
					                                                      OpDecorate %574 RelaxedPrecision 
					                                                      OpDecorate %575 RelaxedPrecision 
					                                                      OpDecorate %576 RelaxedPrecision 
					                                                      OpDecorate %595 RelaxedPrecision 
					                                                      OpDecorate %596 RelaxedPrecision 
					                                                      OpDecorate %596 DescriptorSet 596 
					                                                      OpDecorate %596 Binding 596 
					                                                      OpDecorate %597 RelaxedPrecision 
					                                                      OpDecorate %598 RelaxedPrecision 
					                                                      OpDecorate %598 DescriptorSet 598 
					                                                      OpDecorate %598 Binding 598 
					                                                      OpDecorate %599 RelaxedPrecision 
					                                                      OpDecorate %604 RelaxedPrecision 
					                                                      OpDecorate %605 RelaxedPrecision 
					                                                      OpDecorate %606 RelaxedPrecision 
					                                                      OpDecorate %607 RelaxedPrecision 
					                                                      OpDecorate %608 RelaxedPrecision 
					                                                      OpDecorate %609 RelaxedPrecision 
					                                                      OpDecorate %612 RelaxedPrecision 
					                                                      OpDecorate %614 RelaxedPrecision 
					                                                      OpDecorate %615 RelaxedPrecision 
					                                                      OpDecorate %617 RelaxedPrecision 
					                                                      OpDecorate %618 RelaxedPrecision 
					                                                      OpDecorate %620 RelaxedPrecision 
					                                                      OpDecorate %623 RelaxedPrecision 
					                                                      OpDecorate %624 RelaxedPrecision 
					                                                      OpDecorate %625 RelaxedPrecision 
					                                                      OpDecorate %626 RelaxedPrecision 
					                                                      OpDecorate %627 RelaxedPrecision 
					                                                      OpDecorate %628 RelaxedPrecision 
					                                                      OpDecorate %629 RelaxedPrecision 
					                                                      OpDecorate %630 RelaxedPrecision 
					                                                      OpDecorate %631 RelaxedPrecision 
					                                                      OpDecorate %632 RelaxedPrecision 
					                                                      OpDecorate %633 RelaxedPrecision 
					                                                      OpDecorate %634 RelaxedPrecision 
					                                                      OpDecorate %635 RelaxedPrecision 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %638 RelaxedPrecision 
					                                                      OpDecorate %645 RelaxedPrecision 
					                                                      OpDecorate %646 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 676 
					                                                      OpDecorate vs_TEXCOORD3 Location 683 
					                                                      OpDecorate vs_TEXCOORD4 Location 690 
					                                                      OpDecorate %697 RelaxedPrecision 
					                                                      OpDecorate %698 RelaxedPrecision 
					                                                      OpDecorate %699 RelaxedPrecision 
					                                                      OpDecorate %700 RelaxedPrecision 
					                                                      OpDecorate %701 RelaxedPrecision 
					                                                      OpDecorate %702 RelaxedPrecision 
					                                                      OpDecorate %705 RelaxedPrecision 
					                                                      OpDecorate %706 RelaxedPrecision 
					                                                      OpDecorate %708 RelaxedPrecision 
					                                                      OpDecorate %709 RelaxedPrecision 
					                                                      OpDecorate %710 RelaxedPrecision 
					                                                      OpDecorate %711 RelaxedPrecision 
					                                                      OpDecorate %712 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD5 Location 713 
					                                                      OpDecorate %733 RelaxedPrecision 
					                                                      OpDecorate %734 RelaxedPrecision 
					                                                      OpDecorate %738 RelaxedPrecision 
					                                                      OpDecorate %739 RelaxedPrecision 
					                                                      OpDecorate %740 RelaxedPrecision 
					                                                      OpDecorate %741 RelaxedPrecision 
					                                                      OpDecorate %742 RelaxedPrecision 
					                                                      OpDecorate %743 RelaxedPrecision 
					                                                      OpDecorate %744 RelaxedPrecision 
					                                                      OpDecorate %745 RelaxedPrecision 
					                                                      OpDecorate %746 RelaxedPrecision 
					                                                      OpDecorate %747 RelaxedPrecision 
					                                                      OpDecorate %748 RelaxedPrecision 
					                                                      OpDecorate %749 RelaxedPrecision 
					                                                      OpDecorate %752 RelaxedPrecision 
					                                                      OpDecorate %753 RelaxedPrecision 
					                                                      OpDecorate %754 RelaxedPrecision 
					                                                      OpDecorate %755 RelaxedPrecision 
					                                                      OpDecorate %757 RelaxedPrecision 
					                                                      OpDecorate %759 RelaxedPrecision 
					                                                      OpDecorate %760 RelaxedPrecision 
					                                                      OpDecorate %761 RelaxedPrecision 
					                                                      OpDecorate %763 RelaxedPrecision 
					                                                      OpDecorate %764 RelaxedPrecision 
					                                                      OpDecorate %766 RelaxedPrecision 
					                                                      OpDecorate %770 RelaxedPrecision 
					                                                      OpDecorate %771 RelaxedPrecision 
					                                                      OpDecorate %773 RelaxedPrecision 
					                                                      OpDecorate %776 RelaxedPrecision 
					                                                      OpDecorate %777 RelaxedPrecision 
					                                                      OpDecorate %780 RelaxedPrecision 
					                                                      OpDecorate %781 RelaxedPrecision 
					                                                      OpDecorate %784 RelaxedPrecision 
					                                                      OpDecorate %787 RelaxedPrecision 
					                                                      OpDecorate %794 RelaxedPrecision 
					                                                      OpDecorate %796 RelaxedPrecision 
					                                                      OpDecorate %797 RelaxedPrecision 
					                                                      OpDecorate %800 RelaxedPrecision 
					                                                      OpDecorate %801 RelaxedPrecision 
					                                                      OpDecorate %805 RelaxedPrecision 
					                                                      OpDecorate %806 RelaxedPrecision 
					                                                      OpDecorate %809 RelaxedPrecision 
					                                                      OpDecorate %810 RelaxedPrecision 
					                                                      OpDecorate %811 RelaxedPrecision 
					                                                      OpDecorate %814 RelaxedPrecision 
					                                                      OpDecorate %815 RelaxedPrecision 
					                                                      OpDecorate %816 RelaxedPrecision 
					                                                      OpDecorate %817 RelaxedPrecision 
					                                                      OpDecorate %818 RelaxedPrecision 
					                                                      OpDecorate %820 RelaxedPrecision 
					                                                      OpDecorate %822 RelaxedPrecision 
					                                                      OpDecorate %823 RelaxedPrecision 
					                                                      OpDecorate %824 RelaxedPrecision 
					                                                      OpDecorate %825 RelaxedPrecision 
					                                                      OpDecorate %826 RelaxedPrecision 
					                                                      OpDecorate %827 RelaxedPrecision 
					                                                      OpDecorate %831 RelaxedPrecision 
					                                                      OpDecorate %831 Location 831 
					                                                      OpDecorate %833 RelaxedPrecision 
					                                                      OpDecorate %836 RelaxedPrecision 
					                                                      OpDecorate %837 RelaxedPrecision 
					                                                      OpDecorate %839 RelaxedPrecision 
					                                                      OpDecorate %840 RelaxedPrecision 
					                                                      OpDecorate %841 RelaxedPrecision 
					                                                      OpDecorate %844 RelaxedPrecision 
					                                                      OpDecorate %845 RelaxedPrecision 
					                                                      OpDecorate %846 RelaxedPrecision 
					                                                      OpDecorate %847 RelaxedPrecision 
					                                                      OpDecorate %848 RelaxedPrecision 
					                                                      OpDecorate %849 RelaxedPrecision 
					                                                      OpDecorate %850 RelaxedPrecision 
					                                                      OpDecorate %851 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 2 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_2* vs_TEXCOORD6 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 0 
					                                              %15 = OpTypePointer Input %6 
					                                              %18 = OpTypeVector %6 3 
					                                              %19 = OpTypeStruct %7 %18 %7 %7 %7 %6 %6 %7 %6 %6 %6 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %20 = OpTypePointer Uniform %19 
					Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %21 = OpVariable Uniform 
					                                              %22 = OpTypeInt 32 1 
					                                          i32 %23 = OpConstant 14 
					                                              %24 = OpTypePointer Uniform %6 
					                                              %28 = OpTypePointer Private %6 
					                               Private f32_4* %30 = OpVariable Private 
					                                          f32 %31 = OpConstant 3,674022E-40 
					                                        f32_2 %32 = OpConstantComposite %31 %31 
					                                          i32 %33 = OpConstant 22 
					                                          i32 %36 = OpConstant 23 
					                                          f32 %43 = OpConstant 3,674022E-40 
					                                          u32 %44 = OpConstant 2 
					                               Private f32_4* %46 = OpVariable Private 
					                                              %50 = OpTypePointer Input %7 
					                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                               Private f32_4* %60 = OpVariable Private 
					                                              %61 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %62 = OpTypePointer UniformConstant %61 
					         UniformConstant read_only Texture2D* %63 = OpVariable UniformConstant 
					                                              %65 = OpTypeSampler 
					                                              %66 = OpTypePointer UniformConstant %65 
					                     UniformConstant sampler* %67 = OpVariable UniformConstant 
					                                              %69 = OpTypeSampledImage %61 
					                                          u32 %74 = OpConstant 3 
					                                          u32 %92 = OpConstant 1 
					                                         f32 %107 = OpConstant 3,674022E-40 
					                                       f32_4 %108 = OpConstantComposite %107 %107 %107 %107 
					                                         i32 %110 = OpConstant 15 
					                                         i32 %113 = OpConstant 12 
					                                         f32 %120 = OpConstant 3,674022E-40 
					                                         i32 %129 = OpConstant 13 
					                                         i32 %136 = OpConstant 24 
					                                         f32 %143 = OpConstant 3,674022E-40 
					                                         f32 %147 = OpConstant 3,674022E-40 
					                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
					                                         f32 %155 = OpConstant 3,674022E-40 
					                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
					                                         f32 %158 = OpConstant 3,674022E-40 
					                                       f32_4 %159 = OpConstantComposite %158 %158 %158 %158 
					                                       f32_4 %164 = OpConstantComposite %31 %31 %31 %31 
					                                             %166 = OpTypePointer Private %10 
					                              Private f32_2* %167 = OpVariable Private 
					                                         i32 %168 = OpConstant 20 
					                                             %173 = OpTypeBool 
					                                             %174 = OpTypePointer Private %173 
					                               Private bool* %175 = OpVariable Private 
					                                             %188 = OpTypePointer Function %6 
					                               Private bool* %200 = OpVariable Private 
					                                             %207 = OpTypeVector %173 4 
					                                         f32 %211 = OpConstant 3,674022E-40 
					                                       f32_4 %212 = OpConstantComposite %211 %211 %211 %211 
					                                         i32 %220 = OpConstant 17 
					                                         i32 %239 = OpConstant 16 
					                                Private f32* %279 = OpVariable Private 
					                                       f32_2 %294 = OpConstantComposite %31 %43 
					                                Private f32* %324 = OpVariable Private 
					                                Private f32* %332 = OpVariable Private 
					                                         i32 %348 = OpConstant 21 
					                              Private f32_4* %359 = OpVariable Private 
					                                             %370 = OpTypePointer Private %18 
					                              Private f32_3* %371 = OpVariable Private 
					                                         i32 %386 = OpConstant 9 
					                                         i32 %389 = OpConstant 10 
					                                         i32 %393 = OpConstant 0 
					                                             %394 = OpTypePointer Uniform %7 
					                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                              Private f32_4* %402 = OpVariable Private 
					        UniformConstant read_only Texture2D* %403 = OpVariable UniformConstant 
					                    UniformConstant sampler* %405 = OpVariable UniformConstant 
					                              Private f32_3* %410 = OpVariable Private 
					                                         i32 %413 = OpConstant 11 
					                              Private f32_4* %418 = OpVariable Private 
					                                Input f32_4* %419 = OpVariable Input 
					                                Private f32* %426 = OpVariable Private 
					                                         i32 %432 = OpConstant 5 
					                                         i32 %435 = OpConstant 6 
					                              Private f32_4* %448 = OpVariable Private 
					        UniformConstant read_only Texture2D* %449 = OpVariable UniformConstant 
					                    UniformConstant sampler* %451 = OpVariable UniformConstant 
					                              Private f32_4* %457 = OpVariable Private 
					                                         i32 %459 = OpConstant 7 
					                              Private f32_4* %463 = OpVariable Private 
					                              Private f32_4* %472 = OpVariable Private 
					                              Private f32_4* %496 = OpVariable Private 
					                                         i32 %530 = OpConstant 8 
					                              Private f32_4* %572 = OpVariable Private 
					                              Private f32_3* %577 = OpVariable Private 
					                                         i32 %578 = OpConstant 19 
					                                         i32 %582 = OpConstant 18 
					                              Private f32_3* %595 = OpVariable Private 
					        UniformConstant read_only Texture2D* %596 = OpVariable UniformConstant 
					                    UniformConstant sampler* %598 = OpVariable UniformConstant 
					                                       f32_2 %619 = OpConstantComposite %158 %158 
					                                Private f32* %623 = OpVariable Private 
					                                         f32 %642 = OpConstant 3,674022E-40 
					                                       f32_3 %643 = OpConstantComposite %642 %642 %158 
					                                       f32_3 %649 = OpConstantComposite %43 %43 %31 
					                                             %675 = OpTypePointer Input %18 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                              Private f32_3* %697 = OpVariable Private 
					                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
					                                         i32 %716 = OpConstant 1 
					                                             %717 = OpTypePointer Uniform %18 
					                                Private f32* %721 = OpVariable Private 
					                                         i32 %731 = OpConstant 2 
					                                       f32_2 %765 = OpConstantComposite %43 %43 
					                                Private f32* %773 = OpVariable Private 
					                                         i32 %774 = OpConstant 25 
					                                         i32 %778 = OpConstant 26 
					                                Private f32* %782 = OpVariable Private 
					                                         f32 %790 = OpConstant 3,674022E-40 
					                                         i32 %803 = OpConstant 3 
					                                         i32 %807 = OpConstant 4 
					                                         f32 %821 = OpConstant 3,674022E-40 
					                                             %830 = OpTypePointer Output %7 
					                               Output f32_4* %831 = OpVariable Output 
					                                             %834 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %189 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD6 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Uniform f32* %25 = OpAccessChain %21 %23 
					                                          f32 %26 = OpLoad %25 
					                                          f32 %27 = OpFAdd %17 %26 
					                                 Private f32* %29 = OpAccessChain %9 %14 
					                                                      OpStore %29 %27 
					                                 Uniform f32* %34 = OpAccessChain %21 %33 
					                                          f32 %35 = OpLoad %34 
					                                 Uniform f32* %37 = OpAccessChain %21 %36 
					                                          f32 %38 = OpLoad %37 
					                                        f32_2 %39 = OpCompositeConstruct %35 %38 
					                                        f32_2 %40 = OpFDiv %32 %39 
					                                        f32_4 %41 = OpLoad %30 
					                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 2 3 
					                                                      OpStore %30 %42 
					                                 Private f32* %45 = OpAccessChain %30 %44 
					                                                      OpStore %45 %43 
					                                        f32_4 %47 = OpLoad %30 
					                                        f32_4 %48 = OpVectorShuffle %47 %47 0 2 2 1 
					                                        f32_4 %49 = OpFNegate %48 
					                                        f32_4 %52 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 0 1 0 1 
					                                        f32_4 %54 = OpFAdd %49 %53 
					                                                      OpStore %46 %54 
					                                        f32_4 %55 = OpLoad %30 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 0 2 2 1 
					                                        f32_4 %57 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %58 = OpVectorShuffle %57 %57 0 1 0 1 
					                                        f32_4 %59 = OpFAdd %56 %58 
					                                                      OpStore %30 %59 
					                          read_only Texture2D %64 = OpLoad %63 
					                                      sampler %68 = OpLoad %67 
					                   read_only Texture2DSampled %70 = OpSampledImage %64 %68 
					                                        f32_4 %71 = OpLoad %46 
					                                        f32_2 %72 = OpVectorShuffle %71 %71 0 1 
					                                        f32_4 %73 = OpImageSampleImplicitLod %70 %72 
					                                          f32 %75 = OpCompositeExtract %73 3 
					                                 Private f32* %76 = OpAccessChain %60 %14 
					                                                      OpStore %76 %75 
					                          read_only Texture2D %77 = OpLoad %63 
					                                      sampler %78 = OpLoad %67 
					                   read_only Texture2DSampled %79 = OpSampledImage %77 %78 
					                                        f32_4 %80 = OpLoad %46 
					                                        f32_2 %81 = OpVectorShuffle %80 %80 2 3 
					                                        f32_4 %82 = OpImageSampleImplicitLod %79 %81 
					                                          f32 %83 = OpCompositeExtract %82 3 
					                                 Private f32* %84 = OpAccessChain %60 %44 
					                                                      OpStore %84 %83 
					                          read_only Texture2D %85 = OpLoad %63 
					                                      sampler %86 = OpLoad %67 
					                   read_only Texture2DSampled %87 = OpSampledImage %85 %86 
					                                        f32_4 %88 = OpLoad %30 
					                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
					                                        f32_4 %90 = OpImageSampleImplicitLod %87 %89 
					                                          f32 %91 = OpCompositeExtract %90 3 
					                                 Private f32* %93 = OpAccessChain %60 %92 
					                                                      OpStore %93 %91 
					                          read_only Texture2D %94 = OpLoad %63 
					                                      sampler %95 = OpLoad %67 
					                   read_only Texture2DSampled %96 = OpSampledImage %94 %95 
					                                        f32_4 %97 = OpLoad %30 
					                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
					                                        f32_4 %99 = OpImageSampleImplicitLod %96 %98 
					                                         f32 %100 = OpCompositeExtract %99 3 
					                                Private f32* %101 = OpAccessChain %60 %74 
					                                                      OpStore %101 %100 
					                                       f32_4 %102 = OpLoad %9 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
					                                       f32_4 %104 = OpLoad %60 
					                                       f32_4 %105 = OpFAdd %103 %104 
					                                                      OpStore %9 %105 
					                                       f32_4 %106 = OpLoad %9 
					                                       f32_4 %109 = OpFAdd %106 %108 
					                                                      OpStore %9 %109 
					                                Uniform f32* %111 = OpAccessChain %21 %110 
					                                         f32 %112 = OpLoad %111 
					                                Uniform f32* %114 = OpAccessChain %21 %113 
					                                         f32 %115 = OpLoad %114 
					                                         f32 %116 = OpFAdd %112 %115 
					                                Private f32* %117 = OpAccessChain %30 %14 
					                                                      OpStore %117 %116 
					                                Private f32* %118 = OpAccessChain %30 %14 
					                                         f32 %119 = OpLoad %118 
					                                         f32 %121 = OpExtInst %1 40 %119 %120 
					                                Private f32* %122 = OpAccessChain %30 %14 
					                                                      OpStore %122 %121 
					                                       f32_4 %123 = OpLoad %9 
					                                       f32_4 %124 = OpLoad %30 
					                                       f32_4 %125 = OpVectorShuffle %124 %124 0 0 0 0 
					                                       f32_4 %126 = OpFDiv %123 %125 
					                                                      OpStore %9 %126 
					                                Private f32* %127 = OpAccessChain %30 %14 
					                                         f32 %128 = OpLoad %127 
					                                Uniform f32* %130 = OpAccessChain %21 %129 
					                                         f32 %131 = OpLoad %130 
					                                         f32 %132 = OpFMul %128 %131 
					                                Private f32* %133 = OpAccessChain %30 %14 
					                                                      OpStore %133 %132 
					                                Private f32* %134 = OpAccessChain %30 %14 
					                                         f32 %135 = OpLoad %134 
					                                Uniform f32* %137 = OpAccessChain %21 %136 
					                                         f32 %138 = OpLoad %137 
					                                         f32 %139 = OpFMul %135 %138 
					                                Private f32* %140 = OpAccessChain %30 %14 
					                                                      OpStore %140 %139 
					                                Private f32* %141 = OpAccessChain %30 %14 
					                                         f32 %142 = OpLoad %141 
					                                         f32 %144 = OpFMul %142 %143 
					                                Private f32* %145 = OpAccessChain %30 %14 
					                                                      OpStore %145 %144 
					                                       f32_4 %146 = OpLoad %9 
					                                       f32_4 %149 = OpFAdd %146 %148 
					                                                      OpStore %9 %149 
					                                       f32_4 %150 = OpLoad %9 
					                                       f32_4 %151 = OpCompositeConstruct %43 %43 %43 %43 
					                                       f32_4 %152 = OpCompositeConstruct %31 %31 %31 %31 
					                                       f32_4 %153 = OpExtInst %1 43 %150 %151 %152 
					                                                      OpStore %9 %153 
					                                       f32_4 %154 = OpLoad %9 
					                                       f32_4 %157 = OpFMul %154 %156 
					                                       f32_4 %160 = OpFAdd %157 %159 
					                                                      OpStore %46 %160 
					                                       f32_4 %161 = OpLoad %46 
					                                       f32_4 %162 = OpExtInst %1 4 %161 
					                                       f32_4 %163 = OpFNegate %162 
					                                       f32_4 %165 = OpFAdd %163 %164 
					                                                      OpStore %46 %165 
					                                Uniform f32* %169 = OpAccessChain %21 %168 
					                                         f32 %170 = OpLoad %169 
					                                         f32 %171 = OpFMul %170 %147 
					                                Private f32* %172 = OpAccessChain %167 %14 
					                                                      OpStore %172 %171 
					                                Private f32* %176 = OpAccessChain %167 %14 
					                                         f32 %177 = OpLoad %176 
					                                Private f32* %178 = OpAccessChain %167 %14 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpFNegate %179 
					                                        bool %181 = OpFOrdGreaterThanEqual %177 %180 
					                                                      OpStore %175 %181 
					                                Private f32* %182 = OpAccessChain %167 %14 
					                                         f32 %183 = OpLoad %182 
					                                         f32 %184 = OpExtInst %1 4 %183 
					                                         f32 %185 = OpExtInst %1 10 %184 
					                                Private f32* %186 = OpAccessChain %167 %14 
					                                                      OpStore %186 %185 
					                                        bool %187 = OpLoad %175 
					                                                      OpSelectionMerge %191 None 
					                                                      OpBranchConditional %187 %190 %194 
					                                             %190 = OpLabel 
					                                Private f32* %192 = OpAccessChain %167 %14 
					                                         f32 %193 = OpLoad %192 
					                                                      OpStore %189 %193 
					                                                      OpBranch %191 
					                                             %194 = OpLabel 
					                                Private f32* %195 = OpAccessChain %167 %14 
					                                         f32 %196 = OpLoad %195 
					                                         f32 %197 = OpFNegate %196 
					                                                      OpStore %189 %197 
					                                                      OpBranch %191 
					                                             %191 = OpLabel 
					                                         f32 %198 = OpLoad %189 
					                                Private f32* %199 = OpAccessChain %167 %14 
					                                                      OpStore %199 %198 
					                                Private f32* %201 = OpAccessChain %167 %14 
					                                         f32 %202 = OpLoad %201 
					                                        bool %203 = OpFOrdGreaterThanEqual %202 %147 
					                                                      OpStore %200 %203 
					                                        bool %204 = OpLoad %200 
					                                       f32_4 %205 = OpLoad %46 
					                                       f32_4 %206 = OpLoad %9 
					                                      bool_4 %208 = OpCompositeConstruct %204 %204 %204 %204 
					                                       f32_4 %209 = OpSelect %208 %205 %206 
					                                                      OpStore %9 %209 
					                                       f32_4 %210 = OpLoad %9 
					                                       f32_4 %213 = OpFMul %210 %212 
					                                                      OpStore %46 %213 
					                                       f32_4 %214 = OpLoad %46 
					                                       f32_4 %215 = OpExtInst %1 13 %214 
					                                                      OpStore %46 %215 
					                                       f32_4 %216 = OpLoad %9 
					                                       f32_4 %217 = OpFNegate %216 
					                                       f32_4 %218 = OpLoad %46 
					                                       f32_4 %219 = OpFAdd %217 %218 
					                                                      OpStore %46 %219 
					                                Uniform f32* %221 = OpAccessChain %21 %220 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %223 = OpAccessChain %21 %220 
					                                         f32 %224 = OpLoad %223 
					                                Uniform f32* %225 = OpAccessChain %21 %220 
					                                         f32 %226 = OpLoad %225 
					                                Uniform f32* %227 = OpAccessChain %21 %220 
					                                         f32 %228 = OpLoad %227 
					                                       f32_4 %229 = OpCompositeConstruct %222 %224 %226 %228 
					                                         f32 %230 = OpCompositeExtract %229 0 
					                                         f32 %231 = OpCompositeExtract %229 1 
					                                         f32 %232 = OpCompositeExtract %229 2 
					                                         f32 %233 = OpCompositeExtract %229 3 
					                                       f32_4 %234 = OpCompositeConstruct %230 %231 %232 %233 
					                                       f32_4 %235 = OpLoad %46 
					                                       f32_4 %236 = OpFMul %234 %235 
					                                       f32_4 %237 = OpLoad %9 
					                                       f32_4 %238 = OpFAdd %236 %237 
					                                                      OpStore %9 %238 
					                                Uniform f32* %240 = OpAccessChain %21 %239 
					                                         f32 %241 = OpLoad %240 
					                                         f32 %242 = OpFNegate %241 
					                                         f32 %243 = OpFAdd %242 %31 
					                                Private f32* %244 = OpAccessChain %167 %14 
					                                                      OpStore %244 %243 
					                                       f32_4 %245 = OpLoad %9 
					                                       f32_2 %246 = OpLoad %167 
					                                       f32_4 %247 = OpVectorShuffle %246 %246 0 0 0 0 
					                                       f32_4 %248 = OpExtInst %1 37 %245 %247 
					                                                      OpStore %9 %248 
					                                       f32_4 %249 = OpLoad %30 
					                                       f32_2 %250 = OpVectorShuffle %249 %249 0 0 
					                                       f32_4 %251 = OpLoad %9 
					                                       f32_2 %252 = OpVectorShuffle %251 %251 0 2 
					                                       f32_2 %253 = OpFMul %250 %252 
					                                       f32_4 %254 = OpLoad %9 
					                                       f32_4 %255 = OpVectorShuffle %254 %253 4 1 5 3 
					                                                      OpStore %9 %255 
					                                       f32_4 %256 = OpLoad %9 
					                                       f32_2 %257 = OpVectorShuffle %256 %256 3 1 
					                                       f32_4 %258 = OpLoad %30 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 0 0 
					                                       f32_2 %260 = OpFMul %257 %259 
					                                       f32_4 %261 = OpLoad %9 
					                                       f32_2 %262 = OpVectorShuffle %261 %261 2 0 
					                                       f32_2 %263 = OpFNegate %262 
					                                       f32_2 %264 = OpFAdd %260 %263 
					                                       f32_4 %265 = OpLoad %9 
					                                       f32_4 %266 = OpVectorShuffle %265 %264 0 4 5 3 
					                                                      OpStore %9 %266 
					                                Private f32* %267 = OpAccessChain %9 %14 
					                                                      OpStore %267 %158 
					                                Private f32* %268 = OpAccessChain %9 %74 
					                                                      OpStore %268 %31 
					                                       f32_4 %269 = OpLoad %9 
					                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
					                                         f32 %273 = OpDot %270 %272 
					                                Private f32* %274 = OpAccessChain %30 %14 
					                                                      OpStore %274 %273 
					                                Private f32* %275 = OpAccessChain %30 %14 
					                                         f32 %276 = OpLoad %275 
					                                         f32 %277 = OpExtInst %1 32 %276 
					                                Private f32* %278 = OpAccessChain %30 %14 
					                                                      OpStore %278 %277 
					                                       f32_4 %280 = OpLoad %9 
					                                       f32_2 %281 = OpVectorShuffle %280 %280 2 3 
					                                       f32_4 %282 = OpLoad %9 
					                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
					                                         f32 %284 = OpDot %281 %283 
					                                                      OpStore %279 %284 
					                                         f32 %285 = OpLoad %279 
					                                         f32 %286 = OpExtInst %1 32 %285 
					                                                      OpStore %279 %286 
					                                         f32 %287 = OpLoad %279 
					                                Private f32* %288 = OpAccessChain %9 %44 
					                                         f32 %289 = OpLoad %288 
					                                         f32 %290 = OpFMul %287 %289 
					                                Private f32* %291 = OpAccessChain %46 %14 
					                                                      OpStore %291 %290 
					                                         f32 %292 = OpLoad %279 
					                                       f32_2 %293 = OpCompositeConstruct %292 %292 
					                                       f32_2 %295 = OpFMul %293 %294 
					                                       f32_4 %296 = OpLoad %46 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 0 4 5 3 
					                                                      OpStore %46 %297 
					                                Private f32* %298 = OpAccessChain %9 %44 
					                                                      OpStore %298 %43 
					                                       f32_4 %299 = OpLoad %30 
					                                       f32_3 %300 = OpVectorShuffle %299 %299 0 0 0 
					                                       f32_4 %301 = OpLoad %9 
					                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
					                                       f32_3 %303 = OpFMul %300 %302 
					                                       f32_4 %304 = OpLoad %9 
					                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
					                                                      OpStore %9 %305 
					                                       f32_4 %306 = OpLoad %9 
					                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
					                                       f32_4 %308 = OpLoad %46 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_3 %310 = OpFMul %307 %309 
					                                       f32_4 %311 = OpLoad %30 
					                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
					                                                      OpStore %30 %312 
					                                       f32_4 %313 = OpLoad %46 
					                                       f32_3 %314 = OpVectorShuffle %313 %313 2 0 1 
					                                       f32_4 %315 = OpLoad %9 
					                                       f32_3 %316 = OpVectorShuffle %315 %315 1 2 0 
					                                       f32_3 %317 = OpFMul %314 %316 
					                                       f32_4 %318 = OpLoad %30 
					                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
					                                       f32_3 %320 = OpFNegate %319 
					                                       f32_3 %321 = OpFAdd %317 %320 
					                                       f32_4 %322 = OpLoad %9 
					                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
					                                                      OpStore %9 %323 
					                         read_only Texture2D %325 = OpLoad %63 
					                                     sampler %326 = OpLoad %67 
					                  read_only Texture2DSampled %327 = OpSampledImage %325 %326 
					                                       f32_4 %328 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %329 = OpVectorShuffle %328 %328 0 1 
					                                       f32_4 %330 = OpImageSampleImplicitLod %327 %329 
					                                         f32 %331 = OpCompositeExtract %330 3 
					                                                      OpStore %324 %331 
					                                         f32 %333 = OpLoad %324 
					                                         f32 %334 = OpFNegate %333 
					                                         f32 %335 = OpFAdd %334 %147 
					                                                      OpStore %332 %335 
					                                         f32 %336 = OpLoad %332 
					                                  Input f32* %337 = OpAccessChain vs_TEXCOORD6 %14 
					                                         f32 %338 = OpLoad %337 
					                                         f32 %339 = OpFNegate %338 
					                                         f32 %340 = OpFAdd %336 %339 
					                                                      OpStore %279 %340 
					                                         f32 %341 = OpLoad %279 
					                                  Input f32* %342 = OpAccessChain vs_TEXCOORD6 %92 
					                                         f32 %343 = OpLoad %342 
					                                         f32 %344 = OpFMul %341 %343 
					                                         f32 %345 = OpFAdd %344 %147 
					                                                      OpStore %279 %345 
					                                Uniform f32* %346 = OpAccessChain %21 %113 
					                                         f32 %347 = OpLoad %346 
					                                Uniform f32* %349 = OpAccessChain %21 %348 
					                                         f32 %350 = OpLoad %349 
					                                         f32 %351 = OpFMul %347 %350 
					                                Private f32* %352 = OpAccessChain %30 %14 
					                                                      OpStore %352 %351 
					                                Private f32* %353 = OpAccessChain %30 %14 
					                                         f32 %354 = OpLoad %353 
					                                  Input f32* %355 = OpAccessChain vs_TEXCOORD6 %92 
					                                         f32 %356 = OpLoad %355 
					                                         f32 %357 = OpFMul %354 %356 
					                                Private f32* %358 = OpAccessChain %30 %14 
					                                                      OpStore %358 %357 
					                                Private f32* %360 = OpAccessChain %30 %14 
					                                         f32 %361 = OpLoad %360 
					                                         f32 %362 = OpFMul %361 %147 
					                                         f32 %363 = OpLoad %279 
					                                         f32 %364 = OpFAdd %362 %363 
					                                Private f32* %365 = OpAccessChain %359 %14 
					                                                      OpStore %365 %364 
					                                Private f32* %366 = OpAccessChain %359 %14 
					                                         f32 %367 = OpLoad %366 
					                                         f32 %368 = OpExtInst %1 43 %367 %43 %31 
					                                Private f32* %369 = OpAccessChain %359 %14 
					                                                      OpStore %369 %368 
					                                Private f32* %372 = OpAccessChain %30 %14 
					                                         f32 %373 = OpLoad %372 
					                                         f32 %374 = OpExtInst %1 37 %373 %31 
					                                Private f32* %375 = OpAccessChain %371 %14 
					                                                      OpStore %375 %374 
					                                Private f32* %376 = OpAccessChain %371 %14 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpExtInst %1 31 %377 
					                                Private f32* %379 = OpAccessChain %371 %14 
					                                                      OpStore %379 %378 
					                                Private f32* %380 = OpAccessChain %371 %14 
					                                         f32 %381 = OpLoad %380 
					                                Private f32* %382 = OpAccessChain %359 %14 
					                                         f32 %383 = OpLoad %382 
					                                         f32 %384 = OpFMul %381 %383 
					                                Private f32* %385 = OpAccessChain %359 %14 
					                                                      OpStore %385 %384 
					                                Uniform f32* %387 = OpAccessChain %21 %386 
					                                         f32 %388 = OpLoad %387 
					                                Uniform f32* %390 = OpAccessChain %21 %389 
					                                         f32 %391 = OpLoad %390 
					                                       f32_2 %392 = OpCompositeConstruct %388 %391 
					                              Uniform f32_4* %395 = OpAccessChain %21 %393 
					                                       f32_4 %396 = OpLoad %395 
					                                       f32_2 %397 = OpVectorShuffle %396 %396 1 1 
					                                       f32_2 %398 = OpFMul %392 %397 
					                                       f32_2 %400 = OpLoad vs_TEXCOORD1 
					                                       f32_2 %401 = OpFAdd %398 %400 
					                                                      OpStore %167 %401 
					                         read_only Texture2D %404 = OpLoad %403 
					                                     sampler %406 = OpLoad %405 
					                  read_only Texture2DSampled %407 = OpSampledImage %404 %406 
					                                       f32_2 %408 = OpLoad %167 
					                                       f32_4 %409 = OpImageSampleImplicitLod %407 %408 
					                                                      OpStore %402 %409 
					                                       f32_4 %411 = OpLoad %402 
					                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
					                              Uniform f32_4* %414 = OpAccessChain %21 %413 
					                                       f32_4 %415 = OpLoad %414 
					                                       f32_3 %416 = OpVectorShuffle %415 %415 0 1 2 
					                                       f32_3 %417 = OpFMul %412 %416 
					                                                      OpStore %410 %417 
					                                  Input f32* %420 = OpAccessChain %419 %74 
					                                         f32 %421 = OpLoad %420 
					                                Uniform f32* %422 = OpAccessChain %21 %413 %74 
					                                         f32 %423 = OpLoad %422 
					                                         f32 %424 = OpFMul %421 %423 
					                                Private f32* %425 = OpAccessChain %418 %14 
					                                                      OpStore %425 %424 
					                                Private f32* %427 = OpAccessChain %402 %74 
					                                         f32 %428 = OpLoad %427 
					                                Private f32* %429 = OpAccessChain %418 %14 
					                                         f32 %430 = OpLoad %429 
					                                         f32 %431 = OpFMul %428 %430 
					                                                      OpStore %426 %431 
					                                Uniform f32* %433 = OpAccessChain %21 %432 
					                                         f32 %434 = OpLoad %433 
					                                Uniform f32* %436 = OpAccessChain %21 %435 
					                                         f32 %437 = OpLoad %436 
					                                       f32_2 %438 = OpCompositeConstruct %434 %437 
					                              Uniform f32_4* %439 = OpAccessChain %21 %393 
					                                       f32_4 %440 = OpLoad %439 
					                                       f32_2 %441 = OpVectorShuffle %440 %440 1 1 
					                                       f32_2 %442 = OpFMul %438 %441 
					                                       f32_4 %443 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %444 = OpVectorShuffle %443 %443 2 3 
					                                       f32_2 %445 = OpFAdd %442 %444 
					                                       f32_4 %446 = OpLoad %60 
					                                       f32_4 %447 = OpVectorShuffle %446 %445 4 5 2 3 
					                                                      OpStore %60 %447 
					                         read_only Texture2D %450 = OpLoad %449 
					                                     sampler %452 = OpLoad %451 
					                  read_only Texture2DSampled %453 = OpSampledImage %450 %452 
					                                       f32_4 %454 = OpLoad %60 
					                                       f32_2 %455 = OpVectorShuffle %454 %454 0 1 
					                                       f32_4 %456 = OpImageSampleImplicitLod %453 %455 
					                                                      OpStore %448 %456 
					                                       f32_4 %458 = OpLoad %419 
					                              Uniform f32_4* %460 = OpAccessChain %21 %459 
					                                       f32_4 %461 = OpLoad %460 
					                                       f32_4 %462 = OpFMul %458 %461 
					                                                      OpStore %457 %462 
					                                       f32_4 %464 = OpLoad %448 
					                                       f32_4 %465 = OpLoad %457 
					                                       f32_4 %466 = OpFMul %464 %465 
					                                                      OpStore %463 %466 
					                                       f32_4 %467 = OpLoad %463 
					                                       f32_3 %468 = OpVectorShuffle %467 %467 3 3 3 
					                                       f32_4 %469 = OpLoad %463 
					                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
					                                       f32_3 %471 = OpFMul %468 %470 
					                                                      OpStore %371 %471 
					                                       f32_3 %473 = OpLoad %410 
					                                         f32 %474 = OpLoad %426 
					                                       f32_3 %475 = OpCompositeConstruct %474 %474 %474 
					                                       f32_3 %476 = OpFMul %473 %475 
					                                       f32_3 %477 = OpLoad %371 
					                                       f32_3 %478 = OpFNegate %477 
					                                       f32_3 %479 = OpFAdd %476 %478 
					                                       f32_4 %480 = OpLoad %472 
					                                       f32_4 %481 = OpVectorShuffle %480 %479 4 5 6 3 
					                                                      OpStore %472 %481 
					                                Private f32* %482 = OpAccessChain %418 %14 
					                                         f32 %483 = OpLoad %482 
					                                Private f32* %484 = OpAccessChain %402 %74 
					                                         f32 %485 = OpLoad %484 
					                                         f32 %486 = OpFMul %483 %485 
					                                Private f32* %487 = OpAccessChain %463 %74 
					                                         f32 %488 = OpLoad %487 
					                                         f32 %489 = OpFNegate %488 
					                                         f32 %490 = OpFAdd %486 %489 
					                                Private f32* %491 = OpAccessChain %472 %74 
					                                                      OpStore %491 %490 
					                                       f32_4 %492 = OpLoad %359 
					                                       f32_4 %493 = OpVectorShuffle %492 %492 0 0 0 0 
					                                       f32_4 %494 = OpLoad %472 
					                                       f32_4 %495 = OpFMul %493 %494 
					                                                      OpStore %418 %495 
					                                Private f32* %497 = OpAccessChain %457 %74 
					                                         f32 %498 = OpLoad %497 
					                                Private f32* %499 = OpAccessChain %448 %74 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFMul %498 %500 
					                                Private f32* %502 = OpAccessChain %418 %74 
					                                         f32 %503 = OpLoad %502 
					                                         f32 %504 = OpFAdd %501 %503 
					                                Private f32* %505 = OpAccessChain %496 %74 
					                                                      OpStore %505 %504 
					                                       f32_4 %506 = OpLoad %463 
					                                       f32_3 %507 = OpVectorShuffle %506 %506 0 1 2 
					                                       f32_4 %508 = OpLoad %463 
					                                       f32_3 %509 = OpVectorShuffle %508 %508 3 3 3 
					                                       f32_3 %510 = OpFMul %507 %509 
					                                       f32_4 %511 = OpLoad %418 
					                                       f32_3 %512 = OpVectorShuffle %511 %511 0 1 2 
					                                       f32_3 %513 = OpFAdd %510 %512 
					                                       f32_4 %514 = OpLoad %496 
					                                       f32_4 %515 = OpVectorShuffle %514 %513 4 5 6 3 
					                                                      OpStore %496 %515 
					                                Private f32* %516 = OpAccessChain %30 %14 
					                                         f32 %517 = OpLoad %516 
					                                         f32 %518 = OpFNegate %517 
					                                         f32 %519 = OpFMul %518 %147 
					                                         f32 %520 = OpLoad %279 
					                                         f32 %521 = OpFAdd %519 %520 
					                                Private f32* %522 = OpAccessChain %359 %14 
					                                                      OpStore %522 %521 
					                                Private f32* %523 = OpAccessChain %30 %14 
					                                         f32 %524 = OpLoad %523 
					                                         f32 %525 = OpFMul %524 %147 
					                                         f32 %526 = OpLoad %279 
					                                         f32 %527 = OpFAdd %525 %526 
					                                                      OpStore %279 %527 
					                                         f32 %528 = OpLoad %279 
					                                         f32 %529 = OpExtInst %1 43 %528 %43 %31 
					                                                      OpStore %279 %529 
					                                Uniform f32* %531 = OpAccessChain %21 %530 
					                                         f32 %532 = OpLoad %531 
					                                Uniform f32* %533 = OpAccessChain %21 %348 
					                                         f32 %534 = OpLoad %533 
					                                         f32 %535 = OpFMul %532 %534 
					                                Private f32* %536 = OpAccessChain %30 %14 
					                                                      OpStore %536 %535 
					                                Private f32* %537 = OpAccessChain %30 %14 
					                                         f32 %538 = OpLoad %537 
					                                  Input f32* %539 = OpAccessChain vs_TEXCOORD6 %92 
					                                         f32 %540 = OpLoad %539 
					                                         f32 %541 = OpFMul %538 %540 
					                                Private f32* %542 = OpAccessChain %167 %14 
					                                                      OpStore %542 %541 
					                                Private f32* %543 = OpAccessChain %30 %14 
					                                         f32 %544 = OpLoad %543 
					                                  Input f32* %545 = OpAccessChain vs_TEXCOORD6 %92 
					                                         f32 %546 = OpLoad %545 
					                                         f32 %547 = OpFMul %544 %546 
					                                         f32 %548 = OpFAdd %547 %31 
					                                Private f32* %549 = OpAccessChain %371 %14 
					                                                      OpStore %549 %548 
					                                Private f32* %550 = OpAccessChain %167 %14 
					                                         f32 %551 = OpLoad %550 
					                                         f32 %552 = OpFMul %551 %147 
					                                Private f32* %553 = OpAccessChain %359 %14 
					                                         f32 %554 = OpLoad %553 
					                                         f32 %555 = OpFAdd %552 %554 
					                                Private f32* %556 = OpAccessChain %359 %14 
					                                                      OpStore %556 %555 
					                                Private f32* %557 = OpAccessChain %359 %14 
					                                         f32 %558 = OpLoad %557 
					                                Private f32* %559 = OpAccessChain %371 %14 
					                                         f32 %560 = OpLoad %559 
					                                         f32 %561 = OpFDiv %558 %560 
					                                Private f32* %562 = OpAccessChain %359 %14 
					                                                      OpStore %562 %561 
					                                Private f32* %563 = OpAccessChain %359 %14 
					                                         f32 %564 = OpLoad %563 
					                                         f32 %565 = OpExtInst %1 43 %564 %43 %31 
					                                Private f32* %566 = OpAccessChain %359 %14 
					                                                      OpStore %566 %565 
					                                Private f32* %567 = OpAccessChain %359 %14 
					                                         f32 %568 = OpLoad %567 
					                                         f32 %569 = OpFNegate %568 
					                                         f32 %570 = OpFAdd %569 %31 
					                                Private f32* %571 = OpAccessChain %359 %14 
					                                                      OpStore %571 %570 
					                                       f32_4 %573 = OpLoad %496 
					                                       f32_4 %574 = OpLoad %359 
					                                       f32_4 %575 = OpVectorShuffle %574 %574 0 0 0 0 
					                                       f32_4 %576 = OpFMul %573 %575 
					                                                      OpStore %572 %576 
					                                Uniform f32* %579 = OpAccessChain %21 %578 
					                                         f32 %580 = OpLoad %579 
					                                         f32 %581 = OpFNegate %580 
					                                Uniform f32* %583 = OpAccessChain %21 %582 
					                                         f32 %584 = OpLoad %583 
					                                         f32 %585 = OpFAdd %581 %584 
					                                Private f32* %586 = OpAccessChain %577 %14 
					                                                      OpStore %586 %585 
					                                         f32 %587 = OpLoad %279 
					                                Private f32* %588 = OpAccessChain %577 %14 
					                                         f32 %589 = OpLoad %588 
					                                         f32 %590 = OpFMul %587 %589 
					                                Uniform f32* %591 = OpAccessChain %21 %578 
					                                         f32 %592 = OpLoad %591 
					                                         f32 %593 = OpFAdd %590 %592 
					                                Private f32* %594 = OpAccessChain %577 %14 
					                                                      OpStore %594 %593 
					                         read_only Texture2D %597 = OpLoad %596 
					                                     sampler %599 = OpLoad %598 
					                  read_only Texture2DSampled %600 = OpSampledImage %597 %599 
					                                       f32_4 %601 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %602 = OpVectorShuffle %601 %601 2 3 
					                                       f32_4 %603 = OpImageSampleImplicitLod %600 %602 
					                                       f32_3 %604 = OpVectorShuffle %603 %603 0 1 3 
					                                                      OpStore %595 %604 
					                                       f32_3 %605 = OpLoad %595 
					                                       f32_2 %606 = OpVectorShuffle %605 %605 0 0 
					                                       f32_3 %607 = OpLoad %595 
					                                       f32_2 %608 = OpVectorShuffle %607 %607 2 2 
					                                         f32 %609 = OpDot %606 %608 
					                                Private f32* %610 = OpAccessChain %359 %14 
					                                                      OpStore %610 %609 
					                                Private f32* %611 = OpAccessChain %595 %92 
					                                         f32 %612 = OpLoad %611 
					                                Private f32* %613 = OpAccessChain %595 %92 
					                                         f32 %614 = OpLoad %613 
					                                         f32 %615 = OpFAdd %612 %614 
					                                Private f32* %616 = OpAccessChain %359 %92 
					                                                      OpStore %616 %615 
					                                       f32_4 %617 = OpLoad %359 
					                                       f32_2 %618 = OpVectorShuffle %617 %617 0 1 
					                                       f32_2 %620 = OpFAdd %618 %619 
					                                       f32_4 %621 = OpLoad %359 
					                                       f32_4 %622 = OpVectorShuffle %621 %620 4 5 2 3 
					                                                      OpStore %359 %622 
					                                       f32_4 %624 = OpLoad %359 
					                                       f32_2 %625 = OpVectorShuffle %624 %624 0 1 
					                                       f32_4 %626 = OpLoad %359 
					                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
					                                         f32 %628 = OpDot %625 %627 
					                                                      OpStore %623 %628 
					                                         f32 %629 = OpLoad %623 
					                                         f32 %630 = OpExtInst %1 37 %629 %31 
					                                                      OpStore %623 %630 
					                                         f32 %631 = OpLoad %623 
					                                         f32 %632 = OpFNegate %631 
					                                         f32 %633 = OpFAdd %632 %31 
					                                                      OpStore %623 %633 
					                                         f32 %634 = OpLoad %623 
					                                         f32 %635 = OpExtInst %1 31 %634 
					                                Private f32* %636 = OpAccessChain %359 %44 
					                                                      OpStore %636 %635 
					                                       f32_4 %637 = OpLoad %359 
					                                       f32_3 %638 = OpVectorShuffle %637 %637 0 1 2 
					                                       f32_3 %639 = OpLoad %577 
					                                       f32_3 %640 = OpVectorShuffle %639 %639 0 0 0 
					                                       f32_3 %641 = OpFMul %638 %640 
					                                       f32_3 %644 = OpFAdd %641 %643 
					                                                      OpStore %577 %644 
					                                       f32_4 %645 = OpLoad %572 
					                                       f32_3 %646 = OpVectorShuffle %645 %645 3 3 3 
					                                       f32_3 %647 = OpLoad %577 
					                                       f32_3 %648 = OpFMul %646 %647 
					                                       f32_3 %650 = OpFAdd %648 %649 
					                                                      OpStore %577 %650 
					                                       f32_4 %651 = OpLoad %9 
					                                       f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
					                                       f32_3 %653 = OpLoad %577 
					                                       f32_3 %654 = OpFNegate %653 
					                                       f32_3 %655 = OpFAdd %652 %654 
					                                       f32_4 %656 = OpLoad %9 
					                                       f32_4 %657 = OpVectorShuffle %656 %655 4 5 6 3 
					                                                      OpStore %9 %657 
					                                       f32_4 %658 = OpLoad %9 
					                                       f32_3 %659 = OpVectorShuffle %658 %658 0 1 2 
					                                       f32_4 %660 = OpLoad %9 
					                                       f32_3 %661 = OpVectorShuffle %660 %660 0 1 2 
					                                         f32 %662 = OpDot %659 %661 
					                                Private f32* %663 = OpAccessChain %577 %14 
					                                                      OpStore %663 %662 
					                                Private f32* %664 = OpAccessChain %577 %14 
					                                         f32 %665 = OpLoad %664 
					                                         f32 %666 = OpExtInst %1 32 %665 
					                                Private f32* %667 = OpAccessChain %577 %14 
					                                                      OpStore %667 %666 
					                                       f32_4 %668 = OpLoad %9 
					                                       f32_3 %669 = OpVectorShuffle %668 %668 0 1 2 
					                                       f32_3 %670 = OpLoad %577 
					                                       f32_3 %671 = OpVectorShuffle %670 %670 0 0 0 
					                                       f32_3 %672 = OpFMul %669 %671 
					                                       f32_4 %673 = OpLoad %9 
					                                       f32_4 %674 = OpVectorShuffle %673 %672 4 5 6 3 
					                                                      OpStore %9 %674 
					                                       f32_3 %677 = OpLoad vs_TEXCOORD2 
					                                       f32_4 %678 = OpLoad %9 
					                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
					                                       f32_3 %680 = OpFNegate %679 
					                                         f32 %681 = OpDot %677 %680 
					                                Private f32* %682 = OpAccessChain %359 %14 
					                                                      OpStore %682 %681 
					                                       f32_3 %684 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %685 = OpLoad %9 
					                                       f32_3 %686 = OpVectorShuffle %685 %685 0 1 2 
					                                       f32_3 %687 = OpFNegate %686 
					                                         f32 %688 = OpDot %684 %687 
					                                Private f32* %689 = OpAccessChain %359 %92 
					                                                      OpStore %689 %688 
					                                       f32_3 %691 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %692 = OpLoad %9 
					                                       f32_3 %693 = OpVectorShuffle %692 %692 0 1 2 
					                                       f32_3 %694 = OpFNegate %693 
					                                         f32 %695 = OpDot %691 %694 
					                                Private f32* %696 = OpAccessChain %359 %44 
					                                                      OpStore %696 %695 
					                                       f32_4 %698 = OpLoad %359 
					                                       f32_3 %699 = OpVectorShuffle %698 %698 0 1 2 
					                                       f32_4 %700 = OpLoad %359 
					                                       f32_3 %701 = OpVectorShuffle %700 %700 0 1 2 
					                                         f32 %702 = OpDot %699 %701 
					                                Private f32* %703 = OpAccessChain %697 %14 
					                                                      OpStore %703 %702 
					                                Private f32* %704 = OpAccessChain %697 %14 
					                                         f32 %705 = OpLoad %704 
					                                         f32 %706 = OpExtInst %1 32 %705 
					                                Private f32* %707 = OpAccessChain %697 %14 
					                                                      OpStore %707 %706 
					                                       f32_3 %708 = OpLoad %697 
					                                       f32_3 %709 = OpVectorShuffle %708 %708 0 0 0 
					                                       f32_4 %710 = OpLoad %359 
					                                       f32_3 %711 = OpVectorShuffle %710 %710 0 1 2 
					                                       f32_3 %712 = OpFMul %709 %711 
					                                                      OpStore %697 %712 
					                                       f32_3 %714 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %715 = OpFNegate %714 
					                              Uniform f32_3* %718 = OpAccessChain %21 %716 
					                                       f32_3 %719 = OpLoad %718 
					                                       f32_3 %720 = OpFAdd %715 %719 
					                                                      OpStore %577 %720 
					                                       f32_3 %722 = OpLoad %577 
					                                       f32_3 %723 = OpLoad %577 
					                                         f32 %724 = OpDot %722 %723 
					                                                      OpStore %721 %724 
					                                         f32 %725 = OpLoad %721 
					                                         f32 %726 = OpExtInst %1 32 %725 
					                                                      OpStore %721 %726 
					                                       f32_3 %727 = OpLoad %577 
					                                         f32 %728 = OpLoad %721 
					                                       f32_3 %729 = OpCompositeConstruct %728 %728 %728 
					                                       f32_3 %730 = OpFMul %727 %729 
					                              Uniform f32_4* %732 = OpAccessChain %21 %731 
					                                       f32_4 %733 = OpLoad %732 
					                                       f32_3 %734 = OpVectorShuffle %733 %733 0 1 2 
					                                       f32_3 %735 = OpFAdd %730 %734 
					                                       f32_4 %736 = OpLoad %359 
					                                       f32_4 %737 = OpVectorShuffle %736 %735 4 5 6 3 
					                                                      OpStore %359 %737 
					                                       f32_4 %738 = OpLoad %359 
					                                       f32_3 %739 = OpVectorShuffle %738 %738 0 1 2 
					                                       f32_4 %740 = OpLoad %359 
					                                       f32_3 %741 = OpVectorShuffle %740 %740 0 1 2 
					                                         f32 %742 = OpDot %739 %741 
					                                                      OpStore %623 %742 
					                                         f32 %743 = OpLoad %623 
					                                         f32 %744 = OpExtInst %1 32 %743 
					                                                      OpStore %623 %744 
					                                         f32 %745 = OpLoad %623 
					                                       f32_3 %746 = OpCompositeConstruct %745 %745 %745 
					                                       f32_4 %747 = OpLoad %359 
					                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 2 
					                                       f32_3 %749 = OpFMul %746 %748 
					                                       f32_4 %750 = OpLoad %359 
					                                       f32_4 %751 = OpVectorShuffle %750 %749 4 5 6 3 
					                                                      OpStore %359 %751 
					                                       f32_3 %752 = OpLoad %697 
					                                       f32_4 %753 = OpLoad %359 
					                                       f32_3 %754 = OpVectorShuffle %753 %753 0 1 2 
					                                         f32 %755 = OpDot %752 %754 
					                                Private f32* %756 = OpAccessChain %359 %14 
					                                                      OpStore %756 %755 
					                                       f32_3 %757 = OpLoad %697 
					                              Uniform f32_4* %758 = OpAccessChain %21 %731 
					                                       f32_4 %759 = OpLoad %758 
					                                       f32_3 %760 = OpVectorShuffle %759 %759 0 1 2 
					                                         f32 %761 = OpDot %757 %760 
					                                Private f32* %762 = OpAccessChain %359 %92 
					                                                      OpStore %762 %761 
					                                       f32_4 %763 = OpLoad %359 
					                                       f32_2 %764 = OpVectorShuffle %763 %763 0 1 
					                                       f32_2 %766 = OpExtInst %1 40 %764 %765 
					                                       f32_4 %767 = OpLoad %359 
					                                       f32_4 %768 = OpVectorShuffle %767 %766 4 5 2 3 
					                                                      OpStore %359 %768 
					                                Private f32* %769 = OpAccessChain %359 %14 
					                                         f32 %770 = OpLoad %769 
					                                         f32 %771 = OpExtInst %1 30 %770 
					                                Private f32* %772 = OpAccessChain %697 %14 
					                                                      OpStore %772 %771 
					                                Uniform f32* %775 = OpAccessChain %21 %774 
					                                         f32 %776 = OpLoad %775 
					                                         f32 %777 = OpFNegate %776 
					                                Uniform f32* %779 = OpAccessChain %21 %778 
					                                         f32 %780 = OpLoad %779 
					                                         f32 %781 = OpFAdd %777 %780 
					                                                      OpStore %773 %781 
					                                         f32 %783 = OpLoad %279 
					                                         f32 %784 = OpLoad %773 
					                                         f32 %785 = OpFMul %783 %784 
					                                Uniform f32* %786 = OpAccessChain %21 %774 
					                                         f32 %787 = OpLoad %786 
					                                         f32 %788 = OpFAdd %785 %787 
					                                                      OpStore %782 %788 
					                                         f32 %789 = OpLoad %782 
					                                         f32 %791 = OpFMul %789 %790 
					                                Private f32* %792 = OpAccessChain %359 %14 
					                                                      OpStore %792 %791 
					                                Private f32* %793 = OpAccessChain %697 %14 
					                                         f32 %794 = OpLoad %793 
					                                Private f32* %795 = OpAccessChain %359 %14 
					                                         f32 %796 = OpLoad %795 
					                                         f32 %797 = OpFMul %794 %796 
					                                Private f32* %798 = OpAccessChain %697 %14 
					                                                      OpStore %798 %797 
					                                Private f32* %799 = OpAccessChain %697 %14 
					                                         f32 %800 = OpLoad %799 
					                                         f32 %801 = OpExtInst %1 29 %800 
					                                Private f32* %802 = OpAccessChain %697 %14 
					                                                      OpStore %802 %801 
					                              Uniform f32_4* %804 = OpAccessChain %21 %803 
					                                       f32_4 %805 = OpLoad %804 
					                                       f32_3 %806 = OpVectorShuffle %805 %805 0 1 2 
					                              Uniform f32_4* %808 = OpAccessChain %21 %807 
					                                       f32_4 %809 = OpLoad %808 
					                                       f32_3 %810 = OpVectorShuffle %809 %809 0 1 2 
					                                       f32_3 %811 = OpFMul %806 %810 
					                                       f32_4 %812 = OpLoad %359 
					                                       f32_4 %813 = OpVectorShuffle %812 %811 4 1 5 6 
					                                                      OpStore %359 %813 
					                                       f32_3 %814 = OpLoad %697 
					                                       f32_3 %815 = OpVectorShuffle %814 %814 0 0 0 
					                                       f32_4 %816 = OpLoad %359 
					                                       f32_3 %817 = OpVectorShuffle %816 %816 0 2 3 
					                                       f32_3 %818 = OpFMul %815 %817 
					                                                      OpStore %697 %818 
					                                Private f32* %819 = OpAccessChain %572 %74 
					                                         f32 %820 = OpLoad %819 
					                                         f32 %822 = OpExtInst %1 40 %820 %821 
					                                                      OpStore %332 %822 
					                                       f32_4 %823 = OpLoad %572 
					                                       f32_3 %824 = OpVectorShuffle %823 %823 0 1 2 
					                                         f32 %825 = OpLoad %332 
					                                       f32_3 %826 = OpCompositeConstruct %825 %825 %825 
					                                       f32_3 %827 = OpFDiv %824 %826 
					                                       f32_4 %828 = OpLoad %457 
					                                       f32_4 %829 = OpVectorShuffle %828 %827 4 5 6 3 
					                                                      OpStore %457 %829 
					                                Private f32* %832 = OpAccessChain %572 %74 
					                                         f32 %833 = OpLoad %832 
					                                 Output f32* %835 = OpAccessChain %831 %74 
					                                                      OpStore %835 %833 
					                                       f32_4 %836 = OpLoad %457 
					                                       f32_3 %837 = OpVectorShuffle %836 %836 0 1 2 
					                              Uniform f32_4* %838 = OpAccessChain %21 %803 
					                                       f32_4 %839 = OpLoad %838 
					                                       f32_3 %840 = OpVectorShuffle %839 %839 0 1 2 
					                                       f32_3 %841 = OpFMul %837 %840 
					                                       f32_4 %842 = OpLoad %359 
					                                       f32_4 %843 = OpVectorShuffle %842 %841 4 1 5 6 
					                                                      OpStore %359 %843 
					                                       f32_4 %844 = OpLoad %359 
					                                       f32_3 %845 = OpVectorShuffle %844 %844 0 2 3 
					                                       f32_4 %846 = OpLoad %359 
					                                       f32_3 %847 = OpVectorShuffle %846 %846 1 1 1 
					                                       f32_3 %848 = OpFMul %845 %847 
					                                       f32_3 %849 = OpLoad %697 
					                                       f32_3 %850 = OpFAdd %848 %849 
					                                                      OpStore %697 %850 
					                                       f32_3 %851 = OpLoad %697 
					                                       f32_4 %852 = OpLoad %831 
					                                       f32_4 %853 = OpVectorShuffle %852 %851 4 5 6 3 
					                                                      OpStore %831 %853 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[2];
						float _FaceDilate;
						vec4 unused_0_4[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_6[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_17;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					vec3 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = u_xlat2.y * unity_MatrixVP[1].w;
					    u_xlat15 = unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat2.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat2.x = u_xlat15 * 1.5;
					    u_xlat7.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat2.x = u_xlat7.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat2.x);
					    u_xlat7.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat7.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat7.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat3.y = dot(u_xlat0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.z = dot(u_xlat0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.x = dot(u_xlat0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat3.xyz = (-u_xlat7.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat7.x = dot(u_xlat0.yzx, u_xlat7.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat7.x) * u_xlat15 + u_xlat2.x;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat2.x = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat15 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat3.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = _EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD8 = unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "SPOT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _FaceDilate;
					uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _FaceTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					vec3 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat2.x = u_xlat15 * 1.5;
					    u_xlat7.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat2.x = u_xlat7.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat2.x);
					    u_xlat7.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat7.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat3.xyz = (-u_xlat7.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat7.x = dot(u_xlat0.yzx, u_xlat7.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat7.x) * u_xlat15 + u_xlat2.x;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat2.x = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat15 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _FaceUVSpeedX;
					uniform 	float _FaceUVSpeedY;
					uniform 	vec4 _FaceColor;
					uniform 	float _OutlineSoftness;
					uniform 	float _OutlineUVSpeedX;
					uniform 	float _OutlineUVSpeedY;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _Bevel;
					uniform 	float _BevelOffset;
					uniform 	float _BevelWidth;
					uniform 	float _BevelClamp;
					uniform 	float _BevelRoundness;
					uniform 	float _BumpOutline;
					uniform 	float _BumpFace;
					uniform 	float _ShaderFlags;
					uniform 	float _ScaleRatioA;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _FaceShininess;
					uniform 	float _OutlineShininess;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _FaceTex;
					UNITY_LOCATION(2) uniform  sampler2D _OutlineTex;
					UNITY_LOCATION(3) uniform  sampler2D _BumpMap;
					UNITY_LOCATION(4) uniform  sampler2D _LightTexture0;
					UNITY_LOCATION(5) uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat10_4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat5.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat5.x = u_xlat13 * u_xlat5.x + _FaceShininess;
					    u_xlat5.x = u_xlat5.x * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat5.xy = u_xlat2.xy / u_xlat2.ww;
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat10_3 = texture(_LightTexture0, u_xlat5.xy);
					    u_xlatb5 = 0.0<u_xlat2.z;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10_3.w * u_xlat5.x;
					    u_xlat5.x = u_xlat10_2.x * u_xlat5.x;
					    u_xlat2.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "SPOT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 663
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %94 %106 %132 %147 %159 %328 %425 %447 %497 %501 %577 %581 %597 %598 %620 %650 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpDecorate %22 ArrayStride 22 
					                                                      OpDecorate %23 ArrayStride 23 
					                                                      OpMemberDecorate %24 0 Offset 24 
					                                                      OpMemberDecorate %24 1 Offset 24 
					                                                      OpMemberDecorate %24 2 Offset 24 
					                                                      OpMemberDecorate %24 3 Offset 24 
					                                                      OpMemberDecorate %24 4 Offset 24 
					                                                      OpMemberDecorate %24 5 Offset 24 
					                                                      OpMemberDecorate %24 6 Offset 24 
					                                                      OpMemberDecorate %24 7 Offset 24 
					                                                      OpMemberDecorate %24 8 Offset 24 
					                                                      OpMemberDecorate %24 9 Offset 24 
					                                                      OpMemberDecorate %24 10 Offset 24 
					                                                      OpMemberDecorate %24 11 Offset 24 
					                                                      OpMemberDecorate %24 12 Offset 24 
					                                                      OpMemberDecorate %24 13 Offset 24 
					                                                      OpMemberDecorate %24 14 Offset 24 
					                                                      OpMemberDecorate %24 15 Offset 24 
					                                                      OpMemberDecorate %24 16 Offset 24 
					                                                      OpMemberDecorate %24 17 Offset 24 
					                                                      OpMemberDecorate %24 18 Offset 24 
					                                                      OpMemberDecorate %24 19 Offset 24 
					                                                      OpMemberDecorate %24 20 Offset 24 
					                                                      OpMemberDecorate %24 21 Offset 24 
					                                                      OpDecorate %24 Block 
					                                                      OpDecorate %26 DescriptorSet 26 
					                                                      OpDecorate %26 Binding 26 
					                                                      OpMemberDecorate %92 0 BuiltIn 92 
					                                                      OpMemberDecorate %92 1 BuiltIn 92 
					                                                      OpMemberDecorate %92 2 BuiltIn 92 
					                                                      OpDecorate %92 Block 
					                                                      OpDecorate %106 Location 106 
					                                                      OpDecorate vs_TEXCOORD0 Location 132 
					                                                      OpDecorate vs_TEXCOORD1 Location 147 
					                                                      OpDecorate %159 Location 159 
					                                                      OpDecorate %328 Location 328 
					                                                      OpDecorate vs_TEXCOORD5 Location 425 
					                                                      OpDecorate vs_TEXCOORD6 Location 447 
					                                                      OpDecorate vs_TEXCOORD2 Location 497 
					                                                      OpDecorate %501 Location 501 
					                                                      OpDecorate vs_TEXCOORD3 Location 577 
					                                                      OpDecorate vs_TEXCOORD4 Location 581 
					                                                      OpDecorate %597 RelaxedPrecision 
					                                                      OpDecorate %597 Location 597 
					                                                      OpDecorate %598 RelaxedPrecision 
					                                                      OpDecorate %598 Location 598 
					                                                      OpDecorate %599 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 620 
					                                                      OpDecorate vs_TEXCOORD8 Location 650 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %12 = OpTypeVector %6 2 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %7 %17 
					                                              %19 = OpTypeArray %7 %17 
					                                              %20 = OpTypeArray %7 %17 
					                                              %21 = OpTypeArray %7 %17 
					                                              %22 = OpTypeArray %7 %17 
					                                              %23 = OpTypeArray %7 %17 
					                                              %24 = OpTypeStruct %15 %7 %18 %19 %7 %20 %21 %22 %6 %23 %6 %6 %6 %6 %6 %6 %6 %6 %6 %7 %7 %7 
					                                              %25 = OpTypePointer Uniform %24 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %26 = OpVariable Uniform 
					                                              %27 = OpTypeInt 32 1 
					                                          i32 %28 = OpConstant 13 
					                                              %29 = OpTypePointer Uniform %6 
					                                          i32 %32 = OpConstant 14 
					                               Private f32_4* %39 = OpVariable Private 
					                                          i32 %42 = OpConstant 2 
					                                          i32 %43 = OpConstant 1 
					                                              %44 = OpTypePointer Uniform %7 
					                                          i32 %48 = OpConstant 0 
					                               Private f32_4* %63 = OpVariable Private 
					                                          i32 %65 = OpConstant 3 
					                               Private f32_4* %69 = OpVariable Private 
					                                          i32 %72 = OpConstant 6 
					                                          u32 %90 = OpConstant 1 
					                                              %91 = OpTypeArray %6 %90 
					                                              %92 = OpTypeStruct %7 %6 %91 
					                                              %93 = OpTypePointer Output %92 
					         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
					                                             %102 = OpTypePointer Output %7 
					                                             %104 = OpTypePointer Private %6 
					                                Private f32* %105 = OpVariable Private 
					                                Input f32_4* %106 = OpVariable Input 
					                                         u32 %107 = OpConstant 0 
					                                             %108 = OpTypePointer Input %6 
					                                         f32 %111 = OpConstant 3,674022E-40 
					                                         f32 %119 = OpConstant 3,674022E-40 
					                                         f32 %127 = OpConstant 3,674022E-40 
					                                       f32_2 %128 = OpConstantComposite %127 %127 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                                         i32 %135 = OpConstant 20 
					                                             %146 = OpTypePointer Output %12 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                         i32 %150 = OpConstant 21 
					                                Input f32_4* %159 = OpVariable Input 
					                                         i32 %162 = OpConstant 19 
					                                         u32 %175 = OpConstant 3 
					                                         u32 %188 = OpConstant 2 
					                                         i32 %204 = OpConstant 5 
					                                         i32 %225 = OpConstant 16 
					                                         i32 %228 = OpConstant 17 
					                                         i32 %252 = OpConstant 15 
					                                         f32 %262 = OpConstant 3,674022E-40 
					                                             %265 = OpTypePointer Private %15 
					                              Private f32_3* %266 = OpVariable Private 
					                                         i32 %267 = OpConstant 18 
					                                         f32 %271 = OpConstant 3,674022E-40 
					                                             %286 = OpTypePointer Uniform %15 
					                                             %327 = OpTypePointer Input %15 
					                                Input f32_3* %328 = OpVariable Input 
					                                             %334 = OpTypePointer Private %27 
					                                Private i32* %335 = OpVariable Private 
					                                         f32 %336 = OpConstant 3,674022E-40 
					                                             %339 = OpTypeBool 
					                                         u32 %341 = OpConstant 4294967295 
					                                Private i32* %344 = OpVariable Private 
					                                             %424 = OpTypePointer Output %15 
					                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
					                       Output f32_2* vs_TEXCOORD6 = OpVariable Output 
					                                             %456 = OpTypePointer Output %6 
					                                             %458 = OpTypePointer Private %339 
					                               Private bool* %459 = OpVariable Private 
					                                         i32 %465 = OpConstant 10 
					                                         i32 %469 = OpConstant 11 
					                                         f32 %482 = OpConstant 3,674022E-40 
					                                         i32 %484 = OpConstant 8 
					                                         i32 %489 = OpConstant 12 
					                                         f32 %494 = OpConstant 3,674022E-40 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_4* %501 = OpVariable Input 
					                              Private f32_3* %546 = OpVariable Private 
					                                Private f32* %560 = OpVariable Private 
					                                         i32 %563 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %597 = OpVariable Output 
					                                Input f32_4* %598 = OpVariable Input 
					                                         i32 %602 = OpConstant 9 
					                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
					                                         i32 %632 = OpConstant 7 
					                       Output f32_4* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %13 = OpLoad %11 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %30 = OpAccessChain %26 %28 
					                                          f32 %31 = OpLoad %30 
					                                 Uniform f32* %33 = OpAccessChain %26 %32 
					                                          f32 %34 = OpLoad %33 
					                                        f32_2 %35 = OpCompositeConstruct %31 %34 
					                                        f32_2 %36 = OpFAdd %14 %35 
					                                        f32_4 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 2 3 
					                                                      OpStore %9 %38 
					                                        f32_4 %40 = OpLoad %9 
					                                        f32_4 %41 = OpVectorShuffle %40 %40 1 1 1 1 
					                               Uniform f32_4* %45 = OpAccessChain %26 %42 %43 
					                                        f32_4 %46 = OpLoad %45 
					                                        f32_4 %47 = OpFMul %41 %46 
					                                                      OpStore %39 %47 
					                               Uniform f32_4* %49 = OpAccessChain %26 %42 %48 
					                                        f32_4 %50 = OpLoad %49 
					                                        f32_4 %51 = OpLoad %9 
					                                        f32_4 %52 = OpVectorShuffle %51 %51 0 0 0 0 
					                                        f32_4 %53 = OpFMul %50 %52 
					                                        f32_4 %54 = OpLoad %39 
					                                        f32_4 %55 = OpFAdd %53 %54 
					                                                      OpStore %39 %55 
					                               Uniform f32_4* %56 = OpAccessChain %26 %42 %42 
					                                        f32_4 %57 = OpLoad %56 
					                                        f32_4 %58 = OpLoad %11 
					                                        f32_4 %59 = OpVectorShuffle %58 %58 2 2 2 2 
					                                        f32_4 %60 = OpFMul %57 %59 
					                                        f32_4 %61 = OpLoad %39 
					                                        f32_4 %62 = OpFAdd %60 %61 
					                                                      OpStore %39 %62 
					                                        f32_4 %64 = OpLoad %39 
					                               Uniform f32_4* %66 = OpAccessChain %26 %42 %65 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_4 %68 = OpFAdd %64 %67 
					                                                      OpStore %63 %68 
					                                        f32_4 %70 = OpLoad %63 
					                                        f32_4 %71 = OpVectorShuffle %70 %70 1 1 1 1 
					                               Uniform f32_4* %73 = OpAccessChain %26 %72 %43 
					                                        f32_4 %74 = OpLoad %73 
					                                        f32_4 %75 = OpFMul %71 %74 
					                                                      OpStore %69 %75 
					                               Uniform f32_4* %76 = OpAccessChain %26 %72 %48 
					                                        f32_4 %77 = OpLoad %76 
					                                        f32_4 %78 = OpLoad %63 
					                                        f32_4 %79 = OpVectorShuffle %78 %78 0 0 0 0 
					                                        f32_4 %80 = OpFMul %77 %79 
					                                        f32_4 %81 = OpLoad %69 
					                                        f32_4 %82 = OpFAdd %80 %81 
					                                                      OpStore %69 %82 
					                               Uniform f32_4* %83 = OpAccessChain %26 %72 %42 
					                                        f32_4 %84 = OpLoad %83 
					                                        f32_4 %85 = OpLoad %63 
					                                        f32_4 %86 = OpVectorShuffle %85 %85 2 2 2 2 
					                                        f32_4 %87 = OpFMul %84 %86 
					                                        f32_4 %88 = OpLoad %69 
					                                        f32_4 %89 = OpFAdd %87 %88 
					                                                      OpStore %69 %89 
					                               Uniform f32_4* %95 = OpAccessChain %26 %72 %65 
					                                        f32_4 %96 = OpLoad %95 
					                                        f32_4 %97 = OpLoad %63 
					                                        f32_4 %98 = OpVectorShuffle %97 %97 3 3 3 3 
					                                        f32_4 %99 = OpFMul %96 %98 
					                                       f32_4 %100 = OpLoad %69 
					                                       f32_4 %101 = OpFAdd %99 %100 
					                               Output f32_4* %103 = OpAccessChain %94 %48 
					                                                      OpStore %103 %101 
					                                  Input f32* %109 = OpAccessChain %106 %107 
					                                         f32 %110 = OpLoad %109 
					                                         f32 %112 = OpFMul %110 %111 
					                                                      OpStore %105 %112 
					                                         f32 %113 = OpLoad %105 
					                                         f32 %114 = OpExtInst %1 8 %113 
					                                Private f32* %115 = OpAccessChain %69 %107 
					                                                      OpStore %115 %114 
					                                Private f32* %116 = OpAccessChain %69 %107 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFNegate %117 
					                                         f32 %120 = OpFMul %118 %119 
					                                  Input f32* %121 = OpAccessChain %106 %107 
					                                         f32 %122 = OpLoad %121 
					                                         f32 %123 = OpFAdd %120 %122 
					                                Private f32* %124 = OpAccessChain %69 %90 
					                                                      OpStore %124 %123 
					                                       f32_4 %125 = OpLoad %69 
					                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
					                                       f32_2 %129 = OpFMul %126 %128 
					                                       f32_4 %130 = OpLoad %69 
					                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 3 
					                                                      OpStore %69 %131 
					                                       f32_4 %133 = OpLoad %69 
					                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
					                              Uniform f32_4* %136 = OpAccessChain %26 %135 
					                                       f32_4 %137 = OpLoad %136 
					                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
					                                       f32_2 %139 = OpFMul %134 %138 
					                              Uniform f32_4* %140 = OpAccessChain %26 %135 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
					                                       f32_2 %143 = OpFAdd %139 %142 
					                                       f32_4 %144 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %145 = OpVectorShuffle %144 %143 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %145 
					                                       f32_4 %148 = OpLoad %69 
					                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
					                              Uniform f32_4* %151 = OpAccessChain %26 %150 
					                                       f32_4 %152 = OpLoad %151 
					                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
					                                       f32_2 %154 = OpFMul %149 %153 
					                              Uniform f32_4* %155 = OpAccessChain %26 %150 
					                                       f32_4 %156 = OpLoad %155 
					                                       f32_2 %157 = OpVectorShuffle %156 %156 2 3 
					                                       f32_2 %158 = OpFAdd %154 %157 
					                                                      OpStore vs_TEXCOORD1 %158 
					                                       f32_4 %160 = OpLoad %159 
					                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
					                              Uniform f32_4* %163 = OpAccessChain %26 %162 
					                                       f32_4 %164 = OpLoad %163 
					                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
					                                       f32_2 %166 = OpFMul %161 %165 
					                              Uniform f32_4* %167 = OpAccessChain %26 %162 
					                                       f32_4 %168 = OpLoad %167 
					                                       f32_2 %169 = OpVectorShuffle %168 %168 2 3 
					                                       f32_2 %170 = OpFAdd %166 %169 
					                                       f32_4 %171 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %172 
					                                Private f32* %173 = OpAccessChain %63 %90 
					                                         f32 %174 = OpLoad %173 
					                                Uniform f32* %176 = OpAccessChain %26 %72 %43 %175 
					                                         f32 %177 = OpLoad %176 
					                                         f32 %178 = OpFMul %174 %177 
					                                                      OpStore %105 %178 
					                                Uniform f32* %179 = OpAccessChain %26 %72 %48 %175 
					                                         f32 %180 = OpLoad %179 
					                                Private f32* %181 = OpAccessChain %63 %107 
					                                         f32 %182 = OpLoad %181 
					                                         f32 %183 = OpFMul %180 %182 
					                                         f32 %184 = OpLoad %105 
					                                         f32 %185 = OpFAdd %183 %184 
					                                                      OpStore %105 %185 
					                                Uniform f32* %186 = OpAccessChain %26 %72 %42 %175 
					                                         f32 %187 = OpLoad %186 
					                                Private f32* %189 = OpAccessChain %63 %188 
					                                         f32 %190 = OpLoad %189 
					                                         f32 %191 = OpFMul %187 %190 
					                                         f32 %192 = OpLoad %105 
					                                         f32 %193 = OpFAdd %191 %192 
					                                                      OpStore %105 %193 
					                                Uniform f32* %194 = OpAccessChain %26 %72 %65 %175 
					                                         f32 %195 = OpLoad %194 
					                                Private f32* %196 = OpAccessChain %63 %175 
					                                         f32 %197 = OpLoad %196 
					                                         f32 %198 = OpFMul %195 %197 
					                                         f32 %199 = OpLoad %105 
					                                         f32 %200 = OpFAdd %198 %199 
					                                                      OpStore %105 %200 
					                              Uniform f32_4* %201 = OpAccessChain %26 %43 
					                                       f32_4 %202 = OpLoad %201 
					                                       f32_2 %203 = OpVectorShuffle %202 %202 1 1 
					                              Uniform f32_4* %205 = OpAccessChain %26 %204 %43 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                                       f32_2 %208 = OpFMul %203 %207 
					                                       f32_4 %209 = OpLoad %63 
					                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 2 3 
					                                                      OpStore %63 %210 
					                              Uniform f32_4* %211 = OpAccessChain %26 %204 %48 
					                                       f32_4 %212 = OpLoad %211 
					                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
					                              Uniform f32_4* %214 = OpAccessChain %26 %43 
					                                       f32_4 %215 = OpLoad %214 
					                                       f32_2 %216 = OpVectorShuffle %215 %215 0 0 
					                                       f32_2 %217 = OpFMul %213 %216 
					                                       f32_4 %218 = OpLoad %63 
					                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
					                                       f32_2 %220 = OpFAdd %217 %219 
					                                       f32_4 %221 = OpLoad %63 
					                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 2 3 
					                                                      OpStore %63 %222 
					                                       f32_4 %223 = OpLoad %63 
					                                       f32_2 %224 = OpVectorShuffle %223 %223 0 1 
					                                Uniform f32* %226 = OpAccessChain %26 %225 
					                                         f32 %227 = OpLoad %226 
					                                Uniform f32* %229 = OpAccessChain %26 %228 
					                                         f32 %230 = OpLoad %229 
					                                       f32_2 %231 = OpCompositeConstruct %227 %230 
					                                       f32_2 %232 = OpFMul %224 %231 
					                                       f32_4 %233 = OpLoad %63 
					                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 2 3 
					                                                      OpStore %63 %234 
					                                         f32 %235 = OpLoad %105 
					                                       f32_2 %236 = OpCompositeConstruct %235 %235 
					                                       f32_4 %237 = OpLoad %63 
					                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
					                                       f32_2 %239 = OpFDiv %236 %238 
					                                       f32_4 %240 = OpLoad %63 
					                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 2 3 
					                                                      OpStore %63 %241 
					                                       f32_4 %242 = OpLoad %63 
					                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
					                                       f32_4 %244 = OpLoad %63 
					                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
					                                         f32 %246 = OpDot %243 %245 
					                                                      OpStore %105 %246 
					                                         f32 %247 = OpLoad %105 
					                                         f32 %248 = OpExtInst %1 32 %247 
					                                                      OpStore %105 %248 
					                                  Input f32* %249 = OpAccessChain %106 %90 
					                                         f32 %250 = OpLoad %249 
					                                         f32 %251 = OpExtInst %1 4 %250 
					                                Uniform f32* %253 = OpAccessChain %26 %252 
					                                         f32 %254 = OpLoad %253 
					                                         f32 %255 = OpFMul %251 %254 
					                                Private f32* %256 = OpAccessChain %63 %107 
					                                                      OpStore %256 %255 
					                                         f32 %257 = OpLoad %105 
					                                Private f32* %258 = OpAccessChain %63 %107 
					                                         f32 %259 = OpLoad %258 
					                                         f32 %260 = OpFMul %257 %259 
					                                                      OpStore %105 %260 
					                                         f32 %261 = OpLoad %105 
					                                         f32 %263 = OpFMul %261 %262 
					                                Private f32* %264 = OpAccessChain %63 %107 
					                                                      OpStore %264 %263 
					                                Uniform f32* %268 = OpAccessChain %26 %267 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpFNegate %269 
					                                         f32 %272 = OpFAdd %270 %271 
					                                Private f32* %273 = OpAccessChain %266 %107 
					                                                      OpStore %273 %272 
					                                Private f32* %274 = OpAccessChain %266 %107 
					                                         f32 %275 = OpLoad %274 
					                                Private f32* %276 = OpAccessChain %63 %107 
					                                         f32 %277 = OpLoad %276 
					                                         f32 %278 = OpFMul %275 %277 
					                                Private f32* %279 = OpAccessChain %63 %107 
					                                                      OpStore %279 %278 
					                                         f32 %280 = OpLoad %105 
					                                         f32 %281 = OpFMul %280 %262 
					                                Private f32* %282 = OpAccessChain %63 %107 
					                                         f32 %283 = OpLoad %282 
					                                         f32 %284 = OpFNegate %283 
					                                         f32 %285 = OpFAdd %281 %284 
					                                                      OpStore %105 %285 
					                              Uniform f32_3* %287 = OpAccessChain %26 %48 
					                                       f32_3 %288 = OpLoad %287 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
					                              Uniform f32_4* %290 = OpAccessChain %26 %65 %43 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %289 %292 
					                                                      OpStore %266 %293 
					                              Uniform f32_4* %294 = OpAccessChain %26 %65 %48 
					                                       f32_4 %295 = OpLoad %294 
					                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
					                              Uniform f32_3* %297 = OpAccessChain %26 %48 
					                                       f32_3 %298 = OpLoad %297 
					                                       f32_3 %299 = OpVectorShuffle %298 %298 0 0 0 
					                                       f32_3 %300 = OpFMul %296 %299 
					                                       f32_3 %301 = OpLoad %266 
					                                       f32_3 %302 = OpFAdd %300 %301 
					                                                      OpStore %266 %302 
					                              Uniform f32_4* %303 = OpAccessChain %26 %65 %42 
					                                       f32_4 %304 = OpLoad %303 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
					                              Uniform f32_3* %306 = OpAccessChain %26 %48 
					                                       f32_3 %307 = OpLoad %306 
					                                       f32_3 %308 = OpVectorShuffle %307 %307 2 2 2 
					                                       f32_3 %309 = OpFMul %305 %308 
					                                       f32_3 %310 = OpLoad %266 
					                                       f32_3 %311 = OpFAdd %309 %310 
					                                                      OpStore %266 %311 
					                                       f32_3 %312 = OpLoad %266 
					                              Uniform f32_4* %313 = OpAccessChain %26 %65 %65 
					                                       f32_4 %314 = OpLoad %313 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
					                                       f32_3 %316 = OpFAdd %312 %315 
					                                                      OpStore %266 %316 
					                                  Input f32* %317 = OpAccessChain %11 %188 
					                                         f32 %318 = OpLoad %317 
					                                Private f32* %319 = OpAccessChain %9 %188 
					                                                      OpStore %319 %318 
					                                       f32_4 %320 = OpLoad %9 
					                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
					                                       f32_3 %322 = OpFNegate %321 
					                                       f32_3 %323 = OpLoad %266 
					                                       f32_3 %324 = OpFAdd %322 %323 
					                                       f32_4 %325 = OpLoad %9 
					                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
					                                                      OpStore %9 %326 
					                                       f32_3 %329 = OpLoad %328 
					                                       f32_4 %330 = OpLoad %9 
					                                       f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
					                                         f32 %332 = OpDot %329 %331 
					                                Private f32* %333 = OpAccessChain %9 %107 
					                                                      OpStore %333 %332 
					                                Private f32* %337 = OpAccessChain %9 %107 
					                                         f32 %338 = OpLoad %337 
					                                        bool %340 = OpFOrdLessThan %336 %338 
					                                         u32 %342 = OpSelect %340 %341 %107 
					                                         i32 %343 = OpBitcast %342 
					                                                      OpStore %335 %343 
					                                Private f32* %345 = OpAccessChain %9 %107 
					                                         f32 %346 = OpLoad %345 
					                                        bool %347 = OpFOrdLessThan %346 %336 
					                                         u32 %348 = OpSelect %347 %341 %107 
					                                         i32 %349 = OpBitcast %348 
					                                                      OpStore %344 %349 
					                                         i32 %350 = OpLoad %335 
					                                         i32 %351 = OpSNegate %350 
					                                         i32 %352 = OpLoad %344 
					                                         i32 %353 = OpIAdd %351 %352 
					                                                      OpStore %344 %353 
					                                         i32 %354 = OpLoad %344 
					                                         f32 %355 = OpConvertSToF %354 
					                                Private f32* %356 = OpAccessChain %9 %107 
					                                                      OpStore %356 %355 
					                                       f32_4 %357 = OpLoad %9 
					                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
					                                       f32_3 %359 = OpLoad %328 
					                                       f32_3 %360 = OpFMul %358 %359 
					                                       f32_4 %361 = OpLoad %9 
					                                       f32_4 %362 = OpVectorShuffle %361 %360 4 5 6 3 
					                                                      OpStore %9 %362 
					                                       f32_4 %363 = OpLoad %9 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                              Uniform f32_4* %365 = OpAccessChain %26 %65 %48 
					                                       f32_4 %366 = OpLoad %365 
					                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
					                                         f32 %368 = OpDot %364 %367 
					                                Private f32* %369 = OpAccessChain %69 %90 
					                                                      OpStore %369 %368 
					                                       f32_4 %370 = OpLoad %9 
					                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
					                              Uniform f32_4* %372 = OpAccessChain %26 %65 %43 
					                                       f32_4 %373 = OpLoad %372 
					                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
					                                         f32 %375 = OpDot %371 %374 
					                                Private f32* %376 = OpAccessChain %69 %188 
					                                                      OpStore %376 %375 
					                                       f32_4 %377 = OpLoad %9 
					                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
					                              Uniform f32_4* %379 = OpAccessChain %26 %65 %42 
					                                       f32_4 %380 = OpLoad %379 
					                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
					                                         f32 %382 = OpDot %378 %381 
					                                Private f32* %383 = OpAccessChain %69 %107 
					                                                      OpStore %383 %382 
					                                       f32_4 %384 = OpLoad %69 
					                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
					                                       f32_4 %386 = OpLoad %69 
					                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
					                                         f32 %388 = OpDot %385 %387 
					                                Private f32* %389 = OpAccessChain %9 %107 
					                                                      OpStore %389 %388 
					                                Private f32* %390 = OpAccessChain %9 %107 
					                                         f32 %391 = OpLoad %390 
					                                         f32 %392 = OpExtInst %1 32 %391 
					                                Private f32* %393 = OpAccessChain %9 %107 
					                                                      OpStore %393 %392 
					                                       f32_4 %394 = OpLoad %9 
					                                       f32_3 %395 = OpVectorShuffle %394 %394 0 0 0 
					                                       f32_4 %396 = OpLoad %69 
					                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
					                                       f32_3 %398 = OpFMul %395 %397 
					                                       f32_4 %399 = OpLoad %9 
					                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
					                                                      OpStore %9 %400 
					                              Uniform f32_4* %401 = OpAccessChain %26 %42 %65 
					                                       f32_4 %402 = OpLoad %401 
					                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
					                                       f32_4 %404 = OpLoad %11 
					                                       f32_3 %405 = OpVectorShuffle %404 %404 3 3 3 
					                                       f32_3 %406 = OpFMul %403 %405 
					                                       f32_4 %407 = OpLoad %39 
					                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
					                                       f32_3 %409 = OpFAdd %406 %408 
					                                                      OpStore %266 %409 
					                              Uniform f32_4* %410 = OpAccessChain %26 %42 %65 
					                                       f32_4 %411 = OpLoad %410 
					                                       f32_4 %412 = OpLoad %11 
					                                       f32_4 %413 = OpVectorShuffle %412 %412 3 3 3 3 
					                                       f32_4 %414 = OpFMul %411 %413 
					                                       f32_4 %415 = OpLoad %39 
					                                       f32_4 %416 = OpFAdd %414 %415 
					                                                      OpStore %39 %416 
					                                       f32_3 %417 = OpLoad %266 
					                                       f32_3 %418 = OpFNegate %417 
					                              Uniform f32_3* %419 = OpAccessChain %26 %48 
					                                       f32_3 %420 = OpLoad %419 
					                                       f32_3 %421 = OpFAdd %418 %420 
					                                       f32_4 %422 = OpLoad %69 
					                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 6 3 
					                                                      OpStore %69 %423 
					                                       f32_3 %426 = OpLoad %266 
					                                                      OpStore vs_TEXCOORD5 %426 
					                                       f32_4 %427 = OpLoad %69 
					                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
					                                       f32_4 %429 = OpLoad %69 
					                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
					                                         f32 %431 = OpDot %428 %430 
					                                Private f32* %432 = OpAccessChain %266 %107 
					                                                      OpStore %432 %431 
					                                Private f32* %433 = OpAccessChain %266 %107 
					                                         f32 %434 = OpLoad %433 
					                                         f32 %435 = OpExtInst %1 32 %434 
					                                Private f32* %436 = OpAccessChain %266 %107 
					                                                      OpStore %436 %435 
					                                       f32_3 %437 = OpLoad %266 
					                                       f32_3 %438 = OpVectorShuffle %437 %437 0 0 0 
					                                       f32_4 %439 = OpLoad %69 
					                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
					                                       f32_3 %441 = OpFMul %438 %440 
					                                                      OpStore %266 %441 
					                                       f32_4 %442 = OpLoad %9 
					                                       f32_3 %443 = OpVectorShuffle %442 %442 1 2 0 
					                                       f32_3 %444 = OpLoad %266 
					                                         f32 %445 = OpDot %443 %444 
					                                Private f32* %446 = OpAccessChain %266 %107 
					                                                      OpStore %446 %445 
					                                Private f32* %448 = OpAccessChain %266 %107 
					                                         f32 %449 = OpLoad %448 
					                                         f32 %450 = OpExtInst %1 4 %449 
					                                         f32 %451 = OpLoad %105 
					                                         f32 %452 = OpFMul %450 %451 
					                                Private f32* %453 = OpAccessChain %63 %107 
					                                         f32 %454 = OpLoad %453 
					                                         f32 %455 = OpFAdd %452 %454 
					                                 Output f32* %457 = OpAccessChain vs_TEXCOORD6 %90 
					                                                      OpStore %457 %455 
					                                  Input f32* %460 = OpAccessChain %106 %90 
					                                         f32 %461 = OpLoad %460 
					                                        bool %462 = OpFOrdGreaterThanEqual %336 %461 
					                                                      OpStore %459 %462 
					                                        bool %463 = OpLoad %459 
					                                         f32 %464 = OpSelect %463 %271 %336 
					                                                      OpStore %105 %464 
					                                Uniform f32* %466 = OpAccessChain %26 %465 
					                                         f32 %467 = OpLoad %466 
					                                         f32 %468 = OpFNegate %467 
					                                Uniform f32* %470 = OpAccessChain %26 %469 
					                                         f32 %471 = OpLoad %470 
					                                         f32 %472 = OpFAdd %468 %471 
					                                Private f32* %473 = OpAccessChain %63 %107 
					                                                      OpStore %473 %472 
					                                         f32 %474 = OpLoad %105 
					                                Private f32* %475 = OpAccessChain %63 %107 
					                                         f32 %476 = OpLoad %475 
					                                         f32 %477 = OpFMul %474 %476 
					                                Uniform f32* %478 = OpAccessChain %26 %465 
					                                         f32 %479 = OpLoad %478 
					                                         f32 %480 = OpFAdd %477 %479 
					                                                      OpStore %105 %480 
					                                         f32 %481 = OpLoad %105 
					                                         f32 %483 = OpFMul %481 %482 
					                                Uniform f32* %485 = OpAccessChain %26 %484 
					                                         f32 %486 = OpLoad %485 
					                                         f32 %487 = OpFAdd %483 %486 
					                                                      OpStore %105 %487 
					                                         f32 %488 = OpLoad %105 
					                                Uniform f32* %490 = OpAccessChain %26 %489 
					                                         f32 %491 = OpLoad %490 
					                                         f32 %492 = OpFMul %488 %491 
					                                                      OpStore %105 %492 
					                                         f32 %493 = OpLoad %105 
					                                         f32 %495 = OpFMul %493 %494 
					                                 Output f32* %496 = OpAccessChain vs_TEXCOORD6 %107 
					                                                      OpStore %496 %495 
					                                Private f32* %498 = OpAccessChain %9 %90 
					                                         f32 %499 = OpLoad %498 
					                                 Output f32* %500 = OpAccessChain vs_TEXCOORD2 %188 
					                                                      OpStore %500 %499 
					                                       f32_4 %502 = OpLoad %501 
					                                       f32_3 %503 = OpVectorShuffle %502 %502 1 1 1 
					                              Uniform f32_4* %504 = OpAccessChain %26 %42 %43 
					                                       f32_4 %505 = OpLoad %504 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 1 2 0 
					                                       f32_3 %507 = OpFMul %503 %506 
					                                       f32_4 %508 = OpLoad %63 
					                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
					                                                      OpStore %63 %509 
					                              Uniform f32_4* %510 = OpAccessChain %26 %42 %48 
					                                       f32_4 %511 = OpLoad %510 
					                                       f32_3 %512 = OpVectorShuffle %511 %511 1 2 0 
					                                       f32_4 %513 = OpLoad %501 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 0 0 0 
					                                       f32_3 %515 = OpFMul %512 %514 
					                                       f32_4 %516 = OpLoad %63 
					                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
					                                       f32_3 %518 = OpFAdd %515 %517 
					                                       f32_4 %519 = OpLoad %63 
					                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
					                                                      OpStore %63 %520 
					                              Uniform f32_4* %521 = OpAccessChain %26 %42 %42 
					                                       f32_4 %522 = OpLoad %521 
					                                       f32_3 %523 = OpVectorShuffle %522 %522 1 2 0 
					                                       f32_4 %524 = OpLoad %501 
					                                       f32_3 %525 = OpVectorShuffle %524 %524 2 2 2 
					                                       f32_3 %526 = OpFMul %523 %525 
					                                       f32_4 %527 = OpLoad %63 
					                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
					                                       f32_3 %529 = OpFAdd %526 %528 
					                                       f32_4 %530 = OpLoad %63 
					                                       f32_4 %531 = OpVectorShuffle %530 %529 4 5 6 3 
					                                                      OpStore %63 %531 
					                                       f32_4 %532 = OpLoad %63 
					                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 2 
					                                       f32_4 %534 = OpLoad %63 
					                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
					                                         f32 %536 = OpDot %533 %535 
					                                                      OpStore %105 %536 
					                                         f32 %537 = OpLoad %105 
					                                         f32 %538 = OpExtInst %1 32 %537 
					                                                      OpStore %105 %538 
					                                         f32 %539 = OpLoad %105 
					                                       f32_3 %540 = OpCompositeConstruct %539 %539 %539 
					                                       f32_4 %541 = OpLoad %63 
					                                       f32_3 %542 = OpVectorShuffle %541 %541 0 1 2 
					                                       f32_3 %543 = OpFMul %540 %542 
					                                       f32_4 %544 = OpLoad %63 
					                                       f32_4 %545 = OpVectorShuffle %544 %543 4 5 6 3 
					                                                      OpStore %63 %545 
					                                       f32_4 %547 = OpLoad %9 
					                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
					                                       f32_4 %549 = OpLoad %63 
					                                       f32_3 %550 = OpVectorShuffle %549 %549 0 1 2 
					                                       f32_3 %551 = OpFMul %548 %550 
					                                                      OpStore %546 %551 
					                                       f32_4 %552 = OpLoad %9 
					                                       f32_3 %553 = OpVectorShuffle %552 %552 2 0 1 
					                                       f32_4 %554 = OpLoad %63 
					                                       f32_3 %555 = OpVectorShuffle %554 %554 1 2 0 
					                                       f32_3 %556 = OpFMul %553 %555 
					                                       f32_3 %557 = OpLoad %546 
					                                       f32_3 %558 = OpFNegate %557 
					                                       f32_3 %559 = OpFAdd %556 %558 
					                                                      OpStore %546 %559 
					                                  Input f32* %561 = OpAccessChain %501 %175 
					                                         f32 %562 = OpLoad %561 
					                                Uniform f32* %564 = OpAccessChain %26 %563 %175 
					                                         f32 %565 = OpLoad %564 
					                                         f32 %566 = OpFMul %562 %565 
					                                                      OpStore %560 %566 
					                                         f32 %567 = OpLoad %560 
					                                       f32_3 %568 = OpCompositeConstruct %567 %567 %567 
					                                       f32_3 %569 = OpLoad %546 
					                                       f32_3 %570 = OpFMul %568 %569 
					                                                      OpStore %546 %570 
					                                Private f32* %571 = OpAccessChain %546 %107 
					                                         f32 %572 = OpLoad %571 
					                                 Output f32* %573 = OpAccessChain vs_TEXCOORD2 %90 
					                                                      OpStore %573 %572 
					                                Private f32* %574 = OpAccessChain %63 %188 
					                                         f32 %575 = OpLoad %574 
					                                 Output f32* %576 = OpAccessChain vs_TEXCOORD2 %107 
					                                                      OpStore %576 %575 
					                                Private f32* %578 = OpAccessChain %9 %188 
					                                         f32 %579 = OpLoad %578 
					                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %188 
					                                                      OpStore %580 %579 
					                                Private f32* %582 = OpAccessChain %9 %107 
					                                         f32 %583 = OpLoad %582 
					                                 Output f32* %584 = OpAccessChain vs_TEXCOORD4 %188 
					                                                      OpStore %584 %583 
					                                Private f32* %585 = OpAccessChain %63 %107 
					                                         f32 %586 = OpLoad %585 
					                                 Output f32* %587 = OpAccessChain vs_TEXCOORD3 %107 
					                                                      OpStore %587 %586 
					                                Private f32* %588 = OpAccessChain %63 %90 
					                                         f32 %589 = OpLoad %588 
					                                 Output f32* %590 = OpAccessChain vs_TEXCOORD4 %107 
					                                                      OpStore %590 %589 
					                                Private f32* %591 = OpAccessChain %546 %90 
					                                         f32 %592 = OpLoad %591 
					                                 Output f32* %593 = OpAccessChain vs_TEXCOORD3 %90 
					                                                      OpStore %593 %592 
					                                Private f32* %594 = OpAccessChain %546 %188 
					                                         f32 %595 = OpLoad %594 
					                                 Output f32* %596 = OpAccessChain vs_TEXCOORD4 %90 
					                                                      OpStore %596 %595 
					                                       f32_4 %599 = OpLoad %598 
					                                                      OpStore %597 %599 
					                                       f32_4 %600 = OpLoad %69 
					                                       f32_3 %601 = OpVectorShuffle %600 %600 1 1 1 
					                              Uniform f32_4* %603 = OpAccessChain %26 %602 %43 
					                                       f32_4 %604 = OpLoad %603 
					                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
					                                       f32_3 %606 = OpFMul %601 %605 
					                                       f32_4 %607 = OpLoad %9 
					                                       f32_4 %608 = OpVectorShuffle %607 %606 4 5 6 3 
					                                                      OpStore %9 %608 
					                              Uniform f32_4* %609 = OpAccessChain %26 %602 %48 
					                                       f32_4 %610 = OpLoad %609 
					                                       f32_3 %611 = OpVectorShuffle %610 %610 0 1 2 
					                                       f32_4 %612 = OpLoad %69 
					                                       f32_3 %613 = OpVectorShuffle %612 %612 0 0 0 
					                                       f32_3 %614 = OpFMul %611 %613 
					                                       f32_4 %615 = OpLoad %9 
					                                       f32_3 %616 = OpVectorShuffle %615 %615 0 1 2 
					                                       f32_3 %617 = OpFAdd %614 %616 
					                                       f32_4 %618 = OpLoad %9 
					                                       f32_4 %619 = OpVectorShuffle %618 %617 4 5 6 3 
					                                                      OpStore %9 %619 
					                              Uniform f32_4* %621 = OpAccessChain %26 %602 %42 
					                                       f32_4 %622 = OpLoad %621 
					                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
					                                       f32_4 %624 = OpLoad %69 
					                                       f32_3 %625 = OpVectorShuffle %624 %624 2 2 2 
					                                       f32_3 %626 = OpFMul %623 %625 
					                                       f32_4 %627 = OpLoad %9 
					                                       f32_3 %628 = OpVectorShuffle %627 %627 0 1 2 
					                                       f32_3 %629 = OpFAdd %626 %628 
					                                                      OpStore vs_TEXCOORD7 %629 
					                                       f32_4 %630 = OpLoad %39 
					                                       f32_4 %631 = OpVectorShuffle %630 %630 1 1 1 1 
					                              Uniform f32_4* %633 = OpAccessChain %26 %632 %43 
					                                       f32_4 %634 = OpLoad %633 
					                                       f32_4 %635 = OpFMul %631 %634 
					                                                      OpStore %9 %635 
					                              Uniform f32_4* %636 = OpAccessChain %26 %632 %48 
					                                       f32_4 %637 = OpLoad %636 
					                                       f32_4 %638 = OpLoad %39 
					                                       f32_4 %639 = OpVectorShuffle %638 %638 0 0 0 0 
					                                       f32_4 %640 = OpFMul %637 %639 
					                                       f32_4 %641 = OpLoad %9 
					                                       f32_4 %642 = OpFAdd %640 %641 
					                                                      OpStore %9 %642 
					                              Uniform f32_4* %643 = OpAccessChain %26 %632 %42 
					                                       f32_4 %644 = OpLoad %643 
					                                       f32_4 %645 = OpLoad %39 
					                                       f32_4 %646 = OpVectorShuffle %645 %645 2 2 2 2 
					                                       f32_4 %647 = OpFMul %644 %646 
					                                       f32_4 %648 = OpLoad %9 
					                                       f32_4 %649 = OpFAdd %647 %648 
					                                                      OpStore %9 %649 
					                              Uniform f32_4* %651 = OpAccessChain %26 %632 %65 
					                                       f32_4 %652 = OpLoad %651 
					                                       f32_4 %653 = OpLoad %39 
					                                       f32_4 %654 = OpVectorShuffle %653 %653 3 3 3 3 
					                                       f32_4 %655 = OpFMul %652 %654 
					                                       f32_4 %656 = OpLoad %9 
					                                       f32_4 %657 = OpFAdd %655 %656 
					                                                      OpStore vs_TEXCOORD8 %657 
					                                 Output f32* %658 = OpAccessChain %94 %48 %90 
					                                         f32 %659 = OpLoad %658 
					                                         f32 %660 = OpFNegate %659 
					                                 Output f32* %661 = OpAccessChain %94 %48 %90 
					                                                      OpStore %661 %660 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 953
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %53 %401 %421 %678 %685 %692 %715 %930 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate vs_TEXCOORD6 Location 12 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpMemberDecorate %21 0 Offset 21 
					                                                      OpMemberDecorate %21 1 Offset 21 
					                                                      OpMemberDecorate %21 2 Offset 21 
					                                                      OpMemberDecorate %21 3 RelaxedPrecision 
					                                                      OpMemberDecorate %21 3 Offset 21 
					                                                      OpMemberDecorate %21 4 RelaxedPrecision 
					                                                      OpMemberDecorate %21 4 Offset 21 
					                                                      OpMemberDecorate %21 5 Offset 21 
					                                                      OpMemberDecorate %21 6 Offset 21 
					                                                      OpMemberDecorate %21 7 Offset 21 
					                                                      OpMemberDecorate %21 8 RelaxedPrecision 
					                                                      OpMemberDecorate %21 8 Offset 21 
					                                                      OpMemberDecorate %21 9 Offset 21 
					                                                      OpMemberDecorate %21 10 Offset 21 
					                                                      OpMemberDecorate %21 11 Offset 21 
					                                                      OpMemberDecorate %21 12 RelaxedPrecision 
					                                                      OpMemberDecorate %21 12 Offset 21 
					                                                      OpMemberDecorate %21 13 Offset 21 
					                                                      OpMemberDecorate %21 14 Offset 21 
					                                                      OpMemberDecorate %21 15 Offset 21 
					                                                      OpMemberDecorate %21 16 Offset 21 
					                                                      OpMemberDecorate %21 17 Offset 21 
					                                                      OpMemberDecorate %21 18 Offset 21 
					                                                      OpMemberDecorate %21 19 Offset 21 
					                                                      OpMemberDecorate %21 20 Offset 21 
					                                                      OpMemberDecorate %21 21 Offset 21 
					                                                      OpMemberDecorate %21 22 Offset 21 
					                                                      OpMemberDecorate %21 23 Offset 21 
					                                                      OpMemberDecorate %21 24 Offset 21 
					                                                      OpMemberDecorate %21 25 Offset 21 
					                                                      OpMemberDecorate %21 26 RelaxedPrecision 
					                                                      OpMemberDecorate %21 26 Offset 21 
					                                                      OpMemberDecorate %21 27 RelaxedPrecision 
					                                                      OpMemberDecorate %21 27 Offset 21 
					                                                      OpDecorate %21 Block 
					                                                      OpDecorate %23 DescriptorSet 23 
					                                                      OpDecorate %23 Binding 23 
					                                                      OpDecorate vs_TEXCOORD0 Location 53 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %65 DescriptorSet 65 
					                                                      OpDecorate %65 Binding 65 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %69 DescriptorSet 69 
					                                                      OpDecorate %69 Binding 69 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %326 RelaxedPrecision 
					                                                      OpDecorate %327 RelaxedPrecision 
					                                                      OpDecorate %328 RelaxedPrecision 
					                                                      OpDecorate %333 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %335 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %338 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 401 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %405 DescriptorSet 405 
					                                                      OpDecorate %405 Binding 405 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %407 DescriptorSet 407 
					                                                      OpDecorate %407 Binding 407 
					                                                      OpDecorate %408 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %413 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %417 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %421 Location 421 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %426 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %450 RelaxedPrecision 
					                                                      OpDecorate %451 RelaxedPrecision 
					                                                      OpDecorate %451 DescriptorSet 451 
					                                                      OpDecorate %451 Binding 451 
					                                                      OpDecorate %452 RelaxedPrecision 
					                                                      OpDecorate %453 RelaxedPrecision 
					                                                      OpDecorate %453 DescriptorSet 453 
					                                                      OpDecorate %453 Binding 453 
					                                                      OpDecorate %454 RelaxedPrecision 
					                                                      OpDecorate %459 RelaxedPrecision 
					                                                      OpDecorate %460 RelaxedPrecision 
					                                                      OpDecorate %463 RelaxedPrecision 
					                                                      OpDecorate %464 RelaxedPrecision 
					                                                      OpDecorate %465 RelaxedPrecision 
					                                                      OpDecorate %466 RelaxedPrecision 
					                                                      OpDecorate %467 RelaxedPrecision 
					                                                      OpDecorate %468 RelaxedPrecision 
					                                                      OpDecorate %469 RelaxedPrecision 
					                                                      OpDecorate %470 RelaxedPrecision 
					                                                      OpDecorate %471 RelaxedPrecision 
					                                                      OpDecorate %472 RelaxedPrecision 
					                                                      OpDecorate %473 RelaxedPrecision 
					                                                      OpDecorate %474 RelaxedPrecision 
					                                                      OpDecorate %475 RelaxedPrecision 
					                                                      OpDecorate %476 RelaxedPrecision 
					                                                      OpDecorate %477 RelaxedPrecision 
					                                                      OpDecorate %478 RelaxedPrecision 
					                                                      OpDecorate %479 RelaxedPrecision 
					                                                      OpDecorate %480 RelaxedPrecision 
					                                                      OpDecorate %481 RelaxedPrecision 
					                                                      OpDecorate %485 RelaxedPrecision 
					                                                      OpDecorate %487 RelaxedPrecision 
					                                                      OpDecorate %488 RelaxedPrecision 
					                                                      OpDecorate %490 RelaxedPrecision 
					                                                      OpDecorate %491 RelaxedPrecision 
					                                                      OpDecorate %492 RelaxedPrecision 
					                                                      OpDecorate %494 RelaxedPrecision 
					                                                      OpDecorate %495 RelaxedPrecision 
					                                                      OpDecorate %496 RelaxedPrecision 
					                                                      OpDecorate %497 RelaxedPrecision 
					                                                      OpDecorate %498 RelaxedPrecision 
					                                                      OpDecorate %500 RelaxedPrecision 
					                                                      OpDecorate %502 RelaxedPrecision 
					                                                      OpDecorate %503 RelaxedPrecision 
					                                                      OpDecorate %505 RelaxedPrecision 
					                                                      OpDecorate %506 RelaxedPrecision 
					                                                      OpDecorate %508 RelaxedPrecision 
					                                                      OpDecorate %509 RelaxedPrecision 
					                                                      OpDecorate %510 RelaxedPrecision 
					                                                      OpDecorate %511 RelaxedPrecision 
					                                                      OpDecorate %512 RelaxedPrecision 
					                                                      OpDecorate %513 RelaxedPrecision 
					                                                      OpDecorate %514 RelaxedPrecision 
					                                                      OpDecorate %515 RelaxedPrecision 
					                                                      OpDecorate %556 RelaxedPrecision 
					                                                      OpDecorate %560 RelaxedPrecision 
					                                                      OpDecorate %562 RelaxedPrecision 
					                                                      OpDecorate %563 RelaxedPrecision 
					                                                      OpDecorate %566 RelaxedPrecision 
					                                                      OpDecorate %567 RelaxedPrecision 
					                                                      OpDecorate %570 RelaxedPrecision 
					                                                      OpDecorate %571 RelaxedPrecision 
					                                                      OpDecorate %572 RelaxedPrecision 
					                                                      OpDecorate %574 RelaxedPrecision 
					                                                      OpDecorate %575 RelaxedPrecision 
					                                                      OpDecorate %576 RelaxedPrecision 
					                                                      OpDecorate %577 RelaxedPrecision 
					                                                      OpDecorate %578 RelaxedPrecision 
					                                                      OpDecorate %597 RelaxedPrecision 
					                                                      OpDecorate %598 RelaxedPrecision 
					                                                      OpDecorate %598 DescriptorSet 598 
					                                                      OpDecorate %598 Binding 598 
					                                                      OpDecorate %599 RelaxedPrecision 
					                                                      OpDecorate %600 RelaxedPrecision 
					                                                      OpDecorate %600 DescriptorSet 600 
					                                                      OpDecorate %600 Binding 600 
					                                                      OpDecorate %601 RelaxedPrecision 
					                                                      OpDecorate %606 RelaxedPrecision 
					                                                      OpDecorate %607 RelaxedPrecision 
					                                                      OpDecorate %608 RelaxedPrecision 
					                                                      OpDecorate %609 RelaxedPrecision 
					                                                      OpDecorate %610 RelaxedPrecision 
					                                                      OpDecorate %611 RelaxedPrecision 
					                                                      OpDecorate %614 RelaxedPrecision 
					                                                      OpDecorate %616 RelaxedPrecision 
					                                                      OpDecorate %617 RelaxedPrecision 
					                                                      OpDecorate %619 RelaxedPrecision 
					                                                      OpDecorate %620 RelaxedPrecision 
					                                                      OpDecorate %622 RelaxedPrecision 
					                                                      OpDecorate %625 RelaxedPrecision 
					                                                      OpDecorate %626 RelaxedPrecision 
					                                                      OpDecorate %627 RelaxedPrecision 
					                                                      OpDecorate %628 RelaxedPrecision 
					                                                      OpDecorate %629 RelaxedPrecision 
					                                                      OpDecorate %630 RelaxedPrecision 
					                                                      OpDecorate %631 RelaxedPrecision 
					                                                      OpDecorate %632 RelaxedPrecision 
					                                                      OpDecorate %633 RelaxedPrecision 
					                                                      OpDecorate %634 RelaxedPrecision 
					                                                      OpDecorate %635 RelaxedPrecision 
					                                                      OpDecorate %636 RelaxedPrecision 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %639 RelaxedPrecision 
					                                                      OpDecorate %640 RelaxedPrecision 
					                                                      OpDecorate %647 RelaxedPrecision 
					                                                      OpDecorate %648 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 678 
					                                                      OpDecorate vs_TEXCOORD3 Location 685 
					                                                      OpDecorate vs_TEXCOORD4 Location 692 
					                                                      OpDecorate %699 RelaxedPrecision 
					                                                      OpDecorate %700 RelaxedPrecision 
					                                                      OpDecorate %701 RelaxedPrecision 
					                                                      OpDecorate %702 RelaxedPrecision 
					                                                      OpDecorate %703 RelaxedPrecision 
					                                                      OpDecorate %704 RelaxedPrecision 
					                                                      OpDecorate %707 RelaxedPrecision 
					                                                      OpDecorate %708 RelaxedPrecision 
					                                                      OpDecorate %710 RelaxedPrecision 
					                                                      OpDecorate %711 RelaxedPrecision 
					                                                      OpDecorate %712 RelaxedPrecision 
					                                                      OpDecorate %713 RelaxedPrecision 
					                                                      OpDecorate %714 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD5 Location 715 
					                                                      OpDecorate %754 RelaxedPrecision 
					                                                      OpDecorate %758 RelaxedPrecision 
					                                                      OpDecorate %759 RelaxedPrecision 
					                                                      OpDecorate %760 RelaxedPrecision 
					                                                      OpDecorate %761 RelaxedPrecision 
					                                                      OpDecorate %762 RelaxedPrecision 
					                                                      OpDecorate %765 RelaxedPrecision 
					                                                      OpDecorate %766 RelaxedPrecision 
					                                                      OpDecorate %768 RelaxedPrecision 
					                                                      OpDecorate %769 RelaxedPrecision 
					                                                      OpDecorate %770 RelaxedPrecision 
					                                                      OpDecorate %771 RelaxedPrecision 
					                                                      OpDecorate %772 RelaxedPrecision 
					                                                      OpDecorate %775 RelaxedPrecision 
					                                                      OpDecorate %776 RelaxedPrecision 
					                                                      OpDecorate %777 RelaxedPrecision 
					                                                      OpDecorate %778 RelaxedPrecision 
					                                                      OpDecorate %780 RelaxedPrecision 
					                                                      OpDecorate %781 RelaxedPrecision 
					                                                      OpDecorate %783 RelaxedPrecision 
					                                                      OpDecorate %787 RelaxedPrecision 
					                                                      OpDecorate %788 RelaxedPrecision 
					                                                      OpDecorate %790 RelaxedPrecision 
					                                                      OpDecorate %793 RelaxedPrecision 
					                                                      OpDecorate %794 RelaxedPrecision 
					                                                      OpDecorate %797 RelaxedPrecision 
					                                                      OpDecorate %798 RelaxedPrecision 
					                                                      OpDecorate %801 RelaxedPrecision 
					                                                      OpDecorate %804 RelaxedPrecision 
					                                                      OpDecorate %813 RelaxedPrecision 
					                                                      OpDecorate %815 RelaxedPrecision 
					                                                      OpDecorate %816 RelaxedPrecision 
					                                                      OpDecorate %819 RelaxedPrecision 
					                                                      OpDecorate %820 RelaxedPrecision 
					                                                      OpDecorate %855 DescriptorSet 855 
					                                                      OpDecorate %855 Binding 855 
					                                                      OpDecorate %857 DescriptorSet 857 
					                                                      OpDecorate %857 Binding 857 
					                                                      OpDecorate %873 DescriptorSet 873 
					                                                      OpDecorate %873 Binding 873 
					                                                      OpDecorate %875 DescriptorSet 875 
					                                                      OpDecorate %875 Binding 875 
					                                                      OpDecorate %888 RelaxedPrecision 
					                                                      OpDecorate %893 RelaxedPrecision 
					                                                      OpDecorate %896 RelaxedPrecision 
					                                                      OpDecorate %897 RelaxedPrecision 
					                                                      OpDecorate %899 RelaxedPrecision 
					                                                      OpDecorate %900 RelaxedPrecision 
					                                                      OpDecorate %901 RelaxedPrecision 
					                                                      OpDecorate %904 RelaxedPrecision 
					                                                      OpDecorate %905 RelaxedPrecision 
					                                                      OpDecorate %908 RelaxedPrecision 
					                                                      OpDecorate %909 RelaxedPrecision 
					                                                      OpDecorate %910 RelaxedPrecision 
					                                                      OpDecorate %913 RelaxedPrecision 
					                                                      OpDecorate %914 RelaxedPrecision 
					                                                      OpDecorate %915 RelaxedPrecision 
					                                                      OpDecorate %916 RelaxedPrecision 
					                                                      OpDecorate %917 RelaxedPrecision 
					                                                      OpDecorate %919 RelaxedPrecision 
					                                                      OpDecorate %921 RelaxedPrecision 
					                                                      OpDecorate %922 RelaxedPrecision 
					                                                      OpDecorate %923 RelaxedPrecision 
					                                                      OpDecorate %924 RelaxedPrecision 
					                                                      OpDecorate %925 RelaxedPrecision 
					                                                      OpDecorate %926 RelaxedPrecision 
					                                                      OpDecorate %930 RelaxedPrecision 
					                                                      OpDecorate %930 Location 930 
					                                                      OpDecorate %932 RelaxedPrecision 
					                                                      OpDecorate %935 RelaxedPrecision 
					                                                      OpDecorate %936 RelaxedPrecision 
					                                                      OpDecorate %937 RelaxedPrecision 
					                                                      OpDecorate %938 RelaxedPrecision 
					                                                      OpDecorate %939 RelaxedPrecision 
					                                                      OpDecorate %942 RelaxedPrecision 
					                                                      OpDecorate %943 RelaxedPrecision 
					                                                      OpDecorate %944 RelaxedPrecision 
					                                                      OpDecorate %945 RelaxedPrecision 
					                                                      OpDecorate %946 RelaxedPrecision 
					                                                      OpDecorate %947 RelaxedPrecision 
					                                                      OpDecorate %948 RelaxedPrecision 
					                                                      OpDecorate %949 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 2 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_2* vs_TEXCOORD6 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 0 
					                                              %15 = OpTypePointer Input %6 
					                                              %18 = OpTypeVector %6 3 
					                                          u32 %19 = OpConstant 4 
					                                              %20 = OpTypeArray %7 %19 
					                                              %21 = OpTypeStruct %7 %18 %7 %7 %7 %20 %6 %6 %7 %6 %6 %6 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %22 = OpTypePointer Uniform %21 
					Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %23 = OpVariable Uniform 
					                                              %24 = OpTypeInt 32 1 
					                                          i32 %25 = OpConstant 15 
					                                              %26 = OpTypePointer Uniform %6 
					                                              %30 = OpTypePointer Private %6 
					                               Private f32_4* %32 = OpVariable Private 
					                                          f32 %33 = OpConstant 3,674022E-40 
					                                        f32_2 %34 = OpConstantComposite %33 %33 
					                                          i32 %35 = OpConstant 23 
					                                          i32 %38 = OpConstant 24 
					                                          f32 %45 = OpConstant 3,674022E-40 
					                                          u32 %46 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %52 = OpTypePointer Input %7 
					                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                               Private f32_4* %62 = OpVariable Private 
					                                              %63 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %64 = OpTypePointer UniformConstant %63 
					         UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
					                                              %67 = OpTypeSampler 
					                                              %68 = OpTypePointer UniformConstant %67 
					                     UniformConstant sampler* %69 = OpVariable UniformConstant 
					                                              %71 = OpTypeSampledImage %63 
					                                          u32 %76 = OpConstant 3 
					                                          u32 %94 = OpConstant 1 
					                                         f32 %109 = OpConstant 3,674022E-40 
					                                       f32_4 %110 = OpConstantComposite %109 %109 %109 %109 
					                                         i32 %112 = OpConstant 16 
					                                         i32 %115 = OpConstant 13 
					                                         f32 %122 = OpConstant 3,674022E-40 
					                                         i32 %131 = OpConstant 14 
					                                         i32 %138 = OpConstant 25 
					                                         f32 %145 = OpConstant 3,674022E-40 
					                                         f32 %149 = OpConstant 3,674022E-40 
					                                       f32_4 %150 = OpConstantComposite %149 %149 %149 %149 
					                                         f32 %157 = OpConstant 3,674022E-40 
					                                       f32_4 %158 = OpConstantComposite %157 %157 %157 %157 
					                                         f32 %160 = OpConstant 3,674022E-40 
					                                       f32_4 %161 = OpConstantComposite %160 %160 %160 %160 
					                                       f32_4 %166 = OpConstantComposite %33 %33 %33 %33 
					                                             %168 = OpTypePointer Private %10 
					                              Private f32_2* %169 = OpVariable Private 
					                                         i32 %170 = OpConstant 21 
					                                             %175 = OpTypeBool 
					                                             %176 = OpTypePointer Private %175 
					                               Private bool* %177 = OpVariable Private 
					                                             %190 = OpTypePointer Function %6 
					                               Private bool* %202 = OpVariable Private 
					                                             %209 = OpTypeVector %175 4 
					                                         f32 %213 = OpConstant 3,674022E-40 
					                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
					                                         i32 %222 = OpConstant 18 
					                                         i32 %241 = OpConstant 17 
					                                Private f32* %281 = OpVariable Private 
					                                       f32_2 %296 = OpConstantComposite %33 %45 
					                                Private f32* %326 = OpVariable Private 
					                                Private f32* %334 = OpVariable Private 
					                                         i32 %350 = OpConstant 22 
					                              Private f32_4* %361 = OpVariable Private 
					                                             %372 = OpTypePointer Private %18 
					                              Private f32_3* %373 = OpVariable Private 
					                                         i32 %388 = OpConstant 10 
					                                         i32 %391 = OpConstant 11 
					                                         i32 %395 = OpConstant 0 
					                                             %396 = OpTypePointer Uniform %7 
					                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                              Private f32_4* %404 = OpVariable Private 
					        UniformConstant read_only Texture2D* %405 = OpVariable UniformConstant 
					                    UniformConstant sampler* %407 = OpVariable UniformConstant 
					                              Private f32_3* %412 = OpVariable Private 
					                                         i32 %415 = OpConstant 12 
					                              Private f32_4* %420 = OpVariable Private 
					                                Input f32_4* %421 = OpVariable Input 
					                                Private f32* %428 = OpVariable Private 
					                                         i32 %434 = OpConstant 6 
					                                         i32 %437 = OpConstant 7 
					                              Private f32_4* %450 = OpVariable Private 
					        UniformConstant read_only Texture2D* %451 = OpVariable UniformConstant 
					                    UniformConstant sampler* %453 = OpVariable UniformConstant 
					                              Private f32_4* %459 = OpVariable Private 
					                                         i32 %461 = OpConstant 8 
					                              Private f32_4* %465 = OpVariable Private 
					                              Private f32_4* %474 = OpVariable Private 
					                              Private f32_4* %498 = OpVariable Private 
					                                         i32 %532 = OpConstant 9 
					                              Private f32_4* %574 = OpVariable Private 
					                              Private f32_3* %579 = OpVariable Private 
					                                         i32 %580 = OpConstant 20 
					                                         i32 %584 = OpConstant 19 
					                              Private f32_3* %597 = OpVariable Private 
					        UniformConstant read_only Texture2D* %598 = OpVariable UniformConstant 
					                    UniformConstant sampler* %600 = OpVariable UniformConstant 
					                                       f32_2 %621 = OpConstantComposite %160 %160 
					                                Private f32* %625 = OpVariable Private 
					                                         f32 %644 = OpConstant 3,674022E-40 
					                                       f32_3 %645 = OpConstantComposite %644 %644 %160 
					                                       f32_3 %651 = OpConstantComposite %45 %45 %33 
					                                             %677 = OpTypePointer Input %18 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                              Private f32_3* %699 = OpVariable Private 
					                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
					                                         i32 %718 = OpConstant 2 
					                                Private f32* %723 = OpVariable Private 
					                              Private f32_3* %733 = OpVariable Private 
					                                         i32 %736 = OpConstant 1 
					                                             %737 = OpTypePointer Uniform %18 
					                                       f32_2 %782 = OpConstantComposite %45 %45 
					                                Private f32* %790 = OpVariable Private 
					                                         i32 %791 = OpConstant 26 
					                                         i32 %795 = OpConstant 27 
					                              Private f32_2* %799 = OpVariable Private 
					                                         f32 %809 = OpConstant 3,674022E-40 
					                                         i32 %824 = OpConstant 5 
					                                         i32 %843 = OpConstant 3 
					                                       f32_2 %853 = OpConstantComposite %149 %149 
					        UniformConstant read_only Texture2D* %855 = OpVariable UniformConstant 
					                    UniformConstant sampler* %857 = OpVariable UniformConstant 
					                               Private bool* %864 = OpVariable Private 
					        UniformConstant read_only Texture2D* %873 = OpVariable UniformConstant 
					                    UniformConstant sampler* %875 = OpVariable UniformConstant 
					                                         i32 %906 = OpConstant 4 
					                                         f32 %920 = OpConstant 3,674022E-40 
					                                             %929 = OpTypePointer Output %7 
					                               Output f32_4* %930 = OpVariable Output 
					                                             %933 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %191 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD6 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Uniform f32* %27 = OpAccessChain %23 %25 
					                                          f32 %28 = OpLoad %27 
					                                          f32 %29 = OpFAdd %17 %28 
					                                 Private f32* %31 = OpAccessChain %9 %14 
					                                                      OpStore %31 %29 
					                                 Uniform f32* %36 = OpAccessChain %23 %35 
					                                          f32 %37 = OpLoad %36 
					                                 Uniform f32* %39 = OpAccessChain %23 %38 
					                                          f32 %40 = OpLoad %39 
					                                        f32_2 %41 = OpCompositeConstruct %37 %40 
					                                        f32_2 %42 = OpFDiv %34 %41 
					                                        f32_4 %43 = OpLoad %32 
					                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 2 3 
					                                                      OpStore %32 %44 
					                                 Private f32* %47 = OpAccessChain %32 %46 
					                                                      OpStore %47 %45 
					                                        f32_4 %49 = OpLoad %32 
					                                        f32_4 %50 = OpVectorShuffle %49 %49 0 2 2 1 
					                                        f32_4 %51 = OpFNegate %50 
					                                        f32_4 %54 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %55 = OpVectorShuffle %54 %54 0 1 0 1 
					                                        f32_4 %56 = OpFAdd %51 %55 
					                                                      OpStore %48 %56 
					                                        f32_4 %57 = OpLoad %32 
					                                        f32_4 %58 = OpVectorShuffle %57 %57 0 2 2 1 
					                                        f32_4 %59 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 1 0 1 
					                                        f32_4 %61 = OpFAdd %58 %60 
					                                                      OpStore %32 %61 
					                          read_only Texture2D %66 = OpLoad %65 
					                                      sampler %70 = OpLoad %69 
					                   read_only Texture2DSampled %72 = OpSampledImage %66 %70 
					                                        f32_4 %73 = OpLoad %48 
					                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                                        f32_4 %75 = OpImageSampleImplicitLod %72 %74 
					                                          f32 %77 = OpCompositeExtract %75 3 
					                                 Private f32* %78 = OpAccessChain %62 %14 
					                                                      OpStore %78 %77 
					                          read_only Texture2D %79 = OpLoad %65 
					                                      sampler %80 = OpLoad %69 
					                   read_only Texture2DSampled %81 = OpSampledImage %79 %80 
					                                        f32_4 %82 = OpLoad %48 
					                                        f32_2 %83 = OpVectorShuffle %82 %82 2 3 
					                                        f32_4 %84 = OpImageSampleImplicitLod %81 %83 
					                                          f32 %85 = OpCompositeExtract %84 3 
					                                 Private f32* %86 = OpAccessChain %62 %46 
					                                                      OpStore %86 %85 
					                          read_only Texture2D %87 = OpLoad %65 
					                                      sampler %88 = OpLoad %69 
					                   read_only Texture2DSampled %89 = OpSampledImage %87 %88 
					                                        f32_4 %90 = OpLoad %32 
					                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
					                                        f32_4 %92 = OpImageSampleImplicitLod %89 %91 
					                                          f32 %93 = OpCompositeExtract %92 3 
					                                 Private f32* %95 = OpAccessChain %62 %94 
					                                                      OpStore %95 %93 
					                          read_only Texture2D %96 = OpLoad %65 
					                                      sampler %97 = OpLoad %69 
					                   read_only Texture2DSampled %98 = OpSampledImage %96 %97 
					                                        f32_4 %99 = OpLoad %32 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 2 3 
					                                       f32_4 %101 = OpImageSampleImplicitLod %98 %100 
					                                         f32 %102 = OpCompositeExtract %101 3 
					                                Private f32* %103 = OpAccessChain %62 %76 
					                                                      OpStore %103 %102 
					                                       f32_4 %104 = OpLoad %9 
					                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
					                                       f32_4 %106 = OpLoad %62 
					                                       f32_4 %107 = OpFAdd %105 %106 
					                                                      OpStore %9 %107 
					                                       f32_4 %108 = OpLoad %9 
					                                       f32_4 %111 = OpFAdd %108 %110 
					                                                      OpStore %9 %111 
					                                Uniform f32* %113 = OpAccessChain %23 %112 
					                                         f32 %114 = OpLoad %113 
					                                Uniform f32* %116 = OpAccessChain %23 %115 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFAdd %114 %117 
					                                Private f32* %119 = OpAccessChain %32 %14 
					                                                      OpStore %119 %118 
					                                Private f32* %120 = OpAccessChain %32 %14 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %123 = OpExtInst %1 40 %121 %122 
					                                Private f32* %124 = OpAccessChain %32 %14 
					                                                      OpStore %124 %123 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_4 %126 = OpLoad %32 
					                                       f32_4 %127 = OpVectorShuffle %126 %126 0 0 0 0 
					                                       f32_4 %128 = OpFDiv %125 %127 
					                                                      OpStore %9 %128 
					                                Private f32* %129 = OpAccessChain %32 %14 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %23 %131 
					                                         f32 %133 = OpLoad %132 
					                                         f32 %134 = OpFMul %130 %133 
					                                Private f32* %135 = OpAccessChain %32 %14 
					                                                      OpStore %135 %134 
					                                Private f32* %136 = OpAccessChain %32 %14 
					                                         f32 %137 = OpLoad %136 
					                                Uniform f32* %139 = OpAccessChain %23 %138 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %137 %140 
					                                Private f32* %142 = OpAccessChain %32 %14 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %32 %14 
					                                         f32 %144 = OpLoad %143 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %32 %14 
					                                                      OpStore %147 %146 
					                                       f32_4 %148 = OpLoad %9 
					                                       f32_4 %151 = OpFAdd %148 %150 
					                                                      OpStore %9 %151 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_4 %153 = OpCompositeConstruct %45 %45 %45 %45 
					                                       f32_4 %154 = OpCompositeConstruct %33 %33 %33 %33 
					                                       f32_4 %155 = OpExtInst %1 43 %152 %153 %154 
					                                                      OpStore %9 %155 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_4 %159 = OpFMul %156 %158 
					                                       f32_4 %162 = OpFAdd %159 %161 
					                                                      OpStore %48 %162 
					                                       f32_4 %163 = OpLoad %48 
					                                       f32_4 %164 = OpExtInst %1 4 %163 
					                                       f32_4 %165 = OpFNegate %164 
					                                       f32_4 %167 = OpFAdd %165 %166 
					                                                      OpStore %48 %167 
					                                Uniform f32* %171 = OpAccessChain %23 %170 
					                                         f32 %172 = OpLoad %171 
					                                         f32 %173 = OpFMul %172 %149 
					                                Private f32* %174 = OpAccessChain %169 %14 
					                                                      OpStore %174 %173 
					                                Private f32* %178 = OpAccessChain %169 %14 
					                                         f32 %179 = OpLoad %178 
					                                Private f32* %180 = OpAccessChain %169 %14 
					                                         f32 %181 = OpLoad %180 
					                                         f32 %182 = OpFNegate %181 
					                                        bool %183 = OpFOrdGreaterThanEqual %179 %182 
					                                                      OpStore %177 %183 
					                                Private f32* %184 = OpAccessChain %169 %14 
					                                         f32 %185 = OpLoad %184 
					                                         f32 %186 = OpExtInst %1 4 %185 
					                                         f32 %187 = OpExtInst %1 10 %186 
					                                Private f32* %188 = OpAccessChain %169 %14 
					                                                      OpStore %188 %187 
					                                        bool %189 = OpLoad %177 
					                                                      OpSelectionMerge %193 None 
					                                                      OpBranchConditional %189 %192 %196 
					                                             %192 = OpLabel 
					                                Private f32* %194 = OpAccessChain %169 %14 
					                                         f32 %195 = OpLoad %194 
					                                                      OpStore %191 %195 
					                                                      OpBranch %193 
					                                             %196 = OpLabel 
					                                Private f32* %197 = OpAccessChain %169 %14 
					                                         f32 %198 = OpLoad %197 
					                                         f32 %199 = OpFNegate %198 
					                                                      OpStore %191 %199 
					                                                      OpBranch %193 
					                                             %193 = OpLabel 
					                                         f32 %200 = OpLoad %191 
					                                Private f32* %201 = OpAccessChain %169 %14 
					                                                      OpStore %201 %200 
					                                Private f32* %203 = OpAccessChain %169 %14 
					                                         f32 %204 = OpLoad %203 
					                                        bool %205 = OpFOrdGreaterThanEqual %204 %149 
					                                                      OpStore %202 %205 
					                                        bool %206 = OpLoad %202 
					                                       f32_4 %207 = OpLoad %48 
					                                       f32_4 %208 = OpLoad %9 
					                                      bool_4 %210 = OpCompositeConstruct %206 %206 %206 %206 
					                                       f32_4 %211 = OpSelect %210 %207 %208 
					                                                      OpStore %9 %211 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %215 = OpFMul %212 %214 
					                                                      OpStore %48 %215 
					                                       f32_4 %216 = OpLoad %48 
					                                       f32_4 %217 = OpExtInst %1 13 %216 
					                                                      OpStore %48 %217 
					                                       f32_4 %218 = OpLoad %9 
					                                       f32_4 %219 = OpFNegate %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpFAdd %219 %220 
					                                                      OpStore %48 %221 
					                                Uniform f32* %223 = OpAccessChain %23 %222 
					                                         f32 %224 = OpLoad %223 
					                                Uniform f32* %225 = OpAccessChain %23 %222 
					                                         f32 %226 = OpLoad %225 
					                                Uniform f32* %227 = OpAccessChain %23 %222 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %229 = OpAccessChain %23 %222 
					                                         f32 %230 = OpLoad %229 
					                                       f32_4 %231 = OpCompositeConstruct %224 %226 %228 %230 
					                                         f32 %232 = OpCompositeExtract %231 0 
					                                         f32 %233 = OpCompositeExtract %231 1 
					                                         f32 %234 = OpCompositeExtract %231 2 
					                                         f32 %235 = OpCompositeExtract %231 3 
					                                       f32_4 %236 = OpCompositeConstruct %232 %233 %234 %235 
					                                       f32_4 %237 = OpLoad %48 
					                                       f32_4 %238 = OpFMul %236 %237 
					                                       f32_4 %239 = OpLoad %9 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %9 %240 
					                                Uniform f32* %242 = OpAccessChain %23 %241 
					                                         f32 %243 = OpLoad %242 
					                                         f32 %244 = OpFNegate %243 
					                                         f32 %245 = OpFAdd %244 %33 
					                                Private f32* %246 = OpAccessChain %169 %14 
					                                                      OpStore %246 %245 
					                                       f32_4 %247 = OpLoad %9 
					                                       f32_2 %248 = OpLoad %169 
					                                       f32_4 %249 = OpVectorShuffle %248 %248 0 0 0 0 
					                                       f32_4 %250 = OpExtInst %1 37 %247 %249 
					                                                      OpStore %9 %250 
					                                       f32_4 %251 = OpLoad %32 
					                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
					                                       f32_4 %253 = OpLoad %9 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 2 
					                                       f32_2 %255 = OpFMul %252 %254 
					                                       f32_4 %256 = OpLoad %9 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 1 5 3 
					                                                      OpStore %9 %257 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 3 1 
					                                       f32_4 %260 = OpLoad %32 
					                                       f32_2 %261 = OpVectorShuffle %260 %260 0 0 
					                                       f32_2 %262 = OpFMul %259 %261 
					                                       f32_4 %263 = OpLoad %9 
					                                       f32_2 %264 = OpVectorShuffle %263 %263 2 0 
					                                       f32_2 %265 = OpFNegate %264 
					                                       f32_2 %266 = OpFAdd %262 %265 
					                                       f32_4 %267 = OpLoad %9 
					                                       f32_4 %268 = OpVectorShuffle %267 %266 0 4 5 3 
					                                                      OpStore %9 %268 
					                                Private f32* %269 = OpAccessChain %9 %14 
					                                                      OpStore %269 %160 
					                                Private f32* %270 = OpAccessChain %9 %76 
					                                                      OpStore %270 %33 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
					                                       f32_4 %273 = OpLoad %9 
					                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
					                                         f32 %275 = OpDot %272 %274 
					                                Private f32* %276 = OpAccessChain %32 %14 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %32 %14 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpExtInst %1 32 %278 
					                                Private f32* %280 = OpAccessChain %32 %14 
					                                                      OpStore %280 %279 
					                                       f32_4 %282 = OpLoad %9 
					                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
					                                       f32_4 %284 = OpLoad %9 
					                                       f32_2 %285 = OpVectorShuffle %284 %284 2 3 
					                                         f32 %286 = OpDot %283 %285 
					                                                      OpStore %281 %286 
					                                         f32 %287 = OpLoad %281 
					                                         f32 %288 = OpExtInst %1 32 %287 
					                                                      OpStore %281 %288 
					                                         f32 %289 = OpLoad %281 
					                                Private f32* %290 = OpAccessChain %9 %46 
					                                         f32 %291 = OpLoad %290 
					                                         f32 %292 = OpFMul %289 %291 
					                                Private f32* %293 = OpAccessChain %48 %14 
					                                                      OpStore %293 %292 
					                                         f32 %294 = OpLoad %281 
					                                       f32_2 %295 = OpCompositeConstruct %294 %294 
					                                       f32_2 %297 = OpFMul %295 %296 
					                                       f32_4 %298 = OpLoad %48 
					                                       f32_4 %299 = OpVectorShuffle %298 %297 0 4 5 3 
					                                                      OpStore %48 %299 
					                                Private f32* %300 = OpAccessChain %9 %46 
					                                                      OpStore %300 %45 
					                                       f32_4 %301 = OpLoad %32 
					                                       f32_3 %302 = OpVectorShuffle %301 %301 0 0 0 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_3 %305 = OpFMul %302 %304 
					                                       f32_4 %306 = OpLoad %9 
					                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
					                                                      OpStore %9 %307 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_4 %310 = OpLoad %48 
					                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                                       f32_3 %312 = OpFMul %309 %311 
					                                       f32_4 %313 = OpLoad %32 
					                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
					                                                      OpStore %32 %314 
					                                       f32_4 %315 = OpLoad %48 
					                                       f32_3 %316 = OpVectorShuffle %315 %315 2 0 1 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 1 2 0 
					                                       f32_3 %319 = OpFMul %316 %318 
					                                       f32_4 %320 = OpLoad %32 
					                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
					                                       f32_3 %322 = OpFNegate %321 
					                                       f32_3 %323 = OpFAdd %319 %322 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
					                                                      OpStore %9 %325 
					                         read_only Texture2D %327 = OpLoad %65 
					                                     sampler %328 = OpLoad %69 
					                  read_only Texture2DSampled %329 = OpSampledImage %327 %328 
					                                       f32_4 %330 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %331 = OpVectorShuffle %330 %330 0 1 
					                                       f32_4 %332 = OpImageSampleImplicitLod %329 %331 
					                                         f32 %333 = OpCompositeExtract %332 3 
					                                                      OpStore %326 %333 
					                                         f32 %335 = OpLoad %326 
					                                         f32 %336 = OpFNegate %335 
					                                         f32 %337 = OpFAdd %336 %149 
					                                                      OpStore %334 %337 
					                                         f32 %338 = OpLoad %334 
					                                  Input f32* %339 = OpAccessChain vs_TEXCOORD6 %14 
					                                         f32 %340 = OpLoad %339 
					                                         f32 %341 = OpFNegate %340 
					                                         f32 %342 = OpFAdd %338 %341 
					                                                      OpStore %281 %342 
					                                         f32 %343 = OpLoad %281 
					                                  Input f32* %344 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %345 = OpLoad %344 
					                                         f32 %346 = OpFMul %343 %345 
					                                         f32 %347 = OpFAdd %346 %149 
					                                                      OpStore %281 %347 
					                                Uniform f32* %348 = OpAccessChain %23 %115 
					                                         f32 %349 = OpLoad %348 
					                                Uniform f32* %351 = OpAccessChain %23 %350 
					                                         f32 %352 = OpLoad %351 
					                                         f32 %353 = OpFMul %349 %352 
					                                Private f32* %354 = OpAccessChain %32 %14 
					                                                      OpStore %354 %353 
					                                Private f32* %355 = OpAccessChain %32 %14 
					                                         f32 %356 = OpLoad %355 
					                                  Input f32* %357 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %358 = OpLoad %357 
					                                         f32 %359 = OpFMul %356 %358 
					                                Private f32* %360 = OpAccessChain %32 %14 
					                                                      OpStore %360 %359 
					                                Private f32* %362 = OpAccessChain %32 %14 
					                                         f32 %363 = OpLoad %362 
					                                         f32 %364 = OpFMul %363 %149 
					                                         f32 %365 = OpLoad %281 
					                                         f32 %366 = OpFAdd %364 %365 
					                                Private f32* %367 = OpAccessChain %361 %14 
					                                                      OpStore %367 %366 
					                                Private f32* %368 = OpAccessChain %361 %14 
					                                         f32 %369 = OpLoad %368 
					                                         f32 %370 = OpExtInst %1 43 %369 %45 %33 
					                                Private f32* %371 = OpAccessChain %361 %14 
					                                                      OpStore %371 %370 
					                                Private f32* %374 = OpAccessChain %32 %14 
					                                         f32 %375 = OpLoad %374 
					                                         f32 %376 = OpExtInst %1 37 %375 %33 
					                                Private f32* %377 = OpAccessChain %373 %14 
					                                                      OpStore %377 %376 
					                                Private f32* %378 = OpAccessChain %373 %14 
					                                         f32 %379 = OpLoad %378 
					                                         f32 %380 = OpExtInst %1 31 %379 
					                                Private f32* %381 = OpAccessChain %373 %14 
					                                                      OpStore %381 %380 
					                                Private f32* %382 = OpAccessChain %373 %14 
					                                         f32 %383 = OpLoad %382 
					                                Private f32* %384 = OpAccessChain %361 %14 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpFMul %383 %385 
					                                Private f32* %387 = OpAccessChain %361 %14 
					                                                      OpStore %387 %386 
					                                Uniform f32* %389 = OpAccessChain %23 %388 
					                                         f32 %390 = OpLoad %389 
					                                Uniform f32* %392 = OpAccessChain %23 %391 
					                                         f32 %393 = OpLoad %392 
					                                       f32_2 %394 = OpCompositeConstruct %390 %393 
					                              Uniform f32_4* %397 = OpAccessChain %23 %395 
					                                       f32_4 %398 = OpLoad %397 
					                                       f32_2 %399 = OpVectorShuffle %398 %398 1 1 
					                                       f32_2 %400 = OpFMul %394 %399 
					                                       f32_2 %402 = OpLoad vs_TEXCOORD1 
					                                       f32_2 %403 = OpFAdd %400 %402 
					                                                      OpStore %169 %403 
					                         read_only Texture2D %406 = OpLoad %405 
					                                     sampler %408 = OpLoad %407 
					                  read_only Texture2DSampled %409 = OpSampledImage %406 %408 
					                                       f32_2 %410 = OpLoad %169 
					                                       f32_4 %411 = OpImageSampleImplicitLod %409 %410 
					                                                      OpStore %404 %411 
					                                       f32_4 %413 = OpLoad %404 
					                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
					                              Uniform f32_4* %416 = OpAccessChain %23 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
					                                       f32_3 %419 = OpFMul %414 %418 
					                                                      OpStore %412 %419 
					                                  Input f32* %422 = OpAccessChain %421 %76 
					                                         f32 %423 = OpLoad %422 
					                                Uniform f32* %424 = OpAccessChain %23 %415 %76 
					                                         f32 %425 = OpLoad %424 
					                                         f32 %426 = OpFMul %423 %425 
					                                Private f32* %427 = OpAccessChain %420 %14 
					                                                      OpStore %427 %426 
					                                Private f32* %429 = OpAccessChain %404 %76 
					                                         f32 %430 = OpLoad %429 
					                                Private f32* %431 = OpAccessChain %420 %14 
					                                         f32 %432 = OpLoad %431 
					                                         f32 %433 = OpFMul %430 %432 
					                                                      OpStore %428 %433 
					                                Uniform f32* %435 = OpAccessChain %23 %434 
					                                         f32 %436 = OpLoad %435 
					                                Uniform f32* %438 = OpAccessChain %23 %437 
					                                         f32 %439 = OpLoad %438 
					                                       f32_2 %440 = OpCompositeConstruct %436 %439 
					                              Uniform f32_4* %441 = OpAccessChain %23 %395 
					                                       f32_4 %442 = OpLoad %441 
					                                       f32_2 %443 = OpVectorShuffle %442 %442 1 1 
					                                       f32_2 %444 = OpFMul %440 %443 
					                                       f32_4 %445 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFAdd %444 %446 
					                                       f32_4 %448 = OpLoad %62 
					                                       f32_4 %449 = OpVectorShuffle %448 %447 4 5 2 3 
					                                                      OpStore %62 %449 
					                         read_only Texture2D %452 = OpLoad %451 
					                                     sampler %454 = OpLoad %453 
					                  read_only Texture2DSampled %455 = OpSampledImage %452 %454 
					                                       f32_4 %456 = OpLoad %62 
					                                       f32_2 %457 = OpVectorShuffle %456 %456 0 1 
					                                       f32_4 %458 = OpImageSampleImplicitLod %455 %457 
					                                                      OpStore %450 %458 
					                                       f32_4 %460 = OpLoad %421 
					                              Uniform f32_4* %462 = OpAccessChain %23 %461 
					                                       f32_4 %463 = OpLoad %462 
					                                       f32_4 %464 = OpFMul %460 %463 
					                                                      OpStore %459 %464 
					                                       f32_4 %466 = OpLoad %450 
					                                       f32_4 %467 = OpLoad %459 
					                                       f32_4 %468 = OpFMul %466 %467 
					                                                      OpStore %465 %468 
					                                       f32_4 %469 = OpLoad %465 
					                                       f32_3 %470 = OpVectorShuffle %469 %469 3 3 3 
					                                       f32_4 %471 = OpLoad %465 
					                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
					                                       f32_3 %473 = OpFMul %470 %472 
					                                                      OpStore %373 %473 
					                                       f32_3 %475 = OpLoad %412 
					                                         f32 %476 = OpLoad %428 
					                                       f32_3 %477 = OpCompositeConstruct %476 %476 %476 
					                                       f32_3 %478 = OpFMul %475 %477 
					                                       f32_3 %479 = OpLoad %373 
					                                       f32_3 %480 = OpFNegate %479 
					                                       f32_3 %481 = OpFAdd %478 %480 
					                                       f32_4 %482 = OpLoad %474 
					                                       f32_4 %483 = OpVectorShuffle %482 %481 4 5 6 3 
					                                                      OpStore %474 %483 
					                                Private f32* %484 = OpAccessChain %420 %14 
					                                         f32 %485 = OpLoad %484 
					                                Private f32* %486 = OpAccessChain %404 %76 
					                                         f32 %487 = OpLoad %486 
					                                         f32 %488 = OpFMul %485 %487 
					                                Private f32* %489 = OpAccessChain %465 %76 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFNegate %490 
					                                         f32 %492 = OpFAdd %488 %491 
					                                Private f32* %493 = OpAccessChain %474 %76 
					                                                      OpStore %493 %492 
					                                       f32_4 %494 = OpLoad %361 
					                                       f32_4 %495 = OpVectorShuffle %494 %494 0 0 0 0 
					                                       f32_4 %496 = OpLoad %474 
					                                       f32_4 %497 = OpFMul %495 %496 
					                                                      OpStore %420 %497 
					                                Private f32* %499 = OpAccessChain %459 %76 
					                                         f32 %500 = OpLoad %499 
					                                Private f32* %501 = OpAccessChain %450 %76 
					                                         f32 %502 = OpLoad %501 
					                                         f32 %503 = OpFMul %500 %502 
					                                Private f32* %504 = OpAccessChain %420 %76 
					                                         f32 %505 = OpLoad %504 
					                                         f32 %506 = OpFAdd %503 %505 
					                                Private f32* %507 = OpAccessChain %498 %76 
					                                                      OpStore %507 %506 
					                                       f32_4 %508 = OpLoad %465 
					                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
					                                       f32_4 %510 = OpLoad %465 
					                                       f32_3 %511 = OpVectorShuffle %510 %510 3 3 3 
					                                       f32_3 %512 = OpFMul %509 %511 
					                                       f32_4 %513 = OpLoad %420 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
					                                       f32_3 %515 = OpFAdd %512 %514 
					                                       f32_4 %516 = OpLoad %498 
					                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
					                                                      OpStore %498 %517 
					                                Private f32* %518 = OpAccessChain %32 %14 
					                                         f32 %519 = OpLoad %518 
					                                         f32 %520 = OpFNegate %519 
					                                         f32 %521 = OpFMul %520 %149 
					                                         f32 %522 = OpLoad %281 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %361 %14 
					                                                      OpStore %524 %523 
					                                Private f32* %525 = OpAccessChain %32 %14 
					                                         f32 %526 = OpLoad %525 
					                                         f32 %527 = OpFMul %526 %149 
					                                         f32 %528 = OpLoad %281 
					                                         f32 %529 = OpFAdd %527 %528 
					                                                      OpStore %281 %529 
					                                         f32 %530 = OpLoad %281 
					                                         f32 %531 = OpExtInst %1 43 %530 %45 %33 
					                                                      OpStore %281 %531 
					                                Uniform f32* %533 = OpAccessChain %23 %532 
					                                         f32 %534 = OpLoad %533 
					                                Uniform f32* %535 = OpAccessChain %23 %350 
					                                         f32 %536 = OpLoad %535 
					                                         f32 %537 = OpFMul %534 %536 
					                                Private f32* %538 = OpAccessChain %32 %14 
					                                                      OpStore %538 %537 
					                                Private f32* %539 = OpAccessChain %32 %14 
					                                         f32 %540 = OpLoad %539 
					                                  Input f32* %541 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %542 = OpLoad %541 
					                                         f32 %543 = OpFMul %540 %542 
					                                Private f32* %544 = OpAccessChain %169 %14 
					                                                      OpStore %544 %543 
					                                Private f32* %545 = OpAccessChain %32 %14 
					                                         f32 %546 = OpLoad %545 
					                                  Input f32* %547 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %548 = OpLoad %547 
					                                         f32 %549 = OpFMul %546 %548 
					                                         f32 %550 = OpFAdd %549 %33 
					                                Private f32* %551 = OpAccessChain %373 %14 
					                                                      OpStore %551 %550 
					                                Private f32* %552 = OpAccessChain %169 %14 
					                                         f32 %553 = OpLoad %552 
					                                         f32 %554 = OpFMul %553 %149 
					                                Private f32* %555 = OpAccessChain %361 %14 
					                                         f32 %556 = OpLoad %555 
					                                         f32 %557 = OpFAdd %554 %556 
					                                Private f32* %558 = OpAccessChain %361 %14 
					                                                      OpStore %558 %557 
					                                Private f32* %559 = OpAccessChain %361 %14 
					                                         f32 %560 = OpLoad %559 
					                                Private f32* %561 = OpAccessChain %373 %14 
					                                         f32 %562 = OpLoad %561 
					                                         f32 %563 = OpFDiv %560 %562 
					                                Private f32* %564 = OpAccessChain %361 %14 
					                                                      OpStore %564 %563 
					                                Private f32* %565 = OpAccessChain %361 %14 
					                                         f32 %566 = OpLoad %565 
					                                         f32 %567 = OpExtInst %1 43 %566 %45 %33 
					                                Private f32* %568 = OpAccessChain %361 %14 
					                                                      OpStore %568 %567 
					                                Private f32* %569 = OpAccessChain %361 %14 
					                                         f32 %570 = OpLoad %569 
					                                         f32 %571 = OpFNegate %570 
					                                         f32 %572 = OpFAdd %571 %33 
					                                Private f32* %573 = OpAccessChain %361 %14 
					                                                      OpStore %573 %572 
					                                       f32_4 %575 = OpLoad %498 
					                                       f32_4 %576 = OpLoad %361 
					                                       f32_4 %577 = OpVectorShuffle %576 %576 0 0 0 0 
					                                       f32_4 %578 = OpFMul %575 %577 
					                                                      OpStore %574 %578 
					                                Uniform f32* %581 = OpAccessChain %23 %580 
					                                         f32 %582 = OpLoad %581 
					                                         f32 %583 = OpFNegate %582 
					                                Uniform f32* %585 = OpAccessChain %23 %584 
					                                         f32 %586 = OpLoad %585 
					                                         f32 %587 = OpFAdd %583 %586 
					                                Private f32* %588 = OpAccessChain %579 %14 
					                                                      OpStore %588 %587 
					                                         f32 %589 = OpLoad %281 
					                                Private f32* %590 = OpAccessChain %579 %14 
					                                         f32 %591 = OpLoad %590 
					                                         f32 %592 = OpFMul %589 %591 
					                                Uniform f32* %593 = OpAccessChain %23 %580 
					                                         f32 %594 = OpLoad %593 
					                                         f32 %595 = OpFAdd %592 %594 
					                                Private f32* %596 = OpAccessChain %579 %14 
					                                                      OpStore %596 %595 
					                         read_only Texture2D %599 = OpLoad %598 
					                                     sampler %601 = OpLoad %600 
					                  read_only Texture2DSampled %602 = OpSampledImage %599 %601 
					                                       f32_4 %603 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
					                                       f32_4 %605 = OpImageSampleImplicitLod %602 %604 
					                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 3 
					                                                      OpStore %597 %606 
					                                       f32_3 %607 = OpLoad %597 
					                                       f32_2 %608 = OpVectorShuffle %607 %607 0 0 
					                                       f32_3 %609 = OpLoad %597 
					                                       f32_2 %610 = OpVectorShuffle %609 %609 2 2 
					                                         f32 %611 = OpDot %608 %610 
					                                Private f32* %612 = OpAccessChain %361 %14 
					                                                      OpStore %612 %611 
					                                Private f32* %613 = OpAccessChain %597 %94 
					                                         f32 %614 = OpLoad %613 
					                                Private f32* %615 = OpAccessChain %597 %94 
					                                         f32 %616 = OpLoad %615 
					                                         f32 %617 = OpFAdd %614 %616 
					                                Private f32* %618 = OpAccessChain %361 %94 
					                                                      OpStore %618 %617 
					                                       f32_4 %619 = OpLoad %361 
					                                       f32_2 %620 = OpVectorShuffle %619 %619 0 1 
					                                       f32_2 %622 = OpFAdd %620 %621 
					                                       f32_4 %623 = OpLoad %361 
					                                       f32_4 %624 = OpVectorShuffle %623 %622 4 5 2 3 
					                                                      OpStore %361 %624 
					                                       f32_4 %626 = OpLoad %361 
					                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
					                                       f32_4 %628 = OpLoad %361 
					                                       f32_2 %629 = OpVectorShuffle %628 %628 0 1 
					                                         f32 %630 = OpDot %627 %629 
					                                                      OpStore %625 %630 
					                                         f32 %631 = OpLoad %625 
					                                         f32 %632 = OpExtInst %1 37 %631 %33 
					                                                      OpStore %625 %632 
					                                         f32 %633 = OpLoad %625 
					                                         f32 %634 = OpFNegate %633 
					                                         f32 %635 = OpFAdd %634 %33 
					                                                      OpStore %625 %635 
					                                         f32 %636 = OpLoad %625 
					                                         f32 %637 = OpExtInst %1 31 %636 
					                                Private f32* %638 = OpAccessChain %361 %46 
					                                                      OpStore %638 %637 
					                                       f32_4 %639 = OpLoad %361 
					                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
					                                       f32_3 %641 = OpLoad %579 
					                                       f32_3 %642 = OpVectorShuffle %641 %641 0 0 0 
					                                       f32_3 %643 = OpFMul %640 %642 
					                                       f32_3 %646 = OpFAdd %643 %645 
					                                                      OpStore %579 %646 
					                                       f32_4 %647 = OpLoad %574 
					                                       f32_3 %648 = OpVectorShuffle %647 %647 3 3 3 
					                                       f32_3 %649 = OpLoad %579 
					                                       f32_3 %650 = OpFMul %648 %649 
					                                       f32_3 %652 = OpFAdd %650 %651 
					                                                      OpStore %579 %652 
					                                       f32_4 %653 = OpLoad %9 
					                                       f32_3 %654 = OpVectorShuffle %653 %653 0 1 2 
					                                       f32_3 %655 = OpLoad %579 
					                                       f32_3 %656 = OpFNegate %655 
					                                       f32_3 %657 = OpFAdd %654 %656 
					                                       f32_4 %658 = OpLoad %9 
					                                       f32_4 %659 = OpVectorShuffle %658 %657 4 5 6 3 
					                                                      OpStore %9 %659 
					                                       f32_4 %660 = OpLoad %9 
					                                       f32_3 %661 = OpVectorShuffle %660 %660 0 1 2 
					                                       f32_4 %662 = OpLoad %9 
					                                       f32_3 %663 = OpVectorShuffle %662 %662 0 1 2 
					                                         f32 %664 = OpDot %661 %663 
					                                Private f32* %665 = OpAccessChain %579 %14 
					                                                      OpStore %665 %664 
					                                Private f32* %666 = OpAccessChain %579 %14 
					                                         f32 %667 = OpLoad %666 
					                                         f32 %668 = OpExtInst %1 32 %667 
					                                Private f32* %669 = OpAccessChain %579 %14 
					                                                      OpStore %669 %668 
					                                       f32_4 %670 = OpLoad %9 
					                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
					                                       f32_3 %672 = OpLoad %579 
					                                       f32_3 %673 = OpVectorShuffle %672 %672 0 0 0 
					                                       f32_3 %674 = OpFMul %671 %673 
					                                       f32_4 %675 = OpLoad %9 
					                                       f32_4 %676 = OpVectorShuffle %675 %674 4 5 6 3 
					                                                      OpStore %9 %676 
					                                       f32_3 %679 = OpLoad vs_TEXCOORD2 
					                                       f32_4 %680 = OpLoad %9 
					                                       f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
					                                       f32_3 %682 = OpFNegate %681 
					                                         f32 %683 = OpDot %679 %682 
					                                Private f32* %684 = OpAccessChain %361 %14 
					                                                      OpStore %684 %683 
					                                       f32_3 %686 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %687 = OpLoad %9 
					                                       f32_3 %688 = OpVectorShuffle %687 %687 0 1 2 
					                                       f32_3 %689 = OpFNegate %688 
					                                         f32 %690 = OpDot %686 %689 
					                                Private f32* %691 = OpAccessChain %361 %94 
					                                                      OpStore %691 %690 
					                                       f32_3 %693 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %694 = OpLoad %9 
					                                       f32_3 %695 = OpVectorShuffle %694 %694 0 1 2 
					                                       f32_3 %696 = OpFNegate %695 
					                                         f32 %697 = OpDot %693 %696 
					                                Private f32* %698 = OpAccessChain %361 %46 
					                                                      OpStore %698 %697 
					                                       f32_4 %700 = OpLoad %361 
					                                       f32_3 %701 = OpVectorShuffle %700 %700 0 1 2 
					                                       f32_4 %702 = OpLoad %361 
					                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
					                                         f32 %704 = OpDot %701 %703 
					                                Private f32* %705 = OpAccessChain %699 %14 
					                                                      OpStore %705 %704 
					                                Private f32* %706 = OpAccessChain %699 %14 
					                                         f32 %707 = OpLoad %706 
					                                         f32 %708 = OpExtInst %1 32 %707 
					                                Private f32* %709 = OpAccessChain %699 %14 
					                                                      OpStore %709 %708 
					                                       f32_3 %710 = OpLoad %699 
					                                       f32_3 %711 = OpVectorShuffle %710 %710 0 0 0 
					                                       f32_4 %712 = OpLoad %361 
					                                       f32_3 %713 = OpVectorShuffle %712 %712 0 1 2 
					                                       f32_3 %714 = OpFMul %711 %713 
					                                                      OpStore %699 %714 
					                                       f32_3 %716 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %717 = OpFNegate %716 
					                              Uniform f32_4* %719 = OpAccessChain %23 %718 
					                                       f32_4 %720 = OpLoad %719 
					                                       f32_3 %721 = OpVectorShuffle %720 %720 0 1 2 
					                                       f32_3 %722 = OpFAdd %717 %721 
					                                                      OpStore %579 %722 
					                                       f32_3 %724 = OpLoad %579 
					                                       f32_3 %725 = OpLoad %579 
					                                         f32 %726 = OpDot %724 %725 
					                                                      OpStore %723 %726 
					                                         f32 %727 = OpLoad %723 
					                                         f32 %728 = OpExtInst %1 32 %727 
					                                                      OpStore %723 %728 
					                                         f32 %729 = OpLoad %723 
					                                       f32_3 %730 = OpCompositeConstruct %729 %729 %729 
					                                       f32_3 %731 = OpLoad %579 
					                                       f32_3 %732 = OpFMul %730 %731 
					                                                      OpStore %579 %732 
					                                       f32_3 %734 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %735 = OpFNegate %734 
					                              Uniform f32_3* %738 = OpAccessChain %23 %736 
					                                       f32_3 %739 = OpLoad %738 
					                                       f32_3 %740 = OpFAdd %735 %739 
					                                                      OpStore %733 %740 
					                                       f32_3 %741 = OpLoad %733 
					                                       f32_3 %742 = OpLoad %733 
					                                         f32 %743 = OpDot %741 %742 
					                                                      OpStore %723 %743 
					                                         f32 %744 = OpLoad %723 
					                                         f32 %745 = OpExtInst %1 32 %744 
					                                                      OpStore %723 %745 
					                                       f32_3 %746 = OpLoad %733 
					                                         f32 %747 = OpLoad %723 
					                                       f32_3 %748 = OpCompositeConstruct %747 %747 %747 
					                                       f32_3 %749 = OpFMul %746 %748 
					                                       f32_3 %750 = OpLoad %579 
					                                       f32_3 %751 = OpFAdd %749 %750 
					                                       f32_4 %752 = OpLoad %361 
					                                       f32_4 %753 = OpVectorShuffle %752 %751 4 5 6 3 
					                                                      OpStore %361 %753 
					                                       f32_3 %754 = OpLoad %699 
					                                       f32_3 %755 = OpLoad %579 
					                                         f32 %756 = OpDot %754 %755 
					                                Private f32* %757 = OpAccessChain %361 %76 
					                                                      OpStore %757 %756 
					                                       f32_4 %758 = OpLoad %361 
					                                       f32_3 %759 = OpVectorShuffle %758 %758 0 1 2 
					                                       f32_4 %760 = OpLoad %361 
					                                       f32_3 %761 = OpVectorShuffle %760 %760 0 1 2 
					                                         f32 %762 = OpDot %759 %761 
					                                Private f32* %763 = OpAccessChain %474 %14 
					                                                      OpStore %763 %762 
					                                Private f32* %764 = OpAccessChain %474 %14 
					                                         f32 %765 = OpLoad %764 
					                                         f32 %766 = OpExtInst %1 32 %765 
					                                Private f32* %767 = OpAccessChain %474 %14 
					                                                      OpStore %767 %766 
					                                       f32_4 %768 = OpLoad %361 
					                                       f32_3 %769 = OpVectorShuffle %768 %768 0 1 2 
					                                       f32_4 %770 = OpLoad %474 
					                                       f32_3 %771 = OpVectorShuffle %770 %770 0 0 0 
					                                       f32_3 %772 = OpFMul %769 %771 
					                                       f32_4 %773 = OpLoad %361 
					                                       f32_4 %774 = OpVectorShuffle %773 %772 4 5 6 3 
					                                                      OpStore %361 %774 
					                                       f32_3 %775 = OpLoad %699 
					                                       f32_4 %776 = OpLoad %361 
					                                       f32_3 %777 = OpVectorShuffle %776 %776 0 1 2 
					                                         f32 %778 = OpDot %775 %777 
					                                Private f32* %779 = OpAccessChain %361 %14 
					                                                      OpStore %779 %778 
					                                       f32_4 %780 = OpLoad %361 
					                                       f32_2 %781 = OpVectorShuffle %780 %780 0 3 
					                                       f32_2 %783 = OpExtInst %1 40 %781 %782 
					                                       f32_4 %784 = OpLoad %361 
					                                       f32_4 %785 = OpVectorShuffle %784 %783 4 1 2 5 
					                                                      OpStore %361 %785 
					                                Private f32* %786 = OpAccessChain %361 %14 
					                                         f32 %787 = OpLoad %786 
					                                         f32 %788 = OpExtInst %1 30 %787 
					                                Private f32* %789 = OpAccessChain %699 %14 
					                                                      OpStore %789 %788 
					                                Uniform f32* %792 = OpAccessChain %23 %791 
					                                         f32 %793 = OpLoad %792 
					                                         f32 %794 = OpFNegate %793 
					                                Uniform f32* %796 = OpAccessChain %23 %795 
					                                         f32 %797 = OpLoad %796 
					                                         f32 %798 = OpFAdd %794 %797 
					                                                      OpStore %790 %798 
					                                         f32 %800 = OpLoad %281 
					                                         f32 %801 = OpLoad %790 
					                                         f32 %802 = OpFMul %800 %801 
					                                Uniform f32* %803 = OpAccessChain %23 %791 
					                                         f32 %804 = OpLoad %803 
					                                         f32 %805 = OpFAdd %802 %804 
					                                Private f32* %806 = OpAccessChain %799 %14 
					                                                      OpStore %806 %805 
					                                Private f32* %807 = OpAccessChain %799 %14 
					                                         f32 %808 = OpLoad %807 
					                                         f32 %810 = OpFMul %808 %809 
					                                Private f32* %811 = OpAccessChain %361 %14 
					                                                      OpStore %811 %810 
					                                Private f32* %812 = OpAccessChain %699 %14 
					                                         f32 %813 = OpLoad %812 
					                                Private f32* %814 = OpAccessChain %361 %14 
					                                         f32 %815 = OpLoad %814 
					                                         f32 %816 = OpFMul %813 %815 
					                                Private f32* %817 = OpAccessChain %699 %14 
					                                                      OpStore %817 %816 
					                                Private f32* %818 = OpAccessChain %699 %14 
					                                         f32 %819 = OpLoad %818 
					                                         f32 %820 = OpExtInst %1 29 %819 
					                                Private f32* %821 = OpAccessChain %699 %14 
					                                                      OpStore %821 %820 
					                                       f32_3 %822 = OpLoad vs_TEXCOORD5 
					                                       f32_4 %823 = OpVectorShuffle %822 %822 1 1 1 1 
					                              Uniform f32_4* %825 = OpAccessChain %23 %824 %736 
					                                       f32_4 %826 = OpLoad %825 
					                                       f32_4 %827 = OpFMul %823 %826 
					                                                      OpStore %48 %827 
					                              Uniform f32_4* %828 = OpAccessChain %23 %824 %395 
					                                       f32_4 %829 = OpLoad %828 
					                                       f32_3 %830 = OpLoad vs_TEXCOORD5 
					                                       f32_4 %831 = OpVectorShuffle %830 %830 0 0 0 0 
					                                       f32_4 %832 = OpFMul %829 %831 
					                                       f32_4 %833 = OpLoad %48 
					                                       f32_4 %834 = OpFAdd %832 %833 
					                                                      OpStore %48 %834 
					                              Uniform f32_4* %835 = OpAccessChain %23 %824 %718 
					                                       f32_4 %836 = OpLoad %835 
					                                       f32_3 %837 = OpLoad vs_TEXCOORD5 
					                                       f32_4 %838 = OpVectorShuffle %837 %837 2 2 2 2 
					                                       f32_4 %839 = OpFMul %836 %838 
					                                       f32_4 %840 = OpLoad %48 
					                                       f32_4 %841 = OpFAdd %839 %840 
					                                                      OpStore %48 %841 
					                                       f32_4 %842 = OpLoad %48 
					                              Uniform f32_4* %844 = OpAccessChain %23 %824 %843 
					                                       f32_4 %845 = OpLoad %844 
					                                       f32_4 %846 = OpFAdd %842 %845 
					                                                      OpStore %48 %846 
					                                       f32_4 %847 = OpLoad %48 
					                                       f32_2 %848 = OpVectorShuffle %847 %847 0 1 
					                                       f32_4 %849 = OpLoad %48 
					                                       f32_2 %850 = OpVectorShuffle %849 %849 3 3 
					                                       f32_2 %851 = OpFDiv %848 %850 
					                                                      OpStore %799 %851 
					                                       f32_2 %852 = OpLoad %799 
					                                       f32_2 %854 = OpFAdd %852 %853 
					                                                      OpStore %799 %854 
					                         read_only Texture2D %856 = OpLoad %855 
					                                     sampler %858 = OpLoad %857 
					                  read_only Texture2DSampled %859 = OpSampledImage %856 %858 
					                                       f32_2 %860 = OpLoad %799 
					                                       f32_4 %861 = OpImageSampleImplicitLod %859 %860 
					                                         f32 %862 = OpCompositeExtract %861 3 
					                                Private f32* %863 = OpAccessChain %799 %14 
					                                                      OpStore %863 %862 
					                                Private f32* %865 = OpAccessChain %48 %46 
					                                         f32 %866 = OpLoad %865 
					                                        bool %867 = OpFOrdLessThan %45 %866 
					                                                      OpStore %864 %867 
					                                       f32_4 %868 = OpLoad %48 
					                                       f32_3 %869 = OpVectorShuffle %868 %868 0 1 2 
					                                       f32_4 %870 = OpLoad %48 
					                                       f32_3 %871 = OpVectorShuffle %870 %870 0 1 2 
					                                         f32 %872 = OpDot %869 %871 
					                                                      OpStore %281 %872 
					                         read_only Texture2D %874 = OpLoad %873 
					                                     sampler %876 = OpLoad %875 
					                  read_only Texture2DSampled %877 = OpSampledImage %874 %876 
					                                         f32 %878 = OpLoad %281 
					                                       f32_2 %879 = OpCompositeConstruct %878 %878 
					                                       f32_4 %880 = OpImageSampleImplicitLod %877 %879 
					                                         f32 %881 = OpCompositeExtract %880 0 
					                                                      OpStore %281 %881 
					                                        bool %882 = OpLoad %864 
					                                         f32 %883 = OpSelect %882 %33 %45 
					                                Private f32* %884 = OpAccessChain %361 %14 
					                                                      OpStore %884 %883 
					                                Private f32* %885 = OpAccessChain %799 %14 
					                                         f32 %886 = OpLoad %885 
					                                Private f32* %887 = OpAccessChain %361 %14 
					                                         f32 %888 = OpLoad %887 
					                                         f32 %889 = OpFMul %886 %888 
					                                Private f32* %890 = OpAccessChain %361 %14 
					                                                      OpStore %890 %889 
					                                         f32 %891 = OpLoad %281 
					                                Private f32* %892 = OpAccessChain %361 %14 
					                                         f32 %893 = OpLoad %892 
					                                         f32 %894 = OpFMul %891 %893 
					                                Private f32* %895 = OpAccessChain %361 %14 
					                                                      OpStore %895 %894 
					                                       f32_4 %896 = OpLoad %361 
					                                       f32_3 %897 = OpVectorShuffle %896 %896 0 0 0 
					                              Uniform f32_4* %898 = OpAccessChain %23 %843 
					                                       f32_4 %899 = OpLoad %898 
					                                       f32_3 %900 = OpVectorShuffle %899 %899 0 1 2 
					                                       f32_3 %901 = OpFMul %897 %900 
					                                       f32_4 %902 = OpLoad %361 
					                                       f32_4 %903 = OpVectorShuffle %902 %901 4 5 6 3 
					                                                      OpStore %361 %903 
					                                       f32_4 %904 = OpLoad %361 
					                                       f32_3 %905 = OpVectorShuffle %904 %904 0 1 2 
					                              Uniform f32_4* %907 = OpAccessChain %23 %906 
					                                       f32_4 %908 = OpLoad %907 
					                                       f32_3 %909 = OpVectorShuffle %908 %908 0 1 2 
					                                       f32_3 %910 = OpFMul %905 %909 
					                                       f32_4 %911 = OpLoad %474 
					                                       f32_4 %912 = OpVectorShuffle %911 %910 4 5 6 3 
					                                                      OpStore %474 %912 
					                                       f32_3 %913 = OpLoad %699 
					                                       f32_3 %914 = OpVectorShuffle %913 %913 0 0 0 
					                                       f32_4 %915 = OpLoad %474 
					                                       f32_3 %916 = OpVectorShuffle %915 %915 0 1 2 
					                                       f32_3 %917 = OpFMul %914 %916 
					                                                      OpStore %699 %917 
					                                Private f32* %918 = OpAccessChain %574 %76 
					                                         f32 %919 = OpLoad %918 
					                                         f32 %921 = OpExtInst %1 40 %919 %920 
					                                                      OpStore %334 %921 
					                                       f32_4 %922 = OpLoad %574 
					                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
					                                         f32 %924 = OpLoad %334 
					                                       f32_3 %925 = OpCompositeConstruct %924 %924 %924 
					                                       f32_3 %926 = OpFDiv %923 %925 
					                                       f32_4 %927 = OpLoad %459 
					                                       f32_4 %928 = OpVectorShuffle %927 %926 4 5 6 3 
					                                                      OpStore %459 %928 
					                                Private f32* %931 = OpAccessChain %574 %76 
					                                         f32 %932 = OpLoad %931 
					                                 Output f32* %934 = OpAccessChain %930 %76 
					                                                      OpStore %934 %932 
					                                       f32_4 %935 = OpLoad %361 
					                                       f32_3 %936 = OpVectorShuffle %935 %935 0 1 2 
					                                       f32_4 %937 = OpLoad %459 
					                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 2 
					                                       f32_3 %939 = OpFMul %936 %938 
					                                       f32_4 %940 = OpLoad %361 
					                                       f32_4 %941 = OpVectorShuffle %940 %939 4 5 6 3 
					                                                      OpStore %361 %941 
					                                       f32_4 %942 = OpLoad %361 
					                                       f32_3 %943 = OpVectorShuffle %942 %942 0 1 2 
					                                       f32_4 %944 = OpLoad %361 
					                                       f32_3 %945 = OpVectorShuffle %944 %944 3 3 3 
					                                       f32_3 %946 = OpFMul %943 %945 
					                                       f32_3 %947 = OpLoad %699 
					                                       f32_3 %948 = OpFAdd %946 %947 
					                                                      OpStore %699 %948 
					                                       f32_3 %949 = OpLoad %699 
					                                       f32_4 %950 = OpLoad %930 
					                                       f32_4 %951 = OpVectorShuffle %950 %949 4 5 6 3 
					                                                      OpStore %930 %951 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[2];
						float _FaceDilate;
						vec4 unused_0_4[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_6[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_17;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					vec3 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = u_xlat2.y * unity_MatrixVP[1].w;
					    u_xlat15 = unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat2.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat2.x = u_xlat15 * 1.5;
					    u_xlat7.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat2.x = u_xlat7.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat2.x);
					    u_xlat7.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat7.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat7.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat3.y = dot(u_xlat0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.z = dot(u_xlat0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.x = dot(u_xlat0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat3.xyz = (-u_xlat7.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat7.x = dot(u_xlat0.yzx, u_xlat7.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat7.x) * u_xlat15 + u_xlat2.x;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat2.x = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat15 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat3.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = _EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD8.xyz = unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "POINT_COOKIE" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _FaceDilate;
					uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _FaceTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					vec3 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat2.x = u_xlat15 * 1.5;
					    u_xlat7.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat2.x = u_xlat7.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat2.x);
					    u_xlat7.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat7.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat3.xyz = (-u_xlat7.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat7.x = dot(u_xlat0.yzx, u_xlat7.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat7.x) * u_xlat15 + u_xlat2.x;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat2.x = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat15 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    vs_TEXCOORD8.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _FaceUVSpeedX;
					uniform 	float _FaceUVSpeedY;
					uniform 	vec4 _FaceColor;
					uniform 	float _OutlineSoftness;
					uniform 	float _OutlineUVSpeedX;
					uniform 	float _OutlineUVSpeedY;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _Bevel;
					uniform 	float _BevelOffset;
					uniform 	float _BevelWidth;
					uniform 	float _BevelClamp;
					uniform 	float _BevelRoundness;
					uniform 	float _BumpOutline;
					uniform 	float _BumpFace;
					uniform 	float _ShaderFlags;
					uniform 	float _ScaleRatioA;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _FaceShininess;
					uniform 	float _OutlineShininess;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _FaceTex;
					UNITY_LOCATION(2) uniform  sampler2D _OutlineTex;
					UNITY_LOCATION(3) uniform  sampler2D _BumpMap;
					UNITY_LOCATION(4) uniform  sampler2D _LightTextureB0;
					UNITY_LOCATION(5) uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat5 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat5 = u_xlat13 * u_xlat5 + _FaceShininess;
					    u_xlat5 = u_xlat5 * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat5 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10_2 = texture(_LightTexture0, u_xlat2.xyz);
					    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat5));
					    u_xlat16_5 = u_xlat10_2.w * u_xlat10_3.x;
					    u_xlat2.xyz = vec3(u_xlat16_5) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "POINT_COOKIE" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 649
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %95 %107 %133 %148 %160 %325 %414 %436 %486 %490 %565 %569 %585 %586 %603 %635 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpDecorate %22 ArrayStride 22 
					                                                      OpDecorate %23 ArrayStride 23 
					                                                      OpMemberDecorate %24 0 Offset 24 
					                                                      OpMemberDecorate %24 1 Offset 24 
					                                                      OpMemberDecorate %24 2 Offset 24 
					                                                      OpMemberDecorate %24 3 Offset 24 
					                                                      OpMemberDecorate %24 4 Offset 24 
					                                                      OpMemberDecorate %24 5 Offset 24 
					                                                      OpMemberDecorate %24 6 Offset 24 
					                                                      OpMemberDecorate %24 7 Offset 24 
					                                                      OpMemberDecorate %24 8 Offset 24 
					                                                      OpMemberDecorate %24 9 Offset 24 
					                                                      OpMemberDecorate %24 10 Offset 24 
					                                                      OpMemberDecorate %24 11 Offset 24 
					                                                      OpMemberDecorate %24 12 Offset 24 
					                                                      OpMemberDecorate %24 13 Offset 24 
					                                                      OpMemberDecorate %24 14 Offset 24 
					                                                      OpMemberDecorate %24 15 Offset 24 
					                                                      OpMemberDecorate %24 16 Offset 24 
					                                                      OpMemberDecorate %24 17 Offset 24 
					                                                      OpMemberDecorate %24 18 Offset 24 
					                                                      OpMemberDecorate %24 19 Offset 24 
					                                                      OpMemberDecorate %24 20 Offset 24 
					                                                      OpMemberDecorate %24 21 Offset 24 
					                                                      OpDecorate %24 Block 
					                                                      OpDecorate %26 DescriptorSet 26 
					                                                      OpDecorate %26 Binding 26 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate %107 Location 107 
					                                                      OpDecorate vs_TEXCOORD0 Location 133 
					                                                      OpDecorate vs_TEXCOORD1 Location 148 
					                                                      OpDecorate %160 Location 160 
					                                                      OpDecorate %325 Location 325 
					                                                      OpDecorate vs_TEXCOORD5 Location 414 
					                                                      OpDecorate vs_TEXCOORD6 Location 436 
					                                                      OpDecorate vs_TEXCOORD2 Location 486 
					                                                      OpDecorate %490 Location 490 
					                                                      OpDecorate vs_TEXCOORD3 Location 565 
					                                                      OpDecorate vs_TEXCOORD4 Location 569 
					                                                      OpDecorate %585 RelaxedPrecision 
					                                                      OpDecorate %585 Location 585 
					                                                      OpDecorate %586 RelaxedPrecision 
					                                                      OpDecorate %586 Location 586 
					                                                      OpDecorate %587 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 603 
					                                                      OpDecorate vs_TEXCOORD8 Location 635 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %13 = OpTypeVector %6 2 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeArray %10 %17 
					                                              %23 = OpTypeArray %10 %17 
					                                              %24 = OpTypeStruct %7 %10 %18 %19 %10 %20 %21 %22 %6 %23 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %10 %10 
					                                              %25 = OpTypePointer Uniform %24 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %26 = OpVariable Uniform 
					                                              %27 = OpTypeInt 32 1 
					                                          i32 %28 = OpConstant 13 
					                                              %29 = OpTypePointer Uniform %6 
					                                          i32 %32 = OpConstant 14 
					                                              %39 = OpTypePointer Private %10 
					                               Private f32_4* %40 = OpVariable Private 
					                                          i32 %43 = OpConstant 2 
					                                          i32 %44 = OpConstant 1 
					                                              %45 = OpTypePointer Uniform %10 
					                                          i32 %49 = OpConstant 0 
					                               Private f32_4* %64 = OpVariable Private 
					                                          i32 %66 = OpConstant 3 
					                               Private f32_4* %70 = OpVariable Private 
					                                          i32 %73 = OpConstant 6 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %10 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                             %103 = OpTypePointer Output %10 
					                                             %105 = OpTypePointer Private %6 
					                                Private f32* %106 = OpVariable Private 
					                                Input f32_4* %107 = OpVariable Input 
					                                         u32 %108 = OpConstant 0 
					                                             %109 = OpTypePointer Input %6 
					                                         f32 %112 = OpConstant 3,674022E-40 
					                                         f32 %120 = OpConstant 3,674022E-40 
					                                         f32 %128 = OpConstant 3,674022E-40 
					                                       f32_2 %129 = OpConstantComposite %128 %128 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                                         i32 %136 = OpConstant 20 
					                                             %147 = OpTypePointer Output %13 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                         i32 %151 = OpConstant 21 
					                                Input f32_4* %160 = OpVariable Input 
					                                         i32 %163 = OpConstant 19 
					                                         u32 %176 = OpConstant 3 
					                                         u32 %189 = OpConstant 2 
					                                         i32 %205 = OpConstant 5 
					                                         i32 %226 = OpConstant 16 
					                                         i32 %229 = OpConstant 17 
					                                         i32 %253 = OpConstant 15 
					                                         f32 %263 = OpConstant 3,674022E-40 
					                              Private f32_3* %266 = OpVariable Private 
					                                         i32 %267 = OpConstant 18 
					                                         f32 %271 = OpConstant 3,674022E-40 
					                                             %286 = OpTypePointer Uniform %7 
					                                             %324 = OpTypePointer Input %7 
					                                Input f32_3* %325 = OpVariable Input 
					                                             %330 = OpTypePointer Private %27 
					                                Private i32* %331 = OpVariable Private 
					                                         f32 %332 = OpConstant 3,674022E-40 
					                                             %335 = OpTypeBool 
					                                         u32 %337 = OpConstant 4294967295 
					                                Private i32* %340 = OpVariable Private 
					                                             %413 = OpTypePointer Output %7 
					                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
					                       Output f32_2* vs_TEXCOORD6 = OpVariable Output 
					                                             %445 = OpTypePointer Output %6 
					                                             %447 = OpTypePointer Private %335 
					                               Private bool* %448 = OpVariable Private 
					                                         i32 %454 = OpConstant 10 
					                                         i32 %458 = OpConstant 11 
					                                         f32 %471 = OpConstant 3,674022E-40 
					                                         i32 %473 = OpConstant 8 
					                                         i32 %478 = OpConstant 12 
					                                         f32 %483 = OpConstant 3,674022E-40 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_4* %490 = OpVariable Input 
					                              Private f32_3* %535 = OpVariable Private 
					                                Private f32* %548 = OpVariable Private 
					                                         i32 %551 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %585 = OpVariable Output 
					                                Input f32_4* %586 = OpVariable Input 
					                                         i32 %590 = OpConstant 9 
					                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
					                                         i32 %614 = OpConstant 7 
					                       Output f32_3* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %14 = OpLoad %12 
					                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
					                                 Uniform f32* %30 = OpAccessChain %26 %28 
					                                          f32 %31 = OpLoad %30 
					                                 Uniform f32* %33 = OpAccessChain %26 %32 
					                                          f32 %34 = OpLoad %33 
					                                        f32_2 %35 = OpCompositeConstruct %31 %34 
					                                        f32_2 %36 = OpFAdd %15 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                        f32_3 %38 = OpVectorShuffle %37 %36 3 4 2 
					                                                      OpStore %9 %38 
					                                        f32_3 %41 = OpLoad %9 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 1 1 1 1 
					                               Uniform f32_4* %46 = OpAccessChain %26 %43 %44 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_4 %48 = OpFMul %42 %47 
					                                                      OpStore %40 %48 
					                               Uniform f32_4* %50 = OpAccessChain %26 %43 %49 
					                                        f32_4 %51 = OpLoad %50 
					                                        f32_3 %52 = OpLoad %9 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 0 0 0 0 
					                                        f32_4 %54 = OpFMul %51 %53 
					                                        f32_4 %55 = OpLoad %40 
					                                        f32_4 %56 = OpFAdd %54 %55 
					                                                      OpStore %40 %56 
					                               Uniform f32_4* %57 = OpAccessChain %26 %43 %43 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %12 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 2 2 2 2 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %40 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %40 %63 
					                                        f32_4 %65 = OpLoad %40 
					                               Uniform f32_4* %67 = OpAccessChain %26 %43 %66 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFAdd %65 %68 
					                                                      OpStore %64 %69 
					                                        f32_4 %71 = OpLoad %64 
					                                        f32_4 %72 = OpVectorShuffle %71 %71 1 1 1 1 
					                               Uniform f32_4* %74 = OpAccessChain %26 %73 %44 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpFMul %72 %75 
					                                                      OpStore %70 %76 
					                               Uniform f32_4* %77 = OpAccessChain %26 %73 %49 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %64 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 0 0 0 0 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %70 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %70 %83 
					                               Uniform f32_4* %84 = OpAccessChain %26 %73 %43 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %64 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 2 2 2 2 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %70 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %70 %90 
					                               Uniform f32_4* %96 = OpAccessChain %26 %73 %66 
					                                        f32_4 %97 = OpLoad %96 
					                                        f32_4 %98 = OpLoad %64 
					                                        f32_4 %99 = OpVectorShuffle %98 %98 3 3 3 3 
					                                       f32_4 %100 = OpFMul %97 %99 
					                                       f32_4 %101 = OpLoad %70 
					                                       f32_4 %102 = OpFAdd %100 %101 
					                               Output f32_4* %104 = OpAccessChain %95 %49 
					                                                      OpStore %104 %102 
					                                  Input f32* %110 = OpAccessChain %107 %108 
					                                         f32 %111 = OpLoad %110 
					                                         f32 %113 = OpFMul %111 %112 
					                                                      OpStore %106 %113 
					                                         f32 %114 = OpLoad %106 
					                                         f32 %115 = OpExtInst %1 8 %114 
					                                Private f32* %116 = OpAccessChain %70 %108 
					                                                      OpStore %116 %115 
					                                Private f32* %117 = OpAccessChain %70 %108 
					                                         f32 %118 = OpLoad %117 
					                                         f32 %119 = OpFNegate %118 
					                                         f32 %121 = OpFMul %119 %120 
					                                  Input f32* %122 = OpAccessChain %107 %108 
					                                         f32 %123 = OpLoad %122 
					                                         f32 %124 = OpFAdd %121 %123 
					                                Private f32* %125 = OpAccessChain %70 %91 
					                                                      OpStore %125 %124 
					                                       f32_4 %126 = OpLoad %70 
					                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
					                                       f32_2 %130 = OpFMul %127 %129 
					                                       f32_4 %131 = OpLoad %70 
					                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
					                                                      OpStore %70 %132 
					                                       f32_4 %134 = OpLoad %70 
					                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
					                              Uniform f32_4* %137 = OpAccessChain %26 %136 
					                                       f32_4 %138 = OpLoad %137 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpFMul %135 %139 
					                              Uniform f32_4* %141 = OpAccessChain %26 %136 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
					                                       f32_2 %144 = OpFAdd %140 %143 
					                                       f32_4 %145 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %146 = OpVectorShuffle %145 %144 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %146 
					                                       f32_4 %149 = OpLoad %70 
					                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
					                              Uniform f32_4* %152 = OpAccessChain %26 %151 
					                                       f32_4 %153 = OpLoad %152 
					                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
					                                       f32_2 %155 = OpFMul %150 %154 
					                              Uniform f32_4* %156 = OpAccessChain %26 %151 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
					                                       f32_2 %159 = OpFAdd %155 %158 
					                                                      OpStore vs_TEXCOORD1 %159 
					                                       f32_4 %161 = OpLoad %160 
					                                       f32_2 %162 = OpVectorShuffle %161 %161 0 1 
					                              Uniform f32_4* %164 = OpAccessChain %26 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
					                                       f32_2 %167 = OpFMul %162 %166 
					                              Uniform f32_4* %168 = OpAccessChain %26 %163 
					                                       f32_4 %169 = OpLoad %168 
					                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
					                                       f32_2 %171 = OpFAdd %167 %170 
					                                       f32_4 %172 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %173 
					                                Private f32* %174 = OpAccessChain %64 %91 
					                                         f32 %175 = OpLoad %174 
					                                Uniform f32* %177 = OpAccessChain %26 %73 %44 %176 
					                                         f32 %178 = OpLoad %177 
					                                         f32 %179 = OpFMul %175 %178 
					                                                      OpStore %106 %179 
					                                Uniform f32* %180 = OpAccessChain %26 %73 %49 %176 
					                                         f32 %181 = OpLoad %180 
					                                Private f32* %182 = OpAccessChain %64 %108 
					                                         f32 %183 = OpLoad %182 
					                                         f32 %184 = OpFMul %181 %183 
					                                         f32 %185 = OpLoad %106 
					                                         f32 %186 = OpFAdd %184 %185 
					                                                      OpStore %106 %186 
					                                Uniform f32* %187 = OpAccessChain %26 %73 %43 %176 
					                                         f32 %188 = OpLoad %187 
					                                Private f32* %190 = OpAccessChain %64 %189 
					                                         f32 %191 = OpLoad %190 
					                                         f32 %192 = OpFMul %188 %191 
					                                         f32 %193 = OpLoad %106 
					                                         f32 %194 = OpFAdd %192 %193 
					                                                      OpStore %106 %194 
					                                Uniform f32* %195 = OpAccessChain %26 %73 %66 %176 
					                                         f32 %196 = OpLoad %195 
					                                Private f32* %197 = OpAccessChain %64 %176 
					                                         f32 %198 = OpLoad %197 
					                                         f32 %199 = OpFMul %196 %198 
					                                         f32 %200 = OpLoad %106 
					                                         f32 %201 = OpFAdd %199 %200 
					                                                      OpStore %106 %201 
					                              Uniform f32_4* %202 = OpAccessChain %26 %44 
					                                       f32_4 %203 = OpLoad %202 
					                                       f32_2 %204 = OpVectorShuffle %203 %203 1 1 
					                              Uniform f32_4* %206 = OpAccessChain %26 %205 %44 
					                                       f32_4 %207 = OpLoad %206 
					                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
					                                       f32_2 %209 = OpFMul %204 %208 
					                                       f32_4 %210 = OpLoad %64 
					                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 2 3 
					                                                      OpStore %64 %211 
					                              Uniform f32_4* %212 = OpAccessChain %26 %205 %49 
					                                       f32_4 %213 = OpLoad %212 
					                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
					                              Uniform f32_4* %215 = OpAccessChain %26 %44 
					                                       f32_4 %216 = OpLoad %215 
					                                       f32_2 %217 = OpVectorShuffle %216 %216 0 0 
					                                       f32_2 %218 = OpFMul %214 %217 
					                                       f32_4 %219 = OpLoad %64 
					                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
					                                       f32_2 %221 = OpFAdd %218 %220 
					                                       f32_4 %222 = OpLoad %64 
					                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 2 3 
					                                                      OpStore %64 %223 
					                                       f32_4 %224 = OpLoad %64 
					                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
					                                Uniform f32* %227 = OpAccessChain %26 %226 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %230 = OpAccessChain %26 %229 
					                                         f32 %231 = OpLoad %230 
					                                       f32_2 %232 = OpCompositeConstruct %228 %231 
					                                       f32_2 %233 = OpFMul %225 %232 
					                                       f32_4 %234 = OpLoad %64 
					                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
					                                                      OpStore %64 %235 
					                                         f32 %236 = OpLoad %106 
					                                       f32_2 %237 = OpCompositeConstruct %236 %236 
					                                       f32_4 %238 = OpLoad %64 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_2 %240 = OpFDiv %237 %239 
					                                       f32_4 %241 = OpLoad %64 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 2 3 
					                                                      OpStore %64 %242 
					                                       f32_4 %243 = OpLoad %64 
					                                       f32_2 %244 = OpVectorShuffle %243 %243 0 1 
					                                       f32_4 %245 = OpLoad %64 
					                                       f32_2 %246 = OpVectorShuffle %245 %245 0 1 
					                                         f32 %247 = OpDot %244 %246 
					                                                      OpStore %106 %247 
					                                         f32 %248 = OpLoad %106 
					                                         f32 %249 = OpExtInst %1 32 %248 
					                                                      OpStore %106 %249 
					                                  Input f32* %250 = OpAccessChain %107 %91 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpExtInst %1 4 %251 
					                                Uniform f32* %254 = OpAccessChain %26 %253 
					                                         f32 %255 = OpLoad %254 
					                                         f32 %256 = OpFMul %252 %255 
					                                Private f32* %257 = OpAccessChain %64 %108 
					                                                      OpStore %257 %256 
					                                         f32 %258 = OpLoad %106 
					                                Private f32* %259 = OpAccessChain %64 %108 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %258 %260 
					                                                      OpStore %106 %261 
					                                         f32 %262 = OpLoad %106 
					                                         f32 %264 = OpFMul %262 %263 
					                                Private f32* %265 = OpAccessChain %64 %108 
					                                                      OpStore %265 %264 
					                                Uniform f32* %268 = OpAccessChain %26 %267 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpFNegate %269 
					                                         f32 %272 = OpFAdd %270 %271 
					                                Private f32* %273 = OpAccessChain %266 %108 
					                                                      OpStore %273 %272 
					                                Private f32* %274 = OpAccessChain %266 %108 
					                                         f32 %275 = OpLoad %274 
					                                Private f32* %276 = OpAccessChain %64 %108 
					                                         f32 %277 = OpLoad %276 
					                                         f32 %278 = OpFMul %275 %277 
					                                Private f32* %279 = OpAccessChain %64 %108 
					                                                      OpStore %279 %278 
					                                         f32 %280 = OpLoad %106 
					                                         f32 %281 = OpFMul %280 %263 
					                                Private f32* %282 = OpAccessChain %64 %108 
					                                         f32 %283 = OpLoad %282 
					                                         f32 %284 = OpFNegate %283 
					                                         f32 %285 = OpFAdd %281 %284 
					                                                      OpStore %106 %285 
					                              Uniform f32_3* %287 = OpAccessChain %26 %49 
					                                       f32_3 %288 = OpLoad %287 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
					                              Uniform f32_4* %290 = OpAccessChain %26 %66 %44 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %289 %292 
					                                                      OpStore %266 %293 
					                              Uniform f32_4* %294 = OpAccessChain %26 %66 %49 
					                                       f32_4 %295 = OpLoad %294 
					                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
					                              Uniform f32_3* %297 = OpAccessChain %26 %49 
					                                       f32_3 %298 = OpLoad %297 
					                                       f32_3 %299 = OpVectorShuffle %298 %298 0 0 0 
					                                       f32_3 %300 = OpFMul %296 %299 
					                                       f32_3 %301 = OpLoad %266 
					                                       f32_3 %302 = OpFAdd %300 %301 
					                                                      OpStore %266 %302 
					                              Uniform f32_4* %303 = OpAccessChain %26 %66 %43 
					                                       f32_4 %304 = OpLoad %303 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
					                              Uniform f32_3* %306 = OpAccessChain %26 %49 
					                                       f32_3 %307 = OpLoad %306 
					                                       f32_3 %308 = OpVectorShuffle %307 %307 2 2 2 
					                                       f32_3 %309 = OpFMul %305 %308 
					                                       f32_3 %310 = OpLoad %266 
					                                       f32_3 %311 = OpFAdd %309 %310 
					                                                      OpStore %266 %311 
					                                       f32_3 %312 = OpLoad %266 
					                              Uniform f32_4* %313 = OpAccessChain %26 %66 %66 
					                                       f32_4 %314 = OpLoad %313 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
					                                       f32_3 %316 = OpFAdd %312 %315 
					                                                      OpStore %266 %316 
					                                  Input f32* %317 = OpAccessChain %12 %189 
					                                         f32 %318 = OpLoad %317 
					                                Private f32* %319 = OpAccessChain %9 %189 
					                                                      OpStore %319 %318 
					                                       f32_3 %320 = OpLoad %9 
					                                       f32_3 %321 = OpFNegate %320 
					                                       f32_3 %322 = OpLoad %266 
					                                       f32_3 %323 = OpFAdd %321 %322 
					                                                      OpStore %9 %323 
					                                       f32_3 %326 = OpLoad %325 
					                                       f32_3 %327 = OpLoad %9 
					                                         f32 %328 = OpDot %326 %327 
					                                Private f32* %329 = OpAccessChain %9 %108 
					                                                      OpStore %329 %328 
					                                Private f32* %333 = OpAccessChain %9 %108 
					                                         f32 %334 = OpLoad %333 
					                                        bool %336 = OpFOrdLessThan %332 %334 
					                                         u32 %338 = OpSelect %336 %337 %108 
					                                         i32 %339 = OpBitcast %338 
					                                                      OpStore %331 %339 
					                                Private f32* %341 = OpAccessChain %9 %108 
					                                         f32 %342 = OpLoad %341 
					                                        bool %343 = OpFOrdLessThan %342 %332 
					                                         u32 %344 = OpSelect %343 %337 %108 
					                                         i32 %345 = OpBitcast %344 
					                                                      OpStore %340 %345 
					                                         i32 %346 = OpLoad %331 
					                                         i32 %347 = OpSNegate %346 
					                                         i32 %348 = OpLoad %340 
					                                         i32 %349 = OpIAdd %347 %348 
					                                                      OpStore %340 %349 
					                                         i32 %350 = OpLoad %340 
					                                         f32 %351 = OpConvertSToF %350 
					                                Private f32* %352 = OpAccessChain %9 %108 
					                                                      OpStore %352 %351 
					                                       f32_3 %353 = OpLoad %9 
					                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
					                                       f32_3 %355 = OpLoad %325 
					                                       f32_3 %356 = OpFMul %354 %355 
					                                                      OpStore %9 %356 
					                                       f32_3 %357 = OpLoad %9 
					                              Uniform f32_4* %358 = OpAccessChain %26 %66 %49 
					                                       f32_4 %359 = OpLoad %358 
					                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
					                                         f32 %361 = OpDot %357 %360 
					                                Private f32* %362 = OpAccessChain %70 %91 
					                                                      OpStore %362 %361 
					                                       f32_3 %363 = OpLoad %9 
					                              Uniform f32_4* %364 = OpAccessChain %26 %66 %44 
					                                       f32_4 %365 = OpLoad %364 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
					                                         f32 %367 = OpDot %363 %366 
					                                Private f32* %368 = OpAccessChain %70 %189 
					                                                      OpStore %368 %367 
					                                       f32_3 %369 = OpLoad %9 
					                              Uniform f32_4* %370 = OpAccessChain %26 %66 %43 
					                                       f32_4 %371 = OpLoad %370 
					                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
					                                         f32 %373 = OpDot %369 %372 
					                                Private f32* %374 = OpAccessChain %70 %108 
					                                                      OpStore %374 %373 
					                                       f32_4 %375 = OpLoad %70 
					                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
					                                       f32_4 %377 = OpLoad %70 
					                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
					                                         f32 %379 = OpDot %376 %378 
					                                Private f32* %380 = OpAccessChain %9 %108 
					                                                      OpStore %380 %379 
					                                Private f32* %381 = OpAccessChain %9 %108 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpExtInst %1 32 %382 
					                                Private f32* %384 = OpAccessChain %9 %108 
					                                                      OpStore %384 %383 
					                                       f32_3 %385 = OpLoad %9 
					                                       f32_3 %386 = OpVectorShuffle %385 %385 0 0 0 
					                                       f32_4 %387 = OpLoad %70 
					                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
					                                       f32_3 %389 = OpFMul %386 %388 
					                                                      OpStore %9 %389 
					                              Uniform f32_4* %390 = OpAccessChain %26 %43 %66 
					                                       f32_4 %391 = OpLoad %390 
					                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
					                                       f32_4 %393 = OpLoad %12 
					                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
					                                       f32_3 %395 = OpFMul %392 %394 
					                                       f32_4 %396 = OpLoad %40 
					                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
					                                       f32_3 %398 = OpFAdd %395 %397 
					                                                      OpStore %266 %398 
					                              Uniform f32_4* %399 = OpAccessChain %26 %43 %66 
					                                       f32_4 %400 = OpLoad %399 
					                                       f32_4 %401 = OpLoad %12 
					                                       f32_4 %402 = OpVectorShuffle %401 %401 3 3 3 3 
					                                       f32_4 %403 = OpFMul %400 %402 
					                                       f32_4 %404 = OpLoad %40 
					                                       f32_4 %405 = OpFAdd %403 %404 
					                                                      OpStore %40 %405 
					                                       f32_3 %406 = OpLoad %266 
					                                       f32_3 %407 = OpFNegate %406 
					                              Uniform f32_3* %408 = OpAccessChain %26 %49 
					                                       f32_3 %409 = OpLoad %408 
					                                       f32_3 %410 = OpFAdd %407 %409 
					                                       f32_4 %411 = OpLoad %70 
					                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
					                                                      OpStore %70 %412 
					                                       f32_3 %415 = OpLoad %266 
					                                                      OpStore vs_TEXCOORD5 %415 
					                                       f32_4 %416 = OpLoad %70 
					                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
					                                       f32_4 %418 = OpLoad %70 
					                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
					                                         f32 %420 = OpDot %417 %419 
					                                Private f32* %421 = OpAccessChain %266 %108 
					                                                      OpStore %421 %420 
					                                Private f32* %422 = OpAccessChain %266 %108 
					                                         f32 %423 = OpLoad %422 
					                                         f32 %424 = OpExtInst %1 32 %423 
					                                Private f32* %425 = OpAccessChain %266 %108 
					                                                      OpStore %425 %424 
					                                       f32_3 %426 = OpLoad %266 
					                                       f32_3 %427 = OpVectorShuffle %426 %426 0 0 0 
					                                       f32_4 %428 = OpLoad %70 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFMul %427 %429 
					                                                      OpStore %266 %430 
					                                       f32_3 %431 = OpLoad %9 
					                                       f32_3 %432 = OpVectorShuffle %431 %431 1 2 0 
					                                       f32_3 %433 = OpLoad %266 
					                                         f32 %434 = OpDot %432 %433 
					                                Private f32* %435 = OpAccessChain %266 %108 
					                                                      OpStore %435 %434 
					                                Private f32* %437 = OpAccessChain %266 %108 
					                                         f32 %438 = OpLoad %437 
					                                         f32 %439 = OpExtInst %1 4 %438 
					                                         f32 %440 = OpLoad %106 
					                                         f32 %441 = OpFMul %439 %440 
					                                Private f32* %442 = OpAccessChain %64 %108 
					                                         f32 %443 = OpLoad %442 
					                                         f32 %444 = OpFAdd %441 %443 
					                                 Output f32* %446 = OpAccessChain vs_TEXCOORD6 %91 
					                                                      OpStore %446 %444 
					                                  Input f32* %449 = OpAccessChain %107 %91 
					                                         f32 %450 = OpLoad %449 
					                                        bool %451 = OpFOrdGreaterThanEqual %332 %450 
					                                                      OpStore %448 %451 
					                                        bool %452 = OpLoad %448 
					                                         f32 %453 = OpSelect %452 %271 %332 
					                                                      OpStore %106 %453 
					                                Uniform f32* %455 = OpAccessChain %26 %454 
					                                         f32 %456 = OpLoad %455 
					                                         f32 %457 = OpFNegate %456 
					                                Uniform f32* %459 = OpAccessChain %26 %458 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpFAdd %457 %460 
					                                Private f32* %462 = OpAccessChain %64 %108 
					                                                      OpStore %462 %461 
					                                         f32 %463 = OpLoad %106 
					                                Private f32* %464 = OpAccessChain %64 %108 
					                                         f32 %465 = OpLoad %464 
					                                         f32 %466 = OpFMul %463 %465 
					                                Uniform f32* %467 = OpAccessChain %26 %454 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFAdd %466 %468 
					                                                      OpStore %106 %469 
					                                         f32 %470 = OpLoad %106 
					                                         f32 %472 = OpFMul %470 %471 
					                                Uniform f32* %474 = OpAccessChain %26 %473 
					                                         f32 %475 = OpLoad %474 
					                                         f32 %476 = OpFAdd %472 %475 
					                                                      OpStore %106 %476 
					                                         f32 %477 = OpLoad %106 
					                                Uniform f32* %479 = OpAccessChain %26 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFMul %477 %480 
					                                                      OpStore %106 %481 
					                                         f32 %482 = OpLoad %106 
					                                         f32 %484 = OpFMul %482 %483 
					                                 Output f32* %485 = OpAccessChain vs_TEXCOORD6 %108 
					                                                      OpStore %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %91 
					                                         f32 %488 = OpLoad %487 
					                                 Output f32* %489 = OpAccessChain vs_TEXCOORD2 %189 
					                                                      OpStore %489 %488 
					                                       f32_4 %491 = OpLoad %490 
					                                       f32_3 %492 = OpVectorShuffle %491 %491 1 1 1 
					                              Uniform f32_4* %493 = OpAccessChain %26 %43 %44 
					                                       f32_4 %494 = OpLoad %493 
					                                       f32_3 %495 = OpVectorShuffle %494 %494 1 2 0 
					                                       f32_3 %496 = OpFMul %492 %495 
					                                       f32_4 %497 = OpLoad %64 
					                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
					                                                      OpStore %64 %498 
					                              Uniform f32_4* %499 = OpAccessChain %26 %43 %49 
					                                       f32_4 %500 = OpLoad %499 
					                                       f32_3 %501 = OpVectorShuffle %500 %500 1 2 0 
					                                       f32_4 %502 = OpLoad %490 
					                                       f32_3 %503 = OpVectorShuffle %502 %502 0 0 0 
					                                       f32_3 %504 = OpFMul %501 %503 
					                                       f32_4 %505 = OpLoad %64 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
					                                       f32_3 %507 = OpFAdd %504 %506 
					                                       f32_4 %508 = OpLoad %64 
					                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
					                                                      OpStore %64 %509 
					                              Uniform f32_4* %510 = OpAccessChain %26 %43 %43 
					                                       f32_4 %511 = OpLoad %510 
					                                       f32_3 %512 = OpVectorShuffle %511 %511 1 2 0 
					                                       f32_4 %513 = OpLoad %490 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 2 2 2 
					                                       f32_3 %515 = OpFMul %512 %514 
					                                       f32_4 %516 = OpLoad %64 
					                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
					                                       f32_3 %518 = OpFAdd %515 %517 
					                                       f32_4 %519 = OpLoad %64 
					                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
					                                                      OpStore %64 %520 
					                                       f32_4 %521 = OpLoad %64 
					                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
					                                       f32_4 %523 = OpLoad %64 
					                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
					                                         f32 %525 = OpDot %522 %524 
					                                                      OpStore %106 %525 
					                                         f32 %526 = OpLoad %106 
					                                         f32 %527 = OpExtInst %1 32 %526 
					                                                      OpStore %106 %527 
					                                         f32 %528 = OpLoad %106 
					                                       f32_3 %529 = OpCompositeConstruct %528 %528 %528 
					                                       f32_4 %530 = OpLoad %64 
					                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
					                                       f32_3 %532 = OpFMul %529 %531 
					                                       f32_4 %533 = OpLoad %64 
					                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
					                                                      OpStore %64 %534 
					                                       f32_3 %536 = OpLoad %9 
					                                       f32_4 %537 = OpLoad %64 
					                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 2 
					                                       f32_3 %539 = OpFMul %536 %538 
					                                                      OpStore %535 %539 
					                                       f32_3 %540 = OpLoad %9 
					                                       f32_3 %541 = OpVectorShuffle %540 %540 2 0 1 
					                                       f32_4 %542 = OpLoad %64 
					                                       f32_3 %543 = OpVectorShuffle %542 %542 1 2 0 
					                                       f32_3 %544 = OpFMul %541 %543 
					                                       f32_3 %545 = OpLoad %535 
					                                       f32_3 %546 = OpFNegate %545 
					                                       f32_3 %547 = OpFAdd %544 %546 
					                                                      OpStore %535 %547 
					                                  Input f32* %549 = OpAccessChain %490 %176 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %26 %551 %176 
					                                         f32 %553 = OpLoad %552 
					                                         f32 %554 = OpFMul %550 %553 
					                                                      OpStore %548 %554 
					                                         f32 %555 = OpLoad %548 
					                                       f32_3 %556 = OpCompositeConstruct %555 %555 %555 
					                                       f32_3 %557 = OpLoad %535 
					                                       f32_3 %558 = OpFMul %556 %557 
					                                                      OpStore %535 %558 
					                                Private f32* %559 = OpAccessChain %535 %108 
					                                         f32 %560 = OpLoad %559 
					                                 Output f32* %561 = OpAccessChain vs_TEXCOORD2 %91 
					                                                      OpStore %561 %560 
					                                Private f32* %562 = OpAccessChain %64 %189 
					                                         f32 %563 = OpLoad %562 
					                                 Output f32* %564 = OpAccessChain vs_TEXCOORD2 %108 
					                                                      OpStore %564 %563 
					                                Private f32* %566 = OpAccessChain %9 %189 
					                                         f32 %567 = OpLoad %566 
					                                 Output f32* %568 = OpAccessChain vs_TEXCOORD3 %189 
					                                                      OpStore %568 %567 
					                                Private f32* %570 = OpAccessChain %9 %108 
					                                         f32 %571 = OpLoad %570 
					                                 Output f32* %572 = OpAccessChain vs_TEXCOORD4 %189 
					                                                      OpStore %572 %571 
					                                Private f32* %573 = OpAccessChain %64 %108 
					                                         f32 %574 = OpLoad %573 
					                                 Output f32* %575 = OpAccessChain vs_TEXCOORD3 %108 
					                                                      OpStore %575 %574 
					                                Private f32* %576 = OpAccessChain %64 %91 
					                                         f32 %577 = OpLoad %576 
					                                 Output f32* %578 = OpAccessChain vs_TEXCOORD4 %108 
					                                                      OpStore %578 %577 
					                                Private f32* %579 = OpAccessChain %535 %91 
					                                         f32 %580 = OpLoad %579 
					                                 Output f32* %581 = OpAccessChain vs_TEXCOORD3 %91 
					                                                      OpStore %581 %580 
					                                Private f32* %582 = OpAccessChain %535 %189 
					                                         f32 %583 = OpLoad %582 
					                                 Output f32* %584 = OpAccessChain vs_TEXCOORD4 %91 
					                                                      OpStore %584 %583 
					                                       f32_4 %587 = OpLoad %586 
					                                                      OpStore %585 %587 
					                                       f32_4 %588 = OpLoad %70 
					                                       f32_3 %589 = OpVectorShuffle %588 %588 1 1 1 
					                              Uniform f32_4* %591 = OpAccessChain %26 %590 %44 
					                                       f32_4 %592 = OpLoad %591 
					                                       f32_3 %593 = OpVectorShuffle %592 %592 0 1 2 
					                                       f32_3 %594 = OpFMul %589 %593 
					                                                      OpStore %9 %594 
					                              Uniform f32_4* %595 = OpAccessChain %26 %590 %49 
					                                       f32_4 %596 = OpLoad %595 
					                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
					                                       f32_4 %598 = OpLoad %70 
					                                       f32_3 %599 = OpVectorShuffle %598 %598 0 0 0 
					                                       f32_3 %600 = OpFMul %597 %599 
					                                       f32_3 %601 = OpLoad %9 
					                                       f32_3 %602 = OpFAdd %600 %601 
					                                                      OpStore %9 %602 
					                              Uniform f32_4* %604 = OpAccessChain %26 %590 %43 
					                                       f32_4 %605 = OpLoad %604 
					                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 2 
					                                       f32_4 %607 = OpLoad %70 
					                                       f32_3 %608 = OpVectorShuffle %607 %607 2 2 2 
					                                       f32_3 %609 = OpFMul %606 %608 
					                                       f32_3 %610 = OpLoad %9 
					                                       f32_3 %611 = OpFAdd %609 %610 
					                                                      OpStore vs_TEXCOORD7 %611 
					                                       f32_4 %612 = OpLoad %40 
					                                       f32_3 %613 = OpVectorShuffle %612 %612 1 1 1 
					                              Uniform f32_4* %615 = OpAccessChain %26 %614 %44 
					                                       f32_4 %616 = OpLoad %615 
					                                       f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
					                                       f32_3 %618 = OpFMul %613 %617 
					                                                      OpStore %9 %618 
					                              Uniform f32_4* %619 = OpAccessChain %26 %614 %49 
					                                       f32_4 %620 = OpLoad %619 
					                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
					                                       f32_4 %622 = OpLoad %40 
					                                       f32_3 %623 = OpVectorShuffle %622 %622 0 0 0 
					                                       f32_3 %624 = OpFMul %621 %623 
					                                       f32_3 %625 = OpLoad %9 
					                                       f32_3 %626 = OpFAdd %624 %625 
					                                                      OpStore %9 %626 
					                              Uniform f32_4* %627 = OpAccessChain %26 %614 %43 
					                                       f32_4 %628 = OpLoad %627 
					                                       f32_3 %629 = OpVectorShuffle %628 %628 0 1 2 
					                                       f32_4 %630 = OpLoad %40 
					                                       f32_3 %631 = OpVectorShuffle %630 %630 2 2 2 
					                                       f32_3 %632 = OpFMul %629 %631 
					                                       f32_3 %633 = OpLoad %9 
					                                       f32_3 %634 = OpFAdd %632 %633 
					                                                      OpStore %9 %634 
					                              Uniform f32_4* %636 = OpAccessChain %26 %614 %66 
					                                       f32_4 %637 = OpLoad %636 
					                                       f32_3 %638 = OpVectorShuffle %637 %637 0 1 2 
					                                       f32_4 %639 = OpLoad %40 
					                                       f32_3 %640 = OpVectorShuffle %639 %639 3 3 3 
					                                       f32_3 %641 = OpFMul %638 %640 
					                                       f32_3 %642 = OpLoad %9 
					                                       f32_3 %643 = OpFAdd %641 %642 
					                                                      OpStore vs_TEXCOORD8 %643 
					                                 Output f32* %644 = OpAccessChain %95 %49 %91 
					                                         f32 %645 = OpLoad %644 
					                                         f32 %646 = OpFNegate %645 
					                                 Output f32* %647 = OpAccessChain %95 %49 %91 
					                                                      OpStore %647 %646 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 939
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %53 %401 %421 %678 %685 %692 %715 %916 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate vs_TEXCOORD6 Location 12 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpMemberDecorate %21 0 Offset 21 
					                                                      OpMemberDecorate %21 1 Offset 21 
					                                                      OpMemberDecorate %21 2 Offset 21 
					                                                      OpMemberDecorate %21 3 RelaxedPrecision 
					                                                      OpMemberDecorate %21 3 Offset 21 
					                                                      OpMemberDecorate %21 4 RelaxedPrecision 
					                                                      OpMemberDecorate %21 4 Offset 21 
					                                                      OpMemberDecorate %21 5 Offset 21 
					                                                      OpMemberDecorate %21 6 Offset 21 
					                                                      OpMemberDecorate %21 7 Offset 21 
					                                                      OpMemberDecorate %21 8 RelaxedPrecision 
					                                                      OpMemberDecorate %21 8 Offset 21 
					                                                      OpMemberDecorate %21 9 Offset 21 
					                                                      OpMemberDecorate %21 10 Offset 21 
					                                                      OpMemberDecorate %21 11 Offset 21 
					                                                      OpMemberDecorate %21 12 RelaxedPrecision 
					                                                      OpMemberDecorate %21 12 Offset 21 
					                                                      OpMemberDecorate %21 13 Offset 21 
					                                                      OpMemberDecorate %21 14 Offset 21 
					                                                      OpMemberDecorate %21 15 Offset 21 
					                                                      OpMemberDecorate %21 16 Offset 21 
					                                                      OpMemberDecorate %21 17 Offset 21 
					                                                      OpMemberDecorate %21 18 Offset 21 
					                                                      OpMemberDecorate %21 19 Offset 21 
					                                                      OpMemberDecorate %21 20 Offset 21 
					                                                      OpMemberDecorate %21 21 Offset 21 
					                                                      OpMemberDecorate %21 22 Offset 21 
					                                                      OpMemberDecorate %21 23 Offset 21 
					                                                      OpMemberDecorate %21 24 Offset 21 
					                                                      OpMemberDecorate %21 25 Offset 21 
					                                                      OpMemberDecorate %21 26 RelaxedPrecision 
					                                                      OpMemberDecorate %21 26 Offset 21 
					                                                      OpMemberDecorate %21 27 RelaxedPrecision 
					                                                      OpMemberDecorate %21 27 Offset 21 
					                                                      OpDecorate %21 Block 
					                                                      OpDecorate %23 DescriptorSet 23 
					                                                      OpDecorate %23 Binding 23 
					                                                      OpDecorate vs_TEXCOORD0 Location 53 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %65 DescriptorSet 65 
					                                                      OpDecorate %65 Binding 65 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %69 DescriptorSet 69 
					                                                      OpDecorate %69 Binding 69 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %326 RelaxedPrecision 
					                                                      OpDecorate %327 RelaxedPrecision 
					                                                      OpDecorate %328 RelaxedPrecision 
					                                                      OpDecorate %333 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %335 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %338 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 401 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %405 DescriptorSet 405 
					                                                      OpDecorate %405 Binding 405 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %407 DescriptorSet 407 
					                                                      OpDecorate %407 Binding 407 
					                                                      OpDecorate %408 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %413 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %417 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %421 Location 421 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %426 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %450 RelaxedPrecision 
					                                                      OpDecorate %451 RelaxedPrecision 
					                                                      OpDecorate %451 DescriptorSet 451 
					                                                      OpDecorate %451 Binding 451 
					                                                      OpDecorate %452 RelaxedPrecision 
					                                                      OpDecorate %453 RelaxedPrecision 
					                                                      OpDecorate %453 DescriptorSet 453 
					                                                      OpDecorate %453 Binding 453 
					                                                      OpDecorate %454 RelaxedPrecision 
					                                                      OpDecorate %459 RelaxedPrecision 
					                                                      OpDecorate %460 RelaxedPrecision 
					                                                      OpDecorate %463 RelaxedPrecision 
					                                                      OpDecorate %464 RelaxedPrecision 
					                                                      OpDecorate %465 RelaxedPrecision 
					                                                      OpDecorate %466 RelaxedPrecision 
					                                                      OpDecorate %467 RelaxedPrecision 
					                                                      OpDecorate %468 RelaxedPrecision 
					                                                      OpDecorate %469 RelaxedPrecision 
					                                                      OpDecorate %470 RelaxedPrecision 
					                                                      OpDecorate %471 RelaxedPrecision 
					                                                      OpDecorate %472 RelaxedPrecision 
					                                                      OpDecorate %473 RelaxedPrecision 
					                                                      OpDecorate %474 RelaxedPrecision 
					                                                      OpDecorate %475 RelaxedPrecision 
					                                                      OpDecorate %476 RelaxedPrecision 
					                                                      OpDecorate %477 RelaxedPrecision 
					                                                      OpDecorate %478 RelaxedPrecision 
					                                                      OpDecorate %479 RelaxedPrecision 
					                                                      OpDecorate %480 RelaxedPrecision 
					                                                      OpDecorate %481 RelaxedPrecision 
					                                                      OpDecorate %485 RelaxedPrecision 
					                                                      OpDecorate %487 RelaxedPrecision 
					                                                      OpDecorate %488 RelaxedPrecision 
					                                                      OpDecorate %490 RelaxedPrecision 
					                                                      OpDecorate %491 RelaxedPrecision 
					                                                      OpDecorate %492 RelaxedPrecision 
					                                                      OpDecorate %494 RelaxedPrecision 
					                                                      OpDecorate %495 RelaxedPrecision 
					                                                      OpDecorate %496 RelaxedPrecision 
					                                                      OpDecorate %497 RelaxedPrecision 
					                                                      OpDecorate %498 RelaxedPrecision 
					                                                      OpDecorate %500 RelaxedPrecision 
					                                                      OpDecorate %502 RelaxedPrecision 
					                                                      OpDecorate %503 RelaxedPrecision 
					                                                      OpDecorate %505 RelaxedPrecision 
					                                                      OpDecorate %506 RelaxedPrecision 
					                                                      OpDecorate %508 RelaxedPrecision 
					                                                      OpDecorate %509 RelaxedPrecision 
					                                                      OpDecorate %510 RelaxedPrecision 
					                                                      OpDecorate %511 RelaxedPrecision 
					                                                      OpDecorate %512 RelaxedPrecision 
					                                                      OpDecorate %513 RelaxedPrecision 
					                                                      OpDecorate %514 RelaxedPrecision 
					                                                      OpDecorate %515 RelaxedPrecision 
					                                                      OpDecorate %556 RelaxedPrecision 
					                                                      OpDecorate %560 RelaxedPrecision 
					                                                      OpDecorate %562 RelaxedPrecision 
					                                                      OpDecorate %563 RelaxedPrecision 
					                                                      OpDecorate %566 RelaxedPrecision 
					                                                      OpDecorate %567 RelaxedPrecision 
					                                                      OpDecorate %570 RelaxedPrecision 
					                                                      OpDecorate %571 RelaxedPrecision 
					                                                      OpDecorate %572 RelaxedPrecision 
					                                                      OpDecorate %574 RelaxedPrecision 
					                                                      OpDecorate %575 RelaxedPrecision 
					                                                      OpDecorate %576 RelaxedPrecision 
					                                                      OpDecorate %577 RelaxedPrecision 
					                                                      OpDecorate %578 RelaxedPrecision 
					                                                      OpDecorate %597 RelaxedPrecision 
					                                                      OpDecorate %598 RelaxedPrecision 
					                                                      OpDecorate %598 DescriptorSet 598 
					                                                      OpDecorate %598 Binding 598 
					                                                      OpDecorate %599 RelaxedPrecision 
					                                                      OpDecorate %600 RelaxedPrecision 
					                                                      OpDecorate %600 DescriptorSet 600 
					                                                      OpDecorate %600 Binding 600 
					                                                      OpDecorate %601 RelaxedPrecision 
					                                                      OpDecorate %606 RelaxedPrecision 
					                                                      OpDecorate %607 RelaxedPrecision 
					                                                      OpDecorate %608 RelaxedPrecision 
					                                                      OpDecorate %609 RelaxedPrecision 
					                                                      OpDecorate %610 RelaxedPrecision 
					                                                      OpDecorate %611 RelaxedPrecision 
					                                                      OpDecorate %614 RelaxedPrecision 
					                                                      OpDecorate %616 RelaxedPrecision 
					                                                      OpDecorate %617 RelaxedPrecision 
					                                                      OpDecorate %619 RelaxedPrecision 
					                                                      OpDecorate %620 RelaxedPrecision 
					                                                      OpDecorate %622 RelaxedPrecision 
					                                                      OpDecorate %625 RelaxedPrecision 
					                                                      OpDecorate %626 RelaxedPrecision 
					                                                      OpDecorate %627 RelaxedPrecision 
					                                                      OpDecorate %628 RelaxedPrecision 
					                                                      OpDecorate %629 RelaxedPrecision 
					                                                      OpDecorate %630 RelaxedPrecision 
					                                                      OpDecorate %631 RelaxedPrecision 
					                                                      OpDecorate %632 RelaxedPrecision 
					                                                      OpDecorate %633 RelaxedPrecision 
					                                                      OpDecorate %634 RelaxedPrecision 
					                                                      OpDecorate %635 RelaxedPrecision 
					                                                      OpDecorate %636 RelaxedPrecision 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %639 RelaxedPrecision 
					                                                      OpDecorate %640 RelaxedPrecision 
					                                                      OpDecorate %647 RelaxedPrecision 
					                                                      OpDecorate %648 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 678 
					                                                      OpDecorate vs_TEXCOORD3 Location 685 
					                                                      OpDecorate vs_TEXCOORD4 Location 692 
					                                                      OpDecorate %699 RelaxedPrecision 
					                                                      OpDecorate %700 RelaxedPrecision 
					                                                      OpDecorate %701 RelaxedPrecision 
					                                                      OpDecorate %702 RelaxedPrecision 
					                                                      OpDecorate %703 RelaxedPrecision 
					                                                      OpDecorate %704 RelaxedPrecision 
					                                                      OpDecorate %707 RelaxedPrecision 
					                                                      OpDecorate %708 RelaxedPrecision 
					                                                      OpDecorate %710 RelaxedPrecision 
					                                                      OpDecorate %711 RelaxedPrecision 
					                                                      OpDecorate %712 RelaxedPrecision 
					                                                      OpDecorate %713 RelaxedPrecision 
					                                                      OpDecorate %714 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD5 Location 715 
					                                                      OpDecorate %754 RelaxedPrecision 
					                                                      OpDecorate %758 RelaxedPrecision 
					                                                      OpDecorate %759 RelaxedPrecision 
					                                                      OpDecorate %760 RelaxedPrecision 
					                                                      OpDecorate %761 RelaxedPrecision 
					                                                      OpDecorate %762 RelaxedPrecision 
					                                                      OpDecorate %765 RelaxedPrecision 
					                                                      OpDecorate %766 RelaxedPrecision 
					                                                      OpDecorate %768 RelaxedPrecision 
					                                                      OpDecorate %769 RelaxedPrecision 
					                                                      OpDecorate %770 RelaxedPrecision 
					                                                      OpDecorate %771 RelaxedPrecision 
					                                                      OpDecorate %772 RelaxedPrecision 
					                                                      OpDecorate %775 RelaxedPrecision 
					                                                      OpDecorate %776 RelaxedPrecision 
					                                                      OpDecorate %777 RelaxedPrecision 
					                                                      OpDecorate %778 RelaxedPrecision 
					                                                      OpDecorate %780 RelaxedPrecision 
					                                                      OpDecorate %781 RelaxedPrecision 
					                                                      OpDecorate %783 RelaxedPrecision 
					                                                      OpDecorate %787 RelaxedPrecision 
					                                                      OpDecorate %788 RelaxedPrecision 
					                                                      OpDecorate %790 RelaxedPrecision 
					                                                      OpDecorate %793 RelaxedPrecision 
					                                                      OpDecorate %794 RelaxedPrecision 
					                                                      OpDecorate %797 RelaxedPrecision 
					                                                      OpDecorate %798 RelaxedPrecision 
					                                                      OpDecorate %801 RelaxedPrecision 
					                                                      OpDecorate %804 RelaxedPrecision 
					                                                      OpDecorate %813 RelaxedPrecision 
					                                                      OpDecorate %815 RelaxedPrecision 
					                                                      OpDecorate %816 RelaxedPrecision 
					                                                      OpDecorate %819 RelaxedPrecision 
					                                                      OpDecorate %820 RelaxedPrecision 
					                                                      OpDecorate %857 DescriptorSet 857 
					                                                      OpDecorate %857 Binding 857 
					                                                      OpDecorate %859 DescriptorSet 859 
					                                                      OpDecorate %859 Binding 859 
					                                                      OpDecorate %868 DescriptorSet 868 
					                                                      OpDecorate %868 Binding 868 
					                                                      OpDecorate %870 DescriptorSet 870 
					                                                      OpDecorate %870 Binding 870 
					                                                      OpDecorate %885 RelaxedPrecision 
					                                                      OpDecorate %886 RelaxedPrecision 
					                                                      OpDecorate %890 RelaxedPrecision 
					                                                      OpDecorate %891 RelaxedPrecision 
					                                                      OpDecorate %894 RelaxedPrecision 
					                                                      OpDecorate %895 RelaxedPrecision 
					                                                      OpDecorate %896 RelaxedPrecision 
					                                                      OpDecorate %899 RelaxedPrecision 
					                                                      OpDecorate %900 RelaxedPrecision 
					                                                      OpDecorate %901 RelaxedPrecision 
					                                                      OpDecorate %902 RelaxedPrecision 
					                                                      OpDecorate %903 RelaxedPrecision 
					                                                      OpDecorate %905 RelaxedPrecision 
					                                                      OpDecorate %907 RelaxedPrecision 
					                                                      OpDecorate %908 RelaxedPrecision 
					                                                      OpDecorate %909 RelaxedPrecision 
					                                                      OpDecorate %910 RelaxedPrecision 
					                                                      OpDecorate %911 RelaxedPrecision 
					                                                      OpDecorate %912 RelaxedPrecision 
					                                                      OpDecorate %916 RelaxedPrecision 
					                                                      OpDecorate %916 Location 916 
					                                                      OpDecorate %918 RelaxedPrecision 
					                                                      OpDecorate %921 RelaxedPrecision 
					                                                      OpDecorate %922 RelaxedPrecision 
					                                                      OpDecorate %923 RelaxedPrecision 
					                                                      OpDecorate %924 RelaxedPrecision 
					                                                      OpDecorate %925 RelaxedPrecision 
					                                                      OpDecorate %928 RelaxedPrecision 
					                                                      OpDecorate %929 RelaxedPrecision 
					                                                      OpDecorate %930 RelaxedPrecision 
					                                                      OpDecorate %931 RelaxedPrecision 
					                                                      OpDecorate %932 RelaxedPrecision 
					                                                      OpDecorate %933 RelaxedPrecision 
					                                                      OpDecorate %934 RelaxedPrecision 
					                                                      OpDecorate %935 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 2 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_2* vs_TEXCOORD6 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 0 
					                                              %15 = OpTypePointer Input %6 
					                                              %18 = OpTypeVector %6 3 
					                                          u32 %19 = OpConstant 4 
					                                              %20 = OpTypeArray %7 %19 
					                                              %21 = OpTypeStruct %7 %18 %7 %7 %7 %20 %6 %6 %7 %6 %6 %6 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %22 = OpTypePointer Uniform %21 
					Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %23 = OpVariable Uniform 
					                                              %24 = OpTypeInt 32 1 
					                                          i32 %25 = OpConstant 15 
					                                              %26 = OpTypePointer Uniform %6 
					                                              %30 = OpTypePointer Private %6 
					                               Private f32_4* %32 = OpVariable Private 
					                                          f32 %33 = OpConstant 3,674022E-40 
					                                        f32_2 %34 = OpConstantComposite %33 %33 
					                                          i32 %35 = OpConstant 23 
					                                          i32 %38 = OpConstant 24 
					                                          f32 %45 = OpConstant 3,674022E-40 
					                                          u32 %46 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %52 = OpTypePointer Input %7 
					                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                               Private f32_4* %62 = OpVariable Private 
					                                              %63 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %64 = OpTypePointer UniformConstant %63 
					         UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
					                                              %67 = OpTypeSampler 
					                                              %68 = OpTypePointer UniformConstant %67 
					                     UniformConstant sampler* %69 = OpVariable UniformConstant 
					                                              %71 = OpTypeSampledImage %63 
					                                          u32 %76 = OpConstant 3 
					                                          u32 %94 = OpConstant 1 
					                                         f32 %109 = OpConstant 3,674022E-40 
					                                       f32_4 %110 = OpConstantComposite %109 %109 %109 %109 
					                                         i32 %112 = OpConstant 16 
					                                         i32 %115 = OpConstant 13 
					                                         f32 %122 = OpConstant 3,674022E-40 
					                                         i32 %131 = OpConstant 14 
					                                         i32 %138 = OpConstant 25 
					                                         f32 %145 = OpConstant 3,674022E-40 
					                                         f32 %149 = OpConstant 3,674022E-40 
					                                       f32_4 %150 = OpConstantComposite %149 %149 %149 %149 
					                                         f32 %157 = OpConstant 3,674022E-40 
					                                       f32_4 %158 = OpConstantComposite %157 %157 %157 %157 
					                                         f32 %160 = OpConstant 3,674022E-40 
					                                       f32_4 %161 = OpConstantComposite %160 %160 %160 %160 
					                                       f32_4 %166 = OpConstantComposite %33 %33 %33 %33 
					                                             %168 = OpTypePointer Private %10 
					                              Private f32_2* %169 = OpVariable Private 
					                                         i32 %170 = OpConstant 21 
					                                             %175 = OpTypeBool 
					                                             %176 = OpTypePointer Private %175 
					                               Private bool* %177 = OpVariable Private 
					                                             %190 = OpTypePointer Function %6 
					                               Private bool* %202 = OpVariable Private 
					                                             %209 = OpTypeVector %175 4 
					                                         f32 %213 = OpConstant 3,674022E-40 
					                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
					                                         i32 %222 = OpConstant 18 
					                                         i32 %241 = OpConstant 17 
					                                Private f32* %281 = OpVariable Private 
					                                       f32_2 %296 = OpConstantComposite %33 %45 
					                                Private f32* %326 = OpVariable Private 
					                                Private f32* %334 = OpVariable Private 
					                                         i32 %350 = OpConstant 22 
					                              Private f32_4* %361 = OpVariable Private 
					                                             %372 = OpTypePointer Private %18 
					                              Private f32_3* %373 = OpVariable Private 
					                                         i32 %388 = OpConstant 10 
					                                         i32 %391 = OpConstant 11 
					                                         i32 %395 = OpConstant 0 
					                                             %396 = OpTypePointer Uniform %7 
					                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                              Private f32_4* %404 = OpVariable Private 
					        UniformConstant read_only Texture2D* %405 = OpVariable UniformConstant 
					                    UniformConstant sampler* %407 = OpVariable UniformConstant 
					                              Private f32_3* %412 = OpVariable Private 
					                                         i32 %415 = OpConstant 12 
					                              Private f32_4* %420 = OpVariable Private 
					                                Input f32_4* %421 = OpVariable Input 
					                                Private f32* %428 = OpVariable Private 
					                                         i32 %434 = OpConstant 6 
					                                         i32 %437 = OpConstant 7 
					                              Private f32_4* %450 = OpVariable Private 
					        UniformConstant read_only Texture2D* %451 = OpVariable UniformConstant 
					                    UniformConstant sampler* %453 = OpVariable UniformConstant 
					                              Private f32_4* %459 = OpVariable Private 
					                                         i32 %461 = OpConstant 8 
					                              Private f32_4* %465 = OpVariable Private 
					                              Private f32_4* %474 = OpVariable Private 
					                              Private f32_4* %498 = OpVariable Private 
					                                         i32 %532 = OpConstant 9 
					                              Private f32_4* %574 = OpVariable Private 
					                              Private f32_3* %579 = OpVariable Private 
					                                         i32 %580 = OpConstant 20 
					                                         i32 %584 = OpConstant 19 
					                              Private f32_3* %597 = OpVariable Private 
					        UniformConstant read_only Texture2D* %598 = OpVariable UniformConstant 
					                    UniformConstant sampler* %600 = OpVariable UniformConstant 
					                                       f32_2 %621 = OpConstantComposite %160 %160 
					                                Private f32* %625 = OpVariable Private 
					                                         f32 %644 = OpConstant 3,674022E-40 
					                                       f32_3 %645 = OpConstantComposite %644 %644 %160 
					                                       f32_3 %651 = OpConstantComposite %45 %45 %33 
					                                             %677 = OpTypePointer Input %18 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                              Private f32_3* %699 = OpVariable Private 
					                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
					                                         i32 %718 = OpConstant 2 
					                                Private f32* %723 = OpVariable Private 
					                              Private f32_3* %733 = OpVariable Private 
					                                         i32 %736 = OpConstant 1 
					                                             %737 = OpTypePointer Uniform %18 
					                                       f32_2 %782 = OpConstantComposite %45 %45 
					                                Private f32* %790 = OpVariable Private 
					                                         i32 %791 = OpConstant 26 
					                                         i32 %795 = OpConstant 27 
					                              Private f32_3* %799 = OpVariable Private 
					                                         f32 %809 = OpConstant 3,674022E-40 
					                                         i32 %824 = OpConstant 5 
					                                         i32 %846 = OpConstant 3 
					                                             %855 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
					                                             %856 = OpTypePointer UniformConstant %855 
					      UniformConstant read_only TextureCube* %857 = OpVariable UniformConstant 
					                    UniformConstant sampler* %859 = OpVariable UniformConstant 
					                                             %861 = OpTypeSampledImage %855 
					                                Private f32* %867 = OpVariable Private 
					        UniformConstant read_only Texture2D* %868 = OpVariable UniformConstant 
					                    UniformConstant sampler* %870 = OpVariable UniformConstant 
					                                         i32 %892 = OpConstant 4 
					                                         f32 %906 = OpConstant 3,674022E-40 
					                                             %915 = OpTypePointer Output %7 
					                               Output f32_4* %916 = OpVariable Output 
					                                             %919 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %191 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD6 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Uniform f32* %27 = OpAccessChain %23 %25 
					                                          f32 %28 = OpLoad %27 
					                                          f32 %29 = OpFAdd %17 %28 
					                                 Private f32* %31 = OpAccessChain %9 %14 
					                                                      OpStore %31 %29 
					                                 Uniform f32* %36 = OpAccessChain %23 %35 
					                                          f32 %37 = OpLoad %36 
					                                 Uniform f32* %39 = OpAccessChain %23 %38 
					                                          f32 %40 = OpLoad %39 
					                                        f32_2 %41 = OpCompositeConstruct %37 %40 
					                                        f32_2 %42 = OpFDiv %34 %41 
					                                        f32_4 %43 = OpLoad %32 
					                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 2 3 
					                                                      OpStore %32 %44 
					                                 Private f32* %47 = OpAccessChain %32 %46 
					                                                      OpStore %47 %45 
					                                        f32_4 %49 = OpLoad %32 
					                                        f32_4 %50 = OpVectorShuffle %49 %49 0 2 2 1 
					                                        f32_4 %51 = OpFNegate %50 
					                                        f32_4 %54 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %55 = OpVectorShuffle %54 %54 0 1 0 1 
					                                        f32_4 %56 = OpFAdd %51 %55 
					                                                      OpStore %48 %56 
					                                        f32_4 %57 = OpLoad %32 
					                                        f32_4 %58 = OpVectorShuffle %57 %57 0 2 2 1 
					                                        f32_4 %59 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 1 0 1 
					                                        f32_4 %61 = OpFAdd %58 %60 
					                                                      OpStore %32 %61 
					                          read_only Texture2D %66 = OpLoad %65 
					                                      sampler %70 = OpLoad %69 
					                   read_only Texture2DSampled %72 = OpSampledImage %66 %70 
					                                        f32_4 %73 = OpLoad %48 
					                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                                        f32_4 %75 = OpImageSampleImplicitLod %72 %74 
					                                          f32 %77 = OpCompositeExtract %75 3 
					                                 Private f32* %78 = OpAccessChain %62 %14 
					                                                      OpStore %78 %77 
					                          read_only Texture2D %79 = OpLoad %65 
					                                      sampler %80 = OpLoad %69 
					                   read_only Texture2DSampled %81 = OpSampledImage %79 %80 
					                                        f32_4 %82 = OpLoad %48 
					                                        f32_2 %83 = OpVectorShuffle %82 %82 2 3 
					                                        f32_4 %84 = OpImageSampleImplicitLod %81 %83 
					                                          f32 %85 = OpCompositeExtract %84 3 
					                                 Private f32* %86 = OpAccessChain %62 %46 
					                                                      OpStore %86 %85 
					                          read_only Texture2D %87 = OpLoad %65 
					                                      sampler %88 = OpLoad %69 
					                   read_only Texture2DSampled %89 = OpSampledImage %87 %88 
					                                        f32_4 %90 = OpLoad %32 
					                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
					                                        f32_4 %92 = OpImageSampleImplicitLod %89 %91 
					                                          f32 %93 = OpCompositeExtract %92 3 
					                                 Private f32* %95 = OpAccessChain %62 %94 
					                                                      OpStore %95 %93 
					                          read_only Texture2D %96 = OpLoad %65 
					                                      sampler %97 = OpLoad %69 
					                   read_only Texture2DSampled %98 = OpSampledImage %96 %97 
					                                        f32_4 %99 = OpLoad %32 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 2 3 
					                                       f32_4 %101 = OpImageSampleImplicitLod %98 %100 
					                                         f32 %102 = OpCompositeExtract %101 3 
					                                Private f32* %103 = OpAccessChain %62 %76 
					                                                      OpStore %103 %102 
					                                       f32_4 %104 = OpLoad %9 
					                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
					                                       f32_4 %106 = OpLoad %62 
					                                       f32_4 %107 = OpFAdd %105 %106 
					                                                      OpStore %9 %107 
					                                       f32_4 %108 = OpLoad %9 
					                                       f32_4 %111 = OpFAdd %108 %110 
					                                                      OpStore %9 %111 
					                                Uniform f32* %113 = OpAccessChain %23 %112 
					                                         f32 %114 = OpLoad %113 
					                                Uniform f32* %116 = OpAccessChain %23 %115 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFAdd %114 %117 
					                                Private f32* %119 = OpAccessChain %32 %14 
					                                                      OpStore %119 %118 
					                                Private f32* %120 = OpAccessChain %32 %14 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %123 = OpExtInst %1 40 %121 %122 
					                                Private f32* %124 = OpAccessChain %32 %14 
					                                                      OpStore %124 %123 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_4 %126 = OpLoad %32 
					                                       f32_4 %127 = OpVectorShuffle %126 %126 0 0 0 0 
					                                       f32_4 %128 = OpFDiv %125 %127 
					                                                      OpStore %9 %128 
					                                Private f32* %129 = OpAccessChain %32 %14 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %23 %131 
					                                         f32 %133 = OpLoad %132 
					                                         f32 %134 = OpFMul %130 %133 
					                                Private f32* %135 = OpAccessChain %32 %14 
					                                                      OpStore %135 %134 
					                                Private f32* %136 = OpAccessChain %32 %14 
					                                         f32 %137 = OpLoad %136 
					                                Uniform f32* %139 = OpAccessChain %23 %138 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %137 %140 
					                                Private f32* %142 = OpAccessChain %32 %14 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %32 %14 
					                                         f32 %144 = OpLoad %143 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %32 %14 
					                                                      OpStore %147 %146 
					                                       f32_4 %148 = OpLoad %9 
					                                       f32_4 %151 = OpFAdd %148 %150 
					                                                      OpStore %9 %151 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_4 %153 = OpCompositeConstruct %45 %45 %45 %45 
					                                       f32_4 %154 = OpCompositeConstruct %33 %33 %33 %33 
					                                       f32_4 %155 = OpExtInst %1 43 %152 %153 %154 
					                                                      OpStore %9 %155 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_4 %159 = OpFMul %156 %158 
					                                       f32_4 %162 = OpFAdd %159 %161 
					                                                      OpStore %48 %162 
					                                       f32_4 %163 = OpLoad %48 
					                                       f32_4 %164 = OpExtInst %1 4 %163 
					                                       f32_4 %165 = OpFNegate %164 
					                                       f32_4 %167 = OpFAdd %165 %166 
					                                                      OpStore %48 %167 
					                                Uniform f32* %171 = OpAccessChain %23 %170 
					                                         f32 %172 = OpLoad %171 
					                                         f32 %173 = OpFMul %172 %149 
					                                Private f32* %174 = OpAccessChain %169 %14 
					                                                      OpStore %174 %173 
					                                Private f32* %178 = OpAccessChain %169 %14 
					                                         f32 %179 = OpLoad %178 
					                                Private f32* %180 = OpAccessChain %169 %14 
					                                         f32 %181 = OpLoad %180 
					                                         f32 %182 = OpFNegate %181 
					                                        bool %183 = OpFOrdGreaterThanEqual %179 %182 
					                                                      OpStore %177 %183 
					                                Private f32* %184 = OpAccessChain %169 %14 
					                                         f32 %185 = OpLoad %184 
					                                         f32 %186 = OpExtInst %1 4 %185 
					                                         f32 %187 = OpExtInst %1 10 %186 
					                                Private f32* %188 = OpAccessChain %169 %14 
					                                                      OpStore %188 %187 
					                                        bool %189 = OpLoad %177 
					                                                      OpSelectionMerge %193 None 
					                                                      OpBranchConditional %189 %192 %196 
					                                             %192 = OpLabel 
					                                Private f32* %194 = OpAccessChain %169 %14 
					                                         f32 %195 = OpLoad %194 
					                                                      OpStore %191 %195 
					                                                      OpBranch %193 
					                                             %196 = OpLabel 
					                                Private f32* %197 = OpAccessChain %169 %14 
					                                         f32 %198 = OpLoad %197 
					                                         f32 %199 = OpFNegate %198 
					                                                      OpStore %191 %199 
					                                                      OpBranch %193 
					                                             %193 = OpLabel 
					                                         f32 %200 = OpLoad %191 
					                                Private f32* %201 = OpAccessChain %169 %14 
					                                                      OpStore %201 %200 
					                                Private f32* %203 = OpAccessChain %169 %14 
					                                         f32 %204 = OpLoad %203 
					                                        bool %205 = OpFOrdGreaterThanEqual %204 %149 
					                                                      OpStore %202 %205 
					                                        bool %206 = OpLoad %202 
					                                       f32_4 %207 = OpLoad %48 
					                                       f32_4 %208 = OpLoad %9 
					                                      bool_4 %210 = OpCompositeConstruct %206 %206 %206 %206 
					                                       f32_4 %211 = OpSelect %210 %207 %208 
					                                                      OpStore %9 %211 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %215 = OpFMul %212 %214 
					                                                      OpStore %48 %215 
					                                       f32_4 %216 = OpLoad %48 
					                                       f32_4 %217 = OpExtInst %1 13 %216 
					                                                      OpStore %48 %217 
					                                       f32_4 %218 = OpLoad %9 
					                                       f32_4 %219 = OpFNegate %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpFAdd %219 %220 
					                                                      OpStore %48 %221 
					                                Uniform f32* %223 = OpAccessChain %23 %222 
					                                         f32 %224 = OpLoad %223 
					                                Uniform f32* %225 = OpAccessChain %23 %222 
					                                         f32 %226 = OpLoad %225 
					                                Uniform f32* %227 = OpAccessChain %23 %222 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %229 = OpAccessChain %23 %222 
					                                         f32 %230 = OpLoad %229 
					                                       f32_4 %231 = OpCompositeConstruct %224 %226 %228 %230 
					                                         f32 %232 = OpCompositeExtract %231 0 
					                                         f32 %233 = OpCompositeExtract %231 1 
					                                         f32 %234 = OpCompositeExtract %231 2 
					                                         f32 %235 = OpCompositeExtract %231 3 
					                                       f32_4 %236 = OpCompositeConstruct %232 %233 %234 %235 
					                                       f32_4 %237 = OpLoad %48 
					                                       f32_4 %238 = OpFMul %236 %237 
					                                       f32_4 %239 = OpLoad %9 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %9 %240 
					                                Uniform f32* %242 = OpAccessChain %23 %241 
					                                         f32 %243 = OpLoad %242 
					                                         f32 %244 = OpFNegate %243 
					                                         f32 %245 = OpFAdd %244 %33 
					                                Private f32* %246 = OpAccessChain %169 %14 
					                                                      OpStore %246 %245 
					                                       f32_4 %247 = OpLoad %9 
					                                       f32_2 %248 = OpLoad %169 
					                                       f32_4 %249 = OpVectorShuffle %248 %248 0 0 0 0 
					                                       f32_4 %250 = OpExtInst %1 37 %247 %249 
					                                                      OpStore %9 %250 
					                                       f32_4 %251 = OpLoad %32 
					                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
					                                       f32_4 %253 = OpLoad %9 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 2 
					                                       f32_2 %255 = OpFMul %252 %254 
					                                       f32_4 %256 = OpLoad %9 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 1 5 3 
					                                                      OpStore %9 %257 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 3 1 
					                                       f32_4 %260 = OpLoad %32 
					                                       f32_2 %261 = OpVectorShuffle %260 %260 0 0 
					                                       f32_2 %262 = OpFMul %259 %261 
					                                       f32_4 %263 = OpLoad %9 
					                                       f32_2 %264 = OpVectorShuffle %263 %263 2 0 
					                                       f32_2 %265 = OpFNegate %264 
					                                       f32_2 %266 = OpFAdd %262 %265 
					                                       f32_4 %267 = OpLoad %9 
					                                       f32_4 %268 = OpVectorShuffle %267 %266 0 4 5 3 
					                                                      OpStore %9 %268 
					                                Private f32* %269 = OpAccessChain %9 %14 
					                                                      OpStore %269 %160 
					                                Private f32* %270 = OpAccessChain %9 %76 
					                                                      OpStore %270 %33 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
					                                       f32_4 %273 = OpLoad %9 
					                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
					                                         f32 %275 = OpDot %272 %274 
					                                Private f32* %276 = OpAccessChain %32 %14 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %32 %14 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpExtInst %1 32 %278 
					                                Private f32* %280 = OpAccessChain %32 %14 
					                                                      OpStore %280 %279 
					                                       f32_4 %282 = OpLoad %9 
					                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
					                                       f32_4 %284 = OpLoad %9 
					                                       f32_2 %285 = OpVectorShuffle %284 %284 2 3 
					                                         f32 %286 = OpDot %283 %285 
					                                                      OpStore %281 %286 
					                                         f32 %287 = OpLoad %281 
					                                         f32 %288 = OpExtInst %1 32 %287 
					                                                      OpStore %281 %288 
					                                         f32 %289 = OpLoad %281 
					                                Private f32* %290 = OpAccessChain %9 %46 
					                                         f32 %291 = OpLoad %290 
					                                         f32 %292 = OpFMul %289 %291 
					                                Private f32* %293 = OpAccessChain %48 %14 
					                                                      OpStore %293 %292 
					                                         f32 %294 = OpLoad %281 
					                                       f32_2 %295 = OpCompositeConstruct %294 %294 
					                                       f32_2 %297 = OpFMul %295 %296 
					                                       f32_4 %298 = OpLoad %48 
					                                       f32_4 %299 = OpVectorShuffle %298 %297 0 4 5 3 
					                                                      OpStore %48 %299 
					                                Private f32* %300 = OpAccessChain %9 %46 
					                                                      OpStore %300 %45 
					                                       f32_4 %301 = OpLoad %32 
					                                       f32_3 %302 = OpVectorShuffle %301 %301 0 0 0 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_3 %305 = OpFMul %302 %304 
					                                       f32_4 %306 = OpLoad %9 
					                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
					                                                      OpStore %9 %307 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_4 %310 = OpLoad %48 
					                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                                       f32_3 %312 = OpFMul %309 %311 
					                                       f32_4 %313 = OpLoad %32 
					                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
					                                                      OpStore %32 %314 
					                                       f32_4 %315 = OpLoad %48 
					                                       f32_3 %316 = OpVectorShuffle %315 %315 2 0 1 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 1 2 0 
					                                       f32_3 %319 = OpFMul %316 %318 
					                                       f32_4 %320 = OpLoad %32 
					                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
					                                       f32_3 %322 = OpFNegate %321 
					                                       f32_3 %323 = OpFAdd %319 %322 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
					                                                      OpStore %9 %325 
					                         read_only Texture2D %327 = OpLoad %65 
					                                     sampler %328 = OpLoad %69 
					                  read_only Texture2DSampled %329 = OpSampledImage %327 %328 
					                                       f32_4 %330 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %331 = OpVectorShuffle %330 %330 0 1 
					                                       f32_4 %332 = OpImageSampleImplicitLod %329 %331 
					                                         f32 %333 = OpCompositeExtract %332 3 
					                                                      OpStore %326 %333 
					                                         f32 %335 = OpLoad %326 
					                                         f32 %336 = OpFNegate %335 
					                                         f32 %337 = OpFAdd %336 %149 
					                                                      OpStore %334 %337 
					                                         f32 %338 = OpLoad %334 
					                                  Input f32* %339 = OpAccessChain vs_TEXCOORD6 %14 
					                                         f32 %340 = OpLoad %339 
					                                         f32 %341 = OpFNegate %340 
					                                         f32 %342 = OpFAdd %338 %341 
					                                                      OpStore %281 %342 
					                                         f32 %343 = OpLoad %281 
					                                  Input f32* %344 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %345 = OpLoad %344 
					                                         f32 %346 = OpFMul %343 %345 
					                                         f32 %347 = OpFAdd %346 %149 
					                                                      OpStore %281 %347 
					                                Uniform f32* %348 = OpAccessChain %23 %115 
					                                         f32 %349 = OpLoad %348 
					                                Uniform f32* %351 = OpAccessChain %23 %350 
					                                         f32 %352 = OpLoad %351 
					                                         f32 %353 = OpFMul %349 %352 
					                                Private f32* %354 = OpAccessChain %32 %14 
					                                                      OpStore %354 %353 
					                                Private f32* %355 = OpAccessChain %32 %14 
					                                         f32 %356 = OpLoad %355 
					                                  Input f32* %357 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %358 = OpLoad %357 
					                                         f32 %359 = OpFMul %356 %358 
					                                Private f32* %360 = OpAccessChain %32 %14 
					                                                      OpStore %360 %359 
					                                Private f32* %362 = OpAccessChain %32 %14 
					                                         f32 %363 = OpLoad %362 
					                                         f32 %364 = OpFMul %363 %149 
					                                         f32 %365 = OpLoad %281 
					                                         f32 %366 = OpFAdd %364 %365 
					                                Private f32* %367 = OpAccessChain %361 %14 
					                                                      OpStore %367 %366 
					                                Private f32* %368 = OpAccessChain %361 %14 
					                                         f32 %369 = OpLoad %368 
					                                         f32 %370 = OpExtInst %1 43 %369 %45 %33 
					                                Private f32* %371 = OpAccessChain %361 %14 
					                                                      OpStore %371 %370 
					                                Private f32* %374 = OpAccessChain %32 %14 
					                                         f32 %375 = OpLoad %374 
					                                         f32 %376 = OpExtInst %1 37 %375 %33 
					                                Private f32* %377 = OpAccessChain %373 %14 
					                                                      OpStore %377 %376 
					                                Private f32* %378 = OpAccessChain %373 %14 
					                                         f32 %379 = OpLoad %378 
					                                         f32 %380 = OpExtInst %1 31 %379 
					                                Private f32* %381 = OpAccessChain %373 %14 
					                                                      OpStore %381 %380 
					                                Private f32* %382 = OpAccessChain %373 %14 
					                                         f32 %383 = OpLoad %382 
					                                Private f32* %384 = OpAccessChain %361 %14 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpFMul %383 %385 
					                                Private f32* %387 = OpAccessChain %361 %14 
					                                                      OpStore %387 %386 
					                                Uniform f32* %389 = OpAccessChain %23 %388 
					                                         f32 %390 = OpLoad %389 
					                                Uniform f32* %392 = OpAccessChain %23 %391 
					                                         f32 %393 = OpLoad %392 
					                                       f32_2 %394 = OpCompositeConstruct %390 %393 
					                              Uniform f32_4* %397 = OpAccessChain %23 %395 
					                                       f32_4 %398 = OpLoad %397 
					                                       f32_2 %399 = OpVectorShuffle %398 %398 1 1 
					                                       f32_2 %400 = OpFMul %394 %399 
					                                       f32_2 %402 = OpLoad vs_TEXCOORD1 
					                                       f32_2 %403 = OpFAdd %400 %402 
					                                                      OpStore %169 %403 
					                         read_only Texture2D %406 = OpLoad %405 
					                                     sampler %408 = OpLoad %407 
					                  read_only Texture2DSampled %409 = OpSampledImage %406 %408 
					                                       f32_2 %410 = OpLoad %169 
					                                       f32_4 %411 = OpImageSampleImplicitLod %409 %410 
					                                                      OpStore %404 %411 
					                                       f32_4 %413 = OpLoad %404 
					                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
					                              Uniform f32_4* %416 = OpAccessChain %23 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
					                                       f32_3 %419 = OpFMul %414 %418 
					                                                      OpStore %412 %419 
					                                  Input f32* %422 = OpAccessChain %421 %76 
					                                         f32 %423 = OpLoad %422 
					                                Uniform f32* %424 = OpAccessChain %23 %415 %76 
					                                         f32 %425 = OpLoad %424 
					                                         f32 %426 = OpFMul %423 %425 
					                                Private f32* %427 = OpAccessChain %420 %14 
					                                                      OpStore %427 %426 
					                                Private f32* %429 = OpAccessChain %404 %76 
					                                         f32 %430 = OpLoad %429 
					                                Private f32* %431 = OpAccessChain %420 %14 
					                                         f32 %432 = OpLoad %431 
					                                         f32 %433 = OpFMul %430 %432 
					                                                      OpStore %428 %433 
					                                Uniform f32* %435 = OpAccessChain %23 %434 
					                                         f32 %436 = OpLoad %435 
					                                Uniform f32* %438 = OpAccessChain %23 %437 
					                                         f32 %439 = OpLoad %438 
					                                       f32_2 %440 = OpCompositeConstruct %436 %439 
					                              Uniform f32_4* %441 = OpAccessChain %23 %395 
					                                       f32_4 %442 = OpLoad %441 
					                                       f32_2 %443 = OpVectorShuffle %442 %442 1 1 
					                                       f32_2 %444 = OpFMul %440 %443 
					                                       f32_4 %445 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFAdd %444 %446 
					                                       f32_4 %448 = OpLoad %62 
					                                       f32_4 %449 = OpVectorShuffle %448 %447 4 5 2 3 
					                                                      OpStore %62 %449 
					                         read_only Texture2D %452 = OpLoad %451 
					                                     sampler %454 = OpLoad %453 
					                  read_only Texture2DSampled %455 = OpSampledImage %452 %454 
					                                       f32_4 %456 = OpLoad %62 
					                                       f32_2 %457 = OpVectorShuffle %456 %456 0 1 
					                                       f32_4 %458 = OpImageSampleImplicitLod %455 %457 
					                                                      OpStore %450 %458 
					                                       f32_4 %460 = OpLoad %421 
					                              Uniform f32_4* %462 = OpAccessChain %23 %461 
					                                       f32_4 %463 = OpLoad %462 
					                                       f32_4 %464 = OpFMul %460 %463 
					                                                      OpStore %459 %464 
					                                       f32_4 %466 = OpLoad %450 
					                                       f32_4 %467 = OpLoad %459 
					                                       f32_4 %468 = OpFMul %466 %467 
					                                                      OpStore %465 %468 
					                                       f32_4 %469 = OpLoad %465 
					                                       f32_3 %470 = OpVectorShuffle %469 %469 3 3 3 
					                                       f32_4 %471 = OpLoad %465 
					                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
					                                       f32_3 %473 = OpFMul %470 %472 
					                                                      OpStore %373 %473 
					                                       f32_3 %475 = OpLoad %412 
					                                         f32 %476 = OpLoad %428 
					                                       f32_3 %477 = OpCompositeConstruct %476 %476 %476 
					                                       f32_3 %478 = OpFMul %475 %477 
					                                       f32_3 %479 = OpLoad %373 
					                                       f32_3 %480 = OpFNegate %479 
					                                       f32_3 %481 = OpFAdd %478 %480 
					                                       f32_4 %482 = OpLoad %474 
					                                       f32_4 %483 = OpVectorShuffle %482 %481 4 5 6 3 
					                                                      OpStore %474 %483 
					                                Private f32* %484 = OpAccessChain %420 %14 
					                                         f32 %485 = OpLoad %484 
					                                Private f32* %486 = OpAccessChain %404 %76 
					                                         f32 %487 = OpLoad %486 
					                                         f32 %488 = OpFMul %485 %487 
					                                Private f32* %489 = OpAccessChain %465 %76 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFNegate %490 
					                                         f32 %492 = OpFAdd %488 %491 
					                                Private f32* %493 = OpAccessChain %474 %76 
					                                                      OpStore %493 %492 
					                                       f32_4 %494 = OpLoad %361 
					                                       f32_4 %495 = OpVectorShuffle %494 %494 0 0 0 0 
					                                       f32_4 %496 = OpLoad %474 
					                                       f32_4 %497 = OpFMul %495 %496 
					                                                      OpStore %420 %497 
					                                Private f32* %499 = OpAccessChain %459 %76 
					                                         f32 %500 = OpLoad %499 
					                                Private f32* %501 = OpAccessChain %450 %76 
					                                         f32 %502 = OpLoad %501 
					                                         f32 %503 = OpFMul %500 %502 
					                                Private f32* %504 = OpAccessChain %420 %76 
					                                         f32 %505 = OpLoad %504 
					                                         f32 %506 = OpFAdd %503 %505 
					                                Private f32* %507 = OpAccessChain %498 %76 
					                                                      OpStore %507 %506 
					                                       f32_4 %508 = OpLoad %465 
					                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
					                                       f32_4 %510 = OpLoad %465 
					                                       f32_3 %511 = OpVectorShuffle %510 %510 3 3 3 
					                                       f32_3 %512 = OpFMul %509 %511 
					                                       f32_4 %513 = OpLoad %420 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
					                                       f32_3 %515 = OpFAdd %512 %514 
					                                       f32_4 %516 = OpLoad %498 
					                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
					                                                      OpStore %498 %517 
					                                Private f32* %518 = OpAccessChain %32 %14 
					                                         f32 %519 = OpLoad %518 
					                                         f32 %520 = OpFNegate %519 
					                                         f32 %521 = OpFMul %520 %149 
					                                         f32 %522 = OpLoad %281 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %361 %14 
					                                                      OpStore %524 %523 
					                                Private f32* %525 = OpAccessChain %32 %14 
					                                         f32 %526 = OpLoad %525 
					                                         f32 %527 = OpFMul %526 %149 
					                                         f32 %528 = OpLoad %281 
					                                         f32 %529 = OpFAdd %527 %528 
					                                                      OpStore %281 %529 
					                                         f32 %530 = OpLoad %281 
					                                         f32 %531 = OpExtInst %1 43 %530 %45 %33 
					                                                      OpStore %281 %531 
					                                Uniform f32* %533 = OpAccessChain %23 %532 
					                                         f32 %534 = OpLoad %533 
					                                Uniform f32* %535 = OpAccessChain %23 %350 
					                                         f32 %536 = OpLoad %535 
					                                         f32 %537 = OpFMul %534 %536 
					                                Private f32* %538 = OpAccessChain %32 %14 
					                                                      OpStore %538 %537 
					                                Private f32* %539 = OpAccessChain %32 %14 
					                                         f32 %540 = OpLoad %539 
					                                  Input f32* %541 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %542 = OpLoad %541 
					                                         f32 %543 = OpFMul %540 %542 
					                                Private f32* %544 = OpAccessChain %169 %14 
					                                                      OpStore %544 %543 
					                                Private f32* %545 = OpAccessChain %32 %14 
					                                         f32 %546 = OpLoad %545 
					                                  Input f32* %547 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %548 = OpLoad %547 
					                                         f32 %549 = OpFMul %546 %548 
					                                         f32 %550 = OpFAdd %549 %33 
					                                Private f32* %551 = OpAccessChain %373 %14 
					                                                      OpStore %551 %550 
					                                Private f32* %552 = OpAccessChain %169 %14 
					                                         f32 %553 = OpLoad %552 
					                                         f32 %554 = OpFMul %553 %149 
					                                Private f32* %555 = OpAccessChain %361 %14 
					                                         f32 %556 = OpLoad %555 
					                                         f32 %557 = OpFAdd %554 %556 
					                                Private f32* %558 = OpAccessChain %361 %14 
					                                                      OpStore %558 %557 
					                                Private f32* %559 = OpAccessChain %361 %14 
					                                         f32 %560 = OpLoad %559 
					                                Private f32* %561 = OpAccessChain %373 %14 
					                                         f32 %562 = OpLoad %561 
					                                         f32 %563 = OpFDiv %560 %562 
					                                Private f32* %564 = OpAccessChain %361 %14 
					                                                      OpStore %564 %563 
					                                Private f32* %565 = OpAccessChain %361 %14 
					                                         f32 %566 = OpLoad %565 
					                                         f32 %567 = OpExtInst %1 43 %566 %45 %33 
					                                Private f32* %568 = OpAccessChain %361 %14 
					                                                      OpStore %568 %567 
					                                Private f32* %569 = OpAccessChain %361 %14 
					                                         f32 %570 = OpLoad %569 
					                                         f32 %571 = OpFNegate %570 
					                                         f32 %572 = OpFAdd %571 %33 
					                                Private f32* %573 = OpAccessChain %361 %14 
					                                                      OpStore %573 %572 
					                                       f32_4 %575 = OpLoad %498 
					                                       f32_4 %576 = OpLoad %361 
					                                       f32_4 %577 = OpVectorShuffle %576 %576 0 0 0 0 
					                                       f32_4 %578 = OpFMul %575 %577 
					                                                      OpStore %574 %578 
					                                Uniform f32* %581 = OpAccessChain %23 %580 
					                                         f32 %582 = OpLoad %581 
					                                         f32 %583 = OpFNegate %582 
					                                Uniform f32* %585 = OpAccessChain %23 %584 
					                                         f32 %586 = OpLoad %585 
					                                         f32 %587 = OpFAdd %583 %586 
					                                Private f32* %588 = OpAccessChain %579 %14 
					                                                      OpStore %588 %587 
					                                         f32 %589 = OpLoad %281 
					                                Private f32* %590 = OpAccessChain %579 %14 
					                                         f32 %591 = OpLoad %590 
					                                         f32 %592 = OpFMul %589 %591 
					                                Uniform f32* %593 = OpAccessChain %23 %580 
					                                         f32 %594 = OpLoad %593 
					                                         f32 %595 = OpFAdd %592 %594 
					                                Private f32* %596 = OpAccessChain %579 %14 
					                                                      OpStore %596 %595 
					                         read_only Texture2D %599 = OpLoad %598 
					                                     sampler %601 = OpLoad %600 
					                  read_only Texture2DSampled %602 = OpSampledImage %599 %601 
					                                       f32_4 %603 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
					                                       f32_4 %605 = OpImageSampleImplicitLod %602 %604 
					                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 3 
					                                                      OpStore %597 %606 
					                                       f32_3 %607 = OpLoad %597 
					                                       f32_2 %608 = OpVectorShuffle %607 %607 0 0 
					                                       f32_3 %609 = OpLoad %597 
					                                       f32_2 %610 = OpVectorShuffle %609 %609 2 2 
					                                         f32 %611 = OpDot %608 %610 
					                                Private f32* %612 = OpAccessChain %361 %14 
					                                                      OpStore %612 %611 
					                                Private f32* %613 = OpAccessChain %597 %94 
					                                         f32 %614 = OpLoad %613 
					                                Private f32* %615 = OpAccessChain %597 %94 
					                                         f32 %616 = OpLoad %615 
					                                         f32 %617 = OpFAdd %614 %616 
					                                Private f32* %618 = OpAccessChain %361 %94 
					                                                      OpStore %618 %617 
					                                       f32_4 %619 = OpLoad %361 
					                                       f32_2 %620 = OpVectorShuffle %619 %619 0 1 
					                                       f32_2 %622 = OpFAdd %620 %621 
					                                       f32_4 %623 = OpLoad %361 
					                                       f32_4 %624 = OpVectorShuffle %623 %622 4 5 2 3 
					                                                      OpStore %361 %624 
					                                       f32_4 %626 = OpLoad %361 
					                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
					                                       f32_4 %628 = OpLoad %361 
					                                       f32_2 %629 = OpVectorShuffle %628 %628 0 1 
					                                         f32 %630 = OpDot %627 %629 
					                                                      OpStore %625 %630 
					                                         f32 %631 = OpLoad %625 
					                                         f32 %632 = OpExtInst %1 37 %631 %33 
					                                                      OpStore %625 %632 
					                                         f32 %633 = OpLoad %625 
					                                         f32 %634 = OpFNegate %633 
					                                         f32 %635 = OpFAdd %634 %33 
					                                                      OpStore %625 %635 
					                                         f32 %636 = OpLoad %625 
					                                         f32 %637 = OpExtInst %1 31 %636 
					                                Private f32* %638 = OpAccessChain %361 %46 
					                                                      OpStore %638 %637 
					                                       f32_4 %639 = OpLoad %361 
					                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
					                                       f32_3 %641 = OpLoad %579 
					                                       f32_3 %642 = OpVectorShuffle %641 %641 0 0 0 
					                                       f32_3 %643 = OpFMul %640 %642 
					                                       f32_3 %646 = OpFAdd %643 %645 
					                                                      OpStore %579 %646 
					                                       f32_4 %647 = OpLoad %574 
					                                       f32_3 %648 = OpVectorShuffle %647 %647 3 3 3 
					                                       f32_3 %649 = OpLoad %579 
					                                       f32_3 %650 = OpFMul %648 %649 
					                                       f32_3 %652 = OpFAdd %650 %651 
					                                                      OpStore %579 %652 
					                                       f32_4 %653 = OpLoad %9 
					                                       f32_3 %654 = OpVectorShuffle %653 %653 0 1 2 
					                                       f32_3 %655 = OpLoad %579 
					                                       f32_3 %656 = OpFNegate %655 
					                                       f32_3 %657 = OpFAdd %654 %656 
					                                       f32_4 %658 = OpLoad %9 
					                                       f32_4 %659 = OpVectorShuffle %658 %657 4 5 6 3 
					                                                      OpStore %9 %659 
					                                       f32_4 %660 = OpLoad %9 
					                                       f32_3 %661 = OpVectorShuffle %660 %660 0 1 2 
					                                       f32_4 %662 = OpLoad %9 
					                                       f32_3 %663 = OpVectorShuffle %662 %662 0 1 2 
					                                         f32 %664 = OpDot %661 %663 
					                                Private f32* %665 = OpAccessChain %579 %14 
					                                                      OpStore %665 %664 
					                                Private f32* %666 = OpAccessChain %579 %14 
					                                         f32 %667 = OpLoad %666 
					                                         f32 %668 = OpExtInst %1 32 %667 
					                                Private f32* %669 = OpAccessChain %579 %14 
					                                                      OpStore %669 %668 
					                                       f32_4 %670 = OpLoad %9 
					                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
					                                       f32_3 %672 = OpLoad %579 
					                                       f32_3 %673 = OpVectorShuffle %672 %672 0 0 0 
					                                       f32_3 %674 = OpFMul %671 %673 
					                                       f32_4 %675 = OpLoad %9 
					                                       f32_4 %676 = OpVectorShuffle %675 %674 4 5 6 3 
					                                                      OpStore %9 %676 
					                                       f32_3 %679 = OpLoad vs_TEXCOORD2 
					                                       f32_4 %680 = OpLoad %9 
					                                       f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
					                                       f32_3 %682 = OpFNegate %681 
					                                         f32 %683 = OpDot %679 %682 
					                                Private f32* %684 = OpAccessChain %361 %14 
					                                                      OpStore %684 %683 
					                                       f32_3 %686 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %687 = OpLoad %9 
					                                       f32_3 %688 = OpVectorShuffle %687 %687 0 1 2 
					                                       f32_3 %689 = OpFNegate %688 
					                                         f32 %690 = OpDot %686 %689 
					                                Private f32* %691 = OpAccessChain %361 %94 
					                                                      OpStore %691 %690 
					                                       f32_3 %693 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %694 = OpLoad %9 
					                                       f32_3 %695 = OpVectorShuffle %694 %694 0 1 2 
					                                       f32_3 %696 = OpFNegate %695 
					                                         f32 %697 = OpDot %693 %696 
					                                Private f32* %698 = OpAccessChain %361 %46 
					                                                      OpStore %698 %697 
					                                       f32_4 %700 = OpLoad %361 
					                                       f32_3 %701 = OpVectorShuffle %700 %700 0 1 2 
					                                       f32_4 %702 = OpLoad %361 
					                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
					                                         f32 %704 = OpDot %701 %703 
					                                Private f32* %705 = OpAccessChain %699 %14 
					                                                      OpStore %705 %704 
					                                Private f32* %706 = OpAccessChain %699 %14 
					                                         f32 %707 = OpLoad %706 
					                                         f32 %708 = OpExtInst %1 32 %707 
					                                Private f32* %709 = OpAccessChain %699 %14 
					                                                      OpStore %709 %708 
					                                       f32_3 %710 = OpLoad %699 
					                                       f32_3 %711 = OpVectorShuffle %710 %710 0 0 0 
					                                       f32_4 %712 = OpLoad %361 
					                                       f32_3 %713 = OpVectorShuffle %712 %712 0 1 2 
					                                       f32_3 %714 = OpFMul %711 %713 
					                                                      OpStore %699 %714 
					                                       f32_3 %716 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %717 = OpFNegate %716 
					                              Uniform f32_4* %719 = OpAccessChain %23 %718 
					                                       f32_4 %720 = OpLoad %719 
					                                       f32_3 %721 = OpVectorShuffle %720 %720 0 1 2 
					                                       f32_3 %722 = OpFAdd %717 %721 
					                                                      OpStore %579 %722 
					                                       f32_3 %724 = OpLoad %579 
					                                       f32_3 %725 = OpLoad %579 
					                                         f32 %726 = OpDot %724 %725 
					                                                      OpStore %723 %726 
					                                         f32 %727 = OpLoad %723 
					                                         f32 %728 = OpExtInst %1 32 %727 
					                                                      OpStore %723 %728 
					                                         f32 %729 = OpLoad %723 
					                                       f32_3 %730 = OpCompositeConstruct %729 %729 %729 
					                                       f32_3 %731 = OpLoad %579 
					                                       f32_3 %732 = OpFMul %730 %731 
					                                                      OpStore %579 %732 
					                                       f32_3 %734 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %735 = OpFNegate %734 
					                              Uniform f32_3* %738 = OpAccessChain %23 %736 
					                                       f32_3 %739 = OpLoad %738 
					                                       f32_3 %740 = OpFAdd %735 %739 
					                                                      OpStore %733 %740 
					                                       f32_3 %741 = OpLoad %733 
					                                       f32_3 %742 = OpLoad %733 
					                                         f32 %743 = OpDot %741 %742 
					                                                      OpStore %723 %743 
					                                         f32 %744 = OpLoad %723 
					                                         f32 %745 = OpExtInst %1 32 %744 
					                                                      OpStore %723 %745 
					                                       f32_3 %746 = OpLoad %733 
					                                         f32 %747 = OpLoad %723 
					                                       f32_3 %748 = OpCompositeConstruct %747 %747 %747 
					                                       f32_3 %749 = OpFMul %746 %748 
					                                       f32_3 %750 = OpLoad %579 
					                                       f32_3 %751 = OpFAdd %749 %750 
					                                       f32_4 %752 = OpLoad %361 
					                                       f32_4 %753 = OpVectorShuffle %752 %751 4 5 6 3 
					                                                      OpStore %361 %753 
					                                       f32_3 %754 = OpLoad %699 
					                                       f32_3 %755 = OpLoad %579 
					                                         f32 %756 = OpDot %754 %755 
					                                Private f32* %757 = OpAccessChain %361 %76 
					                                                      OpStore %757 %756 
					                                       f32_4 %758 = OpLoad %361 
					                                       f32_3 %759 = OpVectorShuffle %758 %758 0 1 2 
					                                       f32_4 %760 = OpLoad %361 
					                                       f32_3 %761 = OpVectorShuffle %760 %760 0 1 2 
					                                         f32 %762 = OpDot %759 %761 
					                                Private f32* %763 = OpAccessChain %474 %14 
					                                                      OpStore %763 %762 
					                                Private f32* %764 = OpAccessChain %474 %14 
					                                         f32 %765 = OpLoad %764 
					                                         f32 %766 = OpExtInst %1 32 %765 
					                                Private f32* %767 = OpAccessChain %474 %14 
					                                                      OpStore %767 %766 
					                                       f32_4 %768 = OpLoad %361 
					                                       f32_3 %769 = OpVectorShuffle %768 %768 0 1 2 
					                                       f32_4 %770 = OpLoad %474 
					                                       f32_3 %771 = OpVectorShuffle %770 %770 0 0 0 
					                                       f32_3 %772 = OpFMul %769 %771 
					                                       f32_4 %773 = OpLoad %361 
					                                       f32_4 %774 = OpVectorShuffle %773 %772 4 5 6 3 
					                                                      OpStore %361 %774 
					                                       f32_3 %775 = OpLoad %699 
					                                       f32_4 %776 = OpLoad %361 
					                                       f32_3 %777 = OpVectorShuffle %776 %776 0 1 2 
					                                         f32 %778 = OpDot %775 %777 
					                                Private f32* %779 = OpAccessChain %361 %14 
					                                                      OpStore %779 %778 
					                                       f32_4 %780 = OpLoad %361 
					                                       f32_2 %781 = OpVectorShuffle %780 %780 0 3 
					                                       f32_2 %783 = OpExtInst %1 40 %781 %782 
					                                       f32_4 %784 = OpLoad %361 
					                                       f32_4 %785 = OpVectorShuffle %784 %783 4 1 2 5 
					                                                      OpStore %361 %785 
					                                Private f32* %786 = OpAccessChain %361 %14 
					                                         f32 %787 = OpLoad %786 
					                                         f32 %788 = OpExtInst %1 30 %787 
					                                Private f32* %789 = OpAccessChain %699 %14 
					                                                      OpStore %789 %788 
					                                Uniform f32* %792 = OpAccessChain %23 %791 
					                                         f32 %793 = OpLoad %792 
					                                         f32 %794 = OpFNegate %793 
					                                Uniform f32* %796 = OpAccessChain %23 %795 
					                                         f32 %797 = OpLoad %796 
					                                         f32 %798 = OpFAdd %794 %797 
					                                                      OpStore %790 %798 
					                                         f32 %800 = OpLoad %281 
					                                         f32 %801 = OpLoad %790 
					                                         f32 %802 = OpFMul %800 %801 
					                                Uniform f32* %803 = OpAccessChain %23 %791 
					                                         f32 %804 = OpLoad %803 
					                                         f32 %805 = OpFAdd %802 %804 
					                                Private f32* %806 = OpAccessChain %799 %14 
					                                                      OpStore %806 %805 
					                                Private f32* %807 = OpAccessChain %799 %14 
					                                         f32 %808 = OpLoad %807 
					                                         f32 %810 = OpFMul %808 %809 
					                                Private f32* %811 = OpAccessChain %361 %14 
					                                                      OpStore %811 %810 
					                                Private f32* %812 = OpAccessChain %699 %14 
					                                         f32 %813 = OpLoad %812 
					                                Private f32* %814 = OpAccessChain %361 %14 
					                                         f32 %815 = OpLoad %814 
					                                         f32 %816 = OpFMul %813 %815 
					                                Private f32* %817 = OpAccessChain %699 %14 
					                                                      OpStore %817 %816 
					                                Private f32* %818 = OpAccessChain %699 %14 
					                                         f32 %819 = OpLoad %818 
					                                         f32 %820 = OpExtInst %1 29 %819 
					                                Private f32* %821 = OpAccessChain %699 %14 
					                                                      OpStore %821 %820 
					                                       f32_3 %822 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %823 = OpVectorShuffle %822 %822 1 1 1 
					                              Uniform f32_4* %825 = OpAccessChain %23 %824 %736 
					                                       f32_4 %826 = OpLoad %825 
					                                       f32_3 %827 = OpVectorShuffle %826 %826 0 1 2 
					                                       f32_3 %828 = OpFMul %823 %827 
					                                                      OpStore %799 %828 
					                              Uniform f32_4* %829 = OpAccessChain %23 %824 %395 
					                                       f32_4 %830 = OpLoad %829 
					                                       f32_3 %831 = OpVectorShuffle %830 %830 0 1 2 
					                                       f32_3 %832 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %833 = OpVectorShuffle %832 %832 0 0 0 
					                                       f32_3 %834 = OpFMul %831 %833 
					                                       f32_3 %835 = OpLoad %799 
					                                       f32_3 %836 = OpFAdd %834 %835 
					                                                      OpStore %799 %836 
					                              Uniform f32_4* %837 = OpAccessChain %23 %824 %718 
					                                       f32_4 %838 = OpLoad %837 
					                                       f32_3 %839 = OpVectorShuffle %838 %838 0 1 2 
					                                       f32_3 %840 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %841 = OpVectorShuffle %840 %840 2 2 2 
					                                       f32_3 %842 = OpFMul %839 %841 
					                                       f32_3 %843 = OpLoad %799 
					                                       f32_3 %844 = OpFAdd %842 %843 
					                                                      OpStore %799 %844 
					                                       f32_3 %845 = OpLoad %799 
					                              Uniform f32_4* %847 = OpAccessChain %23 %824 %846 
					                                       f32_4 %848 = OpLoad %847 
					                                       f32_3 %849 = OpVectorShuffle %848 %848 0 1 2 
					                                       f32_3 %850 = OpFAdd %845 %849 
					                                                      OpStore %799 %850 
					                                       f32_3 %851 = OpLoad %799 
					                                       f32_3 %852 = OpLoad %799 
					                                         f32 %853 = OpDot %851 %852 
					                                Private f32* %854 = OpAccessChain %579 %14 
					                                                      OpStore %854 %853 
					                       read_only TextureCube %858 = OpLoad %857 
					                                     sampler %860 = OpLoad %859 
					                read_only TextureCubeSampled %862 = OpSampledImage %858 %860 
					                                       f32_3 %863 = OpLoad %799 
					                                       f32_4 %864 = OpImageSampleImplicitLod %862 %863 
					                                         f32 %865 = OpCompositeExtract %864 3 
					                                Private f32* %866 = OpAccessChain %799 %14 
					                                                      OpStore %866 %865 
					                         read_only Texture2D %869 = OpLoad %868 
					                                     sampler %871 = OpLoad %870 
					                  read_only Texture2DSampled %872 = OpSampledImage %869 %871 
					                                       f32_3 %873 = OpLoad %579 
					                                       f32_2 %874 = OpVectorShuffle %873 %873 0 0 
					                                       f32_4 %875 = OpImageSampleImplicitLod %872 %874 
					                                         f32 %876 = OpCompositeExtract %875 0 
					                                                      OpStore %867 %876 
					                                Private f32* %877 = OpAccessChain %799 %14 
					                                         f32 %878 = OpLoad %877 
					                                         f32 %879 = OpLoad %867 
					                                         f32 %880 = OpFMul %878 %879 
					                                Private f32* %881 = OpAccessChain %799 %14 
					                                                      OpStore %881 %880 
					                                       f32_3 %882 = OpLoad %799 
					                                       f32_3 %883 = OpVectorShuffle %882 %882 0 0 0 
					                              Uniform f32_4* %884 = OpAccessChain %23 %846 
					                                       f32_4 %885 = OpLoad %884 
					                                       f32_3 %886 = OpVectorShuffle %885 %885 0 1 2 
					                                       f32_3 %887 = OpFMul %883 %886 
					                                       f32_4 %888 = OpLoad %361 
					                                       f32_4 %889 = OpVectorShuffle %888 %887 4 5 6 3 
					                                                      OpStore %361 %889 
					                                       f32_4 %890 = OpLoad %361 
					                                       f32_3 %891 = OpVectorShuffle %890 %890 0 1 2 
					                              Uniform f32_4* %893 = OpAccessChain %23 %892 
					                                       f32_4 %894 = OpLoad %893 
					                                       f32_3 %895 = OpVectorShuffle %894 %894 0 1 2 
					                                       f32_3 %896 = OpFMul %891 %895 
					                                       f32_4 %897 = OpLoad %474 
					                                       f32_4 %898 = OpVectorShuffle %897 %896 4 5 6 3 
					                                                      OpStore %474 %898 
					                                       f32_3 %899 = OpLoad %699 
					                                       f32_3 %900 = OpVectorShuffle %899 %899 0 0 0 
					                                       f32_4 %901 = OpLoad %474 
					                                       f32_3 %902 = OpVectorShuffle %901 %901 0 1 2 
					                                       f32_3 %903 = OpFMul %900 %902 
					                                                      OpStore %699 %903 
					                                Private f32* %904 = OpAccessChain %574 %76 
					                                         f32 %905 = OpLoad %904 
					                                         f32 %907 = OpExtInst %1 40 %905 %906 
					                                                      OpStore %334 %907 
					                                       f32_4 %908 = OpLoad %574 
					                                       f32_3 %909 = OpVectorShuffle %908 %908 0 1 2 
					                                         f32 %910 = OpLoad %334 
					                                       f32_3 %911 = OpCompositeConstruct %910 %910 %910 
					                                       f32_3 %912 = OpFDiv %909 %911 
					                                       f32_4 %913 = OpLoad %459 
					                                       f32_4 %914 = OpVectorShuffle %913 %912 4 5 6 3 
					                                                      OpStore %459 %914 
					                                Private f32* %917 = OpAccessChain %574 %76 
					                                         f32 %918 = OpLoad %917 
					                                 Output f32* %920 = OpAccessChain %916 %76 
					                                                      OpStore %920 %918 
					                                       f32_4 %921 = OpLoad %361 
					                                       f32_3 %922 = OpVectorShuffle %921 %921 0 1 2 
					                                       f32_4 %923 = OpLoad %459 
					                                       f32_3 %924 = OpVectorShuffle %923 %923 0 1 2 
					                                       f32_3 %925 = OpFMul %922 %924 
					                                       f32_4 %926 = OpLoad %361 
					                                       f32_4 %927 = OpVectorShuffle %926 %925 4 5 6 3 
					                                                      OpStore %361 %927 
					                                       f32_4 %928 = OpLoad %361 
					                                       f32_3 %929 = OpVectorShuffle %928 %928 0 1 2 
					                                       f32_4 %930 = OpLoad %361 
					                                       f32_3 %931 = OpVectorShuffle %930 %930 3 3 3 
					                                       f32_3 %932 = OpFMul %929 %931 
					                                       f32_3 %933 = OpLoad %699 
					                                       f32_3 %934 = OpFAdd %932 %933 
					                                                      OpStore %699 %934 
					                                       f32_3 %935 = OpLoad %699 
					                                       f32_4 %936 = OpLoad %916 
					                                       f32_4 %937 = OpVectorShuffle %936 %935 4 5 6 3 
					                                                      OpStore %916 %937 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[2];
						float _FaceDilate;
						vec4 unused_0_4[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_6[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_17;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec2 vs_TEXCOORD8;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					vec3 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = u_xlat2.y * unity_MatrixVP[1].w;
					    u_xlat15 = unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat2.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat2.x = u_xlat15 * 1.5;
					    u_xlat7.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat2.x = u_xlat7.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat2.x);
					    u_xlat7.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat7.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat7.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat3.y = dot(u_xlat0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.z = dot(u_xlat0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.x = dot(u_xlat0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat7.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat3.xyz = (-u_xlat7.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat7.x = dot(u_xlat0.yzx, u_xlat7.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat7.x) * u_xlat15 + u_xlat2.x;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat2.x = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat15 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat3.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = _EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD8.xy = unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _FaceDilate;
					uniform 	vec4 hlslcc_mtx4x4_EnvMatrix[4];
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _FaceTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec2 vs_TEXCOORD8;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					vec3 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat3.x = floor(u_xlat15);
					    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;
					    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;
					    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat2.x;
					    u_xlat2.x = u_xlat15 * 1.5;
					    u_xlat7.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat2.x = u_xlat7.x * u_xlat2.x;
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat2.x);
					    u_xlat7.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat7.xyz;
					    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);
					    u_xlati5 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati5) + u_xlati0;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat3.xyz = (-u_xlat7.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.xyz = u_xlat7.xyz;
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
					    u_xlat7.x = dot(u_xlat0.yzx, u_xlat7.xyz);
					    vs_TEXCOORD6.y = abs(u_xlat7.x) * u_xlat15 + u_xlat2.x;
					    u_xlatb15 = 0.0>=in_TEXCOORD1.y;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat2.x = (-_WeightNormal) + _WeightBold;
					    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;
					    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;
					    u_xlat15 = u_xlat15 * _ScaleRatioA;
					    vs_TEXCOORD6.x = u_xlat15 * 0.5;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;
					    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD8.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightColor0;
					uniform 	vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _FaceUVSpeedX;
					uniform 	float _FaceUVSpeedY;
					uniform 	vec4 _FaceColor;
					uniform 	float _OutlineSoftness;
					uniform 	float _OutlineUVSpeedX;
					uniform 	float _OutlineUVSpeedY;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _Bevel;
					uniform 	float _BevelOffset;
					uniform 	float _BevelWidth;
					uniform 	float _BevelClamp;
					uniform 	float _BevelRoundness;
					uniform 	float _BumpOutline;
					uniform 	float _BumpFace;
					uniform 	float _ShaderFlags;
					uniform 	float _ScaleRatioA;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _FaceShininess;
					uniform 	float _OutlineShininess;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					UNITY_LOCATION(1) uniform  sampler2D _FaceTex;
					UNITY_LOCATION(2) uniform  sampler2D _OutlineTex;
					UNITY_LOCATION(3) uniform  sampler2D _BumpMap;
					UNITY_LOCATION(4) uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					vec2 u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10.x = u_xlat13 * u_xlat10.x + _FaceShininess;
					    u_xlat10.x = u_xlat10.x * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10.x;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat10.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat10.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat10.xy;
					    u_xlat10.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat10_2 = texture(_LightTexture0, u_xlat10.xy);
					    u_xlat2.xyz = u_xlat10_2.www * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 658
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %95 %107 %133 %148 %160 %325 %414 %436 %486 %490 %565 %569 %585 %586 %603 %643 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
					                                                      OpName vs_TEXCOORD8 "vs_TEXCOORD8" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpDecorate %22 ArrayStride 22 
					                                                      OpDecorate %23 ArrayStride 23 
					                                                      OpMemberDecorate %24 0 Offset 24 
					                                                      OpMemberDecorate %24 1 Offset 24 
					                                                      OpMemberDecorate %24 2 Offset 24 
					                                                      OpMemberDecorate %24 3 Offset 24 
					                                                      OpMemberDecorate %24 4 Offset 24 
					                                                      OpMemberDecorate %24 5 Offset 24 
					                                                      OpMemberDecorate %24 6 Offset 24 
					                                                      OpMemberDecorate %24 7 Offset 24 
					                                                      OpMemberDecorate %24 8 Offset 24 
					                                                      OpMemberDecorate %24 9 Offset 24 
					                                                      OpMemberDecorate %24 10 Offset 24 
					                                                      OpMemberDecorate %24 11 Offset 24 
					                                                      OpMemberDecorate %24 12 Offset 24 
					                                                      OpMemberDecorate %24 13 Offset 24 
					                                                      OpMemberDecorate %24 14 Offset 24 
					                                                      OpMemberDecorate %24 15 Offset 24 
					                                                      OpMemberDecorate %24 16 Offset 24 
					                                                      OpMemberDecorate %24 17 Offset 24 
					                                                      OpMemberDecorate %24 18 Offset 24 
					                                                      OpMemberDecorate %24 19 Offset 24 
					                                                      OpMemberDecorate %24 20 Offset 24 
					                                                      OpMemberDecorate %24 21 Offset 24 
					                                                      OpDecorate %24 Block 
					                                                      OpDecorate %26 DescriptorSet 26 
					                                                      OpDecorate %26 Binding 26 
					                                                      OpMemberDecorate %93 0 BuiltIn 93 
					                                                      OpMemberDecorate %93 1 BuiltIn 93 
					                                                      OpMemberDecorate %93 2 BuiltIn 93 
					                                                      OpDecorate %93 Block 
					                                                      OpDecorate %107 Location 107 
					                                                      OpDecorate vs_TEXCOORD0 Location 133 
					                                                      OpDecorate vs_TEXCOORD1 Location 148 
					                                                      OpDecorate %160 Location 160 
					                                                      OpDecorate %325 Location 325 
					                                                      OpDecorate vs_TEXCOORD5 Location 414 
					                                                      OpDecorate vs_TEXCOORD6 Location 436 
					                                                      OpDecorate vs_TEXCOORD2 Location 486 
					                                                      OpDecorate %490 Location 490 
					                                                      OpDecorate vs_TEXCOORD3 Location 565 
					                                                      OpDecorate vs_TEXCOORD4 Location 569 
					                                                      OpDecorate %585 RelaxedPrecision 
					                                                      OpDecorate %585 Location 585 
					                                                      OpDecorate %586 RelaxedPrecision 
					                                                      OpDecorate %586 Location 586 
					                                                      OpDecorate %587 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD7 Location 603 
					                                                      OpDecorate vs_TEXCOORD8 Location 643 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 3 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_3* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %13 = OpTypeVector %6 2 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeArray %10 %17 
					                                              %23 = OpTypeArray %10 %17 
					                                              %24 = OpTypeStruct %7 %10 %18 %19 %10 %20 %21 %22 %6 %23 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %10 %10 
					                                              %25 = OpTypePointer Uniform %24 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32; f32_4[4]; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32_4; f32_4;}* %26 = OpVariable Uniform 
					                                              %27 = OpTypeInt 32 1 
					                                          i32 %28 = OpConstant 13 
					                                              %29 = OpTypePointer Uniform %6 
					                                          i32 %32 = OpConstant 14 
					                                              %39 = OpTypePointer Private %10 
					                               Private f32_4* %40 = OpVariable Private 
					                                          i32 %43 = OpConstant 2 
					                                          i32 %44 = OpConstant 1 
					                                              %45 = OpTypePointer Uniform %10 
					                                          i32 %49 = OpConstant 0 
					                               Private f32_4* %64 = OpVariable Private 
					                                          i32 %66 = OpConstant 3 
					                               Private f32_4* %70 = OpVariable Private 
					                                          i32 %73 = OpConstant 6 
					                                          u32 %91 = OpConstant 1 
					                                              %92 = OpTypeArray %6 %91 
					                                              %93 = OpTypeStruct %10 %6 %92 
					                                              %94 = OpTypePointer Output %93 
					         Output struct {f32_4; f32; f32[1];}* %95 = OpVariable Output 
					                                             %103 = OpTypePointer Output %10 
					                                             %105 = OpTypePointer Private %6 
					                                Private f32* %106 = OpVariable Private 
					                                Input f32_4* %107 = OpVariable Input 
					                                         u32 %108 = OpConstant 0 
					                                             %109 = OpTypePointer Input %6 
					                                         f32 %112 = OpConstant 3,674022E-40 
					                                         f32 %120 = OpConstant 3,674022E-40 
					                                         f32 %128 = OpConstant 3,674022E-40 
					                                       f32_2 %129 = OpConstantComposite %128 %128 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                                         i32 %136 = OpConstant 20 
					                                             %147 = OpTypePointer Output %13 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                         i32 %151 = OpConstant 21 
					                                Input f32_4* %160 = OpVariable Input 
					                                         i32 %163 = OpConstant 19 
					                                         u32 %176 = OpConstant 3 
					                                         u32 %189 = OpConstant 2 
					                                         i32 %205 = OpConstant 5 
					                                         i32 %226 = OpConstant 16 
					                                         i32 %229 = OpConstant 17 
					                                         i32 %253 = OpConstant 15 
					                                         f32 %263 = OpConstant 3,674022E-40 
					                              Private f32_3* %266 = OpVariable Private 
					                                         i32 %267 = OpConstant 18 
					                                         f32 %271 = OpConstant 3,674022E-40 
					                                             %286 = OpTypePointer Uniform %7 
					                                             %324 = OpTypePointer Input %7 
					                                Input f32_3* %325 = OpVariable Input 
					                                             %330 = OpTypePointer Private %27 
					                                Private i32* %331 = OpVariable Private 
					                                         f32 %332 = OpConstant 3,674022E-40 
					                                             %335 = OpTypeBool 
					                                         u32 %337 = OpConstant 4294967295 
					                                Private i32* %340 = OpVariable Private 
					                                             %413 = OpTypePointer Output %7 
					                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
					                       Output f32_2* vs_TEXCOORD6 = OpVariable Output 
					                                             %445 = OpTypePointer Output %6 
					                                             %447 = OpTypePointer Private %335 
					                               Private bool* %448 = OpVariable Private 
					                                         i32 %454 = OpConstant 10 
					                                         i32 %458 = OpConstant 11 
					                                         f32 %471 = OpConstant 3,674022E-40 
					                                         i32 %473 = OpConstant 8 
					                                         i32 %478 = OpConstant 12 
					                                         f32 %483 = OpConstant 3,674022E-40 
					                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_4* %490 = OpVariable Input 
					                              Private f32_3* %535 = OpVariable Private 
					                                Private f32* %548 = OpVariable Private 
					                                         i32 %551 = OpConstant 4 
					                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
					                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
					                               Output f32_4* %585 = OpVariable Output 
					                                Input f32_4* %586 = OpVariable Input 
					                                         i32 %590 = OpConstant 9 
					                       Output f32_3* vs_TEXCOORD7 = OpVariable Output 
					                                         i32 %614 = OpConstant 7 
					                       Output f32_2* vs_TEXCOORD8 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %14 = OpLoad %12 
					                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
					                                 Uniform f32* %30 = OpAccessChain %26 %28 
					                                          f32 %31 = OpLoad %30 
					                                 Uniform f32* %33 = OpAccessChain %26 %32 
					                                          f32 %34 = OpLoad %33 
					                                        f32_2 %35 = OpCompositeConstruct %31 %34 
					                                        f32_2 %36 = OpFAdd %15 %35 
					                                        f32_3 %37 = OpLoad %9 
					                                        f32_3 %38 = OpVectorShuffle %37 %36 3 4 2 
					                                                      OpStore %9 %38 
					                                        f32_3 %41 = OpLoad %9 
					                                        f32_4 %42 = OpVectorShuffle %41 %41 1 1 1 1 
					                               Uniform f32_4* %46 = OpAccessChain %26 %43 %44 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_4 %48 = OpFMul %42 %47 
					                                                      OpStore %40 %48 
					                               Uniform f32_4* %50 = OpAccessChain %26 %43 %49 
					                                        f32_4 %51 = OpLoad %50 
					                                        f32_3 %52 = OpLoad %9 
					                                        f32_4 %53 = OpVectorShuffle %52 %52 0 0 0 0 
					                                        f32_4 %54 = OpFMul %51 %53 
					                                        f32_4 %55 = OpLoad %40 
					                                        f32_4 %56 = OpFAdd %54 %55 
					                                                      OpStore %40 %56 
					                               Uniform f32_4* %57 = OpAccessChain %26 %43 %43 
					                                        f32_4 %58 = OpLoad %57 
					                                        f32_4 %59 = OpLoad %12 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 2 2 2 2 
					                                        f32_4 %61 = OpFMul %58 %60 
					                                        f32_4 %62 = OpLoad %40 
					                                        f32_4 %63 = OpFAdd %61 %62 
					                                                      OpStore %40 %63 
					                                        f32_4 %65 = OpLoad %40 
					                               Uniform f32_4* %67 = OpAccessChain %26 %43 %66 
					                                        f32_4 %68 = OpLoad %67 
					                                        f32_4 %69 = OpFAdd %65 %68 
					                                                      OpStore %64 %69 
					                                        f32_4 %71 = OpLoad %64 
					                                        f32_4 %72 = OpVectorShuffle %71 %71 1 1 1 1 
					                               Uniform f32_4* %74 = OpAccessChain %26 %73 %44 
					                                        f32_4 %75 = OpLoad %74 
					                                        f32_4 %76 = OpFMul %72 %75 
					                                                      OpStore %70 %76 
					                               Uniform f32_4* %77 = OpAccessChain %26 %73 %49 
					                                        f32_4 %78 = OpLoad %77 
					                                        f32_4 %79 = OpLoad %64 
					                                        f32_4 %80 = OpVectorShuffle %79 %79 0 0 0 0 
					                                        f32_4 %81 = OpFMul %78 %80 
					                                        f32_4 %82 = OpLoad %70 
					                                        f32_4 %83 = OpFAdd %81 %82 
					                                                      OpStore %70 %83 
					                               Uniform f32_4* %84 = OpAccessChain %26 %73 %43 
					                                        f32_4 %85 = OpLoad %84 
					                                        f32_4 %86 = OpLoad %64 
					                                        f32_4 %87 = OpVectorShuffle %86 %86 2 2 2 2 
					                                        f32_4 %88 = OpFMul %85 %87 
					                                        f32_4 %89 = OpLoad %70 
					                                        f32_4 %90 = OpFAdd %88 %89 
					                                                      OpStore %70 %90 
					                               Uniform f32_4* %96 = OpAccessChain %26 %73 %66 
					                                        f32_4 %97 = OpLoad %96 
					                                        f32_4 %98 = OpLoad %64 
					                                        f32_4 %99 = OpVectorShuffle %98 %98 3 3 3 3 
					                                       f32_4 %100 = OpFMul %97 %99 
					                                       f32_4 %101 = OpLoad %70 
					                                       f32_4 %102 = OpFAdd %100 %101 
					                               Output f32_4* %104 = OpAccessChain %95 %49 
					                                                      OpStore %104 %102 
					                                  Input f32* %110 = OpAccessChain %107 %108 
					                                         f32 %111 = OpLoad %110 
					                                         f32 %113 = OpFMul %111 %112 
					                                                      OpStore %106 %113 
					                                         f32 %114 = OpLoad %106 
					                                         f32 %115 = OpExtInst %1 8 %114 
					                                Private f32* %116 = OpAccessChain %70 %108 
					                                                      OpStore %116 %115 
					                                Private f32* %117 = OpAccessChain %70 %108 
					                                         f32 %118 = OpLoad %117 
					                                         f32 %119 = OpFNegate %118 
					                                         f32 %121 = OpFMul %119 %120 
					                                  Input f32* %122 = OpAccessChain %107 %108 
					                                         f32 %123 = OpLoad %122 
					                                         f32 %124 = OpFAdd %121 %123 
					                                Private f32* %125 = OpAccessChain %70 %91 
					                                                      OpStore %125 %124 
					                                       f32_4 %126 = OpLoad %70 
					                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
					                                       f32_2 %130 = OpFMul %127 %129 
					                                       f32_4 %131 = OpLoad %70 
					                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
					                                                      OpStore %70 %132 
					                                       f32_4 %134 = OpLoad %70 
					                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
					                              Uniform f32_4* %137 = OpAccessChain %26 %136 
					                                       f32_4 %138 = OpLoad %137 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                                       f32_2 %140 = OpFMul %135 %139 
					                              Uniform f32_4* %141 = OpAccessChain %26 %136 
					                                       f32_4 %142 = OpLoad %141 
					                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
					                                       f32_2 %144 = OpFAdd %140 %143 
					                                       f32_4 %145 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %146 = OpVectorShuffle %145 %144 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %146 
					                                       f32_4 %149 = OpLoad %70 
					                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
					                              Uniform f32_4* %152 = OpAccessChain %26 %151 
					                                       f32_4 %153 = OpLoad %152 
					                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
					                                       f32_2 %155 = OpFMul %150 %154 
					                              Uniform f32_4* %156 = OpAccessChain %26 %151 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
					                                       f32_2 %159 = OpFAdd %155 %158 
					                                                      OpStore vs_TEXCOORD1 %159 
					                                       f32_4 %161 = OpLoad %160 
					                                       f32_2 %162 = OpVectorShuffle %161 %161 0 1 
					                              Uniform f32_4* %164 = OpAccessChain %26 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
					                                       f32_2 %167 = OpFMul %162 %166 
					                              Uniform f32_4* %168 = OpAccessChain %26 %163 
					                                       f32_4 %169 = OpLoad %168 
					                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
					                                       f32_2 %171 = OpFAdd %167 %170 
					                                       f32_4 %172 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %173 
					                                Private f32* %174 = OpAccessChain %64 %91 
					                                         f32 %175 = OpLoad %174 
					                                Uniform f32* %177 = OpAccessChain %26 %73 %44 %176 
					                                         f32 %178 = OpLoad %177 
					                                         f32 %179 = OpFMul %175 %178 
					                                                      OpStore %106 %179 
					                                Uniform f32* %180 = OpAccessChain %26 %73 %49 %176 
					                                         f32 %181 = OpLoad %180 
					                                Private f32* %182 = OpAccessChain %64 %108 
					                                         f32 %183 = OpLoad %182 
					                                         f32 %184 = OpFMul %181 %183 
					                                         f32 %185 = OpLoad %106 
					                                         f32 %186 = OpFAdd %184 %185 
					                                                      OpStore %106 %186 
					                                Uniform f32* %187 = OpAccessChain %26 %73 %43 %176 
					                                         f32 %188 = OpLoad %187 
					                                Private f32* %190 = OpAccessChain %64 %189 
					                                         f32 %191 = OpLoad %190 
					                                         f32 %192 = OpFMul %188 %191 
					                                         f32 %193 = OpLoad %106 
					                                         f32 %194 = OpFAdd %192 %193 
					                                                      OpStore %106 %194 
					                                Uniform f32* %195 = OpAccessChain %26 %73 %66 %176 
					                                         f32 %196 = OpLoad %195 
					                                Private f32* %197 = OpAccessChain %64 %176 
					                                         f32 %198 = OpLoad %197 
					                                         f32 %199 = OpFMul %196 %198 
					                                         f32 %200 = OpLoad %106 
					                                         f32 %201 = OpFAdd %199 %200 
					                                                      OpStore %106 %201 
					                              Uniform f32_4* %202 = OpAccessChain %26 %44 
					                                       f32_4 %203 = OpLoad %202 
					                                       f32_2 %204 = OpVectorShuffle %203 %203 1 1 
					                              Uniform f32_4* %206 = OpAccessChain %26 %205 %44 
					                                       f32_4 %207 = OpLoad %206 
					                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
					                                       f32_2 %209 = OpFMul %204 %208 
					                                       f32_4 %210 = OpLoad %64 
					                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 2 3 
					                                                      OpStore %64 %211 
					                              Uniform f32_4* %212 = OpAccessChain %26 %205 %49 
					                                       f32_4 %213 = OpLoad %212 
					                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
					                              Uniform f32_4* %215 = OpAccessChain %26 %44 
					                                       f32_4 %216 = OpLoad %215 
					                                       f32_2 %217 = OpVectorShuffle %216 %216 0 0 
					                                       f32_2 %218 = OpFMul %214 %217 
					                                       f32_4 %219 = OpLoad %64 
					                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
					                                       f32_2 %221 = OpFAdd %218 %220 
					                                       f32_4 %222 = OpLoad %64 
					                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 2 3 
					                                                      OpStore %64 %223 
					                                       f32_4 %224 = OpLoad %64 
					                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
					                                Uniform f32* %227 = OpAccessChain %26 %226 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %230 = OpAccessChain %26 %229 
					                                         f32 %231 = OpLoad %230 
					                                       f32_2 %232 = OpCompositeConstruct %228 %231 
					                                       f32_2 %233 = OpFMul %225 %232 
					                                       f32_4 %234 = OpLoad %64 
					                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
					                                                      OpStore %64 %235 
					                                         f32 %236 = OpLoad %106 
					                                       f32_2 %237 = OpCompositeConstruct %236 %236 
					                                       f32_4 %238 = OpLoad %64 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_2 %240 = OpFDiv %237 %239 
					                                       f32_4 %241 = OpLoad %64 
					                                       f32_4 %242 = OpVectorShuffle %241 %240 4 5 2 3 
					                                                      OpStore %64 %242 
					                                       f32_4 %243 = OpLoad %64 
					                                       f32_2 %244 = OpVectorShuffle %243 %243 0 1 
					                                       f32_4 %245 = OpLoad %64 
					                                       f32_2 %246 = OpVectorShuffle %245 %245 0 1 
					                                         f32 %247 = OpDot %244 %246 
					                                                      OpStore %106 %247 
					                                         f32 %248 = OpLoad %106 
					                                         f32 %249 = OpExtInst %1 32 %248 
					                                                      OpStore %106 %249 
					                                  Input f32* %250 = OpAccessChain %107 %91 
					                                         f32 %251 = OpLoad %250 
					                                         f32 %252 = OpExtInst %1 4 %251 
					                                Uniform f32* %254 = OpAccessChain %26 %253 
					                                         f32 %255 = OpLoad %254 
					                                         f32 %256 = OpFMul %252 %255 
					                                Private f32* %257 = OpAccessChain %64 %108 
					                                                      OpStore %257 %256 
					                                         f32 %258 = OpLoad %106 
					                                Private f32* %259 = OpAccessChain %64 %108 
					                                         f32 %260 = OpLoad %259 
					                                         f32 %261 = OpFMul %258 %260 
					                                                      OpStore %106 %261 
					                                         f32 %262 = OpLoad %106 
					                                         f32 %264 = OpFMul %262 %263 
					                                Private f32* %265 = OpAccessChain %64 %108 
					                                                      OpStore %265 %264 
					                                Uniform f32* %268 = OpAccessChain %26 %267 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpFNegate %269 
					                                         f32 %272 = OpFAdd %270 %271 
					                                Private f32* %273 = OpAccessChain %266 %108 
					                                                      OpStore %273 %272 
					                                Private f32* %274 = OpAccessChain %266 %108 
					                                         f32 %275 = OpLoad %274 
					                                Private f32* %276 = OpAccessChain %64 %108 
					                                         f32 %277 = OpLoad %276 
					                                         f32 %278 = OpFMul %275 %277 
					                                Private f32* %279 = OpAccessChain %64 %108 
					                                                      OpStore %279 %278 
					                                         f32 %280 = OpLoad %106 
					                                         f32 %281 = OpFMul %280 %263 
					                                Private f32* %282 = OpAccessChain %64 %108 
					                                         f32 %283 = OpLoad %282 
					                                         f32 %284 = OpFNegate %283 
					                                         f32 %285 = OpFAdd %281 %284 
					                                                      OpStore %106 %285 
					                              Uniform f32_3* %287 = OpAccessChain %26 %49 
					                                       f32_3 %288 = OpLoad %287 
					                                       f32_3 %289 = OpVectorShuffle %288 %288 1 1 1 
					                              Uniform f32_4* %290 = OpAccessChain %26 %66 %44 
					                                       f32_4 %291 = OpLoad %290 
					                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
					                                       f32_3 %293 = OpFMul %289 %292 
					                                                      OpStore %266 %293 
					                              Uniform f32_4* %294 = OpAccessChain %26 %66 %49 
					                                       f32_4 %295 = OpLoad %294 
					                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
					                              Uniform f32_3* %297 = OpAccessChain %26 %49 
					                                       f32_3 %298 = OpLoad %297 
					                                       f32_3 %299 = OpVectorShuffle %298 %298 0 0 0 
					                                       f32_3 %300 = OpFMul %296 %299 
					                                       f32_3 %301 = OpLoad %266 
					                                       f32_3 %302 = OpFAdd %300 %301 
					                                                      OpStore %266 %302 
					                              Uniform f32_4* %303 = OpAccessChain %26 %66 %43 
					                                       f32_4 %304 = OpLoad %303 
					                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
					                              Uniform f32_3* %306 = OpAccessChain %26 %49 
					                                       f32_3 %307 = OpLoad %306 
					                                       f32_3 %308 = OpVectorShuffle %307 %307 2 2 2 
					                                       f32_3 %309 = OpFMul %305 %308 
					                                       f32_3 %310 = OpLoad %266 
					                                       f32_3 %311 = OpFAdd %309 %310 
					                                                      OpStore %266 %311 
					                                       f32_3 %312 = OpLoad %266 
					                              Uniform f32_4* %313 = OpAccessChain %26 %66 %66 
					                                       f32_4 %314 = OpLoad %313 
					                                       f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
					                                       f32_3 %316 = OpFAdd %312 %315 
					                                                      OpStore %266 %316 
					                                  Input f32* %317 = OpAccessChain %12 %189 
					                                         f32 %318 = OpLoad %317 
					                                Private f32* %319 = OpAccessChain %9 %189 
					                                                      OpStore %319 %318 
					                                       f32_3 %320 = OpLoad %9 
					                                       f32_3 %321 = OpFNegate %320 
					                                       f32_3 %322 = OpLoad %266 
					                                       f32_3 %323 = OpFAdd %321 %322 
					                                                      OpStore %9 %323 
					                                       f32_3 %326 = OpLoad %325 
					                                       f32_3 %327 = OpLoad %9 
					                                         f32 %328 = OpDot %326 %327 
					                                Private f32* %329 = OpAccessChain %9 %108 
					                                                      OpStore %329 %328 
					                                Private f32* %333 = OpAccessChain %9 %108 
					                                         f32 %334 = OpLoad %333 
					                                        bool %336 = OpFOrdLessThan %332 %334 
					                                         u32 %338 = OpSelect %336 %337 %108 
					                                         i32 %339 = OpBitcast %338 
					                                                      OpStore %331 %339 
					                                Private f32* %341 = OpAccessChain %9 %108 
					                                         f32 %342 = OpLoad %341 
					                                        bool %343 = OpFOrdLessThan %342 %332 
					                                         u32 %344 = OpSelect %343 %337 %108 
					                                         i32 %345 = OpBitcast %344 
					                                                      OpStore %340 %345 
					                                         i32 %346 = OpLoad %331 
					                                         i32 %347 = OpSNegate %346 
					                                         i32 %348 = OpLoad %340 
					                                         i32 %349 = OpIAdd %347 %348 
					                                                      OpStore %340 %349 
					                                         i32 %350 = OpLoad %340 
					                                         f32 %351 = OpConvertSToF %350 
					                                Private f32* %352 = OpAccessChain %9 %108 
					                                                      OpStore %352 %351 
					                                       f32_3 %353 = OpLoad %9 
					                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
					                                       f32_3 %355 = OpLoad %325 
					                                       f32_3 %356 = OpFMul %354 %355 
					                                                      OpStore %9 %356 
					                                       f32_3 %357 = OpLoad %9 
					                              Uniform f32_4* %358 = OpAccessChain %26 %66 %49 
					                                       f32_4 %359 = OpLoad %358 
					                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
					                                         f32 %361 = OpDot %357 %360 
					                                Private f32* %362 = OpAccessChain %70 %91 
					                                                      OpStore %362 %361 
					                                       f32_3 %363 = OpLoad %9 
					                              Uniform f32_4* %364 = OpAccessChain %26 %66 %44 
					                                       f32_4 %365 = OpLoad %364 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
					                                         f32 %367 = OpDot %363 %366 
					                                Private f32* %368 = OpAccessChain %70 %189 
					                                                      OpStore %368 %367 
					                                       f32_3 %369 = OpLoad %9 
					                              Uniform f32_4* %370 = OpAccessChain %26 %66 %43 
					                                       f32_4 %371 = OpLoad %370 
					                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
					                                         f32 %373 = OpDot %369 %372 
					                                Private f32* %374 = OpAccessChain %70 %108 
					                                                      OpStore %374 %373 
					                                       f32_4 %375 = OpLoad %70 
					                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
					                                       f32_4 %377 = OpLoad %70 
					                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
					                                         f32 %379 = OpDot %376 %378 
					                                Private f32* %380 = OpAccessChain %9 %108 
					                                                      OpStore %380 %379 
					                                Private f32* %381 = OpAccessChain %9 %108 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpExtInst %1 32 %382 
					                                Private f32* %384 = OpAccessChain %9 %108 
					                                                      OpStore %384 %383 
					                                       f32_3 %385 = OpLoad %9 
					                                       f32_3 %386 = OpVectorShuffle %385 %385 0 0 0 
					                                       f32_4 %387 = OpLoad %70 
					                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
					                                       f32_3 %389 = OpFMul %386 %388 
					                                                      OpStore %9 %389 
					                              Uniform f32_4* %390 = OpAccessChain %26 %43 %66 
					                                       f32_4 %391 = OpLoad %390 
					                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
					                                       f32_4 %393 = OpLoad %12 
					                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
					                                       f32_3 %395 = OpFMul %392 %394 
					                                       f32_4 %396 = OpLoad %40 
					                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
					                                       f32_3 %398 = OpFAdd %395 %397 
					                                                      OpStore %266 %398 
					                              Uniform f32_4* %399 = OpAccessChain %26 %43 %66 
					                                       f32_4 %400 = OpLoad %399 
					                                       f32_4 %401 = OpLoad %12 
					                                       f32_4 %402 = OpVectorShuffle %401 %401 3 3 3 3 
					                                       f32_4 %403 = OpFMul %400 %402 
					                                       f32_4 %404 = OpLoad %40 
					                                       f32_4 %405 = OpFAdd %403 %404 
					                                                      OpStore %40 %405 
					                                       f32_3 %406 = OpLoad %266 
					                                       f32_3 %407 = OpFNegate %406 
					                              Uniform f32_3* %408 = OpAccessChain %26 %49 
					                                       f32_3 %409 = OpLoad %408 
					                                       f32_3 %410 = OpFAdd %407 %409 
					                                       f32_4 %411 = OpLoad %70 
					                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
					                                                      OpStore %70 %412 
					                                       f32_3 %415 = OpLoad %266 
					                                                      OpStore vs_TEXCOORD5 %415 
					                                       f32_4 %416 = OpLoad %70 
					                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
					                                       f32_4 %418 = OpLoad %70 
					                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
					                                         f32 %420 = OpDot %417 %419 
					                                Private f32* %421 = OpAccessChain %266 %108 
					                                                      OpStore %421 %420 
					                                Private f32* %422 = OpAccessChain %266 %108 
					                                         f32 %423 = OpLoad %422 
					                                         f32 %424 = OpExtInst %1 32 %423 
					                                Private f32* %425 = OpAccessChain %266 %108 
					                                                      OpStore %425 %424 
					                                       f32_3 %426 = OpLoad %266 
					                                       f32_3 %427 = OpVectorShuffle %426 %426 0 0 0 
					                                       f32_4 %428 = OpLoad %70 
					                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
					                                       f32_3 %430 = OpFMul %427 %429 
					                                                      OpStore %266 %430 
					                                       f32_3 %431 = OpLoad %9 
					                                       f32_3 %432 = OpVectorShuffle %431 %431 1 2 0 
					                                       f32_3 %433 = OpLoad %266 
					                                         f32 %434 = OpDot %432 %433 
					                                Private f32* %435 = OpAccessChain %266 %108 
					                                                      OpStore %435 %434 
					                                Private f32* %437 = OpAccessChain %266 %108 
					                                         f32 %438 = OpLoad %437 
					                                         f32 %439 = OpExtInst %1 4 %438 
					                                         f32 %440 = OpLoad %106 
					                                         f32 %441 = OpFMul %439 %440 
					                                Private f32* %442 = OpAccessChain %64 %108 
					                                         f32 %443 = OpLoad %442 
					                                         f32 %444 = OpFAdd %441 %443 
					                                 Output f32* %446 = OpAccessChain vs_TEXCOORD6 %91 
					                                                      OpStore %446 %444 
					                                  Input f32* %449 = OpAccessChain %107 %91 
					                                         f32 %450 = OpLoad %449 
					                                        bool %451 = OpFOrdGreaterThanEqual %332 %450 
					                                                      OpStore %448 %451 
					                                        bool %452 = OpLoad %448 
					                                         f32 %453 = OpSelect %452 %271 %332 
					                                                      OpStore %106 %453 
					                                Uniform f32* %455 = OpAccessChain %26 %454 
					                                         f32 %456 = OpLoad %455 
					                                         f32 %457 = OpFNegate %456 
					                                Uniform f32* %459 = OpAccessChain %26 %458 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpFAdd %457 %460 
					                                Private f32* %462 = OpAccessChain %64 %108 
					                                                      OpStore %462 %461 
					                                         f32 %463 = OpLoad %106 
					                                Private f32* %464 = OpAccessChain %64 %108 
					                                         f32 %465 = OpLoad %464 
					                                         f32 %466 = OpFMul %463 %465 
					                                Uniform f32* %467 = OpAccessChain %26 %454 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFAdd %466 %468 
					                                                      OpStore %106 %469 
					                                         f32 %470 = OpLoad %106 
					                                         f32 %472 = OpFMul %470 %471 
					                                Uniform f32* %474 = OpAccessChain %26 %473 
					                                         f32 %475 = OpLoad %474 
					                                         f32 %476 = OpFAdd %472 %475 
					                                                      OpStore %106 %476 
					                                         f32 %477 = OpLoad %106 
					                                Uniform f32* %479 = OpAccessChain %26 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFMul %477 %480 
					                                                      OpStore %106 %481 
					                                         f32 %482 = OpLoad %106 
					                                         f32 %484 = OpFMul %482 %483 
					                                 Output f32* %485 = OpAccessChain vs_TEXCOORD6 %108 
					                                                      OpStore %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %91 
					                                         f32 %488 = OpLoad %487 
					                                 Output f32* %489 = OpAccessChain vs_TEXCOORD2 %189 
					                                                      OpStore %489 %488 
					                                       f32_4 %491 = OpLoad %490 
					                                       f32_3 %492 = OpVectorShuffle %491 %491 1 1 1 
					                              Uniform f32_4* %493 = OpAccessChain %26 %43 %44 
					                                       f32_4 %494 = OpLoad %493 
					                                       f32_3 %495 = OpVectorShuffle %494 %494 1 2 0 
					                                       f32_3 %496 = OpFMul %492 %495 
					                                       f32_4 %497 = OpLoad %64 
					                                       f32_4 %498 = OpVectorShuffle %497 %496 4 5 6 3 
					                                                      OpStore %64 %498 
					                              Uniform f32_4* %499 = OpAccessChain %26 %43 %49 
					                                       f32_4 %500 = OpLoad %499 
					                                       f32_3 %501 = OpVectorShuffle %500 %500 1 2 0 
					                                       f32_4 %502 = OpLoad %490 
					                                       f32_3 %503 = OpVectorShuffle %502 %502 0 0 0 
					                                       f32_3 %504 = OpFMul %501 %503 
					                                       f32_4 %505 = OpLoad %64 
					                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
					                                       f32_3 %507 = OpFAdd %504 %506 
					                                       f32_4 %508 = OpLoad %64 
					                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
					                                                      OpStore %64 %509 
					                              Uniform f32_4* %510 = OpAccessChain %26 %43 %43 
					                                       f32_4 %511 = OpLoad %510 
					                                       f32_3 %512 = OpVectorShuffle %511 %511 1 2 0 
					                                       f32_4 %513 = OpLoad %490 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 2 2 2 
					                                       f32_3 %515 = OpFMul %512 %514 
					                                       f32_4 %516 = OpLoad %64 
					                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
					                                       f32_3 %518 = OpFAdd %515 %517 
					                                       f32_4 %519 = OpLoad %64 
					                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
					                                                      OpStore %64 %520 
					                                       f32_4 %521 = OpLoad %64 
					                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
					                                       f32_4 %523 = OpLoad %64 
					                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
					                                         f32 %525 = OpDot %522 %524 
					                                                      OpStore %106 %525 
					                                         f32 %526 = OpLoad %106 
					                                         f32 %527 = OpExtInst %1 32 %526 
					                                                      OpStore %106 %527 
					                                         f32 %528 = OpLoad %106 
					                                       f32_3 %529 = OpCompositeConstruct %528 %528 %528 
					                                       f32_4 %530 = OpLoad %64 
					                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
					                                       f32_3 %532 = OpFMul %529 %531 
					                                       f32_4 %533 = OpLoad %64 
					                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
					                                                      OpStore %64 %534 
					                                       f32_3 %536 = OpLoad %9 
					                                       f32_4 %537 = OpLoad %64 
					                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 2 
					                                       f32_3 %539 = OpFMul %536 %538 
					                                                      OpStore %535 %539 
					                                       f32_3 %540 = OpLoad %9 
					                                       f32_3 %541 = OpVectorShuffle %540 %540 2 0 1 
					                                       f32_4 %542 = OpLoad %64 
					                                       f32_3 %543 = OpVectorShuffle %542 %542 1 2 0 
					                                       f32_3 %544 = OpFMul %541 %543 
					                                       f32_3 %545 = OpLoad %535 
					                                       f32_3 %546 = OpFNegate %545 
					                                       f32_3 %547 = OpFAdd %544 %546 
					                                                      OpStore %535 %547 
					                                  Input f32* %549 = OpAccessChain %490 %176 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %26 %551 %176 
					                                         f32 %553 = OpLoad %552 
					                                         f32 %554 = OpFMul %550 %553 
					                                                      OpStore %548 %554 
					                                         f32 %555 = OpLoad %548 
					                                       f32_3 %556 = OpCompositeConstruct %555 %555 %555 
					                                       f32_3 %557 = OpLoad %535 
					                                       f32_3 %558 = OpFMul %556 %557 
					                                                      OpStore %535 %558 
					                                Private f32* %559 = OpAccessChain %535 %108 
					                                         f32 %560 = OpLoad %559 
					                                 Output f32* %561 = OpAccessChain vs_TEXCOORD2 %91 
					                                                      OpStore %561 %560 
					                                Private f32* %562 = OpAccessChain %64 %189 
					                                         f32 %563 = OpLoad %562 
					                                 Output f32* %564 = OpAccessChain vs_TEXCOORD2 %108 
					                                                      OpStore %564 %563 
					                                Private f32* %566 = OpAccessChain %9 %189 
					                                         f32 %567 = OpLoad %566 
					                                 Output f32* %568 = OpAccessChain vs_TEXCOORD3 %189 
					                                                      OpStore %568 %567 
					                                Private f32* %570 = OpAccessChain %9 %108 
					                                         f32 %571 = OpLoad %570 
					                                 Output f32* %572 = OpAccessChain vs_TEXCOORD4 %189 
					                                                      OpStore %572 %571 
					                                Private f32* %573 = OpAccessChain %64 %108 
					                                         f32 %574 = OpLoad %573 
					                                 Output f32* %575 = OpAccessChain vs_TEXCOORD3 %108 
					                                                      OpStore %575 %574 
					                                Private f32* %576 = OpAccessChain %64 %91 
					                                         f32 %577 = OpLoad %576 
					                                 Output f32* %578 = OpAccessChain vs_TEXCOORD4 %108 
					                                                      OpStore %578 %577 
					                                Private f32* %579 = OpAccessChain %535 %91 
					                                         f32 %580 = OpLoad %579 
					                                 Output f32* %581 = OpAccessChain vs_TEXCOORD3 %91 
					                                                      OpStore %581 %580 
					                                Private f32* %582 = OpAccessChain %535 %189 
					                                         f32 %583 = OpLoad %582 
					                                 Output f32* %584 = OpAccessChain vs_TEXCOORD4 %91 
					                                                      OpStore %584 %583 
					                                       f32_4 %587 = OpLoad %586 
					                                                      OpStore %585 %587 
					                                       f32_4 %588 = OpLoad %70 
					                                       f32_3 %589 = OpVectorShuffle %588 %588 1 1 1 
					                              Uniform f32_4* %591 = OpAccessChain %26 %590 %44 
					                                       f32_4 %592 = OpLoad %591 
					                                       f32_3 %593 = OpVectorShuffle %592 %592 0 1 2 
					                                       f32_3 %594 = OpFMul %589 %593 
					                                                      OpStore %9 %594 
					                              Uniform f32_4* %595 = OpAccessChain %26 %590 %49 
					                                       f32_4 %596 = OpLoad %595 
					                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
					                                       f32_4 %598 = OpLoad %70 
					                                       f32_3 %599 = OpVectorShuffle %598 %598 0 0 0 
					                                       f32_3 %600 = OpFMul %597 %599 
					                                       f32_3 %601 = OpLoad %9 
					                                       f32_3 %602 = OpFAdd %600 %601 
					                                                      OpStore %9 %602 
					                              Uniform f32_4* %604 = OpAccessChain %26 %590 %43 
					                                       f32_4 %605 = OpLoad %604 
					                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 2 
					                                       f32_4 %607 = OpLoad %70 
					                                       f32_3 %608 = OpVectorShuffle %607 %607 2 2 2 
					                                       f32_3 %609 = OpFMul %606 %608 
					                                       f32_3 %610 = OpLoad %9 
					                                       f32_3 %611 = OpFAdd %609 %610 
					                                                      OpStore vs_TEXCOORD7 %611 
					                                       f32_4 %612 = OpLoad %40 
					                                       f32_2 %613 = OpVectorShuffle %612 %612 1 1 
					                              Uniform f32_4* %615 = OpAccessChain %26 %614 %44 
					                                       f32_4 %616 = OpLoad %615 
					                                       f32_2 %617 = OpVectorShuffle %616 %616 0 1 
					                                       f32_2 %618 = OpFMul %613 %617 
					                                       f32_3 %619 = OpLoad %9 
					                                       f32_3 %620 = OpVectorShuffle %619 %618 3 4 2 
					                                                      OpStore %9 %620 
					                              Uniform f32_4* %621 = OpAccessChain %26 %614 %49 
					                                       f32_4 %622 = OpLoad %621 
					                                       f32_2 %623 = OpVectorShuffle %622 %622 0 1 
					                                       f32_4 %624 = OpLoad %40 
					                                       f32_2 %625 = OpVectorShuffle %624 %624 0 0 
					                                       f32_2 %626 = OpFMul %623 %625 
					                                       f32_3 %627 = OpLoad %9 
					                                       f32_2 %628 = OpVectorShuffle %627 %627 0 1 
					                                       f32_2 %629 = OpFAdd %626 %628 
					                                       f32_3 %630 = OpLoad %9 
					                                       f32_3 %631 = OpVectorShuffle %630 %629 3 4 2 
					                                                      OpStore %9 %631 
					                              Uniform f32_4* %632 = OpAccessChain %26 %614 %43 
					                                       f32_4 %633 = OpLoad %632 
					                                       f32_2 %634 = OpVectorShuffle %633 %633 0 1 
					                                       f32_4 %635 = OpLoad %40 
					                                       f32_2 %636 = OpVectorShuffle %635 %635 2 2 
					                                       f32_2 %637 = OpFMul %634 %636 
					                                       f32_3 %638 = OpLoad %9 
					                                       f32_2 %639 = OpVectorShuffle %638 %638 0 1 
					                                       f32_2 %640 = OpFAdd %637 %639 
					                                       f32_3 %641 = OpLoad %9 
					                                       f32_3 %642 = OpVectorShuffle %641 %640 3 4 2 
					                                                      OpStore %9 %642 
					                              Uniform f32_4* %644 = OpAccessChain %26 %614 %66 
					                                       f32_4 %645 = OpLoad %644 
					                                       f32_2 %646 = OpVectorShuffle %645 %645 0 1 
					                                       f32_4 %647 = OpLoad %40 
					                                       f32_2 %648 = OpVectorShuffle %647 %647 3 3 
					                                       f32_2 %649 = OpFMul %646 %648 
					                                       f32_3 %650 = OpLoad %9 
					                                       f32_2 %651 = OpVectorShuffle %650 %650 0 1 
					                                       f32_2 %652 = OpFAdd %649 %651 
					                                                      OpStore vs_TEXCOORD8 %652 
					                                 Output f32* %653 = OpAccessChain %95 %49 %91 
					                                         f32 %654 = OpLoad %653 
					                                         f32 %655 = OpFNegate %654 
					                                 Output f32* %656 = OpAccessChain %95 %49 %91 
					                                                      OpStore %656 %655 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 902
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Fragment %4 "main" %12 %53 %401 %421 %678 %685 %692 %715 %879 
					                                                      OpExecutionMode %4 OriginUpperLeft 
					                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
					                                                      OpDecorate vs_TEXCOORD6 Location 12 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpMemberDecorate %21 0 Offset 21 
					                                                      OpMemberDecorate %21 1 Offset 21 
					                                                      OpMemberDecorate %21 2 RelaxedPrecision 
					                                                      OpMemberDecorate %21 2 Offset 21 
					                                                      OpMemberDecorate %21 3 RelaxedPrecision 
					                                                      OpMemberDecorate %21 3 Offset 21 
					                                                      OpMemberDecorate %21 4 RelaxedPrecision 
					                                                      OpMemberDecorate %21 4 Offset 21 
					                                                      OpMemberDecorate %21 5 Offset 21 
					                                                      OpMemberDecorate %21 6 Offset 21 
					                                                      OpMemberDecorate %21 7 Offset 21 
					                                                      OpMemberDecorate %21 8 RelaxedPrecision 
					                                                      OpMemberDecorate %21 8 Offset 21 
					                                                      OpMemberDecorate %21 9 Offset 21 
					                                                      OpMemberDecorate %21 10 Offset 21 
					                                                      OpMemberDecorate %21 11 Offset 21 
					                                                      OpMemberDecorate %21 12 RelaxedPrecision 
					                                                      OpMemberDecorate %21 12 Offset 21 
					                                                      OpMemberDecorate %21 13 Offset 21 
					                                                      OpMemberDecorate %21 14 Offset 21 
					                                                      OpMemberDecorate %21 15 Offset 21 
					                                                      OpMemberDecorate %21 16 Offset 21 
					                                                      OpMemberDecorate %21 17 Offset 21 
					                                                      OpMemberDecorate %21 18 Offset 21 
					                                                      OpMemberDecorate %21 19 Offset 21 
					                                                      OpMemberDecorate %21 20 Offset 21 
					                                                      OpMemberDecorate %21 21 Offset 21 
					                                                      OpMemberDecorate %21 22 Offset 21 
					                                                      OpMemberDecorate %21 23 Offset 21 
					                                                      OpMemberDecorate %21 24 Offset 21 
					                                                      OpMemberDecorate %21 25 Offset 21 
					                                                      OpMemberDecorate %21 26 RelaxedPrecision 
					                                                      OpMemberDecorate %21 26 Offset 21 
					                                                      OpMemberDecorate %21 27 RelaxedPrecision 
					                                                      OpMemberDecorate %21 27 Offset 21 
					                                                      OpDecorate %21 Block 
					                                                      OpDecorate %23 DescriptorSet 23 
					                                                      OpDecorate %23 Binding 23 
					                                                      OpDecorate vs_TEXCOORD0 Location 53 
					                                                      OpDecorate %65 RelaxedPrecision 
					                                                      OpDecorate %65 DescriptorSet 65 
					                                                      OpDecorate %65 Binding 65 
					                                                      OpDecorate %66 RelaxedPrecision 
					                                                      OpDecorate %69 RelaxedPrecision 
					                                                      OpDecorate %69 DescriptorSet 69 
					                                                      OpDecorate %69 Binding 69 
					                                                      OpDecorate %70 RelaxedPrecision 
					                                                      OpDecorate %79 RelaxedPrecision 
					                                                      OpDecorate %80 RelaxedPrecision 
					                                                      OpDecorate %87 RelaxedPrecision 
					                                                      OpDecorate %88 RelaxedPrecision 
					                                                      OpDecorate %96 RelaxedPrecision 
					                                                      OpDecorate %97 RelaxedPrecision 
					                                                      OpDecorate %326 RelaxedPrecision 
					                                                      OpDecorate %327 RelaxedPrecision 
					                                                      OpDecorate %328 RelaxedPrecision 
					                                                      OpDecorate %333 RelaxedPrecision 
					                                                      OpDecorate %334 RelaxedPrecision 
					                                                      OpDecorate %335 RelaxedPrecision 
					                                                      OpDecorate %336 RelaxedPrecision 
					                                                      OpDecorate %337 RelaxedPrecision 
					                                                      OpDecorate %338 RelaxedPrecision 
					                                                      OpDecorate %361 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %373 RelaxedPrecision 
					                                                      OpDecorate %379 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %383 RelaxedPrecision 
					                                                      OpDecorate %385 RelaxedPrecision 
					                                                      OpDecorate %386 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 401 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %405 DescriptorSet 405 
					                                                      OpDecorate %405 Binding 405 
					                                                      OpDecorate %406 RelaxedPrecision 
					                                                      OpDecorate %407 RelaxedPrecision 
					                                                      OpDecorate %407 DescriptorSet 407 
					                                                      OpDecorate %407 Binding 407 
					                                                      OpDecorate %408 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %413 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %417 RelaxedPrecision 
					                                                      OpDecorate %418 RelaxedPrecision 
					                                                      OpDecorate %419 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %421 RelaxedPrecision 
					                                                      OpDecorate %421 Location 421 
					                                                      OpDecorate %423 RelaxedPrecision 
					                                                      OpDecorate %425 RelaxedPrecision 
					                                                      OpDecorate %426 RelaxedPrecision 
					                                                      OpDecorate %428 RelaxedPrecision 
					                                                      OpDecorate %430 RelaxedPrecision 
					                                                      OpDecorate %432 RelaxedPrecision 
					                                                      OpDecorate %433 RelaxedPrecision 
					                                                      OpDecorate %450 RelaxedPrecision 
					                                                      OpDecorate %451 RelaxedPrecision 
					                                                      OpDecorate %451 DescriptorSet 451 
					                                                      OpDecorate %451 Binding 451 
					                                                      OpDecorate %452 RelaxedPrecision 
					                                                      OpDecorate %453 RelaxedPrecision 
					                                                      OpDecorate %453 DescriptorSet 453 
					                                                      OpDecorate %453 Binding 453 
					                                                      OpDecorate %454 RelaxedPrecision 
					                                                      OpDecorate %459 RelaxedPrecision 
					                                                      OpDecorate %460 RelaxedPrecision 
					                                                      OpDecorate %463 RelaxedPrecision 
					                                                      OpDecorate %464 RelaxedPrecision 
					                                                      OpDecorate %465 RelaxedPrecision 
					                                                      OpDecorate %466 RelaxedPrecision 
					                                                      OpDecorate %467 RelaxedPrecision 
					                                                      OpDecorate %468 RelaxedPrecision 
					                                                      OpDecorate %469 RelaxedPrecision 
					                                                      OpDecorate %470 RelaxedPrecision 
					                                                      OpDecorate %471 RelaxedPrecision 
					                                                      OpDecorate %472 RelaxedPrecision 
					                                                      OpDecorate %473 RelaxedPrecision 
					                                                      OpDecorate %474 RelaxedPrecision 
					                                                      OpDecorate %475 RelaxedPrecision 
					                                                      OpDecorate %476 RelaxedPrecision 
					                                                      OpDecorate %477 RelaxedPrecision 
					                                                      OpDecorate %478 RelaxedPrecision 
					                                                      OpDecorate %479 RelaxedPrecision 
					                                                      OpDecorate %480 RelaxedPrecision 
					                                                      OpDecorate %481 RelaxedPrecision 
					                                                      OpDecorate %485 RelaxedPrecision 
					                                                      OpDecorate %487 RelaxedPrecision 
					                                                      OpDecorate %488 RelaxedPrecision 
					                                                      OpDecorate %490 RelaxedPrecision 
					                                                      OpDecorate %491 RelaxedPrecision 
					                                                      OpDecorate %492 RelaxedPrecision 
					                                                      OpDecorate %494 RelaxedPrecision 
					                                                      OpDecorate %495 RelaxedPrecision 
					                                                      OpDecorate %496 RelaxedPrecision 
					                                                      OpDecorate %497 RelaxedPrecision 
					                                                      OpDecorate %498 RelaxedPrecision 
					                                                      OpDecorate %500 RelaxedPrecision 
					                                                      OpDecorate %502 RelaxedPrecision 
					                                                      OpDecorate %503 RelaxedPrecision 
					                                                      OpDecorate %505 RelaxedPrecision 
					                                                      OpDecorate %506 RelaxedPrecision 
					                                                      OpDecorate %508 RelaxedPrecision 
					                                                      OpDecorate %509 RelaxedPrecision 
					                                                      OpDecorate %510 RelaxedPrecision 
					                                                      OpDecorate %511 RelaxedPrecision 
					                                                      OpDecorate %512 RelaxedPrecision 
					                                                      OpDecorate %513 RelaxedPrecision 
					                                                      OpDecorate %514 RelaxedPrecision 
					                                                      OpDecorate %515 RelaxedPrecision 
					                                                      OpDecorate %556 RelaxedPrecision 
					                                                      OpDecorate %560 RelaxedPrecision 
					                                                      OpDecorate %562 RelaxedPrecision 
					                                                      OpDecorate %563 RelaxedPrecision 
					                                                      OpDecorate %566 RelaxedPrecision 
					                                                      OpDecorate %567 RelaxedPrecision 
					                                                      OpDecorate %570 RelaxedPrecision 
					                                                      OpDecorate %571 RelaxedPrecision 
					                                                      OpDecorate %572 RelaxedPrecision 
					                                                      OpDecorate %574 RelaxedPrecision 
					                                                      OpDecorate %575 RelaxedPrecision 
					                                                      OpDecorate %576 RelaxedPrecision 
					                                                      OpDecorate %577 RelaxedPrecision 
					                                                      OpDecorate %578 RelaxedPrecision 
					                                                      OpDecorate %597 RelaxedPrecision 
					                                                      OpDecorate %598 RelaxedPrecision 
					                                                      OpDecorate %598 DescriptorSet 598 
					                                                      OpDecorate %598 Binding 598 
					                                                      OpDecorate %599 RelaxedPrecision 
					                                                      OpDecorate %600 RelaxedPrecision 
					                                                      OpDecorate %600 DescriptorSet 600 
					                                                      OpDecorate %600 Binding 600 
					                                                      OpDecorate %601 RelaxedPrecision 
					                                                      OpDecorate %606 RelaxedPrecision 
					                                                      OpDecorate %607 RelaxedPrecision 
					                                                      OpDecorate %608 RelaxedPrecision 
					                                                      OpDecorate %609 RelaxedPrecision 
					                                                      OpDecorate %610 RelaxedPrecision 
					                                                      OpDecorate %611 RelaxedPrecision 
					                                                      OpDecorate %614 RelaxedPrecision 
					                                                      OpDecorate %616 RelaxedPrecision 
					                                                      OpDecorate %617 RelaxedPrecision 
					                                                      OpDecorate %619 RelaxedPrecision 
					                                                      OpDecorate %620 RelaxedPrecision 
					                                                      OpDecorate %622 RelaxedPrecision 
					                                                      OpDecorate %625 RelaxedPrecision 
					                                                      OpDecorate %626 RelaxedPrecision 
					                                                      OpDecorate %627 RelaxedPrecision 
					                                                      OpDecorate %628 RelaxedPrecision 
					                                                      OpDecorate %629 RelaxedPrecision 
					                                                      OpDecorate %630 RelaxedPrecision 
					                                                      OpDecorate %631 RelaxedPrecision 
					                                                      OpDecorate %632 RelaxedPrecision 
					                                                      OpDecorate %633 RelaxedPrecision 
					                                                      OpDecorate %634 RelaxedPrecision 
					                                                      OpDecorate %635 RelaxedPrecision 
					                                                      OpDecorate %636 RelaxedPrecision 
					                                                      OpDecorate %637 RelaxedPrecision 
					                                                      OpDecorate %639 RelaxedPrecision 
					                                                      OpDecorate %640 RelaxedPrecision 
					                                                      OpDecorate %647 RelaxedPrecision 
					                                                      OpDecorate %648 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 678 
					                                                      OpDecorate vs_TEXCOORD3 Location 685 
					                                                      OpDecorate vs_TEXCOORD4 Location 692 
					                                                      OpDecorate %699 RelaxedPrecision 
					                                                      OpDecorate %700 RelaxedPrecision 
					                                                      OpDecorate %701 RelaxedPrecision 
					                                                      OpDecorate %702 RelaxedPrecision 
					                                                      OpDecorate %703 RelaxedPrecision 
					                                                      OpDecorate %704 RelaxedPrecision 
					                                                      OpDecorate %707 RelaxedPrecision 
					                                                      OpDecorate %708 RelaxedPrecision 
					                                                      OpDecorate %710 RelaxedPrecision 
					                                                      OpDecorate %711 RelaxedPrecision 
					                                                      OpDecorate %712 RelaxedPrecision 
					                                                      OpDecorate %713 RelaxedPrecision 
					                                                      OpDecorate %714 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD5 Location 715 
					                                                      OpDecorate %735 RelaxedPrecision 
					                                                      OpDecorate %736 RelaxedPrecision 
					                                                      OpDecorate %740 RelaxedPrecision 
					                                                      OpDecorate %741 RelaxedPrecision 
					                                                      OpDecorate %742 RelaxedPrecision 
					                                                      OpDecorate %743 RelaxedPrecision 
					                                                      OpDecorate %744 RelaxedPrecision 
					                                                      OpDecorate %745 RelaxedPrecision 
					                                                      OpDecorate %746 RelaxedPrecision 
					                                                      OpDecorate %747 RelaxedPrecision 
					                                                      OpDecorate %748 RelaxedPrecision 
					                                                      OpDecorate %749 RelaxedPrecision 
					                                                      OpDecorate %750 RelaxedPrecision 
					                                                      OpDecorate %751 RelaxedPrecision 
					                                                      OpDecorate %754 RelaxedPrecision 
					                                                      OpDecorate %755 RelaxedPrecision 
					                                                      OpDecorate %756 RelaxedPrecision 
					                                                      OpDecorate %757 RelaxedPrecision 
					                                                      OpDecorate %759 RelaxedPrecision 
					                                                      OpDecorate %761 RelaxedPrecision 
					                                                      OpDecorate %762 RelaxedPrecision 
					                                                      OpDecorate %763 RelaxedPrecision 
					                                                      OpDecorate %765 RelaxedPrecision 
					                                                      OpDecorate %766 RelaxedPrecision 
					                                                      OpDecorate %768 RelaxedPrecision 
					                                                      OpDecorate %772 RelaxedPrecision 
					                                                      OpDecorate %773 RelaxedPrecision 
					                                                      OpDecorate %775 RelaxedPrecision 
					                                                      OpDecorate %778 RelaxedPrecision 
					                                                      OpDecorate %779 RelaxedPrecision 
					                                                      OpDecorate %782 RelaxedPrecision 
					                                                      OpDecorate %783 RelaxedPrecision 
					                                                      OpDecorate %786 RelaxedPrecision 
					                                                      OpDecorate %789 RelaxedPrecision 
					                                                      OpDecorate %798 RelaxedPrecision 
					                                                      OpDecorate %800 RelaxedPrecision 
					                                                      OpDecorate %801 RelaxedPrecision 
					                                                      OpDecorate %804 RelaxedPrecision 
					                                                      OpDecorate %805 RelaxedPrecision 
					                                                      OpDecorate %836 DescriptorSet 836 
					                                                      OpDecorate %836 Binding 836 
					                                                      OpDecorate %838 DescriptorSet 838 
					                                                      OpDecorate %838 Binding 838 
					                                                      OpDecorate %848 RelaxedPrecision 
					                                                      OpDecorate %849 RelaxedPrecision 
					                                                      OpDecorate %853 RelaxedPrecision 
					                                                      OpDecorate %854 RelaxedPrecision 
					                                                      OpDecorate %857 RelaxedPrecision 
					                                                      OpDecorate %858 RelaxedPrecision 
					                                                      OpDecorate %859 RelaxedPrecision 
					                                                      OpDecorate %862 RelaxedPrecision 
					                                                      OpDecorate %863 RelaxedPrecision 
					                                                      OpDecorate %864 RelaxedPrecision 
					                                                      OpDecorate %865 RelaxedPrecision 
					                                                      OpDecorate %866 RelaxedPrecision 
					                                                      OpDecorate %868 RelaxedPrecision 
					                                                      OpDecorate %870 RelaxedPrecision 
					                                                      OpDecorate %871 RelaxedPrecision 
					                                                      OpDecorate %872 RelaxedPrecision 
					                                                      OpDecorate %873 RelaxedPrecision 
					                                                      OpDecorate %874 RelaxedPrecision 
					                                                      OpDecorate %875 RelaxedPrecision 
					                                                      OpDecorate %879 RelaxedPrecision 
					                                                      OpDecorate %879 Location 879 
					                                                      OpDecorate %881 RelaxedPrecision 
					                                                      OpDecorate %884 RelaxedPrecision 
					                                                      OpDecorate %885 RelaxedPrecision 
					                                                      OpDecorate %886 RelaxedPrecision 
					                                                      OpDecorate %887 RelaxedPrecision 
					                                                      OpDecorate %888 RelaxedPrecision 
					                                                      OpDecorate %891 RelaxedPrecision 
					                                                      OpDecorate %892 RelaxedPrecision 
					                                                      OpDecorate %893 RelaxedPrecision 
					                                                      OpDecorate %894 RelaxedPrecision 
					                                                      OpDecorate %895 RelaxedPrecision 
					                                                      OpDecorate %896 RelaxedPrecision 
					                                                      OpDecorate %897 RelaxedPrecision 
					                                                      OpDecorate %898 RelaxedPrecision 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 2 
					                                              %11 = OpTypePointer Input %10 
					                        Input f32_2* vs_TEXCOORD6 = OpVariable Input 
					                                              %13 = OpTypeInt 32 0 
					                                          u32 %14 = OpConstant 0 
					                                              %15 = OpTypePointer Input %6 
					                                              %18 = OpTypeVector %6 3 
					                                          u32 %19 = OpConstant 4 
					                                              %20 = OpTypeArray %7 %19 
					                                              %21 = OpTypeStruct %7 %18 %7 %7 %7 %20 %6 %6 %7 %6 %6 %6 %7 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %22 = OpTypePointer Uniform %21 
					Uniform struct {f32_4; f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32; f32; f32_4; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %23 = OpVariable Uniform 
					                                              %24 = OpTypeInt 32 1 
					                                          i32 %25 = OpConstant 15 
					                                              %26 = OpTypePointer Uniform %6 
					                                              %30 = OpTypePointer Private %6 
					                               Private f32_4* %32 = OpVariable Private 
					                                          f32 %33 = OpConstant 3,674022E-40 
					                                        f32_2 %34 = OpConstantComposite %33 %33 
					                                          i32 %35 = OpConstant 23 
					                                          i32 %38 = OpConstant 24 
					                                          f32 %45 = OpConstant 3,674022E-40 
					                                          u32 %46 = OpConstant 2 
					                               Private f32_4* %48 = OpVariable Private 
					                                              %52 = OpTypePointer Input %7 
					                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                               Private f32_4* %62 = OpVariable Private 
					                                              %63 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                              %64 = OpTypePointer UniformConstant %63 
					         UniformConstant read_only Texture2D* %65 = OpVariable UniformConstant 
					                                              %67 = OpTypeSampler 
					                                              %68 = OpTypePointer UniformConstant %67 
					                     UniformConstant sampler* %69 = OpVariable UniformConstant 
					                                              %71 = OpTypeSampledImage %63 
					                                          u32 %76 = OpConstant 3 
					                                          u32 %94 = OpConstant 1 
					                                         f32 %109 = OpConstant 3,674022E-40 
					                                       f32_4 %110 = OpConstantComposite %109 %109 %109 %109 
					                                         i32 %112 = OpConstant 16 
					                                         i32 %115 = OpConstant 13 
					                                         f32 %122 = OpConstant 3,674022E-40 
					                                         i32 %131 = OpConstant 14 
					                                         i32 %138 = OpConstant 25 
					                                         f32 %145 = OpConstant 3,674022E-40 
					                                         f32 %149 = OpConstant 3,674022E-40 
					                                       f32_4 %150 = OpConstantComposite %149 %149 %149 %149 
					                                         f32 %157 = OpConstant 3,674022E-40 
					                                       f32_4 %158 = OpConstantComposite %157 %157 %157 %157 
					                                         f32 %160 = OpConstant 3,674022E-40 
					                                       f32_4 %161 = OpConstantComposite %160 %160 %160 %160 
					                                       f32_4 %166 = OpConstantComposite %33 %33 %33 %33 
					                                             %168 = OpTypePointer Private %10 
					                              Private f32_2* %169 = OpVariable Private 
					                                         i32 %170 = OpConstant 21 
					                                             %175 = OpTypeBool 
					                                             %176 = OpTypePointer Private %175 
					                               Private bool* %177 = OpVariable Private 
					                                             %190 = OpTypePointer Function %6 
					                               Private bool* %202 = OpVariable Private 
					                                             %209 = OpTypeVector %175 4 
					                                         f32 %213 = OpConstant 3,674022E-40 
					                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
					                                         i32 %222 = OpConstant 18 
					                                         i32 %241 = OpConstant 17 
					                                Private f32* %281 = OpVariable Private 
					                                       f32_2 %296 = OpConstantComposite %33 %45 
					                                Private f32* %326 = OpVariable Private 
					                                Private f32* %334 = OpVariable Private 
					                                         i32 %350 = OpConstant 22 
					                              Private f32_4* %361 = OpVariable Private 
					                                             %372 = OpTypePointer Private %18 
					                              Private f32_3* %373 = OpVariable Private 
					                                         i32 %388 = OpConstant 10 
					                                         i32 %391 = OpConstant 11 
					                                         i32 %395 = OpConstant 0 
					                                             %396 = OpTypePointer Uniform %7 
					                        Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                              Private f32_4* %404 = OpVariable Private 
					        UniformConstant read_only Texture2D* %405 = OpVariable UniformConstant 
					                    UniformConstant sampler* %407 = OpVariable UniformConstant 
					                              Private f32_3* %412 = OpVariable Private 
					                                         i32 %415 = OpConstant 12 
					                              Private f32_4* %420 = OpVariable Private 
					                                Input f32_4* %421 = OpVariable Input 
					                                Private f32* %428 = OpVariable Private 
					                                         i32 %434 = OpConstant 6 
					                                         i32 %437 = OpConstant 7 
					                              Private f32_4* %450 = OpVariable Private 
					        UniformConstant read_only Texture2D* %451 = OpVariable UniformConstant 
					                    UniformConstant sampler* %453 = OpVariable UniformConstant 
					                              Private f32_4* %459 = OpVariable Private 
					                                         i32 %461 = OpConstant 8 
					                              Private f32_4* %465 = OpVariable Private 
					                              Private f32_4* %474 = OpVariable Private 
					                              Private f32_4* %498 = OpVariable Private 
					                                         i32 %532 = OpConstant 9 
					                              Private f32_4* %574 = OpVariable Private 
					                              Private f32_3* %579 = OpVariable Private 
					                                         i32 %580 = OpConstant 20 
					                                         i32 %584 = OpConstant 19 
					                              Private f32_3* %597 = OpVariable Private 
					        UniformConstant read_only Texture2D* %598 = OpVariable UniformConstant 
					                    UniformConstant sampler* %600 = OpVariable UniformConstant 
					                                       f32_2 %621 = OpConstantComposite %160 %160 
					                                Private f32* %625 = OpVariable Private 
					                                         f32 %644 = OpConstant 3,674022E-40 
					                                       f32_3 %645 = OpConstantComposite %644 %644 %160 
					                                       f32_3 %651 = OpConstantComposite %45 %45 %33 
					                                             %677 = OpTypePointer Input %18 
					                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
					                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
					                              Private f32_3* %699 = OpVariable Private 
					                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
					                                         i32 %718 = OpConstant 1 
					                                             %719 = OpTypePointer Uniform %18 
					                                Private f32* %723 = OpVariable Private 
					                                         i32 %733 = OpConstant 2 
					                                       f32_2 %767 = OpConstantComposite %45 %45 
					                                Private f32* %775 = OpVariable Private 
					                                         i32 %776 = OpConstant 26 
					                                         i32 %780 = OpConstant 27 
					                              Private f32_2* %784 = OpVariable Private 
					                                         f32 %794 = OpConstant 3,674022E-40 
					                                         i32 %809 = OpConstant 5 
					                                         i32 %831 = OpConstant 3 
					        UniformConstant read_only Texture2D* %836 = OpVariable UniformConstant 
					                    UniformConstant sampler* %838 = OpVariable UniformConstant 
					                                         i32 %855 = OpConstant 4 
					                                         f32 %869 = OpConstant 3,674022E-40 
					                                             %878 = OpTypePointer Output %7 
					                               Output f32_4* %879 = OpVariable Output 
					                                             %882 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %191 = OpVariable Function 
					                                   Input f32* %16 = OpAccessChain vs_TEXCOORD6 %14 
					                                          f32 %17 = OpLoad %16 
					                                 Uniform f32* %27 = OpAccessChain %23 %25 
					                                          f32 %28 = OpLoad %27 
					                                          f32 %29 = OpFAdd %17 %28 
					                                 Private f32* %31 = OpAccessChain %9 %14 
					                                                      OpStore %31 %29 
					                                 Uniform f32* %36 = OpAccessChain %23 %35 
					                                          f32 %37 = OpLoad %36 
					                                 Uniform f32* %39 = OpAccessChain %23 %38 
					                                          f32 %40 = OpLoad %39 
					                                        f32_2 %41 = OpCompositeConstruct %37 %40 
					                                        f32_2 %42 = OpFDiv %34 %41 
					                                        f32_4 %43 = OpLoad %32 
					                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 2 3 
					                                                      OpStore %32 %44 
					                                 Private f32* %47 = OpAccessChain %32 %46 
					                                                      OpStore %47 %45 
					                                        f32_4 %49 = OpLoad %32 
					                                        f32_4 %50 = OpVectorShuffle %49 %49 0 2 2 1 
					                                        f32_4 %51 = OpFNegate %50 
					                                        f32_4 %54 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %55 = OpVectorShuffle %54 %54 0 1 0 1 
					                                        f32_4 %56 = OpFAdd %51 %55 
					                                                      OpStore %48 %56 
					                                        f32_4 %57 = OpLoad %32 
					                                        f32_4 %58 = OpVectorShuffle %57 %57 0 2 2 1 
					                                        f32_4 %59 = OpLoad vs_TEXCOORD0 
					                                        f32_4 %60 = OpVectorShuffle %59 %59 0 1 0 1 
					                                        f32_4 %61 = OpFAdd %58 %60 
					                                                      OpStore %32 %61 
					                          read_only Texture2D %66 = OpLoad %65 
					                                      sampler %70 = OpLoad %69 
					                   read_only Texture2DSampled %72 = OpSampledImage %66 %70 
					                                        f32_4 %73 = OpLoad %48 
					                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                                        f32_4 %75 = OpImageSampleImplicitLod %72 %74 
					                                          f32 %77 = OpCompositeExtract %75 3 
					                                 Private f32* %78 = OpAccessChain %62 %14 
					                                                      OpStore %78 %77 
					                          read_only Texture2D %79 = OpLoad %65 
					                                      sampler %80 = OpLoad %69 
					                   read_only Texture2DSampled %81 = OpSampledImage %79 %80 
					                                        f32_4 %82 = OpLoad %48 
					                                        f32_2 %83 = OpVectorShuffle %82 %82 2 3 
					                                        f32_4 %84 = OpImageSampleImplicitLod %81 %83 
					                                          f32 %85 = OpCompositeExtract %84 3 
					                                 Private f32* %86 = OpAccessChain %62 %46 
					                                                      OpStore %86 %85 
					                          read_only Texture2D %87 = OpLoad %65 
					                                      sampler %88 = OpLoad %69 
					                   read_only Texture2DSampled %89 = OpSampledImage %87 %88 
					                                        f32_4 %90 = OpLoad %32 
					                                        f32_2 %91 = OpVectorShuffle %90 %90 0 1 
					                                        f32_4 %92 = OpImageSampleImplicitLod %89 %91 
					                                          f32 %93 = OpCompositeExtract %92 3 
					                                 Private f32* %95 = OpAccessChain %62 %94 
					                                                      OpStore %95 %93 
					                          read_only Texture2D %96 = OpLoad %65 
					                                      sampler %97 = OpLoad %69 
					                   read_only Texture2DSampled %98 = OpSampledImage %96 %97 
					                                        f32_4 %99 = OpLoad %32 
					                                       f32_2 %100 = OpVectorShuffle %99 %99 2 3 
					                                       f32_4 %101 = OpImageSampleImplicitLod %98 %100 
					                                         f32 %102 = OpCompositeExtract %101 3 
					                                Private f32* %103 = OpAccessChain %62 %76 
					                                                      OpStore %103 %102 
					                                       f32_4 %104 = OpLoad %9 
					                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
					                                       f32_4 %106 = OpLoad %62 
					                                       f32_4 %107 = OpFAdd %105 %106 
					                                                      OpStore %9 %107 
					                                       f32_4 %108 = OpLoad %9 
					                                       f32_4 %111 = OpFAdd %108 %110 
					                                                      OpStore %9 %111 
					                                Uniform f32* %113 = OpAccessChain %23 %112 
					                                         f32 %114 = OpLoad %113 
					                                Uniform f32* %116 = OpAccessChain %23 %115 
					                                         f32 %117 = OpLoad %116 
					                                         f32 %118 = OpFAdd %114 %117 
					                                Private f32* %119 = OpAccessChain %32 %14 
					                                                      OpStore %119 %118 
					                                Private f32* %120 = OpAccessChain %32 %14 
					                                         f32 %121 = OpLoad %120 
					                                         f32 %123 = OpExtInst %1 40 %121 %122 
					                                Private f32* %124 = OpAccessChain %32 %14 
					                                                      OpStore %124 %123 
					                                       f32_4 %125 = OpLoad %9 
					                                       f32_4 %126 = OpLoad %32 
					                                       f32_4 %127 = OpVectorShuffle %126 %126 0 0 0 0 
					                                       f32_4 %128 = OpFDiv %125 %127 
					                                                      OpStore %9 %128 
					                                Private f32* %129 = OpAccessChain %32 %14 
					                                         f32 %130 = OpLoad %129 
					                                Uniform f32* %132 = OpAccessChain %23 %131 
					                                         f32 %133 = OpLoad %132 
					                                         f32 %134 = OpFMul %130 %133 
					                                Private f32* %135 = OpAccessChain %32 %14 
					                                                      OpStore %135 %134 
					                                Private f32* %136 = OpAccessChain %32 %14 
					                                         f32 %137 = OpLoad %136 
					                                Uniform f32* %139 = OpAccessChain %23 %138 
					                                         f32 %140 = OpLoad %139 
					                                         f32 %141 = OpFMul %137 %140 
					                                Private f32* %142 = OpAccessChain %32 %14 
					                                                      OpStore %142 %141 
					                                Private f32* %143 = OpAccessChain %32 %14 
					                                         f32 %144 = OpLoad %143 
					                                         f32 %146 = OpFMul %144 %145 
					                                Private f32* %147 = OpAccessChain %32 %14 
					                                                      OpStore %147 %146 
					                                       f32_4 %148 = OpLoad %9 
					                                       f32_4 %151 = OpFAdd %148 %150 
					                                                      OpStore %9 %151 
					                                       f32_4 %152 = OpLoad %9 
					                                       f32_4 %153 = OpCompositeConstruct %45 %45 %45 %45 
					                                       f32_4 %154 = OpCompositeConstruct %33 %33 %33 %33 
					                                       f32_4 %155 = OpExtInst %1 43 %152 %153 %154 
					                                                      OpStore %9 %155 
					                                       f32_4 %156 = OpLoad %9 
					                                       f32_4 %159 = OpFMul %156 %158 
					                                       f32_4 %162 = OpFAdd %159 %161 
					                                                      OpStore %48 %162 
					                                       f32_4 %163 = OpLoad %48 
					                                       f32_4 %164 = OpExtInst %1 4 %163 
					                                       f32_4 %165 = OpFNegate %164 
					                                       f32_4 %167 = OpFAdd %165 %166 
					                                                      OpStore %48 %167 
					                                Uniform f32* %171 = OpAccessChain %23 %170 
					                                         f32 %172 = OpLoad %171 
					                                         f32 %173 = OpFMul %172 %149 
					                                Private f32* %174 = OpAccessChain %169 %14 
					                                                      OpStore %174 %173 
					                                Private f32* %178 = OpAccessChain %169 %14 
					                                         f32 %179 = OpLoad %178 
					                                Private f32* %180 = OpAccessChain %169 %14 
					                                         f32 %181 = OpLoad %180 
					                                         f32 %182 = OpFNegate %181 
					                                        bool %183 = OpFOrdGreaterThanEqual %179 %182 
					                                                      OpStore %177 %183 
					                                Private f32* %184 = OpAccessChain %169 %14 
					                                         f32 %185 = OpLoad %184 
					                                         f32 %186 = OpExtInst %1 4 %185 
					                                         f32 %187 = OpExtInst %1 10 %186 
					                                Private f32* %188 = OpAccessChain %169 %14 
					                                                      OpStore %188 %187 
					                                        bool %189 = OpLoad %177 
					                                                      OpSelectionMerge %193 None 
					                                                      OpBranchConditional %189 %192 %196 
					                                             %192 = OpLabel 
					                                Private f32* %194 = OpAccessChain %169 %14 
					                                         f32 %195 = OpLoad %194 
					                                                      OpStore %191 %195 
					                                                      OpBranch %193 
					                                             %196 = OpLabel 
					                                Private f32* %197 = OpAccessChain %169 %14 
					                                         f32 %198 = OpLoad %197 
					                                         f32 %199 = OpFNegate %198 
					                                                      OpStore %191 %199 
					                                                      OpBranch %193 
					                                             %193 = OpLabel 
					                                         f32 %200 = OpLoad %191 
					                                Private f32* %201 = OpAccessChain %169 %14 
					                                                      OpStore %201 %200 
					                                Private f32* %203 = OpAccessChain %169 %14 
					                                         f32 %204 = OpLoad %203 
					                                        bool %205 = OpFOrdGreaterThanEqual %204 %149 
					                                                      OpStore %202 %205 
					                                        bool %206 = OpLoad %202 
					                                       f32_4 %207 = OpLoad %48 
					                                       f32_4 %208 = OpLoad %9 
					                                      bool_4 %210 = OpCompositeConstruct %206 %206 %206 %206 
					                                       f32_4 %211 = OpSelect %210 %207 %208 
					                                                      OpStore %9 %211 
					                                       f32_4 %212 = OpLoad %9 
					                                       f32_4 %215 = OpFMul %212 %214 
					                                                      OpStore %48 %215 
					                                       f32_4 %216 = OpLoad %48 
					                                       f32_4 %217 = OpExtInst %1 13 %216 
					                                                      OpStore %48 %217 
					                                       f32_4 %218 = OpLoad %9 
					                                       f32_4 %219 = OpFNegate %218 
					                                       f32_4 %220 = OpLoad %48 
					                                       f32_4 %221 = OpFAdd %219 %220 
					                                                      OpStore %48 %221 
					                                Uniform f32* %223 = OpAccessChain %23 %222 
					                                         f32 %224 = OpLoad %223 
					                                Uniform f32* %225 = OpAccessChain %23 %222 
					                                         f32 %226 = OpLoad %225 
					                                Uniform f32* %227 = OpAccessChain %23 %222 
					                                         f32 %228 = OpLoad %227 
					                                Uniform f32* %229 = OpAccessChain %23 %222 
					                                         f32 %230 = OpLoad %229 
					                                       f32_4 %231 = OpCompositeConstruct %224 %226 %228 %230 
					                                         f32 %232 = OpCompositeExtract %231 0 
					                                         f32 %233 = OpCompositeExtract %231 1 
					                                         f32 %234 = OpCompositeExtract %231 2 
					                                         f32 %235 = OpCompositeExtract %231 3 
					                                       f32_4 %236 = OpCompositeConstruct %232 %233 %234 %235 
					                                       f32_4 %237 = OpLoad %48 
					                                       f32_4 %238 = OpFMul %236 %237 
					                                       f32_4 %239 = OpLoad %9 
					                                       f32_4 %240 = OpFAdd %238 %239 
					                                                      OpStore %9 %240 
					                                Uniform f32* %242 = OpAccessChain %23 %241 
					                                         f32 %243 = OpLoad %242 
					                                         f32 %244 = OpFNegate %243 
					                                         f32 %245 = OpFAdd %244 %33 
					                                Private f32* %246 = OpAccessChain %169 %14 
					                                                      OpStore %246 %245 
					                                       f32_4 %247 = OpLoad %9 
					                                       f32_2 %248 = OpLoad %169 
					                                       f32_4 %249 = OpVectorShuffle %248 %248 0 0 0 0 
					                                       f32_4 %250 = OpExtInst %1 37 %247 %249 
					                                                      OpStore %9 %250 
					                                       f32_4 %251 = OpLoad %32 
					                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
					                                       f32_4 %253 = OpLoad %9 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 2 
					                                       f32_2 %255 = OpFMul %252 %254 
					                                       f32_4 %256 = OpLoad %9 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 1 5 3 
					                                                      OpStore %9 %257 
					                                       f32_4 %258 = OpLoad %9 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 3 1 
					                                       f32_4 %260 = OpLoad %32 
					                                       f32_2 %261 = OpVectorShuffle %260 %260 0 0 
					                                       f32_2 %262 = OpFMul %259 %261 
					                                       f32_4 %263 = OpLoad %9 
					                                       f32_2 %264 = OpVectorShuffle %263 %263 2 0 
					                                       f32_2 %265 = OpFNegate %264 
					                                       f32_2 %266 = OpFAdd %262 %265 
					                                       f32_4 %267 = OpLoad %9 
					                                       f32_4 %268 = OpVectorShuffle %267 %266 0 4 5 3 
					                                                      OpStore %9 %268 
					                                Private f32* %269 = OpAccessChain %9 %14 
					                                                      OpStore %269 %160 
					                                Private f32* %270 = OpAccessChain %9 %76 
					                                                      OpStore %270 %33 
					                                       f32_4 %271 = OpLoad %9 
					                                       f32_2 %272 = OpVectorShuffle %271 %271 0 1 
					                                       f32_4 %273 = OpLoad %9 
					                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
					                                         f32 %275 = OpDot %272 %274 
					                                Private f32* %276 = OpAccessChain %32 %14 
					                                                      OpStore %276 %275 
					                                Private f32* %277 = OpAccessChain %32 %14 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpExtInst %1 32 %278 
					                                Private f32* %280 = OpAccessChain %32 %14 
					                                                      OpStore %280 %279 
					                                       f32_4 %282 = OpLoad %9 
					                                       f32_2 %283 = OpVectorShuffle %282 %282 2 3 
					                                       f32_4 %284 = OpLoad %9 
					                                       f32_2 %285 = OpVectorShuffle %284 %284 2 3 
					                                         f32 %286 = OpDot %283 %285 
					                                                      OpStore %281 %286 
					                                         f32 %287 = OpLoad %281 
					                                         f32 %288 = OpExtInst %1 32 %287 
					                                                      OpStore %281 %288 
					                                         f32 %289 = OpLoad %281 
					                                Private f32* %290 = OpAccessChain %9 %46 
					                                         f32 %291 = OpLoad %290 
					                                         f32 %292 = OpFMul %289 %291 
					                                Private f32* %293 = OpAccessChain %48 %14 
					                                                      OpStore %293 %292 
					                                         f32 %294 = OpLoad %281 
					                                       f32_2 %295 = OpCompositeConstruct %294 %294 
					                                       f32_2 %297 = OpFMul %295 %296 
					                                       f32_4 %298 = OpLoad %48 
					                                       f32_4 %299 = OpVectorShuffle %298 %297 0 4 5 3 
					                                                      OpStore %48 %299 
					                                Private f32* %300 = OpAccessChain %9 %46 
					                                                      OpStore %300 %45 
					                                       f32_4 %301 = OpLoad %32 
					                                       f32_3 %302 = OpVectorShuffle %301 %301 0 0 0 
					                                       f32_4 %303 = OpLoad %9 
					                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
					                                       f32_3 %305 = OpFMul %302 %304 
					                                       f32_4 %306 = OpLoad %9 
					                                       f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
					                                                      OpStore %9 %307 
					                                       f32_4 %308 = OpLoad %9 
					                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
					                                       f32_4 %310 = OpLoad %48 
					                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
					                                       f32_3 %312 = OpFMul %309 %311 
					                                       f32_4 %313 = OpLoad %32 
					                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
					                                                      OpStore %32 %314 
					                                       f32_4 %315 = OpLoad %48 
					                                       f32_3 %316 = OpVectorShuffle %315 %315 2 0 1 
					                                       f32_4 %317 = OpLoad %9 
					                                       f32_3 %318 = OpVectorShuffle %317 %317 1 2 0 
					                                       f32_3 %319 = OpFMul %316 %318 
					                                       f32_4 %320 = OpLoad %32 
					                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
					                                       f32_3 %322 = OpFNegate %321 
					                                       f32_3 %323 = OpFAdd %319 %322 
					                                       f32_4 %324 = OpLoad %9 
					                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
					                                                      OpStore %9 %325 
					                         read_only Texture2D %327 = OpLoad %65 
					                                     sampler %328 = OpLoad %69 
					                  read_only Texture2DSampled %329 = OpSampledImage %327 %328 
					                                       f32_4 %330 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %331 = OpVectorShuffle %330 %330 0 1 
					                                       f32_4 %332 = OpImageSampleImplicitLod %329 %331 
					                                         f32 %333 = OpCompositeExtract %332 3 
					                                                      OpStore %326 %333 
					                                         f32 %335 = OpLoad %326 
					                                         f32 %336 = OpFNegate %335 
					                                         f32 %337 = OpFAdd %336 %149 
					                                                      OpStore %334 %337 
					                                         f32 %338 = OpLoad %334 
					                                  Input f32* %339 = OpAccessChain vs_TEXCOORD6 %14 
					                                         f32 %340 = OpLoad %339 
					                                         f32 %341 = OpFNegate %340 
					                                         f32 %342 = OpFAdd %338 %341 
					                                                      OpStore %281 %342 
					                                         f32 %343 = OpLoad %281 
					                                  Input f32* %344 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %345 = OpLoad %344 
					                                         f32 %346 = OpFMul %343 %345 
					                                         f32 %347 = OpFAdd %346 %149 
					                                                      OpStore %281 %347 
					                                Uniform f32* %348 = OpAccessChain %23 %115 
					                                         f32 %349 = OpLoad %348 
					                                Uniform f32* %351 = OpAccessChain %23 %350 
					                                         f32 %352 = OpLoad %351 
					                                         f32 %353 = OpFMul %349 %352 
					                                Private f32* %354 = OpAccessChain %32 %14 
					                                                      OpStore %354 %353 
					                                Private f32* %355 = OpAccessChain %32 %14 
					                                         f32 %356 = OpLoad %355 
					                                  Input f32* %357 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %358 = OpLoad %357 
					                                         f32 %359 = OpFMul %356 %358 
					                                Private f32* %360 = OpAccessChain %32 %14 
					                                                      OpStore %360 %359 
					                                Private f32* %362 = OpAccessChain %32 %14 
					                                         f32 %363 = OpLoad %362 
					                                         f32 %364 = OpFMul %363 %149 
					                                         f32 %365 = OpLoad %281 
					                                         f32 %366 = OpFAdd %364 %365 
					                                Private f32* %367 = OpAccessChain %361 %14 
					                                                      OpStore %367 %366 
					                                Private f32* %368 = OpAccessChain %361 %14 
					                                         f32 %369 = OpLoad %368 
					                                         f32 %370 = OpExtInst %1 43 %369 %45 %33 
					                                Private f32* %371 = OpAccessChain %361 %14 
					                                                      OpStore %371 %370 
					                                Private f32* %374 = OpAccessChain %32 %14 
					                                         f32 %375 = OpLoad %374 
					                                         f32 %376 = OpExtInst %1 37 %375 %33 
					                                Private f32* %377 = OpAccessChain %373 %14 
					                                                      OpStore %377 %376 
					                                Private f32* %378 = OpAccessChain %373 %14 
					                                         f32 %379 = OpLoad %378 
					                                         f32 %380 = OpExtInst %1 31 %379 
					                                Private f32* %381 = OpAccessChain %373 %14 
					                                                      OpStore %381 %380 
					                                Private f32* %382 = OpAccessChain %373 %14 
					                                         f32 %383 = OpLoad %382 
					                                Private f32* %384 = OpAccessChain %361 %14 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpFMul %383 %385 
					                                Private f32* %387 = OpAccessChain %361 %14 
					                                                      OpStore %387 %386 
					                                Uniform f32* %389 = OpAccessChain %23 %388 
					                                         f32 %390 = OpLoad %389 
					                                Uniform f32* %392 = OpAccessChain %23 %391 
					                                         f32 %393 = OpLoad %392 
					                                       f32_2 %394 = OpCompositeConstruct %390 %393 
					                              Uniform f32_4* %397 = OpAccessChain %23 %395 
					                                       f32_4 %398 = OpLoad %397 
					                                       f32_2 %399 = OpVectorShuffle %398 %398 1 1 
					                                       f32_2 %400 = OpFMul %394 %399 
					                                       f32_2 %402 = OpLoad vs_TEXCOORD1 
					                                       f32_2 %403 = OpFAdd %400 %402 
					                                                      OpStore %169 %403 
					                         read_only Texture2D %406 = OpLoad %405 
					                                     sampler %408 = OpLoad %407 
					                  read_only Texture2DSampled %409 = OpSampledImage %406 %408 
					                                       f32_2 %410 = OpLoad %169 
					                                       f32_4 %411 = OpImageSampleImplicitLod %409 %410 
					                                                      OpStore %404 %411 
					                                       f32_4 %413 = OpLoad %404 
					                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
					                              Uniform f32_4* %416 = OpAccessChain %23 %415 
					                                       f32_4 %417 = OpLoad %416 
					                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
					                                       f32_3 %419 = OpFMul %414 %418 
					                                                      OpStore %412 %419 
					                                  Input f32* %422 = OpAccessChain %421 %76 
					                                         f32 %423 = OpLoad %422 
					                                Uniform f32* %424 = OpAccessChain %23 %415 %76 
					                                         f32 %425 = OpLoad %424 
					                                         f32 %426 = OpFMul %423 %425 
					                                Private f32* %427 = OpAccessChain %420 %14 
					                                                      OpStore %427 %426 
					                                Private f32* %429 = OpAccessChain %404 %76 
					                                         f32 %430 = OpLoad %429 
					                                Private f32* %431 = OpAccessChain %420 %14 
					                                         f32 %432 = OpLoad %431 
					                                         f32 %433 = OpFMul %430 %432 
					                                                      OpStore %428 %433 
					                                Uniform f32* %435 = OpAccessChain %23 %434 
					                                         f32 %436 = OpLoad %435 
					                                Uniform f32* %438 = OpAccessChain %23 %437 
					                                         f32 %439 = OpLoad %438 
					                                       f32_2 %440 = OpCompositeConstruct %436 %439 
					                              Uniform f32_4* %441 = OpAccessChain %23 %395 
					                                       f32_4 %442 = OpLoad %441 
					                                       f32_2 %443 = OpVectorShuffle %442 %442 1 1 
					                                       f32_2 %444 = OpFMul %440 %443 
					                                       f32_4 %445 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFAdd %444 %446 
					                                       f32_4 %448 = OpLoad %62 
					                                       f32_4 %449 = OpVectorShuffle %448 %447 4 5 2 3 
					                                                      OpStore %62 %449 
					                         read_only Texture2D %452 = OpLoad %451 
					                                     sampler %454 = OpLoad %453 
					                  read_only Texture2DSampled %455 = OpSampledImage %452 %454 
					                                       f32_4 %456 = OpLoad %62 
					                                       f32_2 %457 = OpVectorShuffle %456 %456 0 1 
					                                       f32_4 %458 = OpImageSampleImplicitLod %455 %457 
					                                                      OpStore %450 %458 
					                                       f32_4 %460 = OpLoad %421 
					                              Uniform f32_4* %462 = OpAccessChain %23 %461 
					                                       f32_4 %463 = OpLoad %462 
					                                       f32_4 %464 = OpFMul %460 %463 
					                                                      OpStore %459 %464 
					                                       f32_4 %466 = OpLoad %450 
					                                       f32_4 %467 = OpLoad %459 
					                                       f32_4 %468 = OpFMul %466 %467 
					                                                      OpStore %465 %468 
					                                       f32_4 %469 = OpLoad %465 
					                                       f32_3 %470 = OpVectorShuffle %469 %469 3 3 3 
					                                       f32_4 %471 = OpLoad %465 
					                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
					                                       f32_3 %473 = OpFMul %470 %472 
					                                                      OpStore %373 %473 
					                                       f32_3 %475 = OpLoad %412 
					                                         f32 %476 = OpLoad %428 
					                                       f32_3 %477 = OpCompositeConstruct %476 %476 %476 
					                                       f32_3 %478 = OpFMul %475 %477 
					                                       f32_3 %479 = OpLoad %373 
					                                       f32_3 %480 = OpFNegate %479 
					                                       f32_3 %481 = OpFAdd %478 %480 
					                                       f32_4 %482 = OpLoad %474 
					                                       f32_4 %483 = OpVectorShuffle %482 %481 4 5 6 3 
					                                                      OpStore %474 %483 
					                                Private f32* %484 = OpAccessChain %420 %14 
					                                         f32 %485 = OpLoad %484 
					                                Private f32* %486 = OpAccessChain %404 %76 
					                                         f32 %487 = OpLoad %486 
					                                         f32 %488 = OpFMul %485 %487 
					                                Private f32* %489 = OpAccessChain %465 %76 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFNegate %490 
					                                         f32 %492 = OpFAdd %488 %491 
					                                Private f32* %493 = OpAccessChain %474 %76 
					                                                      OpStore %493 %492 
					                                       f32_4 %494 = OpLoad %361 
					                                       f32_4 %495 = OpVectorShuffle %494 %494 0 0 0 0 
					                                       f32_4 %496 = OpLoad %474 
					                                       f32_4 %497 = OpFMul %495 %496 
					                                                      OpStore %420 %497 
					                                Private f32* %499 = OpAccessChain %459 %76 
					                                         f32 %500 = OpLoad %499 
					                                Private f32* %501 = OpAccessChain %450 %76 
					                                         f32 %502 = OpLoad %501 
					                                         f32 %503 = OpFMul %500 %502 
					                                Private f32* %504 = OpAccessChain %420 %76 
					                                         f32 %505 = OpLoad %504 
					                                         f32 %506 = OpFAdd %503 %505 
					                                Private f32* %507 = OpAccessChain %498 %76 
					                                                      OpStore %507 %506 
					                                       f32_4 %508 = OpLoad %465 
					                                       f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
					                                       f32_4 %510 = OpLoad %465 
					                                       f32_3 %511 = OpVectorShuffle %510 %510 3 3 3 
					                                       f32_3 %512 = OpFMul %509 %511 
					                                       f32_4 %513 = OpLoad %420 
					                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
					                                       f32_3 %515 = OpFAdd %512 %514 
					                                       f32_4 %516 = OpLoad %498 
					                                       f32_4 %517 = OpVectorShuffle %516 %515 4 5 6 3 
					                                                      OpStore %498 %517 
					                                Private f32* %518 = OpAccessChain %32 %14 
					                                         f32 %519 = OpLoad %518 
					                                         f32 %520 = OpFNegate %519 
					                                         f32 %521 = OpFMul %520 %149 
					                                         f32 %522 = OpLoad %281 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %361 %14 
					                                                      OpStore %524 %523 
					                                Private f32* %525 = OpAccessChain %32 %14 
					                                         f32 %526 = OpLoad %525 
					                                         f32 %527 = OpFMul %526 %149 
					                                         f32 %528 = OpLoad %281 
					                                         f32 %529 = OpFAdd %527 %528 
					                                                      OpStore %281 %529 
					                                         f32 %530 = OpLoad %281 
					                                         f32 %531 = OpExtInst %1 43 %530 %45 %33 
					                                                      OpStore %281 %531 
					                                Uniform f32* %533 = OpAccessChain %23 %532 
					                                         f32 %534 = OpLoad %533 
					                                Uniform f32* %535 = OpAccessChain %23 %350 
					                                         f32 %536 = OpLoad %535 
					                                         f32 %537 = OpFMul %534 %536 
					                                Private f32* %538 = OpAccessChain %32 %14 
					                                                      OpStore %538 %537 
					                                Private f32* %539 = OpAccessChain %32 %14 
					                                         f32 %540 = OpLoad %539 
					                                  Input f32* %541 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %542 = OpLoad %541 
					                                         f32 %543 = OpFMul %540 %542 
					                                Private f32* %544 = OpAccessChain %169 %14 
					                                                      OpStore %544 %543 
					                                Private f32* %545 = OpAccessChain %32 %14 
					                                         f32 %546 = OpLoad %545 
					                                  Input f32* %547 = OpAccessChain vs_TEXCOORD6 %94 
					                                         f32 %548 = OpLoad %547 
					                                         f32 %549 = OpFMul %546 %548 
					                                         f32 %550 = OpFAdd %549 %33 
					                                Private f32* %551 = OpAccessChain %373 %14 
					                                                      OpStore %551 %550 
					                                Private f32* %552 = OpAccessChain %169 %14 
					                                         f32 %553 = OpLoad %552 
					                                         f32 %554 = OpFMul %553 %149 
					                                Private f32* %555 = OpAccessChain %361 %14 
					                                         f32 %556 = OpLoad %555 
					                                         f32 %557 = OpFAdd %554 %556 
					                                Private f32* %558 = OpAccessChain %361 %14 
					                                                      OpStore %558 %557 
					                                Private f32* %559 = OpAccessChain %361 %14 
					                                         f32 %560 = OpLoad %559 
					                                Private f32* %561 = OpAccessChain %373 %14 
					                                         f32 %562 = OpLoad %561 
					                                         f32 %563 = OpFDiv %560 %562 
					                                Private f32* %564 = OpAccessChain %361 %14 
					                                                      OpStore %564 %563 
					                                Private f32* %565 = OpAccessChain %361 %14 
					                                         f32 %566 = OpLoad %565 
					                                         f32 %567 = OpExtInst %1 43 %566 %45 %33 
					                                Private f32* %568 = OpAccessChain %361 %14 
					                                                      OpStore %568 %567 
					                                Private f32* %569 = OpAccessChain %361 %14 
					                                         f32 %570 = OpLoad %569 
					                                         f32 %571 = OpFNegate %570 
					                                         f32 %572 = OpFAdd %571 %33 
					                                Private f32* %573 = OpAccessChain %361 %14 
					                                                      OpStore %573 %572 
					                                       f32_4 %575 = OpLoad %498 
					                                       f32_4 %576 = OpLoad %361 
					                                       f32_4 %577 = OpVectorShuffle %576 %576 0 0 0 0 
					                                       f32_4 %578 = OpFMul %575 %577 
					                                                      OpStore %574 %578 
					                                Uniform f32* %581 = OpAccessChain %23 %580 
					                                         f32 %582 = OpLoad %581 
					                                         f32 %583 = OpFNegate %582 
					                                Uniform f32* %585 = OpAccessChain %23 %584 
					                                         f32 %586 = OpLoad %585 
					                                         f32 %587 = OpFAdd %583 %586 
					                                Private f32* %588 = OpAccessChain %579 %14 
					                                                      OpStore %588 %587 
					                                         f32 %589 = OpLoad %281 
					                                Private f32* %590 = OpAccessChain %579 %14 
					                                         f32 %591 = OpLoad %590 
					                                         f32 %592 = OpFMul %589 %591 
					                                Uniform f32* %593 = OpAccessChain %23 %580 
					                                         f32 %594 = OpLoad %593 
					                                         f32 %595 = OpFAdd %592 %594 
					                                Private f32* %596 = OpAccessChain %579 %14 
					                                                      OpStore %596 %595 
					                         read_only Texture2D %599 = OpLoad %598 
					                                     sampler %601 = OpLoad %600 
					                  read_only Texture2DSampled %602 = OpSampledImage %599 %601 
					                                       f32_4 %603 = OpLoad vs_TEXCOORD0 
					                                       f32_2 %604 = OpVectorShuffle %603 %603 2 3 
					                                       f32_4 %605 = OpImageSampleImplicitLod %602 %604 
					                                       f32_3 %606 = OpVectorShuffle %605 %605 0 1 3 
					                                                      OpStore %597 %606 
					                                       f32_3 %607 = OpLoad %597 
					                                       f32_2 %608 = OpVectorShuffle %607 %607 0 0 
					                                       f32_3 %609 = OpLoad %597 
					                                       f32_2 %610 = OpVectorShuffle %609 %609 2 2 
					                                         f32 %611 = OpDot %608 %610 
					                                Private f32* %612 = OpAccessChain %361 %14 
					                                                      OpStore %612 %611 
					                                Private f32* %613 = OpAccessChain %597 %94 
					                                         f32 %614 = OpLoad %613 
					                                Private f32* %615 = OpAccessChain %597 %94 
					                                         f32 %616 = OpLoad %615 
					                                         f32 %617 = OpFAdd %614 %616 
					                                Private f32* %618 = OpAccessChain %361 %94 
					                                                      OpStore %618 %617 
					                                       f32_4 %619 = OpLoad %361 
					                                       f32_2 %620 = OpVectorShuffle %619 %619 0 1 
					                                       f32_2 %622 = OpFAdd %620 %621 
					                                       f32_4 %623 = OpLoad %361 
					                                       f32_4 %624 = OpVectorShuffle %623 %622 4 5 2 3 
					                                                      OpStore %361 %624 
					                                       f32_4 %626 = OpLoad %361 
					                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
					                                       f32_4 %628 = OpLoad %361 
					                                       f32_2 %629 = OpVectorShuffle %628 %628 0 1 
					                                         f32 %630 = OpDot %627 %629 
					                                                      OpStore %625 %630 
					                                         f32 %631 = OpLoad %625 
					                                         f32 %632 = OpExtInst %1 37 %631 %33 
					                                                      OpStore %625 %632 
					                                         f32 %633 = OpLoad %625 
					                                         f32 %634 = OpFNegate %633 
					                                         f32 %635 = OpFAdd %634 %33 
					                                                      OpStore %625 %635 
					                                         f32 %636 = OpLoad %625 
					                                         f32 %637 = OpExtInst %1 31 %636 
					                                Private f32* %638 = OpAccessChain %361 %46 
					                                                      OpStore %638 %637 
					                                       f32_4 %639 = OpLoad %361 
					                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
					                                       f32_3 %641 = OpLoad %579 
					                                       f32_3 %642 = OpVectorShuffle %641 %641 0 0 0 
					                                       f32_3 %643 = OpFMul %640 %642 
					                                       f32_3 %646 = OpFAdd %643 %645 
					                                                      OpStore %579 %646 
					                                       f32_4 %647 = OpLoad %574 
					                                       f32_3 %648 = OpVectorShuffle %647 %647 3 3 3 
					                                       f32_3 %649 = OpLoad %579 
					                                       f32_3 %650 = OpFMul %648 %649 
					                                       f32_3 %652 = OpFAdd %650 %651 
					                                                      OpStore %579 %652 
					                                       f32_4 %653 = OpLoad %9 
					                                       f32_3 %654 = OpVectorShuffle %653 %653 0 1 2 
					                                       f32_3 %655 = OpLoad %579 
					                                       f32_3 %656 = OpFNegate %655 
					                                       f32_3 %657 = OpFAdd %654 %656 
					                                       f32_4 %658 = OpLoad %9 
					                                       f32_4 %659 = OpVectorShuffle %658 %657 4 5 6 3 
					                                                      OpStore %9 %659 
					                                       f32_4 %660 = OpLoad %9 
					                                       f32_3 %661 = OpVectorShuffle %660 %660 0 1 2 
					                                       f32_4 %662 = OpLoad %9 
					                                       f32_3 %663 = OpVectorShuffle %662 %662 0 1 2 
					                                         f32 %664 = OpDot %661 %663 
					                                Private f32* %665 = OpAccessChain %579 %14 
					                                                      OpStore %665 %664 
					                                Private f32* %666 = OpAccessChain %579 %14 
					                                         f32 %667 = OpLoad %666 
					                                         f32 %668 = OpExtInst %1 32 %667 
					                                Private f32* %669 = OpAccessChain %579 %14 
					                                                      OpStore %669 %668 
					                                       f32_4 %670 = OpLoad %9 
					                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
					                                       f32_3 %672 = OpLoad %579 
					                                       f32_3 %673 = OpVectorShuffle %672 %672 0 0 0 
					                                       f32_3 %674 = OpFMul %671 %673 
					                                       f32_4 %675 = OpLoad %9 
					                                       f32_4 %676 = OpVectorShuffle %675 %674 4 5 6 3 
					                                                      OpStore %9 %676 
					                                       f32_3 %679 = OpLoad vs_TEXCOORD2 
					                                       f32_4 %680 = OpLoad %9 
					                                       f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
					                                       f32_3 %682 = OpFNegate %681 
					                                         f32 %683 = OpDot %679 %682 
					                                Private f32* %684 = OpAccessChain %361 %14 
					                                                      OpStore %684 %683 
					                                       f32_3 %686 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %687 = OpLoad %9 
					                                       f32_3 %688 = OpVectorShuffle %687 %687 0 1 2 
					                                       f32_3 %689 = OpFNegate %688 
					                                         f32 %690 = OpDot %686 %689 
					                                Private f32* %691 = OpAccessChain %361 %94 
					                                                      OpStore %691 %690 
					                                       f32_3 %693 = OpLoad vs_TEXCOORD4 
					                                       f32_4 %694 = OpLoad %9 
					                                       f32_3 %695 = OpVectorShuffle %694 %694 0 1 2 
					                                       f32_3 %696 = OpFNegate %695 
					                                         f32 %697 = OpDot %693 %696 
					                                Private f32* %698 = OpAccessChain %361 %46 
					                                                      OpStore %698 %697 
					                                       f32_4 %700 = OpLoad %361 
					                                       f32_3 %701 = OpVectorShuffle %700 %700 0 1 2 
					                                       f32_4 %702 = OpLoad %361 
					                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
					                                         f32 %704 = OpDot %701 %703 
					                                Private f32* %705 = OpAccessChain %699 %14 
					                                                      OpStore %705 %704 
					                                Private f32* %706 = OpAccessChain %699 %14 
					                                         f32 %707 = OpLoad %706 
					                                         f32 %708 = OpExtInst %1 32 %707 
					                                Private f32* %709 = OpAccessChain %699 %14 
					                                                      OpStore %709 %708 
					                                       f32_3 %710 = OpLoad %699 
					                                       f32_3 %711 = OpVectorShuffle %710 %710 0 0 0 
					                                       f32_4 %712 = OpLoad %361 
					                                       f32_3 %713 = OpVectorShuffle %712 %712 0 1 2 
					                                       f32_3 %714 = OpFMul %711 %713 
					                                                      OpStore %699 %714 
					                                       f32_3 %716 = OpLoad vs_TEXCOORD5 
					                                       f32_3 %717 = OpFNegate %716 
					                              Uniform f32_3* %720 = OpAccessChain %23 %718 
					                                       f32_3 %721 = OpLoad %720 
					                                       f32_3 %722 = OpFAdd %717 %721 
					                                                      OpStore %579 %722 
					                                       f32_3 %724 = OpLoad %579 
					                                       f32_3 %725 = OpLoad %579 
					                                         f32 %726 = OpDot %724 %725 
					                                                      OpStore %723 %726 
					                                         f32 %727 = OpLoad %723 
					                                         f32 %728 = OpExtInst %1 32 %727 
					                                                      OpStore %723 %728 
					                                       f32_3 %729 = OpLoad %579 
					                                         f32 %730 = OpLoad %723 
					                                       f32_3 %731 = OpCompositeConstruct %730 %730 %730 
					                                       f32_3 %732 = OpFMul %729 %731 
					                              Uniform f32_4* %734 = OpAccessChain %23 %733 
					                                       f32_4 %735 = OpLoad %734 
					                                       f32_3 %736 = OpVectorShuffle %735 %735 0 1 2 
					                                       f32_3 %737 = OpFAdd %732 %736 
					                                       f32_4 %738 = OpLoad %361 
					                                       f32_4 %739 = OpVectorShuffle %738 %737 4 5 6 3 
					                                                      OpStore %361 %739 
					                                       f32_4 %740 = OpLoad %361 
					                                       f32_3 %741 = OpVectorShuffle %740 %740 0 1 2 
					                                       f32_4 %742 = OpLoad %361 
					                                       f32_3 %743 = OpVectorShuffle %742 %742 0 1 2 
					                                         f32 %744 = OpDot %741 %743 
					                                                      OpStore %625 %744 
					                                         f32 %745 = OpLoad %625 
					                                         f32 %746 = OpExtInst %1 32 %745 
					                                                      OpStore %625 %746 
					                                         f32 %747 = OpLoad %625 
					                                       f32_3 %748 = OpCompositeConstruct %747 %747 %747 
					                                       f32_4 %749 = OpLoad %361 
					                                       f32_3 %750 = OpVectorShuffle %749 %749 0 1 2 
					                                       f32_3 %751 = OpFMul %748 %750 
					                                       f32_4 %752 = OpLoad %361 
					                                       f32_4 %753 = OpVectorShuffle %752 %751 4 5 6 3 
					                                                      OpStore %361 %753 
					                                       f32_3 %754 = OpLoad %699 
					                                       f32_4 %755 = OpLoad %361 
					                                       f32_3 %756 = OpVectorShuffle %755 %755 0 1 2 
					                                         f32 %757 = OpDot %754 %756 
					                                Private f32* %758 = OpAccessChain %361 %14 
					                                                      OpStore %758 %757 
					                                       f32_3 %759 = OpLoad %699 
					                              Uniform f32_4* %760 = OpAccessChain %23 %733 
					                                       f32_4 %761 = OpLoad %760 
					                                       f32_3 %762 = OpVectorShuffle %761 %761 0 1 2 
					                                         f32 %763 = OpDot %759 %762 
					                                Private f32* %764 = OpAccessChain %361 %94 
					                                                      OpStore %764 %763 
					                                       f32_4 %765 = OpLoad %361 
					                                       f32_2 %766 = OpVectorShuffle %765 %765 0 1 
					                                       f32_2 %768 = OpExtInst %1 40 %766 %767 
					                                       f32_4 %769 = OpLoad %361 
					                                       f32_4 %770 = OpVectorShuffle %769 %768 4 5 2 3 
					                                                      OpStore %361 %770 
					                                Private f32* %771 = OpAccessChain %361 %14 
					                                         f32 %772 = OpLoad %771 
					                                         f32 %773 = OpExtInst %1 30 %772 
					                                Private f32* %774 = OpAccessChain %699 %14 
					                                                      OpStore %774 %773 
					                                Uniform f32* %777 = OpAccessChain %23 %776 
					                                         f32 %778 = OpLoad %777 
					                                         f32 %779 = OpFNegate %778 
					                                Uniform f32* %781 = OpAccessChain %23 %780 
					                                         f32 %782 = OpLoad %781 
					                                         f32 %783 = OpFAdd %779 %782 
					                                                      OpStore %775 %783 
					                                         f32 %785 = OpLoad %281 
					                                         f32 %786 = OpLoad %775 
					                                         f32 %787 = OpFMul %785 %786 
					                                Uniform f32* %788 = OpAccessChain %23 %776 
					                                         f32 %789 = OpLoad %788 
					                                         f32 %790 = OpFAdd %787 %789 
					                                Private f32* %791 = OpAccessChain %784 %14 
					                                                      OpStore %791 %790 
					                                Private f32* %792 = OpAccessChain %784 %14 
					                                         f32 %793 = OpLoad %792 
					                                         f32 %795 = OpFMul %793 %794 
					                                Private f32* %796 = OpAccessChain %361 %14 
					                                                      OpStore %796 %795 
					                                Private f32* %797 = OpAccessChain %699 %14 
					                                         f32 %798 = OpLoad %797 
					                                Private f32* %799 = OpAccessChain %361 %14 
					                                         f32 %800 = OpLoad %799 
					                                         f32 %801 = OpFMul %798 %800 
					                                Private f32* %802 = OpAccessChain %699 %14 
					                                                      OpStore %802 %801 
					                                Private f32* %803 = OpAccessChain %699 %14 
					                                         f32 %804 = OpLoad %803 
					                                         f32 %805 = OpExtInst %1 29 %804 
					                                Private f32* %806 = OpAccessChain %699 %14 
					                                                      OpStore %806 %805 
					                                       f32_3 %807 = OpLoad vs_TEXCOORD5 
					                                       f32_2 %808 = OpVectorShuffle %807 %807 1 1 
					                              Uniform f32_4* %810 = OpAccessChain %23 %809 %718 
					                                       f32_4 %811 = OpLoad %810 
					                                       f32_2 %812 = OpVectorShuffle %811 %811 0 1 
					                                       f32_2 %813 = OpFMul %808 %812 
					                                                      OpStore %784 %813 
					                              Uniform f32_4* %814 = OpAccessChain %23 %809 %395 
					                                       f32_4 %815 = OpLoad %814 
					                                       f32_2 %816 = OpVectorShuffle %815 %815 0 1 
					                                       f32_3 %817 = OpLoad vs_TEXCOORD5 
					                                       f32_2 %818 = OpVectorShuffle %817 %817 0 0 
					                                       f32_2 %819 = OpFMul %816 %818 
					                                       f32_2 %820 = OpLoad %784 
					                                       f32_2 %821 = OpFAdd %819 %820 
					                                                      OpStore %784 %821 
					                              Uniform f32_4* %822 = OpAccessChain %23 %809 %733 
					                                       f32_4 %823 = OpLoad %822 
					                                       f32_2 %824 = OpVectorShuffle %823 %823 0 1 
					                                       f32_3 %825 = OpLoad vs_TEXCOORD5 
					                                       f32_2 %826 = OpVectorShuffle %825 %825 2 2 
					                                       f32_2 %827 = OpFMul %824 %826 
					                                       f32_2 %828 = OpLoad %784 
					                                       f32_2 %829 = OpFAdd %827 %828 
					                                                      OpStore %784 %829 
					                                       f32_2 %830 = OpLoad %784 
					                              Uniform f32_4* %832 = OpAccessChain %23 %809 %831 
					                                       f32_4 %833 = OpLoad %832 
					                                       f32_2 %834 = OpVectorShuffle %833 %833 0 1 
					                                       f32_2 %835 = OpFAdd %830 %834 
					                                                      OpStore %784 %835 
					                         read_only Texture2D %837 = OpLoad %836 
					                                     sampler %839 = OpLoad %838 
					                  read_only Texture2DSampled %840 = OpSampledImage %837 %839 
					                                       f32_2 %841 = OpLoad %784 
					                                       f32_4 %842 = OpImageSampleImplicitLod %840 %841 
					                                         f32 %843 = OpCompositeExtract %842 3 
					                                Private f32* %844 = OpAccessChain %784 %14 
					                                                      OpStore %844 %843 
					                                       f32_2 %845 = OpLoad %784 
					                                       f32_3 %846 = OpVectorShuffle %845 %845 0 0 0 
					                              Uniform f32_4* %847 = OpAccessChain %23 %831 
					                                       f32_4 %848 = OpLoad %847 
					                                       f32_3 %849 = OpVectorShuffle %848 %848 0 1 2 
					                                       f32_3 %850 = OpFMul %846 %849 
					                                       f32_4 %851 = OpLoad %361 
					                                       f32_4 %852 = OpVectorShuffle %851 %850 4 1 5 6 
					                                                      OpStore %361 %852 
					                                       f32_4 %853 = OpLoad %361 
					                                       f32_3 %854 = OpVectorShuffle %853 %853 0 2 3 
					                              Uniform f32_4* %856 = OpAccessChain %23 %855 
					                                       f32_4 %857 = OpLoad %856 
					                                       f32_3 %858 = OpVectorShuffle %857 %857 0 1 2 
					                                       f32_3 %859 = OpFMul %854 %858 
					                                       f32_4 %860 = OpLoad %474 
					                                       f32_4 %861 = OpVectorShuffle %860 %859 4 5 6 3 
					                                                      OpStore %474 %861 
					                                       f32_3 %862 = OpLoad %699 
					                                       f32_3 %863 = OpVectorShuffle %862 %862 0 0 0 
					                                       f32_4 %864 = OpLoad %474 
					                                       f32_3 %865 = OpVectorShuffle %864 %864 0 1 2 
					                                       f32_3 %866 = OpFMul %863 %865 
					                                                      OpStore %699 %866 
					                                Private f32* %867 = OpAccessChain %574 %76 
					                                         f32 %868 = OpLoad %867 
					                                         f32 %870 = OpExtInst %1 40 %868 %869 
					                                                      OpStore %334 %870 
					                                       f32_4 %871 = OpLoad %574 
					                                       f32_3 %872 = OpVectorShuffle %871 %871 0 1 2 
					                                         f32 %873 = OpLoad %334 
					                                       f32_3 %874 = OpCompositeConstruct %873 %873 %873 
					                                       f32_3 %875 = OpFDiv %872 %874 
					                                       f32_4 %876 = OpLoad %459 
					                                       f32_4 %877 = OpVectorShuffle %876 %875 4 5 6 3 
					                                                      OpStore %459 %877 
					                                Private f32* %880 = OpAccessChain %574 %76 
					                                         f32 %881 = OpLoad %880 
					                                 Output f32* %883 = OpAccessChain %879 %76 
					                                                      OpStore %883 %881 
					                                       f32_4 %884 = OpLoad %361 
					                                       f32_3 %885 = OpVectorShuffle %884 %884 0 2 3 
					                                       f32_4 %886 = OpLoad %459 
					                                       f32_3 %887 = OpVectorShuffle %886 %886 0 1 2 
					                                       f32_3 %888 = OpFMul %885 %887 
					                                       f32_4 %889 = OpLoad %361 
					                                       f32_4 %890 = OpVectorShuffle %889 %888 4 1 5 6 
					                                                      OpStore %361 %890 
					                                       f32_4 %891 = OpLoad %361 
					                                       f32_3 %892 = OpVectorShuffle %891 %891 0 2 3 
					                                       f32_4 %893 = OpLoad %361 
					                                       f32_3 %894 = OpVectorShuffle %893 %893 1 1 1 
					                                       f32_3 %895 = OpFMul %892 %894 
					                                       f32_3 %896 = OpLoad %699 
					                                       f32_3 %897 = OpFAdd %895 %896 
					                                                      OpStore %699 %897 
					                                       f32_3 %898 = OpLoad %699 
					                                       f32_4 %899 = OpLoad %879 
					                                       f32_4 %900 = OpVectorShuffle %899 %898 4 5 6 3 
					                                                      OpStore %879 %900 
					                                                      OpReturn
					                                                      OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat5 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat5 = u_xlat13 * u_xlat5 + _FaceShininess;
					    u_xlat5 = u_xlat5 * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10_2 = texture(_LightTexture0, vec2(u_xlat5));
					    u_xlat2.xyz = u_xlat10_2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "POINT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "POINT" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_18[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_21[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_27[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10 = u_xlat13 * u_xlat10 + _FaceShininess;
					    u_xlat10 = u_xlat10 * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat2.x = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat2.xxx;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat10_4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat5.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat5.x = u_xlat13 * u_xlat5.x + _FaceShininess;
					    u_xlat5.x = u_xlat5.x * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat2 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;
					    u_xlat2 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + unity_WorldToLight[3];
					    u_xlat5.xy = u_xlat2.xy / u_xlat2.ww;
					    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
					    u_xlat10_3 = texture(_LightTexture0, u_xlat5.xy);
					    u_xlatb5 = 0.0<u_xlat2.z;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10_3.w * u_xlat5.x;
					    u_xlat5.x = u_xlat10_2.x * u_xlat5.x;
					    u_xlat2.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "SPOT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "SPOT" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyw;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat5 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat5 = u_xlat13 * u_xlat5 + _FaceShininess;
					    u_xlat5 = u_xlat5 * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlat5 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10_2 = texture(_LightTexture0, u_xlat2.xyz);
					    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat5));
					    u_xlat16_5 = u_xlat10_2.w * u_xlat10_3.x;
					    u_xlat2.xyz = vec3(u_xlat16_5) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "POINT_COOKIE" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "POINT_COOKIE" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat16_8;
					vec2 u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat10_1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat10_1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD6.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_8 = (-u_xlat10_4.w) + 0.5;
					    u_xlat8 = u_xlat16_8 + (-vs_TEXCOORD6.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD6.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD6.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD6.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat2.w * u_xlat2.x;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.w = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10.x = u_xlat13 * u_xlat10.x + _FaceShininess;
					    u_xlat10.x = u_xlat10.x * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10.x;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat10.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat10.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat10.xy;
					    u_xlat10.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy + unity_WorldToLight[3].xy;
					    u_xlat10_2 = texture(_LightTexture0, u_xlat10.xy);
					    u_xlat2.xyz = u_xlat10_2.www * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!vulkan"
				}
			}
		}
		Pass {
			Name "Caster"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
			ColorMask RGB -1
			Cull Off
			Offset 1, 1
			Fog {
				Mode Off
			}
			GpuProgramID 162456
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						vec4 _OutlineTex_ST;
						float _OutlineWidth;
						float _FaceDilate;
						float _ScaleRatioA;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD3;
					out float vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.5;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					uniform 	float _OutlineWidth;
					uniform 	float _FaceDilate;
					uniform 	float _ScaleRatioA;
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD3;
					out float vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.5;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0 = u_xlat10_0.w + (-vs_TEXCOORD2);
					    u_xlatb0 = u_xlat0<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "SHADOWS_DEPTH" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 192
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %111 %136 %137 %148 %182 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpMemberDecorate %109 0 BuiltIn 109 
					                                                      OpMemberDecorate %109 1 BuiltIn 109 
					                                                      OpMemberDecorate %109 2 BuiltIn 109 
					                                                      OpDecorate %109 Block 
					                                                      OpDecorate vs_TEXCOORD1 Location 136 
					                                                      OpDecorate %137 Location 137 
					                                                      OpDecorate vs_TEXCOORD3 Location 148 
					                                                      OpDecorate vs_TEXCOORD2 Location 182 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeStruct %7 %16 %17 %7 %7 %6 %6 %6 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 1 
					                                              %23 = OpTypePointer Uniform %7 
					                                          i32 %27 = OpConstant 0 
					                                          i32 %35 = OpConstant 2 
					                                          i32 %44 = OpConstant 3 
					                               Private f32_4* %48 = OpVariable Private 
					                                          u32 %75 = OpConstant 0 
					                                              %76 = OpTypePointer Uniform %6 
					                                          u32 %79 = OpConstant 3 
					                                              %80 = OpTypePointer Private %6 
					                                          f32 %87 = OpConstant 3,674022E-40 
					                                          f32 %92 = OpConstant 3,674022E-40 
					                                 Private f32* %95 = OpVariable Private 
					                                          u32 %96 = OpConstant 2 
					                                         u32 %107 = OpConstant 1 
					                                             %108 = OpTypeArray %6 %107 
					                                             %109 = OpTypeStruct %7 %6 %108 
					                                             %110 = OpTypePointer Output %109 
					        Output struct {f32_4; f32; f32[1];}* %111 = OpVariable Output 
					                                             %112 = OpTypeVector %6 3 
					                                             %115 = OpTypePointer Output %7 
					                                             %132 = OpTypePointer Output %6 
					                                             %134 = OpTypeVector %6 2 
					                                             %135 = OpTypePointer Output %134 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                Input f32_4* %137 = OpVariable Input 
					                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %151 = OpConstant 4 
					                                         i32 %160 = OpConstant 5 
					                                         i32 %164 = OpConstant 7 
					                                         f32 %168 = OpConstant 3,674022E-40 
					                                         i32 %171 = OpConstant 6 
					                         Output f32* vs_TEXCOORD2 = OpVariable Output 
					                                         f32 %185 = OpConstant 3,674022E-40 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
					                                        f32_4 %25 = OpLoad %24 
					                                        f32_4 %26 = OpFMul %13 %25 
					                                                      OpStore %9 %26 
					                               Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
					                                        f32_4 %29 = OpLoad %28 
					                                        f32_4 %30 = OpLoad %11 
					                                        f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                        f32_4 %32 = OpFMul %29 %31 
					                                        f32_4 %33 = OpLoad %9 
					                                        f32_4 %34 = OpFAdd %32 %33 
					                                                      OpStore %9 %34 
					                               Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                        f32_4 %37 = OpLoad %36 
					                                        f32_4 %38 = OpLoad %11 
					                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                        f32_4 %40 = OpFMul %37 %39 
					                                        f32_4 %41 = OpLoad %9 
					                                        f32_4 %42 = OpFAdd %40 %41 
					                                                      OpStore %9 %42 
					                                        f32_4 %43 = OpLoad %9 
					                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                        f32_4 %46 = OpLoad %45 
					                                        f32_4 %47 = OpFAdd %43 %46 
					                                                      OpStore %9 %47 
					                                        f32_4 %49 = OpLoad %9 
					                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                               Uniform f32_4* %51 = OpAccessChain %20 %35 %22 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_4 %53 = OpFMul %50 %52 
					                                                      OpStore %48 %53 
					                               Uniform f32_4* %54 = OpAccessChain %20 %35 %27 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpLoad %9 
					                                        f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                        f32_4 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %48 
					                                        f32_4 %60 = OpFAdd %58 %59 
					                                                      OpStore %48 %60 
					                               Uniform f32_4* %61 = OpAccessChain %20 %35 %35 
					                                        f32_4 %62 = OpLoad %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                        f32_4 %65 = OpFMul %62 %64 
					                                        f32_4 %66 = OpLoad %48 
					                                        f32_4 %67 = OpFAdd %65 %66 
					                                                      OpStore %48 %67 
					                               Uniform f32_4* %68 = OpAccessChain %20 %35 %44 
					                                        f32_4 %69 = OpLoad %68 
					                                        f32_4 %70 = OpLoad %9 
					                                        f32_4 %71 = OpVectorShuffle %70 %70 3 3 3 3 
					                                        f32_4 %72 = OpFMul %69 %71 
					                                        f32_4 %73 = OpLoad %48 
					                                        f32_4 %74 = OpFAdd %72 %73 
					                                                      OpStore %9 %74 
					                                 Uniform f32* %77 = OpAccessChain %20 %27 %75 
					                                          f32 %78 = OpLoad %77 
					                                 Private f32* %81 = OpAccessChain %9 %79 
					                                          f32 %82 = OpLoad %81 
					                                          f32 %83 = OpFDiv %78 %82 
					                                 Private f32* %84 = OpAccessChain %48 %75 
					                                                      OpStore %84 %83 
					                                 Private f32* %85 = OpAccessChain %48 %75 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %88 = OpExtInst %1 37 %86 %87 
					                                 Private f32* %89 = OpAccessChain %48 %75 
					                                                      OpStore %89 %88 
					                                 Private f32* %90 = OpAccessChain %48 %75 
					                                          f32 %91 = OpLoad %90 
					                                          f32 %93 = OpExtInst %1 40 %91 %92 
					                                 Private f32* %94 = OpAccessChain %48 %75 
					                                                      OpStore %94 %93 
					                                 Private f32* %97 = OpAccessChain %9 %96 
					                                          f32 %98 = OpLoad %97 
					                                 Private f32* %99 = OpAccessChain %48 %75 
					                                         f32 %100 = OpLoad %99 
					                                         f32 %101 = OpFAdd %98 %100 
					                                                      OpStore %95 %101 
					                                Private f32* %102 = OpAccessChain %9 %79 
					                                         f32 %103 = OpLoad %102 
					                                         f32 %104 = OpLoad %95 
					                                         f32 %105 = OpExtInst %1 37 %103 %104 
					                                Private f32* %106 = OpAccessChain %48 %75 
					                                                      OpStore %106 %105 
					                                       f32_4 %113 = OpLoad %9 
					                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 3 
					                               Output f32_4* %116 = OpAccessChain %111 %27 
					                                       f32_4 %117 = OpLoad %116 
					                                       f32_4 %118 = OpVectorShuffle %117 %114 4 5 2 6 
					                                                      OpStore %116 %118 
					                                         f32 %119 = OpLoad %95 
					                                         f32 %120 = OpFNegate %119 
					                                Private f32* %121 = OpAccessChain %48 %75 
					                                         f32 %122 = OpLoad %121 
					                                         f32 %123 = OpFAdd %120 %122 
					                                Private f32* %124 = OpAccessChain %9 %75 
					                                                      OpStore %124 %123 
					                                Uniform f32* %125 = OpAccessChain %20 %27 %107 
					                                         f32 %126 = OpLoad %125 
					                                Private f32* %127 = OpAccessChain %9 %75 
					                                         f32 %128 = OpLoad %127 
					                                         f32 %129 = OpFMul %126 %128 
					                                         f32 %130 = OpLoad %95 
					                                         f32 %131 = OpFAdd %129 %130 
					                                 Output f32* %133 = OpAccessChain %111 %27 %96 
					                                                      OpStore %133 %131 
					                                       f32_4 %138 = OpLoad %137 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
					                              Uniform f32_4* %140 = OpAccessChain %20 %44 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
					                                       f32_2 %143 = OpFMul %139 %142 
					                              Uniform f32_4* %144 = OpAccessChain %20 %44 
					                                       f32_4 %145 = OpLoad %144 
					                                       f32_2 %146 = OpVectorShuffle %145 %145 2 3 
					                                       f32_2 %147 = OpFAdd %143 %146 
					                                                      OpStore vs_TEXCOORD1 %147 
					                                       f32_4 %149 = OpLoad %137 
					                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
					                              Uniform f32_4* %152 = OpAccessChain %20 %151 
					                                       f32_4 %153 = OpLoad %152 
					                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
					                                       f32_2 %155 = OpFMul %150 %154 
					                              Uniform f32_4* %156 = OpAccessChain %20 %151 
					                                       f32_4 %157 = OpLoad %156 
					                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
					                                       f32_2 %159 = OpFAdd %155 %158 
					                                                      OpStore vs_TEXCOORD3 %159 
					                                Uniform f32* %161 = OpAccessChain %20 %160 
					                                         f32 %162 = OpLoad %161 
					                                         f32 %163 = OpFNegate %162 
					                                Uniform f32* %165 = OpAccessChain %20 %164 
					                                         f32 %166 = OpLoad %165 
					                                         f32 %167 = OpFMul %163 %166 
					                                         f32 %169 = OpFAdd %167 %168 
					                                Private f32* %170 = OpAccessChain %9 %75 
					                                                      OpStore %170 %169 
					                                Uniform f32* %172 = OpAccessChain %20 %171 
					                                         f32 %173 = OpLoad %172 
					                                         f32 %174 = OpFNegate %173 
					                                Uniform f32* %175 = OpAccessChain %20 %164 
					                                         f32 %176 = OpLoad %175 
					                                         f32 %177 = OpFMul %174 %176 
					                                Private f32* %178 = OpAccessChain %9 %75 
					                                         f32 %179 = OpLoad %178 
					                                         f32 %180 = OpFAdd %177 %179 
					                                Private f32* %181 = OpAccessChain %9 %75 
					                                                      OpStore %181 %180 
					                                Private f32* %183 = OpAccessChain %9 %75 
					                                         f32 %184 = OpLoad %183 
					                                         f32 %186 = OpFMul %184 %185 
					                                                      OpStore vs_TEXCOORD2 %186 
					                                 Output f32* %187 = OpAccessChain %111 %27 %107 
					                                         f32 %188 = OpLoad %187 
					                                         f32 %189 = OpFNegate %188 
					                                 Output f32* %190 = OpAccessChain %111 %27 %107 
					                                                      OpStore %190 %189 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 56
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %31 %53 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 21 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 31 
					                                             OpDecorate %53 Location 53 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %30 = OpTypePointer Input %6 
					                 Input f32* vs_TEXCOORD2 = OpVariable Input 
					                                     %35 = OpTypeBool 
					                                     %36 = OpTypePointer Private %35 
					                       Private bool* %37 = OpVariable Private 
					                                 f32 %39 = OpConstant 3,674022E-40 
					                                     %42 = OpTypeInt 32 1 
					                                 i32 %43 = OpConstant 0 
					                                 i32 %44 = OpConstant 1 
					                                 i32 %46 = OpConstant -1 
					                                     %52 = OpTypePointer Output %23 
					                       Output f32_4* %53 = OpVariable Output 
					                               f32_4 %54 = OpConstantComposite %39 %39 %39 %39 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD1 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                                 f32 %29 = OpLoad %8 
					                                 f32 %32 = OpLoad vs_TEXCOORD2 
					                                 f32 %33 = OpFNegate %32 
					                                 f32 %34 = OpFAdd %29 %33 
					                                             OpStore %28 %34 
					                                 f32 %38 = OpLoad %28 
					                                bool %40 = OpFOrdLessThan %38 %39 
					                                             OpStore %37 %40 
					                                bool %41 = OpLoad %37 
					                                 i32 %45 = OpSelect %41 %44 %43 
					                                 i32 %47 = OpIMul %45 %46 
					                                bool %48 = OpINotEqual %47 %43 
					                                             OpSelectionMerge %50 None 
					                                             OpBranchConditional %48 %49 %50 
					                                     %49 = OpLabel 
					                                             OpKill
					                                     %50 = OpLabel 
					                                             OpStore %53 %54 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						vec4 _OutlineTex_ST;
						float _OutlineWidth;
						float _FaceDilate;
						float _ScaleRatioA;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD3;
					out float vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.5;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					uniform 	vec4 _OutlineTex_ST;
					uniform 	float _OutlineWidth;
					uniform 	float _FaceDilate;
					uniform 	float _ScaleRatioA;
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD3;
					out float vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.5;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0 = u_xlat10_0.w + (-vs_TEXCOORD2);
					    u_xlatb0 = u_xlat0<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "SHADOWS_CUBE" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 173
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %11 %96 %117 %118 %129 %163 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpDecorate %11 Location 11 
					                                                      OpDecorate %16 ArrayStride 16 
					                                                      OpDecorate %17 ArrayStride 17 
					                                                      OpMemberDecorate %18 0 Offset 18 
					                                                      OpMemberDecorate %18 1 Offset 18 
					                                                      OpMemberDecorate %18 2 Offset 18 
					                                                      OpMemberDecorate %18 3 Offset 18 
					                                                      OpMemberDecorate %18 4 Offset 18 
					                                                      OpMemberDecorate %18 5 Offset 18 
					                                                      OpMemberDecorate %18 6 Offset 18 
					                                                      OpMemberDecorate %18 7 Offset 18 
					                                                      OpDecorate %18 Block 
					                                                      OpDecorate %20 DescriptorSet 20 
					                                                      OpDecorate %20 Binding 20 
					                                                      OpMemberDecorate %94 0 BuiltIn 94 
					                                                      OpMemberDecorate %94 1 BuiltIn 94 
					                                                      OpMemberDecorate %94 2 BuiltIn 94 
					                                                      OpDecorate %94 Block 
					                                                      OpDecorate vs_TEXCOORD1 Location 117 
					                                                      OpDecorate %118 Location 118 
					                                                      OpDecorate vs_TEXCOORD3 Location 129 
					                                                      OpDecorate vs_TEXCOORD2 Location 163 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 4 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_4* %9 = OpVariable Private 
					                                              %10 = OpTypePointer Input %7 
					                                 Input f32_4* %11 = OpVariable Input 
					                                              %14 = OpTypeInt 32 0 
					                                          u32 %15 = OpConstant 4 
					                                              %16 = OpTypeArray %7 %15 
					                                              %17 = OpTypeArray %7 %15 
					                                              %18 = OpTypeStruct %7 %16 %17 %7 %7 %6 %6 %6 
					                                              %19 = OpTypePointer Uniform %18 
					Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32;}* %20 = OpVariable Uniform 
					                                              %21 = OpTypeInt 32 1 
					                                          i32 %22 = OpConstant 1 
					                                              %23 = OpTypePointer Uniform %7 
					                                          i32 %27 = OpConstant 0 
					                                          i32 %35 = OpConstant 2 
					                                          i32 %44 = OpConstant 3 
					                               Private f32_4* %48 = OpVariable Private 
					                                          u32 %75 = OpConstant 3 
					                                              %76 = OpTypePointer Private %6 
					                                          u32 %79 = OpConstant 2 
					                                          u32 %83 = OpConstant 0 
					                                          u32 %92 = OpConstant 1 
					                                              %93 = OpTypeArray %6 %92 
					                                              %94 = OpTypeStruct %7 %6 %93 
					                                              %95 = OpTypePointer Output %94 
					         Output struct {f32_4; f32; f32[1];}* %96 = OpVariable Output 
					                                              %97 = OpTypePointer Uniform %6 
					                                             %106 = OpTypePointer Output %6 
					                                             %108 = OpTypeVector %6 3 
					                                             %111 = OpTypePointer Output %7 
					                                             %115 = OpTypeVector %6 2 
					                                             %116 = OpTypePointer Output %115 
					                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
					                                Input f32_4* %118 = OpVariable Input 
					                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %132 = OpConstant 4 
					                                         i32 %141 = OpConstant 5 
					                                         i32 %145 = OpConstant 7 
					                                         f32 %149 = OpConstant 3,674022E-40 
					                                         i32 %152 = OpConstant 6 
					                         Output f32* vs_TEXCOORD2 = OpVariable Output 
					                                         f32 %166 = OpConstant 3,674022E-40 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                                        f32_4 %12 = OpLoad %11 
					                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
					                               Uniform f32_4* %24 = OpAccessChain %20 %22 %22 
					                                        f32_4 %25 = OpLoad %24 
					                                        f32_4 %26 = OpFMul %13 %25 
					                                                      OpStore %9 %26 
					                               Uniform f32_4* %28 = OpAccessChain %20 %22 %27 
					                                        f32_4 %29 = OpLoad %28 
					                                        f32_4 %30 = OpLoad %11 
					                                        f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
					                                        f32_4 %32 = OpFMul %29 %31 
					                                        f32_4 %33 = OpLoad %9 
					                                        f32_4 %34 = OpFAdd %32 %33 
					                                                      OpStore %9 %34 
					                               Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
					                                        f32_4 %37 = OpLoad %36 
					                                        f32_4 %38 = OpLoad %11 
					                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
					                                        f32_4 %40 = OpFMul %37 %39 
					                                        f32_4 %41 = OpLoad %9 
					                                        f32_4 %42 = OpFAdd %40 %41 
					                                                      OpStore %9 %42 
					                                        f32_4 %43 = OpLoad %9 
					                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
					                                        f32_4 %46 = OpLoad %45 
					                                        f32_4 %47 = OpFAdd %43 %46 
					                                                      OpStore %9 %47 
					                                        f32_4 %49 = OpLoad %9 
					                                        f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
					                               Uniform f32_4* %51 = OpAccessChain %20 %35 %22 
					                                        f32_4 %52 = OpLoad %51 
					                                        f32_4 %53 = OpFMul %50 %52 
					                                                      OpStore %48 %53 
					                               Uniform f32_4* %54 = OpAccessChain %20 %35 %27 
					                                        f32_4 %55 = OpLoad %54 
					                                        f32_4 %56 = OpLoad %9 
					                                        f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
					                                        f32_4 %58 = OpFMul %55 %57 
					                                        f32_4 %59 = OpLoad %48 
					                                        f32_4 %60 = OpFAdd %58 %59 
					                                                      OpStore %48 %60 
					                               Uniform f32_4* %61 = OpAccessChain %20 %35 %35 
					                                        f32_4 %62 = OpLoad %61 
					                                        f32_4 %63 = OpLoad %9 
					                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
					                                        f32_4 %65 = OpFMul %62 %64 
					                                        f32_4 %66 = OpLoad %48 
					                                        f32_4 %67 = OpFAdd %65 %66 
					                                                      OpStore %48 %67 
					                               Uniform f32_4* %68 = OpAccessChain %20 %35 %44 
					                                        f32_4 %69 = OpLoad %68 
					                                        f32_4 %70 = OpLoad %9 
					                                        f32_4 %71 = OpVectorShuffle %70 %70 3 3 3 3 
					                                        f32_4 %72 = OpFMul %69 %71 
					                                        f32_4 %73 = OpLoad %48 
					                                        f32_4 %74 = OpFAdd %72 %73 
					                                                      OpStore %9 %74 
					                                 Private f32* %77 = OpAccessChain %9 %75 
					                                          f32 %78 = OpLoad %77 
					                                 Private f32* %80 = OpAccessChain %9 %79 
					                                          f32 %81 = OpLoad %80 
					                                          f32 %82 = OpExtInst %1 37 %78 %81 
					                                 Private f32* %84 = OpAccessChain %48 %83 
					                                                      OpStore %84 %82 
					                                 Private f32* %85 = OpAccessChain %9 %79 
					                                          f32 %86 = OpLoad %85 
					                                          f32 %87 = OpFNegate %86 
					                                 Private f32* %88 = OpAccessChain %48 %83 
					                                          f32 %89 = OpLoad %88 
					                                          f32 %90 = OpFAdd %87 %89 
					                                 Private f32* %91 = OpAccessChain %48 %83 
					                                                      OpStore %91 %90 
					                                 Uniform f32* %98 = OpAccessChain %20 %27 %92 
					                                          f32 %99 = OpLoad %98 
					                                Private f32* %100 = OpAccessChain %48 %83 
					                                         f32 %101 = OpLoad %100 
					                                         f32 %102 = OpFMul %99 %101 
					                                Private f32* %103 = OpAccessChain %9 %79 
					                                         f32 %104 = OpLoad %103 
					                                         f32 %105 = OpFAdd %102 %104 
					                                 Output f32* %107 = OpAccessChain %96 %27 %79 
					                                                      OpStore %107 %105 
					                                       f32_4 %109 = OpLoad %9 
					                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
					                               Output f32_4* %112 = OpAccessChain %96 %27 
					                                       f32_4 %113 = OpLoad %112 
					                                       f32_4 %114 = OpVectorShuffle %113 %110 4 5 2 6 
					                                                      OpStore %112 %114 
					                                       f32_4 %119 = OpLoad %118 
					                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
					                              Uniform f32_4* %121 = OpAccessChain %20 %44 
					                                       f32_4 %122 = OpLoad %121 
					                                       f32_2 %123 = OpVectorShuffle %122 %122 0 1 
					                                       f32_2 %124 = OpFMul %120 %123 
					                              Uniform f32_4* %125 = OpAccessChain %20 %44 
					                                       f32_4 %126 = OpLoad %125 
					                                       f32_2 %127 = OpVectorShuffle %126 %126 2 3 
					                                       f32_2 %128 = OpFAdd %124 %127 
					                                                      OpStore vs_TEXCOORD1 %128 
					                                       f32_4 %130 = OpLoad %118 
					                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
					                              Uniform f32_4* %133 = OpAccessChain %20 %132 
					                                       f32_4 %134 = OpLoad %133 
					                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
					                                       f32_2 %136 = OpFMul %131 %135 
					                              Uniform f32_4* %137 = OpAccessChain %20 %132 
					                                       f32_4 %138 = OpLoad %137 
					                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
					                                       f32_2 %140 = OpFAdd %136 %139 
					                                                      OpStore vs_TEXCOORD3 %140 
					                                Uniform f32* %142 = OpAccessChain %20 %141 
					                                         f32 %143 = OpLoad %142 
					                                         f32 %144 = OpFNegate %143 
					                                Uniform f32* %146 = OpAccessChain %20 %145 
					                                         f32 %147 = OpLoad %146 
					                                         f32 %148 = OpFMul %144 %147 
					                                         f32 %150 = OpFAdd %148 %149 
					                                Private f32* %151 = OpAccessChain %9 %83 
					                                                      OpStore %151 %150 
					                                Uniform f32* %153 = OpAccessChain %20 %152 
					                                         f32 %154 = OpLoad %153 
					                                         f32 %155 = OpFNegate %154 
					                                Uniform f32* %156 = OpAccessChain %20 %145 
					                                         f32 %157 = OpLoad %156 
					                                         f32 %158 = OpFMul %155 %157 
					                                Private f32* %159 = OpAccessChain %9 %83 
					                                         f32 %160 = OpLoad %159 
					                                         f32 %161 = OpFAdd %158 %160 
					                                Private f32* %162 = OpAccessChain %9 %83 
					                                                      OpStore %162 %161 
					                                Private f32* %164 = OpAccessChain %9 %83 
					                                         f32 %165 = OpLoad %164 
					                                         f32 %167 = OpFMul %165 %166 
					                                                      OpStore vs_TEXCOORD2 %167 
					                                 Output f32* %168 = OpAccessChain %96 %27 %92 
					                                         f32 %169 = OpLoad %168 
					                                         f32 %170 = OpFNegate %169 
					                                 Output f32* %171 = OpAccessChain %96 %27 %92 
					                                                      OpStore %171 %170 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 56
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %31 %53 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 21 
					                                             OpDecorate %27 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 31 
					                                             OpDecorate %53 Location 53 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 2 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
					                                     %23 = OpTypeVector %6 4 
					                                     %25 = OpTypeInt 32 0 
					                                 u32 %26 = OpConstant 3 
					                        Private f32* %28 = OpVariable Private 
					                                     %30 = OpTypePointer Input %6 
					                 Input f32* vs_TEXCOORD2 = OpVariable Input 
					                                     %35 = OpTypeBool 
					                                     %36 = OpTypePointer Private %35 
					                       Private bool* %37 = OpVariable Private 
					                                 f32 %39 = OpConstant 3,674022E-40 
					                                     %42 = OpTypeInt 32 1 
					                                 i32 %43 = OpConstant 0 
					                                 i32 %44 = OpConstant 1 
					                                 i32 %46 = OpConstant -1 
					                                     %52 = OpTypePointer Output %23 
					                       Output f32_4* %53 = OpVariable Output 
					                               f32_4 %54 = OpConstantComposite %39 %39 %39 %39 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_2 %22 = OpLoad vs_TEXCOORD1 
					                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
					                                 f32 %27 = OpCompositeExtract %24 3 
					                                             OpStore %8 %27 
					                                 f32 %29 = OpLoad %8 
					                                 f32 %32 = OpLoad vs_TEXCOORD2 
					                                 f32 %33 = OpFNegate %32 
					                                 f32 %34 = OpFAdd %29 %33 
					                                             OpStore %28 %34 
					                                 f32 %38 = OpLoad %28 
					                                bool %40 = OpFOrdLessThan %38 %39 
					                                             OpStore %37 %40 
					                                bool %41 = OpLoad %37 
					                                 i32 %45 = OpSelect %41 %44 %43 
					                                 i32 %47 = OpIMul %45 %46 
					                                bool %48 = OpINotEqual %47 %43 
					                                             OpSelectionMerge %50 None 
					                                             OpBranchConditional %48 %49 %50 
					                                     %49 = OpLabel 
					                                             OpKill
					                                     %50 = OpLabel 
					                                             OpStore %53 %54 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0 = u_xlat10_0.w + (-vs_TEXCOORD2);
					    u_xlatb0 = u_xlat0<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "SHADOWS_DEPTH" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0 = u_xlat10_0.w + (-vs_TEXCOORD2);
					    u_xlatb0 = u_xlat0<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "SHADOWS_CUBE" }
					"!!vulkan"
				}
			}
		}
	}
	CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
}