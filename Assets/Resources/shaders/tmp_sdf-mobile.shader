Shader "TextMeshPro/Mobile/Distance Field" {
	Properties {
		_FaceColor ("Face Color", Vector) = (1,1,1,1)
		_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
		_OutlineColor ("Outline Color", Vector) = (0,0,0,1)
		_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
		_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
		_UnderlayColor ("Border Color", Vector) = (0,0,0,0.5)
		_UnderlayOffsetX ("Border OffsetX", Range(-1, 1)) = 0
		_UnderlayOffsetY ("Border OffsetY", Range(-1, 1)) = 0
		_UnderlayDilate ("Border Dilate", Range(-1, 1)) = 0
		_UnderlaySoftness ("Border Softness", Range(0, 1)) = 0
		_WeightNormal ("Weight Normal", Float) = 0
		_WeightBold ("Weight Bold", Float) = 0.5
		_ShaderFlags ("Flags", Float) = 0
		_ScaleRatioA ("Scale RatioA", Float) = 1
		_ScaleRatioB ("Scale RatioB", Float) = 1
		_ScaleRatioC ("Scale RatioC", Float) = 1
		_MainTex ("Font Atlas", 2D) = "white" {}
		_TextureWidth ("Texture Width", Float) = 512
		_TextureHeight ("Texture Height", Float) = 512
		_GradientScale ("Gradient Scale", Float) = 5
		_ScaleX ("Scale X", Float) = 1
		_ScaleY ("Scale Y", Float) = 1
		_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
		_VertexOffsetX ("Vertex OffsetX", Float) = 0
		_VertexOffsetY ("Vertex OffsetY", Float) = 0
		_ClipRect ("Clip Rect", Vector) = (-32767,-32767,32767,32767)
		_MaskSoftnessX ("Mask SoftnessX", Float) = 0
		_MaskSoftnessY ("Mask SoftnessY", Float) = 0
		_StencilComp ("Stencil Comparison", Float) = 8
		_Stencil ("Stencil ID", Float) = 0
		_StencilOp ("Stencil Operation", Float) = 0
		_StencilWriteMask ("Stencil Write Mask", Float) = 255
		_StencilReadMask ("Stencil Read Mask", Float) = 255
		_ColorMask ("Color Mask", Float) = 15
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One OneMinusSrcAlpha, One OneMinusSrcAlpha
			ColorMask 0 -1
			ZWrite Off
			Cull Off
			Stencil {
				ReadMask 0
				WriteMask 0
				Comp Disabled
				Pass Keep
				Fail Keep
				ZFail Keep
			}
			Fog {
				Mode Off
			}
			GpuProgramID 57736
			Program "vp" {
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat10_0.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    SV_Target0 = vec4(u_xlat0) * vs_COLOR0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 517
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %123 %136 %155 %266 %390 %430 %437 %439 %509 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %136 Location 136 
					                                                      OpDecorate %137 RelaxedPrecision 
					                                                      OpDecorate %155 Location 155 
					                                                      OpDecorate %266 Location 266 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %363 RelaxedPrecision 
					                                                      OpDecorate %364 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %375 RelaxedPrecision 
					                                                      OpDecorate %377 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %390 Location 390 
					                                                      OpDecorate vs_TEXCOORD0 Location 430 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 437 
					                                                      OpDecorate %439 Location 439 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 509 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 14 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 15 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                              Private f32_4* %122 = OpVariable Private 
					                                Input f32_4* %123 = OpVariable Input 
					                                         i32 %125 = OpConstant 6 
					                               Output f32_4* %136 = OpVariable Output 
					                                             %138 = OpTypePointer Private %6 
					                                Private f32* %139 = OpVariable Private 
					                                             %154 = OpTypePointer Input %15 
					                                Input f32_3* %155 = OpVariable Input 
					                                         u32 %161 = OpConstant 0 
					                                         u32 %174 = OpConstant 2 
					                                         i32 %198 = OpConstant 4 
					                                         i32 %220 = OpConstant 20 
					                                         i32 %223 = OpConstant 21 
					                                Private f32* %237 = OpVariable Private 
					                                         i32 %243 = OpConstant 17 
					                                         i32 %246 = OpConstant 18 
					                                         f32 %250 = OpConstant 3,674022E-40 
					                                       f32_2 %251 = OpConstantComposite %250 %250 
					                                             %265 = OpTypePointer Input %7 
					                                Input f32_2* %266 = OpVariable Input 
					                                             %267 = OpTypePointer Input %6 
					                                         i32 %271 = OpConstant 19 
					                                         f32 %281 = OpConstant 3,674022E-40 
					                                Private f32* %284 = OpVariable Private 
					                                         i32 %285 = OpConstant 22 
					                                         f32 %289 = OpConstant 3,674022E-40 
					                                             %307 = OpTypeBool 
					                                             %308 = OpTypePointer Private %307 
					                               Private bool* %309 = OpVariable Private 
					                                         u32 %310 = OpConstant 3 
					                                         f32 %313 = OpConstant 3,674022E-40 
					                                             %316 = OpTypePointer Function %6 
					                                         i32 %325 = OpConstant 8 
					                                         i32 %328 = OpConstant 13 
					                                         i32 %340 = OpConstant 10 
					                              Private f32_4* %354 = OpVariable Private 
					                                         i32 %357 = OpConstant 9 
					                               Output f32_4* %390 = OpVariable Output 
					                                         i32 %392 = OpConstant 16 
					                                         f32 %395 = OpConstant 3,674022E-40 
					                                       f32_4 %396 = OpConstantComposite %395 %395 %395 %395 
					                                         f32 %399 = OpConstant 3,674022E-40 
					                                       f32_4 %400 = OpConstantComposite %399 %399 %399 %399 
					                                         f32 %410 = OpConstant 3,674022E-40 
					                                       f32_2 %411 = OpConstantComposite %410 %410 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %439 = OpVariable Input 
					                               Private bool* %443 = OpVariable Private 
					                                Private f32* %450 = OpVariable Private 
					                                         i32 %451 = OpConstant 11 
					                                         i32 %455 = OpConstant 12 
					                                         i32 %470 = OpConstant 7 
					                                         f32 %484 = OpConstant 3,674022E-40 
					                                         f32 %493 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                             %511 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %317 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                       f32_4 %124 = OpLoad %123 
					                              Uniform f32_4* %126 = OpAccessChain %24 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpFMul %124 %127 
					                                                      OpStore %122 %128 
					                                       f32_4 %129 = OpLoad %122 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 3 3 3 
					                                       f32_4 %131 = OpLoad %122 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFMul %130 %132 
					                                       f32_4 %134 = OpLoad %122 
					                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
					                                                      OpStore %122 %135 
					                                       f32_4 %137 = OpLoad %122 
					                                                      OpStore %136 %137 
					                                       f32_4 %140 = OpLoad %36 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_4 %142 = OpLoad %36 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %141 %143 
					                                                      OpStore %139 %144 
					                                         f32 %145 = OpLoad %139 
					                                         f32 %146 = OpExtInst %1 32 %145 
					                                                      OpStore %139 %146 
					                                         f32 %147 = OpLoad %139 
					                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
					                                       f32_4 %149 = OpLoad %36 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_3 %151 = OpFMul %148 %150 
					                                       f32_4 %152 = OpLoad %36 
					                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
					                                                      OpStore %36 %153 
					                                       f32_3 %156 = OpLoad %155 
					                              Uniform f32_4* %157 = OpAccessChain %24 %62 %45 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                         f32 %160 = OpDot %156 %159 
					                                Private f32* %162 = OpAccessChain %60 %161 
					                                                      OpStore %162 %160 
					                                       f32_3 %163 = OpLoad %155 
					                              Uniform f32_4* %164 = OpAccessChain %24 %62 %40 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                         f32 %167 = OpDot %163 %166 
					                                Private f32* %168 = OpAccessChain %60 %114 
					                                                      OpStore %168 %167 
					                                       f32_3 %169 = OpLoad %155 
					                              Uniform f32_4* %170 = OpAccessChain %24 %62 %39 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %175 = OpAccessChain %60 %174 
					                                                      OpStore %175 %173 
					                                       f32_4 %176 = OpLoad %60 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_4 %178 = OpLoad %60 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %177 %179 
					                                                      OpStore %139 %180 
					                                         f32 %181 = OpLoad %139 
					                                         f32 %182 = OpExtInst %1 32 %181 
					                                                      OpStore %139 %182 
					                                         f32 %183 = OpLoad %139 
					                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
					                                       f32_4 %185 = OpLoad %60 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_3 %187 = OpFMul %184 %186 
					                                       f32_4 %188 = OpLoad %60 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
					                                                      OpStore %60 %189 
					                                       f32_4 %190 = OpLoad %60 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                         f32 %194 = OpDot %191 %193 
					                                                      OpStore %139 %194 
					                              Uniform f32_4* %195 = OpAccessChain %24 %40 
					                                       f32_4 %196 = OpLoad %195 
					                                       f32_2 %197 = OpVectorShuffle %196 %196 1 1 
					                              Uniform f32_4* %199 = OpAccessChain %24 %198 %40 
					                                       f32_4 %200 = OpLoad %199 
					                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
					                                       f32_2 %202 = OpFMul %197 %201 
					                                       f32_4 %203 = OpLoad %36 
					                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
					                                                      OpStore %36 %204 
					                              Uniform f32_4* %205 = OpAccessChain %24 %198 %45 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                              Uniform f32_4* %208 = OpAccessChain %24 %40 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_2 %210 = OpVectorShuffle %209 %209 0 0 
					                                       f32_2 %211 = OpFMul %207 %210 
					                                       f32_4 %212 = OpLoad %36 
					                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
					                                       f32_2 %214 = OpFAdd %211 %213 
					                                       f32_4 %215 = OpLoad %36 
					                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
					                                                      OpStore %36 %216 
					                                       f32_4 %217 = OpLoad %36 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
					                                       f32_2 %219 = OpExtInst %1 4 %218 
					                                Uniform f32* %221 = OpAccessChain %24 %220 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %224 = OpAccessChain %24 %223 
					                                         f32 %225 = OpLoad %224 
					                                       f32_2 %226 = OpCompositeConstruct %222 %225 
					                                       f32_2 %227 = OpFMul %219 %226 
					                                       f32_4 %228 = OpLoad %36 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
					                                                      OpStore %36 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_2 %231 = OpVectorShuffle %230 %230 3 3 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
					                                       f32_2 %234 = OpFDiv %231 %233 
					                                       f32_4 %235 = OpLoad %36 
					                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
					                                                      OpStore %36 %236 
					                                       f32_4 %238 = OpLoad %36 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_4 %240 = OpLoad %36 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                         f32 %242 = OpDot %239 %241 
					                                                      OpStore %237 %242 
					                                Uniform f32* %244 = OpAccessChain %24 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %247 = OpAccessChain %24 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_2 %249 = OpCompositeConstruct %245 %248 
					                                       f32_2 %252 = OpFMul %249 %251 
					                                       f32_4 %253 = OpLoad %36 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
					                                       f32_2 %255 = OpFAdd %252 %254 
					                                       f32_4 %256 = OpLoad %36 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
					                                                      OpStore %36 %257 
					                                       f32_4 %258 = OpLoad %36 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
					                                       f32_2 %260 = OpFDiv %251 %259 
					                                       f32_4 %261 = OpLoad %36 
					                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
					                                                      OpStore %36 %262 
					                                         f32 %263 = OpLoad %237 
					                                         f32 %264 = OpExtInst %1 32 %263 
					                                                      OpStore %237 %264 
					                                  Input f32* %268 = OpAccessChain %266 %114 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpExtInst %1 4 %269 
					                                Uniform f32* %272 = OpAccessChain %24 %271 
					                                         f32 %273 = OpLoad %272 
					                                         f32 %274 = OpFMul %270 %273 
					                                Private f32* %275 = OpAccessChain %60 %161 
					                                                      OpStore %275 %274 
					                                         f32 %276 = OpLoad %237 
					                                Private f32* %277 = OpAccessChain %60 %161 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpFMul %276 %278 
					                                                      OpStore %237 %279 
					                                         f32 %280 = OpLoad %237 
					                                         f32 %282 = OpFMul %280 %281 
					                                Private f32* %283 = OpAccessChain %60 %161 
					                                                      OpStore %283 %282 
					                                Uniform f32* %286 = OpAccessChain %24 %285 
					                                         f32 %287 = OpLoad %286 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %290 = OpFAdd %288 %289 
					                                                      OpStore %284 %290 
					                                         f32 %291 = OpLoad %284 
					                                Private f32* %292 = OpAccessChain %60 %161 
					                                         f32 %293 = OpLoad %292 
					                                         f32 %294 = OpExtInst %1 4 %293 
					                                         f32 %295 = OpFMul %291 %294 
					                                                      OpStore %284 %295 
					                                         f32 %296 = OpLoad %237 
					                                         f32 %297 = OpFMul %296 %281 
					                                         f32 %298 = OpLoad %284 
					                                         f32 %299 = OpFNegate %298 
					                                         f32 %300 = OpFAdd %297 %299 
					                                                      OpStore %237 %300 
					                                         f32 %301 = OpLoad %139 
					                                         f32 %302 = OpExtInst %1 4 %301 
					                                         f32 %303 = OpLoad %237 
					                                         f32 %304 = OpFMul %302 %303 
					                                         f32 %305 = OpLoad %284 
					                                         f32 %306 = OpFAdd %304 %305 
					                                                      OpStore %139 %306 
					                                Uniform f32* %311 = OpAccessChain %24 %198 %62 %310 
					                                         f32 %312 = OpLoad %311 
					                                        bool %314 = OpFOrdEqual %312 %313 
					                                                      OpStore %309 %314 
					                                        bool %315 = OpLoad %309 
					                                                      OpSelectionMerge %319 None 
					                                                      OpBranchConditional %315 %318 %321 
					                                             %318 = OpLabel 
					                                         f32 %320 = OpLoad %139 
					                                                      OpStore %317 %320 
					                                                      OpBranch %319 
					                                             %321 = OpLabel 
					                                Private f32* %322 = OpAccessChain %60 %161 
					                                         f32 %323 = OpLoad %322 
					                                                      OpStore %317 %323 
					                                                      OpBranch %319 
					                                             %319 = OpLabel 
					                                         f32 %324 = OpLoad %317 
					                                                      OpStore %139 %324 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                Uniform f32* %329 = OpAccessChain %24 %328 
					                                         f32 %330 = OpLoad %329 
					                                         f32 %331 = OpFMul %327 %330 
					                                                      OpStore %237 %331 
					                                         f32 %332 = OpLoad %237 
					                                         f32 %333 = OpLoad %139 
					                                         f32 %334 = OpFMul %332 %333 
					                                         f32 %335 = OpFAdd %334 %289 
					                                                      OpStore %237 %335 
					                                         f32 %336 = OpLoad %139 
					                                         f32 %337 = OpLoad %237 
					                                         f32 %338 = OpFDiv %336 %337 
					                                Private f32* %339 = OpAccessChain %60 %161 
					                                                      OpStore %339 %338 
					                                Uniform f32* %341 = OpAccessChain %24 %340 
					                                         f32 %342 = OpLoad %341 
					                                Uniform f32* %343 = OpAccessChain %24 %328 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                                      OpStore %139 %345 
					                                Private f32* %346 = OpAccessChain %60 %161 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpLoad %139 
					                                         f32 %349 = OpFMul %347 %348 
					                                                      OpStore %139 %349 
					                                         f32 %350 = OpLoad %139 
					                                         f32 %351 = OpExtInst %1 37 %350 %289 
					                                                      OpStore %237 %351 
					                                         f32 %352 = OpLoad %237 
					                                         f32 %353 = OpExtInst %1 31 %352 
					                                                      OpStore %237 %353 
					                                  Input f32* %355 = OpAccessChain %123 %310 
					                                         f32 %356 = OpLoad %355 
					                                Uniform f32* %358 = OpAccessChain %24 %357 %310 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFMul %356 %359 
					                                Private f32* %361 = OpAccessChain %354 %161 
					                                                      OpStore %361 %360 
					                              Uniform f32_4* %362 = OpAccessChain %24 %357 
					                                       f32_4 %363 = OpLoad %362 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %354 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
					                                       f32_3 %367 = OpFMul %364 %366 
					                                       f32_4 %368 = OpLoad %122 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                                       f32_3 %370 = OpFNegate %369 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %354 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %354 %373 
					                                Uniform f32* %374 = OpAccessChain %24 %357 %310 
					                                         f32 %375 = OpLoad %374 
					                                  Input f32* %376 = OpAccessChain %123 %310 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                Private f32* %379 = OpAccessChain %122 %310 
					                                         f32 %380 = OpLoad %379 
					                                         f32 %381 = OpFNegate %380 
					                                         f32 %382 = OpFAdd %378 %381 
					                                Private f32* %383 = OpAccessChain %354 %310 
					                                                      OpStore %383 %382 
					                                         f32 %384 = OpLoad %237 
					                                       f32_4 %385 = OpCompositeConstruct %384 %384 %384 %384 
					                                       f32_4 %386 = OpLoad %354 
					                                       f32_4 %387 = OpFMul %385 %386 
					                                       f32_4 %388 = OpLoad %122 
					                                       f32_4 %389 = OpFAdd %387 %388 
					                                                      OpStore %86 %389 
					                                       f32_4 %391 = OpLoad %86 
					                                                      OpStore %390 %391 
					                              Uniform f32_4* %393 = OpAccessChain %24 %392 
					                                       f32_4 %394 = OpLoad %393 
					                                       f32_4 %397 = OpExtInst %1 40 %394 %396 
					                                                      OpStore %86 %397 
					                                       f32_4 %398 = OpLoad %86 
					                                       f32_4 %401 = OpExtInst %1 37 %398 %400 
					                                                      OpStore %86 %401 
					                                       f32_2 %402 = OpLoad %9 
					                                       f32_4 %403 = OpLoad %86 
					                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
					                                       f32_2 %405 = OpFNegate %404 
					                                       f32_2 %406 = OpFAdd %402 %405 
					                                       f32_4 %407 = OpLoad %354 
					                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
					                                                      OpStore %354 %408 
					                                       f32_2 %409 = OpLoad %9 
					                                       f32_2 %412 = OpFMul %409 %411 
					                                       f32_4 %413 = OpLoad %86 
					                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
					                                       f32_2 %415 = OpFNegate %414 
					                                       f32_2 %416 = OpFAdd %412 %415 
					                                                      OpStore %9 %416 
					                                       f32_4 %417 = OpLoad %86 
					                                       f32_2 %418 = OpVectorShuffle %417 %417 2 3 
					                                       f32_2 %419 = OpFNegate %418 
					                                       f32_2 %420 = OpLoad %9 
					                                       f32_2 %421 = OpFAdd %419 %420 
					                                       f32_4 %422 = OpLoad %36 
					                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 2 3 
					                                                      OpStore %36 %423 
					                                       f32_4 %424 = OpLoad %86 
					                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
					                                       f32_2 %426 = OpFNegate %425 
					                                       f32_4 %427 = OpLoad %86 
					                                       f32_2 %428 = OpVectorShuffle %427 %427 2 3 
					                                       f32_2 %429 = OpFAdd %426 %428 
					                                                      OpStore %9 %429 
					                                       f32_4 %431 = OpLoad %354 
					                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
					                                       f32_2 %433 = OpLoad %9 
					                                       f32_2 %434 = OpFDiv %432 %433 
					                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %436 
					                                       f32_4 %438 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %438 
					                                       f32_2 %440 = OpLoad %439 
					                                       f32_4 %441 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %442 
					                                  Input f32* %444 = OpAccessChain %266 %114 
					                                         f32 %445 = OpLoad %444 
					                                        bool %446 = OpFOrdGreaterThanEqual %313 %445 
					                                                      OpStore %443 %446 
					                                        bool %447 = OpLoad %443 
					                                         f32 %448 = OpSelect %447 %289 %313 
					                                Private f32* %449 = OpAccessChain %9 %161 
					                                                      OpStore %449 %448 
					                                Uniform f32* %452 = OpAccessChain %24 %451 
					                                         f32 %453 = OpLoad %452 
					                                         f32 %454 = OpFNegate %453 
					                                Uniform f32* %456 = OpAccessChain %24 %455 
					                                         f32 %457 = OpLoad %456 
					                                         f32 %458 = OpFAdd %454 %457 
					                                                      OpStore %450 %458 
					                                Private f32* %459 = OpAccessChain %9 %161 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpLoad %450 
					                                         f32 %462 = OpFMul %460 %461 
					                                Uniform f32* %463 = OpAccessChain %24 %451 
					                                         f32 %464 = OpLoad %463 
					                                         f32 %465 = OpFAdd %462 %464 
					                                Private f32* %466 = OpAccessChain %9 %161 
					                                                      OpStore %466 %465 
					                                Private f32* %467 = OpAccessChain %9 %161 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFMul %468 %250 
					                                Uniform f32* %471 = OpAccessChain %24 %470 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %469 %472 
					                                Private f32* %474 = OpAccessChain %9 %161 
					                                                      OpStore %474 %473 
					                                Private f32* %475 = OpAccessChain %9 %161 
					                                         f32 %476 = OpLoad %475 
					                                Uniform f32* %477 = OpAccessChain %24 %328 
					                                         f32 %478 = OpLoad %477 
					                                         f32 %479 = OpFMul %476 %478 
					                                Private f32* %480 = OpAccessChain %9 %161 
					                                                      OpStore %480 %479 
					                                Private f32* %481 = OpAccessChain %9 %161 
					                                         f32 %482 = OpLoad %481 
					                                         f32 %483 = OpFNegate %482 
					                                         f32 %485 = OpFMul %483 %484 
					                                         f32 %486 = OpFAdd %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %161 
					                                                      OpStore %487 %486 
					                                Private f32* %488 = OpAccessChain %9 %161 
					                                         f32 %489 = OpLoad %488 
					                                Private f32* %490 = OpAccessChain %60 %161 
					                                         f32 %491 = OpLoad %490 
					                                         f32 %492 = OpFMul %489 %491 
					                                         f32 %494 = OpFAdd %492 %493 
					                                Private f32* %495 = OpAccessChain %60 %310 
					                                                      OpStore %495 %494 
					                                         f32 %496 = OpLoad %139 
					                                         f32 %497 = OpFNegate %496 
					                                         f32 %498 = OpFMul %497 %484 
					                                Private f32* %499 = OpAccessChain %60 %310 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFAdd %498 %500 
					                                Private f32* %502 = OpAccessChain %60 %114 
					                                                      OpStore %502 %501 
					                                         f32 %503 = OpLoad %139 
					                                         f32 %504 = OpFMul %503 %484 
					                                Private f32* %505 = OpAccessChain %60 %310 
					                                         f32 %506 = OpLoad %505 
					                                         f32 %507 = OpFAdd %504 %506 
					                                Private f32* %508 = OpAccessChain %60 %174 
					                                                      OpStore %508 %507 
					                                       f32_4 %510 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %510 
					                                 Output f32* %512 = OpAccessChain %118 %45 %114 
					                                         f32 %513 = OpLoad %512 
					                                         f32 %514 = OpFNegate %513 
					                                 Output f32* %515 = OpAccessChain %118 %45 %114 
					                                                      OpStore %515 %514 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 53
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %31 %46 %49 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 31 
					                                             OpDecorate %35 RelaxedPrecision 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %46 Location 46 
					                                             OpDecorate %47 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %49 Location 49 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %51 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                        Private f32* %29 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                 u32 %32 = OpConstant 0 
					                                     %33 = OpTypePointer Input %6 
					                                 f32 %42 = OpConstant 3,674022E-40 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                                     %45 = OpTypePointer Output %19 
					                       Output f32_4* %46 = OpVariable Output 
					                        Input f32_4* %49 = OpVariable Input 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD0 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %30 = OpLoad %8 
					                          Input f32* %34 = OpAccessChain vs_TEXCOORD1 %32 
					                                 f32 %35 = OpLoad %34 
					                                 f32 %36 = OpFMul %30 %35 
					                          Input f32* %37 = OpAccessChain vs_TEXCOORD1 %27 
					                                 f32 %38 = OpLoad %37 
					                                 f32 %39 = OpFNegate %38 
					                                 f32 %40 = OpFAdd %36 %39 
					                                             OpStore %29 %40 
					                                 f32 %41 = OpLoad %29 
					                                 f32 %44 = OpExtInst %1 43 %41 %42 %43 
					                                             OpStore %29 %44 
					                                 f32 %47 = OpLoad %29 
					                               f32_4 %48 = OpCompositeConstruct %47 %47 %47 %47 
					                               f32_4 %50 = OpLoad %49 
					                               f32_4 %51 = OpFMul %48 %50 
					                                             OpStore %46 %51 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					void main()
					{
					    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = u_xlat10_1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
					    SV_Target0 = u_xlat1.yyyy * u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 517
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %123 %136 %155 %266 %390 %430 %437 %439 %509 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %136 Location 136 
					                                                      OpDecorate %137 RelaxedPrecision 
					                                                      OpDecorate %155 Location 155 
					                                                      OpDecorate %266 Location 266 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %363 RelaxedPrecision 
					                                                      OpDecorate %364 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %375 RelaxedPrecision 
					                                                      OpDecorate %377 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %390 Location 390 
					                                                      OpDecorate vs_TEXCOORD0 Location 430 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 437 
					                                                      OpDecorate %439 Location 439 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 509 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 14 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 15 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                              Private f32_4* %122 = OpVariable Private 
					                                Input f32_4* %123 = OpVariable Input 
					                                         i32 %125 = OpConstant 6 
					                               Output f32_4* %136 = OpVariable Output 
					                                             %138 = OpTypePointer Private %6 
					                                Private f32* %139 = OpVariable Private 
					                                             %154 = OpTypePointer Input %15 
					                                Input f32_3* %155 = OpVariable Input 
					                                         u32 %161 = OpConstant 0 
					                                         u32 %174 = OpConstant 2 
					                                         i32 %198 = OpConstant 4 
					                                         i32 %220 = OpConstant 20 
					                                         i32 %223 = OpConstant 21 
					                                Private f32* %237 = OpVariable Private 
					                                         i32 %243 = OpConstant 17 
					                                         i32 %246 = OpConstant 18 
					                                         f32 %250 = OpConstant 3,674022E-40 
					                                       f32_2 %251 = OpConstantComposite %250 %250 
					                                             %265 = OpTypePointer Input %7 
					                                Input f32_2* %266 = OpVariable Input 
					                                             %267 = OpTypePointer Input %6 
					                                         i32 %271 = OpConstant 19 
					                                         f32 %281 = OpConstant 3,674022E-40 
					                                Private f32* %284 = OpVariable Private 
					                                         i32 %285 = OpConstant 22 
					                                         f32 %289 = OpConstant 3,674022E-40 
					                                             %307 = OpTypeBool 
					                                             %308 = OpTypePointer Private %307 
					                               Private bool* %309 = OpVariable Private 
					                                         u32 %310 = OpConstant 3 
					                                         f32 %313 = OpConstant 3,674022E-40 
					                                             %316 = OpTypePointer Function %6 
					                                         i32 %325 = OpConstant 8 
					                                         i32 %328 = OpConstant 13 
					                                         i32 %340 = OpConstant 10 
					                              Private f32_4* %354 = OpVariable Private 
					                                         i32 %357 = OpConstant 9 
					                               Output f32_4* %390 = OpVariable Output 
					                                         i32 %392 = OpConstant 16 
					                                         f32 %395 = OpConstant 3,674022E-40 
					                                       f32_4 %396 = OpConstantComposite %395 %395 %395 %395 
					                                         f32 %399 = OpConstant 3,674022E-40 
					                                       f32_4 %400 = OpConstantComposite %399 %399 %399 %399 
					                                         f32 %410 = OpConstant 3,674022E-40 
					                                       f32_2 %411 = OpConstantComposite %410 %410 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %439 = OpVariable Input 
					                               Private bool* %443 = OpVariable Private 
					                                Private f32* %450 = OpVariable Private 
					                                         i32 %451 = OpConstant 11 
					                                         i32 %455 = OpConstant 12 
					                                         i32 %470 = OpConstant 7 
					                                         f32 %484 = OpConstant 3,674022E-40 
					                                         f32 %493 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                             %511 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %317 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                       f32_4 %124 = OpLoad %123 
					                              Uniform f32_4* %126 = OpAccessChain %24 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpFMul %124 %127 
					                                                      OpStore %122 %128 
					                                       f32_4 %129 = OpLoad %122 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 3 3 3 
					                                       f32_4 %131 = OpLoad %122 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFMul %130 %132 
					                                       f32_4 %134 = OpLoad %122 
					                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
					                                                      OpStore %122 %135 
					                                       f32_4 %137 = OpLoad %122 
					                                                      OpStore %136 %137 
					                                       f32_4 %140 = OpLoad %36 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_4 %142 = OpLoad %36 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %141 %143 
					                                                      OpStore %139 %144 
					                                         f32 %145 = OpLoad %139 
					                                         f32 %146 = OpExtInst %1 32 %145 
					                                                      OpStore %139 %146 
					                                         f32 %147 = OpLoad %139 
					                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
					                                       f32_4 %149 = OpLoad %36 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_3 %151 = OpFMul %148 %150 
					                                       f32_4 %152 = OpLoad %36 
					                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
					                                                      OpStore %36 %153 
					                                       f32_3 %156 = OpLoad %155 
					                              Uniform f32_4* %157 = OpAccessChain %24 %62 %45 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                         f32 %160 = OpDot %156 %159 
					                                Private f32* %162 = OpAccessChain %60 %161 
					                                                      OpStore %162 %160 
					                                       f32_3 %163 = OpLoad %155 
					                              Uniform f32_4* %164 = OpAccessChain %24 %62 %40 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                         f32 %167 = OpDot %163 %166 
					                                Private f32* %168 = OpAccessChain %60 %114 
					                                                      OpStore %168 %167 
					                                       f32_3 %169 = OpLoad %155 
					                              Uniform f32_4* %170 = OpAccessChain %24 %62 %39 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %175 = OpAccessChain %60 %174 
					                                                      OpStore %175 %173 
					                                       f32_4 %176 = OpLoad %60 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_4 %178 = OpLoad %60 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %177 %179 
					                                                      OpStore %139 %180 
					                                         f32 %181 = OpLoad %139 
					                                         f32 %182 = OpExtInst %1 32 %181 
					                                                      OpStore %139 %182 
					                                         f32 %183 = OpLoad %139 
					                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
					                                       f32_4 %185 = OpLoad %60 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_3 %187 = OpFMul %184 %186 
					                                       f32_4 %188 = OpLoad %60 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
					                                                      OpStore %60 %189 
					                                       f32_4 %190 = OpLoad %60 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                         f32 %194 = OpDot %191 %193 
					                                                      OpStore %139 %194 
					                              Uniform f32_4* %195 = OpAccessChain %24 %40 
					                                       f32_4 %196 = OpLoad %195 
					                                       f32_2 %197 = OpVectorShuffle %196 %196 1 1 
					                              Uniform f32_4* %199 = OpAccessChain %24 %198 %40 
					                                       f32_4 %200 = OpLoad %199 
					                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
					                                       f32_2 %202 = OpFMul %197 %201 
					                                       f32_4 %203 = OpLoad %36 
					                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
					                                                      OpStore %36 %204 
					                              Uniform f32_4* %205 = OpAccessChain %24 %198 %45 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                              Uniform f32_4* %208 = OpAccessChain %24 %40 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_2 %210 = OpVectorShuffle %209 %209 0 0 
					                                       f32_2 %211 = OpFMul %207 %210 
					                                       f32_4 %212 = OpLoad %36 
					                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
					                                       f32_2 %214 = OpFAdd %211 %213 
					                                       f32_4 %215 = OpLoad %36 
					                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
					                                                      OpStore %36 %216 
					                                       f32_4 %217 = OpLoad %36 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
					                                       f32_2 %219 = OpExtInst %1 4 %218 
					                                Uniform f32* %221 = OpAccessChain %24 %220 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %224 = OpAccessChain %24 %223 
					                                         f32 %225 = OpLoad %224 
					                                       f32_2 %226 = OpCompositeConstruct %222 %225 
					                                       f32_2 %227 = OpFMul %219 %226 
					                                       f32_4 %228 = OpLoad %36 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
					                                                      OpStore %36 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_2 %231 = OpVectorShuffle %230 %230 3 3 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
					                                       f32_2 %234 = OpFDiv %231 %233 
					                                       f32_4 %235 = OpLoad %36 
					                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
					                                                      OpStore %36 %236 
					                                       f32_4 %238 = OpLoad %36 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_4 %240 = OpLoad %36 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                         f32 %242 = OpDot %239 %241 
					                                                      OpStore %237 %242 
					                                Uniform f32* %244 = OpAccessChain %24 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %247 = OpAccessChain %24 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_2 %249 = OpCompositeConstruct %245 %248 
					                                       f32_2 %252 = OpFMul %249 %251 
					                                       f32_4 %253 = OpLoad %36 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
					                                       f32_2 %255 = OpFAdd %252 %254 
					                                       f32_4 %256 = OpLoad %36 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
					                                                      OpStore %36 %257 
					                                       f32_4 %258 = OpLoad %36 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
					                                       f32_2 %260 = OpFDiv %251 %259 
					                                       f32_4 %261 = OpLoad %36 
					                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
					                                                      OpStore %36 %262 
					                                         f32 %263 = OpLoad %237 
					                                         f32 %264 = OpExtInst %1 32 %263 
					                                                      OpStore %237 %264 
					                                  Input f32* %268 = OpAccessChain %266 %114 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpExtInst %1 4 %269 
					                                Uniform f32* %272 = OpAccessChain %24 %271 
					                                         f32 %273 = OpLoad %272 
					                                         f32 %274 = OpFMul %270 %273 
					                                Private f32* %275 = OpAccessChain %60 %161 
					                                                      OpStore %275 %274 
					                                         f32 %276 = OpLoad %237 
					                                Private f32* %277 = OpAccessChain %60 %161 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpFMul %276 %278 
					                                                      OpStore %237 %279 
					                                         f32 %280 = OpLoad %237 
					                                         f32 %282 = OpFMul %280 %281 
					                                Private f32* %283 = OpAccessChain %60 %161 
					                                                      OpStore %283 %282 
					                                Uniform f32* %286 = OpAccessChain %24 %285 
					                                         f32 %287 = OpLoad %286 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %290 = OpFAdd %288 %289 
					                                                      OpStore %284 %290 
					                                         f32 %291 = OpLoad %284 
					                                Private f32* %292 = OpAccessChain %60 %161 
					                                         f32 %293 = OpLoad %292 
					                                         f32 %294 = OpExtInst %1 4 %293 
					                                         f32 %295 = OpFMul %291 %294 
					                                                      OpStore %284 %295 
					                                         f32 %296 = OpLoad %237 
					                                         f32 %297 = OpFMul %296 %281 
					                                         f32 %298 = OpLoad %284 
					                                         f32 %299 = OpFNegate %298 
					                                         f32 %300 = OpFAdd %297 %299 
					                                                      OpStore %237 %300 
					                                         f32 %301 = OpLoad %139 
					                                         f32 %302 = OpExtInst %1 4 %301 
					                                         f32 %303 = OpLoad %237 
					                                         f32 %304 = OpFMul %302 %303 
					                                         f32 %305 = OpLoad %284 
					                                         f32 %306 = OpFAdd %304 %305 
					                                                      OpStore %139 %306 
					                                Uniform f32* %311 = OpAccessChain %24 %198 %62 %310 
					                                         f32 %312 = OpLoad %311 
					                                        bool %314 = OpFOrdEqual %312 %313 
					                                                      OpStore %309 %314 
					                                        bool %315 = OpLoad %309 
					                                                      OpSelectionMerge %319 None 
					                                                      OpBranchConditional %315 %318 %321 
					                                             %318 = OpLabel 
					                                         f32 %320 = OpLoad %139 
					                                                      OpStore %317 %320 
					                                                      OpBranch %319 
					                                             %321 = OpLabel 
					                                Private f32* %322 = OpAccessChain %60 %161 
					                                         f32 %323 = OpLoad %322 
					                                                      OpStore %317 %323 
					                                                      OpBranch %319 
					                                             %319 = OpLabel 
					                                         f32 %324 = OpLoad %317 
					                                                      OpStore %139 %324 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                Uniform f32* %329 = OpAccessChain %24 %328 
					                                         f32 %330 = OpLoad %329 
					                                         f32 %331 = OpFMul %327 %330 
					                                                      OpStore %237 %331 
					                                         f32 %332 = OpLoad %237 
					                                         f32 %333 = OpLoad %139 
					                                         f32 %334 = OpFMul %332 %333 
					                                         f32 %335 = OpFAdd %334 %289 
					                                                      OpStore %237 %335 
					                                         f32 %336 = OpLoad %139 
					                                         f32 %337 = OpLoad %237 
					                                         f32 %338 = OpFDiv %336 %337 
					                                Private f32* %339 = OpAccessChain %60 %161 
					                                                      OpStore %339 %338 
					                                Uniform f32* %341 = OpAccessChain %24 %340 
					                                         f32 %342 = OpLoad %341 
					                                Uniform f32* %343 = OpAccessChain %24 %328 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                                      OpStore %139 %345 
					                                Private f32* %346 = OpAccessChain %60 %161 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpLoad %139 
					                                         f32 %349 = OpFMul %347 %348 
					                                                      OpStore %139 %349 
					                                         f32 %350 = OpLoad %139 
					                                         f32 %351 = OpExtInst %1 37 %350 %289 
					                                                      OpStore %237 %351 
					                                         f32 %352 = OpLoad %237 
					                                         f32 %353 = OpExtInst %1 31 %352 
					                                                      OpStore %237 %353 
					                                  Input f32* %355 = OpAccessChain %123 %310 
					                                         f32 %356 = OpLoad %355 
					                                Uniform f32* %358 = OpAccessChain %24 %357 %310 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFMul %356 %359 
					                                Private f32* %361 = OpAccessChain %354 %161 
					                                                      OpStore %361 %360 
					                              Uniform f32_4* %362 = OpAccessChain %24 %357 
					                                       f32_4 %363 = OpLoad %362 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %354 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
					                                       f32_3 %367 = OpFMul %364 %366 
					                                       f32_4 %368 = OpLoad %122 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                                       f32_3 %370 = OpFNegate %369 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %354 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %354 %373 
					                                Uniform f32* %374 = OpAccessChain %24 %357 %310 
					                                         f32 %375 = OpLoad %374 
					                                  Input f32* %376 = OpAccessChain %123 %310 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                Private f32* %379 = OpAccessChain %122 %310 
					                                         f32 %380 = OpLoad %379 
					                                         f32 %381 = OpFNegate %380 
					                                         f32 %382 = OpFAdd %378 %381 
					                                Private f32* %383 = OpAccessChain %354 %310 
					                                                      OpStore %383 %382 
					                                         f32 %384 = OpLoad %237 
					                                       f32_4 %385 = OpCompositeConstruct %384 %384 %384 %384 
					                                       f32_4 %386 = OpLoad %354 
					                                       f32_4 %387 = OpFMul %385 %386 
					                                       f32_4 %388 = OpLoad %122 
					                                       f32_4 %389 = OpFAdd %387 %388 
					                                                      OpStore %86 %389 
					                                       f32_4 %391 = OpLoad %86 
					                                                      OpStore %390 %391 
					                              Uniform f32_4* %393 = OpAccessChain %24 %392 
					                                       f32_4 %394 = OpLoad %393 
					                                       f32_4 %397 = OpExtInst %1 40 %394 %396 
					                                                      OpStore %86 %397 
					                                       f32_4 %398 = OpLoad %86 
					                                       f32_4 %401 = OpExtInst %1 37 %398 %400 
					                                                      OpStore %86 %401 
					                                       f32_2 %402 = OpLoad %9 
					                                       f32_4 %403 = OpLoad %86 
					                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
					                                       f32_2 %405 = OpFNegate %404 
					                                       f32_2 %406 = OpFAdd %402 %405 
					                                       f32_4 %407 = OpLoad %354 
					                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
					                                                      OpStore %354 %408 
					                                       f32_2 %409 = OpLoad %9 
					                                       f32_2 %412 = OpFMul %409 %411 
					                                       f32_4 %413 = OpLoad %86 
					                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
					                                       f32_2 %415 = OpFNegate %414 
					                                       f32_2 %416 = OpFAdd %412 %415 
					                                                      OpStore %9 %416 
					                                       f32_4 %417 = OpLoad %86 
					                                       f32_2 %418 = OpVectorShuffle %417 %417 2 3 
					                                       f32_2 %419 = OpFNegate %418 
					                                       f32_2 %420 = OpLoad %9 
					                                       f32_2 %421 = OpFAdd %419 %420 
					                                       f32_4 %422 = OpLoad %36 
					                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 2 3 
					                                                      OpStore %36 %423 
					                                       f32_4 %424 = OpLoad %86 
					                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
					                                       f32_2 %426 = OpFNegate %425 
					                                       f32_4 %427 = OpLoad %86 
					                                       f32_2 %428 = OpVectorShuffle %427 %427 2 3 
					                                       f32_2 %429 = OpFAdd %426 %428 
					                                                      OpStore %9 %429 
					                                       f32_4 %431 = OpLoad %354 
					                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
					                                       f32_2 %433 = OpLoad %9 
					                                       f32_2 %434 = OpFDiv %432 %433 
					                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %436 
					                                       f32_4 %438 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %438 
					                                       f32_2 %440 = OpLoad %439 
					                                       f32_4 %441 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %442 
					                                  Input f32* %444 = OpAccessChain %266 %114 
					                                         f32 %445 = OpLoad %444 
					                                        bool %446 = OpFOrdGreaterThanEqual %313 %445 
					                                                      OpStore %443 %446 
					                                        bool %447 = OpLoad %443 
					                                         f32 %448 = OpSelect %447 %289 %313 
					                                Private f32* %449 = OpAccessChain %9 %161 
					                                                      OpStore %449 %448 
					                                Uniform f32* %452 = OpAccessChain %24 %451 
					                                         f32 %453 = OpLoad %452 
					                                         f32 %454 = OpFNegate %453 
					                                Uniform f32* %456 = OpAccessChain %24 %455 
					                                         f32 %457 = OpLoad %456 
					                                         f32 %458 = OpFAdd %454 %457 
					                                                      OpStore %450 %458 
					                                Private f32* %459 = OpAccessChain %9 %161 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpLoad %450 
					                                         f32 %462 = OpFMul %460 %461 
					                                Uniform f32* %463 = OpAccessChain %24 %451 
					                                         f32 %464 = OpLoad %463 
					                                         f32 %465 = OpFAdd %462 %464 
					                                Private f32* %466 = OpAccessChain %9 %161 
					                                                      OpStore %466 %465 
					                                Private f32* %467 = OpAccessChain %9 %161 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFMul %468 %250 
					                                Uniform f32* %471 = OpAccessChain %24 %470 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %469 %472 
					                                Private f32* %474 = OpAccessChain %9 %161 
					                                                      OpStore %474 %473 
					                                Private f32* %475 = OpAccessChain %9 %161 
					                                         f32 %476 = OpLoad %475 
					                                Uniform f32* %477 = OpAccessChain %24 %328 
					                                         f32 %478 = OpLoad %477 
					                                         f32 %479 = OpFMul %476 %478 
					                                Private f32* %480 = OpAccessChain %9 %161 
					                                                      OpStore %480 %479 
					                                Private f32* %481 = OpAccessChain %9 %161 
					                                         f32 %482 = OpLoad %481 
					                                         f32 %483 = OpFNegate %482 
					                                         f32 %485 = OpFMul %483 %484 
					                                         f32 %486 = OpFAdd %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %161 
					                                                      OpStore %487 %486 
					                                Private f32* %488 = OpAccessChain %9 %161 
					                                         f32 %489 = OpLoad %488 
					                                Private f32* %490 = OpAccessChain %60 %161 
					                                         f32 %491 = OpLoad %490 
					                                         f32 %492 = OpFMul %489 %491 
					                                         f32 %494 = OpFAdd %492 %493 
					                                Private f32* %495 = OpAccessChain %60 %310 
					                                                      OpStore %495 %494 
					                                         f32 %496 = OpLoad %139 
					                                         f32 %497 = OpFNegate %496 
					                                         f32 %498 = OpFMul %497 %484 
					                                Private f32* %499 = OpAccessChain %60 %310 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFAdd %498 %500 
					                                Private f32* %502 = OpAccessChain %60 %114 
					                                                      OpStore %502 %501 
					                                         f32 %503 = OpLoad %139 
					                                         f32 %504 = OpFMul %503 %484 
					                                Private f32* %505 = OpAccessChain %60 %310 
					                                         f32 %506 = OpLoad %505 
					                                         f32 %507 = OpFAdd %504 %506 
					                                Private f32* %508 = OpAccessChain %60 %174 
					                                                      OpStore %508 %507 
					                                       f32_4 %510 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %510 
					                                 Output f32* %512 = OpAccessChain %118 %45 %114 
					                                         f32 %513 = OpLoad %512 
					                                         f32 %514 = OpFNegate %513 
					                                 Output f32* %515 = OpAccessChain %118 %45 %114 
					                                                      OpStore %515 %514 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 68
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %11 %13 %29 %41 %62 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpDecorate %9 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 Location 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %13 RelaxedPrecision 
					                                             OpDecorate %13 Location 13 
					                                             OpDecorate %14 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate %18 RelaxedPrecision 
					                                             OpDecorate %21 RelaxedPrecision 
					                                             OpDecorate %21 DescriptorSet 21 
					                                             OpDecorate %21 Binding 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %25 RelaxedPrecision 
					                                             OpDecorate %25 DescriptorSet 25 
					                                             OpDecorate %25 Binding 25 
					                                             OpDecorate %26 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 29 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 41 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %45 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %47 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %52 RelaxedPrecision 
					                                             OpDecorate %53 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %55 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %58 RelaxedPrecision 
					                                             OpDecorate %59 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %62 Location 62 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %65 RelaxedPrecision 
					                                             OpDecorate %66 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypePointer Input %7 
					                        Input f32_4* %11 = OpVariable Input 
					                        Input f32_4* %13 = OpVariable Input 
					                                     %17 = OpTypePointer Private %6 
					                        Private f32* %18 = OpVariable Private 
					                                     %19 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %20 = OpTypePointer UniformConstant %19 
					UniformConstant read_only Texture2D* %21 = OpVariable UniformConstant 
					                                     %23 = OpTypeSampler 
					                                     %24 = OpTypePointer UniformConstant %23 
					            UniformConstant sampler* %25 = OpVariable UniformConstant 
					                                     %27 = OpTypeSampledImage %19 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %30 = OpTypeVector %6 2 
					                                     %34 = OpTypeInt 32 0 
					                                 u32 %35 = OpConstant 3 
					                                     %37 = OpTypePointer Private %30 
					                      Private f32_2* %38 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                 f32 %50 = OpConstant 3,674022E-40 
					                                 f32 %51 = OpConstant 3,674022E-40 
					                                     %61 = OpTypePointer Output %7 
					                       Output f32_4* %62 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                               f32_4 %12 = OpLoad %11 
					                               f32_4 %14 = OpLoad %13 
					                               f32_4 %15 = OpFNegate %14 
					                               f32_4 %16 = OpFAdd %12 %15 
					                                             OpStore %9 %16 
					                 read_only Texture2D %22 = OpLoad %21 
					                             sampler %26 = OpLoad %25 
					          read_only Texture2DSampled %28 = OpSampledImage %22 %26 
					                               f32_4 %31 = OpLoad vs_TEXCOORD0 
					                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
					                               f32_4 %33 = OpImageSampleImplicitLod %28 %32 
					                                 f32 %36 = OpCompositeExtract %33 3 
					                                             OpStore %18 %36 
					                                 f32 %39 = OpLoad %18 
					                               f32_2 %40 = OpCompositeConstruct %39 %39 
					                               f32_4 %42 = OpLoad vs_TEXCOORD1 
					                               f32_2 %43 = OpVectorShuffle %42 %42 0 0 
					                               f32_2 %44 = OpFMul %40 %43 
					                               f32_4 %45 = OpLoad vs_TEXCOORD1 
					                               f32_2 %46 = OpVectorShuffle %45 %45 2 1 
					                               f32_2 %47 = OpFNegate %46 
					                               f32_2 %48 = OpFAdd %44 %47 
					                                             OpStore %38 %48 
					                               f32_2 %49 = OpLoad %38 
					                               f32_2 %52 = OpCompositeConstruct %50 %50 
					                               f32_2 %53 = OpCompositeConstruct %51 %51 
					                               f32_2 %54 = OpExtInst %1 43 %49 %52 %53 
					                                             OpStore %38 %54 
					                               f32_2 %55 = OpLoad %38 
					                               f32_4 %56 = OpVectorShuffle %55 %55 0 0 0 0 
					                               f32_4 %57 = OpLoad %9 
					                               f32_4 %58 = OpFMul %56 %57 
					                               f32_4 %59 = OpLoad %13 
					                               f32_4 %60 = OpFAdd %58 %59 
					                                             OpStore %9 %60 
					                               f32_2 %63 = OpLoad %38 
					                               f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
					                               f32_4 %65 = OpLoad %9 
					                               f32_4 %66 = OpFMul %64 %65 
					                                             OpStore %62 %66 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[12];
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_11[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_18[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNDERLAY_ON" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _UnderlayOffsetX;
					uniform 	float _UnderlayOffsetY;
					uniform 	float _UnderlayDilate;
					uniform 	float _UnderlaySoftness;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _ScaleRatioC;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _UnderlayColor;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
					    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
					    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "UNDERLAY_ON" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 642
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %130 %195 %306 %420 %458 %464 %466 %538 %540 %634 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpMemberDecorate %22 23 Offset 22 
					                                                      OpMemberDecorate %22 24 Offset 22 
					                                                      OpMemberDecorate %22 25 Offset 22 
					                                                      OpMemberDecorate %22 26 Offset 22 
					                                                      OpMemberDecorate %22 27 Offset 22 
					                                                      OpMemberDecorate %22 28 Offset 22 
					                                                      OpMemberDecorate %22 29 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 Location 122 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %170 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %401 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %403 RelaxedPrecision 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %415 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate vs_TEXCOORD0 Location 458 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 464 
					                                                      OpDecorate %466 Location 466 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 538 
					                                                      OpDecorate vs_TEXCOORD3 Location 540 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 Location 634 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 19 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 20 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                               Output f32_4* %122 = OpVariable Output 
					                                         i32 %123 = OpConstant 6 
					                                         u32 %124 = OpConstant 3 
					                                             %127 = OpTypePointer Output %6 
					                              Private f32_4* %129 = OpVariable Private 
					                                Input f32_4* %130 = OpVariable Input 
					                                         f32 %135 = OpConstant 3,674022E-40 
					                                             %136 = OpTypePointer Private %6 
					                              Private f32_4* %138 = OpVariable Private 
					                                             %143 = OpTypePointer Private %15 
					                              Private f32_3* %144 = OpVariable Private 
					                              Private f32_4* %153 = OpVariable Private 
					                              Private f32_4* %162 = OpVariable Private 
					                                         i32 %163 = OpConstant 9 
					                                Private f32* %179 = OpVariable Private 
					                                             %194 = OpTypePointer Input %15 
					                                Input f32_3* %195 = OpVariable Input 
					                                         u32 %201 = OpConstant 0 
					                                         u32 %214 = OpConstant 2 
					                                         i32 %238 = OpConstant 4 
					                                         i32 %260 = OpConstant 27 
					                                         i32 %263 = OpConstant 28 
					                                Private f32* %277 = OpVariable Private 
					                                         i32 %283 = OpConstant 22 
					                                         i32 %286 = OpConstant 23 
					                                         f32 %290 = OpConstant 3,674022E-40 
					                                       f32_2 %291 = OpConstantComposite %290 %290 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_2* %306 = OpVariable Input 
					                                             %307 = OpTypePointer Input %6 
					                                         i32 %311 = OpConstant 26 
					                                         f32 %321 = OpConstant 3,674022E-40 
					                                Private f32* %324 = OpVariable Private 
					                                         i32 %325 = OpConstant 29 
					                                             %346 = OpTypeBool 
					                                             %347 = OpTypePointer Private %346 
					                               Private bool* %348 = OpVariable Private 
					                                         f32 %351 = OpConstant 3,674022E-40 
					                                             %354 = OpTypePointer Function %6 
					                                         i32 %363 = OpConstant 8 
					                                         i32 %366 = OpConstant 17 
					                                         i32 %378 = OpConstant 10 
					                              Private f32_2* %388 = OpVariable Private 
					                              Private f32_4* %400 = OpVariable Private 
					                               Output f32_4* %420 = OpVariable Output 
					                                         i32 %422 = OpConstant 21 
					                                         f32 %425 = OpConstant 3,674022E-40 
					                                       f32_4 %426 = OpConstantComposite %425 %425 %425 %425 
					                                         f32 %429 = OpConstant 3,674022E-40 
					                                       f32_4 %430 = OpConstantComposite %429 %429 %429 %429 
					                                         f32 %438 = OpConstant 3,674022E-40 
					                                       f32_2 %439 = OpConstantComposite %438 %438 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %466 = OpVariable Input 
					                               Private bool* %470 = OpVariable Private 
					                              Private f32_3* %477 = OpVariable Private 
					                                         i32 %478 = OpConstant 15 
					                                         i32 %482 = OpConstant 16 
					                                         i32 %499 = OpConstant 7 
					                                         f32 %513 = OpConstant 3,674022E-40 
					                                         f32 %522 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %545 = OpConstant 14 
					                                         i32 %548 = OpConstant 13 
					                                         i32 %551 = OpConstant 11 
					                                         i32 %554 = OpConstant 12 
					                                         i32 %558 = OpConstant 18 
					                                         i32 %585 = OpConstant 24 
					                                         i32 %588 = OpConstant 25 
					                                             %633 = OpTypePointer Output %7 
					                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %355 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
					                                         f32 %126 = OpLoad %125 
					                                 Output f32* %128 = OpAccessChain %122 %124 
					                                                      OpStore %128 %126 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_4 %133 = OpLoad %129 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %129 %134 
					                                Private f32* %137 = OpAccessChain %129 %124 
					                                                      OpStore %137 %135 
					                                       f32_4 %139 = OpLoad %129 
					                              Uniform f32_4* %140 = OpAccessChain %24 %123 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_4 %142 = OpFMul %139 %141 
					                                                      OpStore %138 %142 
					                                       f32_4 %145 = OpLoad %138 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 3 3 3 
					                                       f32_4 %147 = OpLoad %138 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
					                                       f32_3 %149 = OpFMul %146 %148 
					                                                      OpStore %144 %149 
					                                       f32_3 %150 = OpLoad %144 
					                                       f32_4 %151 = OpLoad %122 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %122 %152 
					                                       f32_3 %154 = OpLoad %144 
					                                       f32_3 %155 = OpFNegate %154 
					                                       f32_4 %156 = OpLoad %153 
					                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
					                                                      OpStore %153 %157 
					                                Private f32* %158 = OpAccessChain %138 %124 
					                                         f32 %159 = OpLoad %158 
					                                         f32 %160 = OpFNegate %159 
					                                Private f32* %161 = OpAccessChain %153 %124 
					                                                      OpStore %161 %160 
					                              Uniform f32_4* %164 = OpAccessChain %24 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 3 3 3 
					                              Uniform f32_4* %167 = OpAccessChain %24 %163 
					                                       f32_4 %168 = OpLoad %167 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFMul %166 %169 
					                                       f32_4 %171 = OpLoad %162 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
					                                                      OpStore %162 %172 
					                                Uniform f32* %173 = OpAccessChain %24 %163 %124 
					                                         f32 %174 = OpLoad %173 
					                                Private f32* %175 = OpAccessChain %162 %124 
					                                                      OpStore %175 %174 
					                                       f32_4 %176 = OpLoad %153 
					                                       f32_4 %177 = OpLoad %162 
					                                       f32_4 %178 = OpFAdd %176 %177 
					                                                      OpStore %153 %178 
					                                       f32_4 %180 = OpLoad %36 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_4 %182 = OpLoad %36 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
					                                         f32 %184 = OpDot %181 %183 
					                                                      OpStore %179 %184 
					                                         f32 %185 = OpLoad %179 
					                                         f32 %186 = OpExtInst %1 32 %185 
					                                                      OpStore %179 %186 
					                                         f32 %187 = OpLoad %179 
					                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
					                                       f32_4 %189 = OpLoad %36 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %188 %190 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
					                                                      OpStore %36 %193 
					                                       f32_3 %196 = OpLoad %195 
					                              Uniform f32_4* %197 = OpAccessChain %24 %62 %45 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                         f32 %200 = OpDot %196 %199 
					                                Private f32* %202 = OpAccessChain %60 %201 
					                                                      OpStore %202 %200 
					                                       f32_3 %203 = OpLoad %195 
					                              Uniform f32_4* %204 = OpAccessChain %24 %62 %40 
					                                       f32_4 %205 = OpLoad %204 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %203 %206 
					                                Private f32* %208 = OpAccessChain %60 %114 
					                                                      OpStore %208 %207 
					                                       f32_3 %209 = OpLoad %195 
					                              Uniform f32_4* %210 = OpAccessChain %24 %62 %39 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                         f32 %213 = OpDot %209 %212 
					                                Private f32* %215 = OpAccessChain %60 %214 
					                                                      OpStore %215 %213 
					                                       f32_4 %216 = OpLoad %60 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
					                                       f32_4 %218 = OpLoad %60 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                         f32 %220 = OpDot %217 %219 
					                                                      OpStore %179 %220 
					                                         f32 %221 = OpLoad %179 
					                                         f32 %222 = OpExtInst %1 32 %221 
					                                                      OpStore %179 %222 
					                                         f32 %223 = OpLoad %179 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                                       f32_4 %225 = OpLoad %60 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %60 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
					                                                      OpStore %60 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
					                                         f32 %234 = OpDot %231 %233 
					                                                      OpStore %179 %234 
					                              Uniform f32_4* %235 = OpAccessChain %24 %40 
					                                       f32_4 %236 = OpLoad %235 
					                                       f32_2 %237 = OpVectorShuffle %236 %236 1 1 
					                              Uniform f32_4* %239 = OpAccessChain %24 %238 %40 
					                                       f32_4 %240 = OpLoad %239 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                       f32_2 %242 = OpFMul %237 %241 
					                                       f32_4 %243 = OpLoad %36 
					                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 2 3 
					                                                      OpStore %36 %244 
					                              Uniform f32_4* %245 = OpAccessChain %24 %238 %45 
					                                       f32_4 %246 = OpLoad %245 
					                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
					                              Uniform f32_4* %248 = OpAccessChain %24 %40 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_2 %250 = OpVectorShuffle %249 %249 0 0 
					                                       f32_2 %251 = OpFMul %247 %250 
					                                       f32_4 %252 = OpLoad %36 
					                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
					                                       f32_2 %254 = OpFAdd %251 %253 
					                                       f32_4 %255 = OpLoad %36 
					                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
					                                                      OpStore %36 %256 
					                                       f32_4 %257 = OpLoad %36 
					                                       f32_2 %258 = OpVectorShuffle %257 %257 0 1 
					                                       f32_2 %259 = OpExtInst %1 4 %258 
					                                Uniform f32* %261 = OpAccessChain %24 %260 
					                                         f32 %262 = OpLoad %261 
					                                Uniform f32* %264 = OpAccessChain %24 %263 
					                                         f32 %265 = OpLoad %264 
					                                       f32_2 %266 = OpCompositeConstruct %262 %265 
					                                       f32_2 %267 = OpFMul %259 %266 
					                                       f32_4 %268 = OpLoad %36 
					                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 2 3 
					                                                      OpStore %36 %269 
					                                       f32_4 %270 = OpLoad %60 
					                                       f32_2 %271 = OpVectorShuffle %270 %270 3 3 
					                                       f32_4 %272 = OpLoad %36 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFDiv %271 %273 
					                                       f32_4 %275 = OpLoad %36 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %36 %276 
					                                       f32_4 %278 = OpLoad %36 
					                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
					                                       f32_4 %280 = OpLoad %36 
					                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
					                                         f32 %282 = OpDot %279 %281 
					                                                      OpStore %277 %282 
					                                Uniform f32* %284 = OpAccessChain %24 %283 
					                                         f32 %285 = OpLoad %284 
					                                Uniform f32* %287 = OpAccessChain %24 %286 
					                                         f32 %288 = OpLoad %287 
					                                       f32_2 %289 = OpCompositeConstruct %285 %288 
					                                       f32_2 %292 = OpFMul %289 %291 
					                                       f32_4 %293 = OpLoad %36 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_2 %295 = OpFAdd %292 %294 
					                                       f32_4 %296 = OpLoad %36 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
					                                                      OpStore %36 %297 
					                                       f32_4 %298 = OpLoad %36 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                       f32_2 %300 = OpFDiv %291 %299 
					                                       f32_4 %301 = OpLoad %36 
					                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
					                                                      OpStore %36 %302 
					                                         f32 %303 = OpLoad %277 
					                                         f32 %304 = OpExtInst %1 32 %303 
					                                                      OpStore %277 %304 
					                                  Input f32* %308 = OpAccessChain %306 %114 
					                                         f32 %309 = OpLoad %308 
					                                         f32 %310 = OpExtInst %1 4 %309 
					                                Uniform f32* %312 = OpAccessChain %24 %311 
					                                         f32 %313 = OpLoad %312 
					                                         f32 %314 = OpFMul %310 %313 
					                                Private f32* %315 = OpAccessChain %60 %201 
					                                                      OpStore %315 %314 
					                                         f32 %316 = OpLoad %277 
					                                Private f32* %317 = OpAccessChain %60 %201 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFMul %316 %318 
					                                                      OpStore %277 %319 
					                                         f32 %320 = OpLoad %277 
					                                         f32 %322 = OpFMul %320 %321 
					                                Private f32* %323 = OpAccessChain %60 %201 
					                                                      OpStore %323 %322 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                         f32 %328 = OpFNegate %327 
					                                         f32 %329 = OpFAdd %328 %135 
					                                                      OpStore %324 %329 
					                                         f32 %330 = OpLoad %324 
					                                Private f32* %331 = OpAccessChain %60 %201 
					                                         f32 %332 = OpLoad %331 
					                                         f32 %333 = OpExtInst %1 4 %332 
					                                         f32 %334 = OpFMul %330 %333 
					                                                      OpStore %324 %334 
					                                         f32 %335 = OpLoad %277 
					                                         f32 %336 = OpFMul %335 %321 
					                                         f32 %337 = OpLoad %324 
					                                         f32 %338 = OpFNegate %337 
					                                         f32 %339 = OpFAdd %336 %338 
					                                                      OpStore %277 %339 
					                                         f32 %340 = OpLoad %179 
					                                         f32 %341 = OpExtInst %1 4 %340 
					                                         f32 %342 = OpLoad %277 
					                                         f32 %343 = OpFMul %341 %342 
					                                         f32 %344 = OpLoad %324 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %179 %345 
					                                Uniform f32* %349 = OpAccessChain %24 %238 %62 %124 
					                                         f32 %350 = OpLoad %349 
					                                        bool %352 = OpFOrdEqual %350 %351 
					                                                      OpStore %348 %352 
					                                        bool %353 = OpLoad %348 
					                                                      OpSelectionMerge %357 None 
					                                                      OpBranchConditional %353 %356 %359 
					                                             %356 = OpLabel 
					                                         f32 %358 = OpLoad %179 
					                                                      OpStore %355 %358 
					                                                      OpBranch %357 
					                                             %359 = OpLabel 
					                                Private f32* %360 = OpAccessChain %60 %201 
					                                         f32 %361 = OpLoad %360 
					                                                      OpStore %355 %361 
					                                                      OpBranch %357 
					                                             %357 = OpLabel 
					                                         f32 %362 = OpLoad %355 
					                                                      OpStore %179 %362 
					                                Uniform f32* %364 = OpAccessChain %24 %363 
					                                         f32 %365 = OpLoad %364 
					                                Uniform f32* %367 = OpAccessChain %24 %366 
					                                         f32 %368 = OpLoad %367 
					                                         f32 %369 = OpFMul %365 %368 
					                                                      OpStore %277 %369 
					                                         f32 %370 = OpLoad %277 
					                                         f32 %371 = OpLoad %179 
					                                         f32 %372 = OpFMul %370 %371 
					                                         f32 %373 = OpFAdd %372 %135 
					                                                      OpStore %277 %373 
					                                         f32 %374 = OpLoad %179 
					                                         f32 %375 = OpLoad %277 
					                                         f32 %376 = OpFDiv %374 %375 
					                                Private f32* %377 = OpAccessChain %60 %201 
					                                                      OpStore %377 %376 
					                                Uniform f32* %379 = OpAccessChain %24 %378 
					                                         f32 %380 = OpLoad %379 
					                                Uniform f32* %381 = OpAccessChain %24 %366 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpFMul %380 %382 
					                                                      OpStore %277 %383 
					                                Private f32* %384 = OpAccessChain %60 %201 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpLoad %277 
					                                         f32 %387 = OpFMul %385 %386 
					                                                      OpStore %277 %387 
					                                         f32 %389 = OpLoad %277 
					                                         f32 %390 = OpExtInst %1 37 %389 %135 
					                                Private f32* %391 = OpAccessChain %388 %201 
					                                                      OpStore %391 %390 
					                                Private f32* %392 = OpAccessChain %388 %201 
					                                         f32 %393 = OpLoad %392 
					                                         f32 %394 = OpExtInst %1 31 %393 
					                                Private f32* %395 = OpAccessChain %388 %201 
					                                                      OpStore %395 %394 
					                                       f32_4 %396 = OpLoad %153 
					                                       f32_2 %397 = OpLoad %388 
					                                       f32_4 %398 = OpVectorShuffle %397 %397 0 0 0 0 
					                                       f32_4 %399 = OpFMul %396 %398 
					                                                      OpStore %153 %399 
					                                       f32_4 %401 = OpLoad %138 
					                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
					                                       f32_4 %403 = OpLoad %138 
					                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
					                                       f32_3 %405 = OpFMul %402 %404 
					                                       f32_4 %406 = OpLoad %153 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFAdd %405 %407 
					                                       f32_4 %409 = OpLoad %400 
					                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
					                                                      OpStore %400 %410 
					                                Private f32* %411 = OpAccessChain %129 %124 
					                                         f32 %412 = OpLoad %411 
					                                Uniform f32* %413 = OpAccessChain %24 %123 %124 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %412 %414 
					                                Private f32* %416 = OpAccessChain %153 %124 
					                                         f32 %417 = OpLoad %416 
					                                         f32 %418 = OpFAdd %415 %417 
					                                Private f32* %419 = OpAccessChain %400 %124 
					                                                      OpStore %419 %418 
					                                       f32_4 %421 = OpLoad %400 
					                                                      OpStore %420 %421 
					                              Uniform f32_4* %423 = OpAccessChain %24 %422 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_4 %427 = OpExtInst %1 40 %424 %426 
					                                                      OpStore %86 %427 
					                                       f32_4 %428 = OpLoad %86 
					                                       f32_4 %431 = OpExtInst %1 37 %428 %430 
					                                                      OpStore %86 %431 
					                                       f32_2 %432 = OpLoad %9 
					                                       f32_4 %433 = OpLoad %86 
					                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
					                                       f32_2 %435 = OpFNegate %434 
					                                       f32_2 %436 = OpFAdd %432 %435 
					                                                      OpStore %388 %436 
					                                       f32_2 %437 = OpLoad %9 
					                                       f32_2 %440 = OpFMul %437 %439 
					                                       f32_4 %441 = OpLoad %86 
					                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
					                                       f32_2 %443 = OpFNegate %442 
					                                       f32_2 %444 = OpFAdd %440 %443 
					                                                      OpStore %9 %444 
					                                       f32_4 %445 = OpLoad %86 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFNegate %446 
					                                       f32_2 %448 = OpLoad %9 
					                                       f32_2 %449 = OpFAdd %447 %448 
					                                       f32_4 %450 = OpLoad %36 
					                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
					                                                      OpStore %36 %451 
					                                       f32_4 %452 = OpLoad %86 
					                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
					                                       f32_2 %454 = OpFNegate %453 
					                                       f32_4 %455 = OpLoad %86 
					                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
					                                       f32_2 %457 = OpFAdd %454 %456 
					                                                      OpStore %9 %457 
					                                       f32_2 %459 = OpLoad %388 
					                                       f32_2 %460 = OpLoad %9 
					                                       f32_2 %461 = OpFDiv %459 %460 
					                                       f32_4 %462 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %463 
					                                       f32_4 %465 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %465 
					                                       f32_2 %467 = OpLoad %466 
					                                       f32_4 %468 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %469 
					                                  Input f32* %471 = OpAccessChain %306 %114 
					                                         f32 %472 = OpLoad %471 
					                                        bool %473 = OpFOrdGreaterThanEqual %351 %472 
					                                                      OpStore %470 %473 
					                                        bool %474 = OpLoad %470 
					                                         f32 %475 = OpSelect %474 %135 %351 
					                                Private f32* %476 = OpAccessChain %9 %201 
					                                                      OpStore %476 %475 
					                                Uniform f32* %479 = OpAccessChain %24 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFNegate %480 
					                                Uniform f32* %483 = OpAccessChain %24 %482 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpFAdd %481 %484 
					                                Private f32* %486 = OpAccessChain %477 %201 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %201 
					                                         f32 %488 = OpLoad %487 
					                                Private f32* %489 = OpAccessChain %477 %201 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Uniform f32* %492 = OpAccessChain %24 %478 
					                                         f32 %493 = OpLoad %492 
					                                         f32 %494 = OpFAdd %491 %493 
					                                Private f32* %495 = OpAccessChain %9 %201 
					                                                      OpStore %495 %494 
					                                Private f32* %496 = OpAccessChain %9 %201 
					                                         f32 %497 = OpLoad %496 
					                                         f32 %498 = OpFMul %497 %290 
					                                Uniform f32* %500 = OpAccessChain %24 %499 
					                                         f32 %501 = OpLoad %500 
					                                         f32 %502 = OpFAdd %498 %501 
					                                Private f32* %503 = OpAccessChain %9 %201 
					                                                      OpStore %503 %502 
					                                Private f32* %504 = OpAccessChain %9 %201 
					                                         f32 %505 = OpLoad %504 
					                                Uniform f32* %506 = OpAccessChain %24 %366 
					                                         f32 %507 = OpLoad %506 
					                                         f32 %508 = OpFMul %505 %507 
					                                Private f32* %509 = OpAccessChain %9 %201 
					                                                      OpStore %509 %508 
					                                Private f32* %510 = OpAccessChain %9 %201 
					                                         f32 %511 = OpLoad %510 
					                                         f32 %512 = OpFNegate %511 
					                                         f32 %514 = OpFMul %512 %513 
					                                         f32 %515 = OpFAdd %514 %513 
					                                Private f32* %516 = OpAccessChain %9 %201 
					                                                      OpStore %516 %515 
					                                Private f32* %517 = OpAccessChain %9 %201 
					                                         f32 %518 = OpLoad %517 
					                                Private f32* %519 = OpAccessChain %60 %201 
					                                         f32 %520 = OpLoad %519 
					                                         f32 %521 = OpFMul %518 %520 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %60 %124 
					                                                      OpStore %524 %523 
					                                         f32 %525 = OpLoad %277 
					                                         f32 %526 = OpFNegate %525 
					                                         f32 %527 = OpFMul %526 %513 
					                                Private f32* %528 = OpAccessChain %60 %124 
					                                         f32 %529 = OpLoad %528 
					                                         f32 %530 = OpFAdd %527 %529 
					                                Private f32* %531 = OpAccessChain %60 %114 
					                                                      OpStore %531 %530 
					                                         f32 %532 = OpLoad %277 
					                                         f32 %533 = OpFMul %532 %513 
					                                Private f32* %534 = OpAccessChain %60 %124 
					                                         f32 %535 = OpLoad %534 
					                                         f32 %536 = OpFAdd %533 %535 
					                                Private f32* %537 = OpAccessChain %60 %214 
					                                                      OpStore %537 %536 
					                                       f32_4 %539 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %539 
					                                  Input f32* %541 = OpAccessChain %130 %124 
					                                         f32 %542 = OpLoad %541 
					                                 Output f32* %543 = OpAccessChain vs_TEXCOORD3 %214 
					                                                      OpStore %543 %542 
					                                 Output f32* %544 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %544 %351 
					                                Uniform f32* %546 = OpAccessChain %24 %545 
					                                         f32 %547 = OpLoad %546 
					                                Uniform f32* %549 = OpAccessChain %24 %548 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %24 %551 
					                                         f32 %553 = OpLoad %552 
					                                Uniform f32* %555 = OpAccessChain %24 %554 
					                                         f32 %556 = OpLoad %555 
					                                       f32_4 %557 = OpCompositeConstruct %547 %550 %553 %556 
					                                Uniform f32* %559 = OpAccessChain %24 %558 
					                                         f32 %560 = OpLoad %559 
					                                Uniform f32* %561 = OpAccessChain %24 %558 
					                                         f32 %562 = OpLoad %561 
					                                Uniform f32* %563 = OpAccessChain %24 %558 
					                                         f32 %564 = OpLoad %563 
					                                Uniform f32* %565 = OpAccessChain %24 %558 
					                                         f32 %566 = OpLoad %565 
					                                       f32_4 %567 = OpCompositeConstruct %560 %562 %564 %566 
					                                         f32 %568 = OpCompositeExtract %567 0 
					                                         f32 %569 = OpCompositeExtract %567 1 
					                                         f32 %570 = OpCompositeExtract %567 2 
					                                         f32 %571 = OpCompositeExtract %567 3 
					                                       f32_4 %572 = OpCompositeConstruct %568 %569 %570 %571 
					                                       f32_4 %573 = OpFMul %557 %572 
					                                                      OpStore %36 %573 
					                                       f32_4 %574 = OpLoad %36 
					                                       f32_2 %575 = OpVectorShuffle %574 %574 2 3 
					                                       f32_2 %576 = OpFNegate %575 
					                                Uniform f32* %577 = OpAccessChain %24 %311 
					                                         f32 %578 = OpLoad %577 
					                                       f32_2 %579 = OpCompositeConstruct %578 %578 
					                                       f32_2 %580 = OpFMul %576 %579 
					                                       f32_3 %581 = OpLoad %477 
					                                       f32_3 %582 = OpVectorShuffle %581 %580 3 1 4 
					                                                      OpStore %477 %582 
					                                       f32_3 %583 = OpLoad %477 
					                                       f32_2 %584 = OpVectorShuffle %583 %583 0 2 
					                                Uniform f32* %586 = OpAccessChain %24 %585 
					                                         f32 %587 = OpLoad %586 
					                                Uniform f32* %589 = OpAccessChain %24 %588 
					                                         f32 %590 = OpLoad %589 
					                                       f32_2 %591 = OpCompositeConstruct %587 %590 
					                                       f32_2 %592 = OpFDiv %584 %591 
					                                       f32_3 %593 = OpLoad %477 
					                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
					                                                      OpStore %477 %594 
					                                       f32_3 %595 = OpLoad %477 
					                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
					                                       f32_2 %597 = OpLoad %466 
					                                       f32_2 %598 = OpFAdd %596 %597 
					                                       f32_4 %599 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %600 = OpVectorShuffle %599 %598 4 5 2 3 
					                                                      OpStore vs_TEXCOORD3 %600 
					                                Private f32* %601 = OpAccessChain %36 %201 
					                                         f32 %602 = OpLoad %601 
					                                         f32 %603 = OpLoad %179 
					                                         f32 %604 = OpFMul %602 %603 
					                                         f32 %605 = OpFAdd %604 %135 
					                                Private f32* %606 = OpAccessChain %477 %201 
					                                                      OpStore %606 %605 
					                                         f32 %607 = OpLoad %179 
					                                Private f32* %608 = OpAccessChain %477 %201 
					                                         f32 %609 = OpLoad %608 
					                                         f32 %610 = OpFDiv %607 %609 
					                                Private f32* %611 = OpAccessChain %60 %201 
					                                                      OpStore %611 %610 
					                                Private f32* %612 = OpAccessChain %36 %114 
					                                         f32 %613 = OpLoad %612 
					                                Private f32* %614 = OpAccessChain %60 %201 
					                                         f32 %615 = OpLoad %614 
					                                         f32 %616 = OpFMul %613 %615 
					                                Private f32* %617 = OpAccessChain %477 %201 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %9 %201 
					                                         f32 %619 = OpLoad %618 
					                                Private f32* %620 = OpAccessChain %60 %201 
					                                         f32 %621 = OpLoad %620 
					                                         f32 %622 = OpFMul %619 %621 
					                                         f32 %623 = OpFAdd %622 %522 
					                                Private f32* %624 = OpAccessChain %9 %201 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %477 %201 
					                                         f32 %626 = OpLoad %625 
					                                         f32 %627 = OpFNegate %626 
					                                         f32 %628 = OpFMul %627 %513 
					                                Private f32* %629 = OpAccessChain %9 %201 
					                                         f32 %630 = OpLoad %629 
					                                         f32 %631 = OpFAdd %628 %630 
					                                Private f32* %632 = OpAccessChain %60 %114 
					                                                      OpStore %632 %631 
					                                       f32_4 %635 = OpLoad %60 
					                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
					                                                      OpStore vs_TEXCOORD4 %636 
					                                 Output f32* %637 = OpAccessChain %118 %45 %114 
					                                         f32 %638 = OpLoad %637 
					                                         f32 %639 = OpFNegate %638 
					                                 Output f32* %640 = OpAccessChain %118 %45 %114 
					                                                      OpStore %640 %639 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 120
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %32 %77 %83 %96 %117 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD3 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 Location 32 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpMemberDecorate %49 0 RelaxedPrecision 
					                                             OpMemberDecorate %49 0 Offset 49 
					                                             OpDecorate %49 Block 
					                                             OpDecorate %51 DescriptorSet 51 
					                                             OpDecorate %51 Binding 51 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %58 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %67 RelaxedPrecision 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %71 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %73 RelaxedPrecision 
					                                             OpDecorate %74 RelaxedPrecision 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 77 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 83 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %88 RelaxedPrecision 
					                                             OpDecorate %89 RelaxedPrecision 
					                                             OpDecorate %90 RelaxedPrecision 
					                                             OpDecorate %91 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                             OpDecorate %96 RelaxedPrecision 
					                                             OpDecorate %96 Location 96 
					                                             OpDecorate %97 RelaxedPrecision 
					                                             OpDecorate %98 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %103 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %117 Location 117 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                        Private f32* %29 = OpVariable Private 
					                                     %31 = OpTypePointer Input %22 
					               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
					                                 u32 %33 = OpConstant 0 
					                                     %34 = OpTypePointer Input %6 
					                                 u32 %38 = OpConstant 1 
					                                 f32 %44 = OpConstant 3,674022E-40 
					                                 f32 %45 = OpConstant 3,674022E-40 
					                                     %47 = OpTypePointer Private %19 
					                      Private f32_4* %48 = OpVariable Private 
					                                     %49 = OpTypeStruct %19 
					                                     %50 = OpTypePointer Uniform %49 
					            Uniform struct {f32_4;}* %51 = OpVariable Uniform 
					                                     %52 = OpTypeInt 32 1 
					                                 i32 %53 = OpConstant 0 
					                                     %54 = OpTypeVector %6 3 
					                                     %55 = OpTypePointer Uniform %19 
					                                     %65 = OpTypePointer Uniform %6 
					                        Private f32* %73 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                      Private f32_4* %93 = OpVariable Private 
					                        Input f32_4* %96 = OpVariable Input 
					                     Private f32_4* %111 = OpVariable Private 
					                                    %116 = OpTypePointer Output %19 
					                      Output f32_4* %117 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD3 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %30 = OpLoad %8 
					                          Input f32* %35 = OpAccessChain vs_TEXCOORD4 %33 
					                                 f32 %36 = OpLoad %35 
					                                 f32 %37 = OpFMul %30 %36 
					                          Input f32* %39 = OpAccessChain vs_TEXCOORD4 %38 
					                                 f32 %40 = OpLoad %39 
					                                 f32 %41 = OpFNegate %40 
					                                 f32 %42 = OpFAdd %37 %41 
					                                             OpStore %29 %42 
					                                 f32 %43 = OpLoad %29 
					                                 f32 %46 = OpExtInst %1 43 %43 %44 %45 
					                                             OpStore %29 %46 
					                      Uniform f32_4* %56 = OpAccessChain %51 %53 
					                               f32_4 %57 = OpLoad %56 
					                               f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                      Uniform f32_4* %59 = OpAccessChain %51 %53 
					                               f32_4 %60 = OpLoad %59 
					                               f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                               f32_3 %62 = OpFMul %58 %61 
					                               f32_4 %63 = OpLoad %48 
					                               f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                             OpStore %48 %64 
					                        Uniform f32* %66 = OpAccessChain %51 %53 %27 
					                                 f32 %67 = OpLoad %66 
					                        Private f32* %68 = OpAccessChain %48 %27 
					                                             OpStore %68 %67 
					                                 f32 %69 = OpLoad %29 
					                               f32_4 %70 = OpCompositeConstruct %69 %69 %69 %69 
					                               f32_4 %71 = OpLoad %48 
					                               f32_4 %72 = OpFMul %70 %71 
					                                             OpStore %48 %72 
					                 read_only Texture2D %74 = OpLoad %11 
					                             sampler %75 = OpLoad %15 
					          read_only Texture2DSampled %76 = OpSampledImage %74 %75 
					                               f32_4 %78 = OpLoad vs_TEXCOORD0 
					                               f32_2 %79 = OpVectorShuffle %78 %78 0 1 
					                               f32_4 %80 = OpImageSampleImplicitLod %76 %79 
					                                 f32 %81 = OpCompositeExtract %80 3 
					                                             OpStore %73 %81 
					                                 f32 %82 = OpLoad %73 
					                          Input f32* %84 = OpAccessChain vs_TEXCOORD1 %33 
					                                 f32 %85 = OpLoad %84 
					                                 f32 %86 = OpFMul %82 %85 
					                          Input f32* %87 = OpAccessChain vs_TEXCOORD1 %27 
					                                 f32 %88 = OpLoad %87 
					                                 f32 %89 = OpFNegate %88 
					                                 f32 %90 = OpFAdd %86 %89 
					                                             OpStore %29 %90 
					                                 f32 %91 = OpLoad %29 
					                                 f32 %92 = OpExtInst %1 43 %91 %44 %45 
					                                             OpStore %29 %92 
					                                 f32 %94 = OpLoad %29 
					                               f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
					                               f32_4 %97 = OpLoad %96 
					                               f32_4 %98 = OpFMul %95 %97 
					                                             OpStore %93 %98 
					                          Input f32* %99 = OpAccessChain %96 %27 
					                                f32 %100 = OpLoad %99 
					                                f32 %101 = OpFNegate %100 
					                                f32 %102 = OpLoad %29 
					                                f32 %103 = OpFMul %101 %102 
					                                f32 %104 = OpFAdd %103 %45 
					                                             OpStore %29 %104 
					                              f32_4 %105 = OpLoad %48 
					                                f32 %106 = OpLoad %29 
					                              f32_4 %107 = OpCompositeConstruct %106 %106 %106 %106 
					                              f32_4 %108 = OpFMul %105 %107 
					                              f32_4 %109 = OpLoad %93 
					                              f32_4 %110 = OpFAdd %108 %109 
					                                             OpStore %48 %110 
					                              f32_4 %112 = OpLoad %48 
					                              f32_4 %113 = OpLoad vs_TEXCOORD3 
					                              f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
					                              f32_4 %115 = OpFMul %112 %114 
					                                             OpStore %111 %115 
					                              f32_4 %118 = OpLoad %111 
					                                             OpStore %117 %118 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[12];
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_11[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_18[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _UnderlayOffsetX;
					uniform 	float _UnderlayOffsetY;
					uniform 	float _UnderlayDilate;
					uniform 	float _UnderlaySoftness;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _ScaleRatioC;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _UnderlayColor;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
					    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 642
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %130 %195 %306 %420 %458 %464 %466 %538 %540 %634 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpMemberDecorate %22 23 Offset 22 
					                                                      OpMemberDecorate %22 24 Offset 22 
					                                                      OpMemberDecorate %22 25 Offset 22 
					                                                      OpMemberDecorate %22 26 Offset 22 
					                                                      OpMemberDecorate %22 27 Offset 22 
					                                                      OpMemberDecorate %22 28 Offset 22 
					                                                      OpMemberDecorate %22 29 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 Location 122 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %170 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %401 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %403 RelaxedPrecision 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %415 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate vs_TEXCOORD0 Location 458 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 464 
					                                                      OpDecorate %466 Location 466 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 538 
					                                                      OpDecorate vs_TEXCOORD3 Location 540 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 Location 634 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 19 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 20 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                               Output f32_4* %122 = OpVariable Output 
					                                         i32 %123 = OpConstant 6 
					                                         u32 %124 = OpConstant 3 
					                                             %127 = OpTypePointer Output %6 
					                              Private f32_4* %129 = OpVariable Private 
					                                Input f32_4* %130 = OpVariable Input 
					                                         f32 %135 = OpConstant 3,674022E-40 
					                                             %136 = OpTypePointer Private %6 
					                              Private f32_4* %138 = OpVariable Private 
					                                             %143 = OpTypePointer Private %15 
					                              Private f32_3* %144 = OpVariable Private 
					                              Private f32_4* %153 = OpVariable Private 
					                              Private f32_4* %162 = OpVariable Private 
					                                         i32 %163 = OpConstant 9 
					                                Private f32* %179 = OpVariable Private 
					                                             %194 = OpTypePointer Input %15 
					                                Input f32_3* %195 = OpVariable Input 
					                                         u32 %201 = OpConstant 0 
					                                         u32 %214 = OpConstant 2 
					                                         i32 %238 = OpConstant 4 
					                                         i32 %260 = OpConstant 27 
					                                         i32 %263 = OpConstant 28 
					                                Private f32* %277 = OpVariable Private 
					                                         i32 %283 = OpConstant 22 
					                                         i32 %286 = OpConstant 23 
					                                         f32 %290 = OpConstant 3,674022E-40 
					                                       f32_2 %291 = OpConstantComposite %290 %290 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_2* %306 = OpVariable Input 
					                                             %307 = OpTypePointer Input %6 
					                                         i32 %311 = OpConstant 26 
					                                         f32 %321 = OpConstant 3,674022E-40 
					                                Private f32* %324 = OpVariable Private 
					                                         i32 %325 = OpConstant 29 
					                                             %346 = OpTypeBool 
					                                             %347 = OpTypePointer Private %346 
					                               Private bool* %348 = OpVariable Private 
					                                         f32 %351 = OpConstant 3,674022E-40 
					                                             %354 = OpTypePointer Function %6 
					                                         i32 %363 = OpConstant 8 
					                                         i32 %366 = OpConstant 17 
					                                         i32 %378 = OpConstant 10 
					                              Private f32_2* %388 = OpVariable Private 
					                              Private f32_4* %400 = OpVariable Private 
					                               Output f32_4* %420 = OpVariable Output 
					                                         i32 %422 = OpConstant 21 
					                                         f32 %425 = OpConstant 3,674022E-40 
					                                       f32_4 %426 = OpConstantComposite %425 %425 %425 %425 
					                                         f32 %429 = OpConstant 3,674022E-40 
					                                       f32_4 %430 = OpConstantComposite %429 %429 %429 %429 
					                                         f32 %438 = OpConstant 3,674022E-40 
					                                       f32_2 %439 = OpConstantComposite %438 %438 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %466 = OpVariable Input 
					                               Private bool* %470 = OpVariable Private 
					                              Private f32_3* %477 = OpVariable Private 
					                                         i32 %478 = OpConstant 15 
					                                         i32 %482 = OpConstant 16 
					                                         i32 %499 = OpConstant 7 
					                                         f32 %513 = OpConstant 3,674022E-40 
					                                         f32 %522 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %545 = OpConstant 14 
					                                         i32 %548 = OpConstant 13 
					                                         i32 %551 = OpConstant 11 
					                                         i32 %554 = OpConstant 12 
					                                         i32 %558 = OpConstant 18 
					                                         i32 %585 = OpConstant 24 
					                                         i32 %588 = OpConstant 25 
					                                             %633 = OpTypePointer Output %7 
					                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %355 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
					                                         f32 %126 = OpLoad %125 
					                                 Output f32* %128 = OpAccessChain %122 %124 
					                                                      OpStore %128 %126 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_4 %133 = OpLoad %129 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %129 %134 
					                                Private f32* %137 = OpAccessChain %129 %124 
					                                                      OpStore %137 %135 
					                                       f32_4 %139 = OpLoad %129 
					                              Uniform f32_4* %140 = OpAccessChain %24 %123 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_4 %142 = OpFMul %139 %141 
					                                                      OpStore %138 %142 
					                                       f32_4 %145 = OpLoad %138 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 3 3 3 
					                                       f32_4 %147 = OpLoad %138 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
					                                       f32_3 %149 = OpFMul %146 %148 
					                                                      OpStore %144 %149 
					                                       f32_3 %150 = OpLoad %144 
					                                       f32_4 %151 = OpLoad %122 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %122 %152 
					                                       f32_3 %154 = OpLoad %144 
					                                       f32_3 %155 = OpFNegate %154 
					                                       f32_4 %156 = OpLoad %153 
					                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
					                                                      OpStore %153 %157 
					                                Private f32* %158 = OpAccessChain %138 %124 
					                                         f32 %159 = OpLoad %158 
					                                         f32 %160 = OpFNegate %159 
					                                Private f32* %161 = OpAccessChain %153 %124 
					                                                      OpStore %161 %160 
					                              Uniform f32_4* %164 = OpAccessChain %24 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 3 3 3 
					                              Uniform f32_4* %167 = OpAccessChain %24 %163 
					                                       f32_4 %168 = OpLoad %167 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFMul %166 %169 
					                                       f32_4 %171 = OpLoad %162 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
					                                                      OpStore %162 %172 
					                                Uniform f32* %173 = OpAccessChain %24 %163 %124 
					                                         f32 %174 = OpLoad %173 
					                                Private f32* %175 = OpAccessChain %162 %124 
					                                                      OpStore %175 %174 
					                                       f32_4 %176 = OpLoad %153 
					                                       f32_4 %177 = OpLoad %162 
					                                       f32_4 %178 = OpFAdd %176 %177 
					                                                      OpStore %153 %178 
					                                       f32_4 %180 = OpLoad %36 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_4 %182 = OpLoad %36 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
					                                         f32 %184 = OpDot %181 %183 
					                                                      OpStore %179 %184 
					                                         f32 %185 = OpLoad %179 
					                                         f32 %186 = OpExtInst %1 32 %185 
					                                                      OpStore %179 %186 
					                                         f32 %187 = OpLoad %179 
					                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
					                                       f32_4 %189 = OpLoad %36 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %188 %190 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
					                                                      OpStore %36 %193 
					                                       f32_3 %196 = OpLoad %195 
					                              Uniform f32_4* %197 = OpAccessChain %24 %62 %45 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                         f32 %200 = OpDot %196 %199 
					                                Private f32* %202 = OpAccessChain %60 %201 
					                                                      OpStore %202 %200 
					                                       f32_3 %203 = OpLoad %195 
					                              Uniform f32_4* %204 = OpAccessChain %24 %62 %40 
					                                       f32_4 %205 = OpLoad %204 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %203 %206 
					                                Private f32* %208 = OpAccessChain %60 %114 
					                                                      OpStore %208 %207 
					                                       f32_3 %209 = OpLoad %195 
					                              Uniform f32_4* %210 = OpAccessChain %24 %62 %39 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                         f32 %213 = OpDot %209 %212 
					                                Private f32* %215 = OpAccessChain %60 %214 
					                                                      OpStore %215 %213 
					                                       f32_4 %216 = OpLoad %60 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
					                                       f32_4 %218 = OpLoad %60 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                         f32 %220 = OpDot %217 %219 
					                                                      OpStore %179 %220 
					                                         f32 %221 = OpLoad %179 
					                                         f32 %222 = OpExtInst %1 32 %221 
					                                                      OpStore %179 %222 
					                                         f32 %223 = OpLoad %179 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                                       f32_4 %225 = OpLoad %60 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %60 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
					                                                      OpStore %60 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
					                                         f32 %234 = OpDot %231 %233 
					                                                      OpStore %179 %234 
					                              Uniform f32_4* %235 = OpAccessChain %24 %40 
					                                       f32_4 %236 = OpLoad %235 
					                                       f32_2 %237 = OpVectorShuffle %236 %236 1 1 
					                              Uniform f32_4* %239 = OpAccessChain %24 %238 %40 
					                                       f32_4 %240 = OpLoad %239 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                       f32_2 %242 = OpFMul %237 %241 
					                                       f32_4 %243 = OpLoad %36 
					                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 2 3 
					                                                      OpStore %36 %244 
					                              Uniform f32_4* %245 = OpAccessChain %24 %238 %45 
					                                       f32_4 %246 = OpLoad %245 
					                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
					                              Uniform f32_4* %248 = OpAccessChain %24 %40 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_2 %250 = OpVectorShuffle %249 %249 0 0 
					                                       f32_2 %251 = OpFMul %247 %250 
					                                       f32_4 %252 = OpLoad %36 
					                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
					                                       f32_2 %254 = OpFAdd %251 %253 
					                                       f32_4 %255 = OpLoad %36 
					                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
					                                                      OpStore %36 %256 
					                                       f32_4 %257 = OpLoad %36 
					                                       f32_2 %258 = OpVectorShuffle %257 %257 0 1 
					                                       f32_2 %259 = OpExtInst %1 4 %258 
					                                Uniform f32* %261 = OpAccessChain %24 %260 
					                                         f32 %262 = OpLoad %261 
					                                Uniform f32* %264 = OpAccessChain %24 %263 
					                                         f32 %265 = OpLoad %264 
					                                       f32_2 %266 = OpCompositeConstruct %262 %265 
					                                       f32_2 %267 = OpFMul %259 %266 
					                                       f32_4 %268 = OpLoad %36 
					                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 2 3 
					                                                      OpStore %36 %269 
					                                       f32_4 %270 = OpLoad %60 
					                                       f32_2 %271 = OpVectorShuffle %270 %270 3 3 
					                                       f32_4 %272 = OpLoad %36 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFDiv %271 %273 
					                                       f32_4 %275 = OpLoad %36 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %36 %276 
					                                       f32_4 %278 = OpLoad %36 
					                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
					                                       f32_4 %280 = OpLoad %36 
					                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
					                                         f32 %282 = OpDot %279 %281 
					                                                      OpStore %277 %282 
					                                Uniform f32* %284 = OpAccessChain %24 %283 
					                                         f32 %285 = OpLoad %284 
					                                Uniform f32* %287 = OpAccessChain %24 %286 
					                                         f32 %288 = OpLoad %287 
					                                       f32_2 %289 = OpCompositeConstruct %285 %288 
					                                       f32_2 %292 = OpFMul %289 %291 
					                                       f32_4 %293 = OpLoad %36 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_2 %295 = OpFAdd %292 %294 
					                                       f32_4 %296 = OpLoad %36 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
					                                                      OpStore %36 %297 
					                                       f32_4 %298 = OpLoad %36 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                       f32_2 %300 = OpFDiv %291 %299 
					                                       f32_4 %301 = OpLoad %36 
					                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
					                                                      OpStore %36 %302 
					                                         f32 %303 = OpLoad %277 
					                                         f32 %304 = OpExtInst %1 32 %303 
					                                                      OpStore %277 %304 
					                                  Input f32* %308 = OpAccessChain %306 %114 
					                                         f32 %309 = OpLoad %308 
					                                         f32 %310 = OpExtInst %1 4 %309 
					                                Uniform f32* %312 = OpAccessChain %24 %311 
					                                         f32 %313 = OpLoad %312 
					                                         f32 %314 = OpFMul %310 %313 
					                                Private f32* %315 = OpAccessChain %60 %201 
					                                                      OpStore %315 %314 
					                                         f32 %316 = OpLoad %277 
					                                Private f32* %317 = OpAccessChain %60 %201 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFMul %316 %318 
					                                                      OpStore %277 %319 
					                                         f32 %320 = OpLoad %277 
					                                         f32 %322 = OpFMul %320 %321 
					                                Private f32* %323 = OpAccessChain %60 %201 
					                                                      OpStore %323 %322 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                         f32 %328 = OpFNegate %327 
					                                         f32 %329 = OpFAdd %328 %135 
					                                                      OpStore %324 %329 
					                                         f32 %330 = OpLoad %324 
					                                Private f32* %331 = OpAccessChain %60 %201 
					                                         f32 %332 = OpLoad %331 
					                                         f32 %333 = OpExtInst %1 4 %332 
					                                         f32 %334 = OpFMul %330 %333 
					                                                      OpStore %324 %334 
					                                         f32 %335 = OpLoad %277 
					                                         f32 %336 = OpFMul %335 %321 
					                                         f32 %337 = OpLoad %324 
					                                         f32 %338 = OpFNegate %337 
					                                         f32 %339 = OpFAdd %336 %338 
					                                                      OpStore %277 %339 
					                                         f32 %340 = OpLoad %179 
					                                         f32 %341 = OpExtInst %1 4 %340 
					                                         f32 %342 = OpLoad %277 
					                                         f32 %343 = OpFMul %341 %342 
					                                         f32 %344 = OpLoad %324 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %179 %345 
					                                Uniform f32* %349 = OpAccessChain %24 %238 %62 %124 
					                                         f32 %350 = OpLoad %349 
					                                        bool %352 = OpFOrdEqual %350 %351 
					                                                      OpStore %348 %352 
					                                        bool %353 = OpLoad %348 
					                                                      OpSelectionMerge %357 None 
					                                                      OpBranchConditional %353 %356 %359 
					                                             %356 = OpLabel 
					                                         f32 %358 = OpLoad %179 
					                                                      OpStore %355 %358 
					                                                      OpBranch %357 
					                                             %359 = OpLabel 
					                                Private f32* %360 = OpAccessChain %60 %201 
					                                         f32 %361 = OpLoad %360 
					                                                      OpStore %355 %361 
					                                                      OpBranch %357 
					                                             %357 = OpLabel 
					                                         f32 %362 = OpLoad %355 
					                                                      OpStore %179 %362 
					                                Uniform f32* %364 = OpAccessChain %24 %363 
					                                         f32 %365 = OpLoad %364 
					                                Uniform f32* %367 = OpAccessChain %24 %366 
					                                         f32 %368 = OpLoad %367 
					                                         f32 %369 = OpFMul %365 %368 
					                                                      OpStore %277 %369 
					                                         f32 %370 = OpLoad %277 
					                                         f32 %371 = OpLoad %179 
					                                         f32 %372 = OpFMul %370 %371 
					                                         f32 %373 = OpFAdd %372 %135 
					                                                      OpStore %277 %373 
					                                         f32 %374 = OpLoad %179 
					                                         f32 %375 = OpLoad %277 
					                                         f32 %376 = OpFDiv %374 %375 
					                                Private f32* %377 = OpAccessChain %60 %201 
					                                                      OpStore %377 %376 
					                                Uniform f32* %379 = OpAccessChain %24 %378 
					                                         f32 %380 = OpLoad %379 
					                                Uniform f32* %381 = OpAccessChain %24 %366 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpFMul %380 %382 
					                                                      OpStore %277 %383 
					                                Private f32* %384 = OpAccessChain %60 %201 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpLoad %277 
					                                         f32 %387 = OpFMul %385 %386 
					                                                      OpStore %277 %387 
					                                         f32 %389 = OpLoad %277 
					                                         f32 %390 = OpExtInst %1 37 %389 %135 
					                                Private f32* %391 = OpAccessChain %388 %201 
					                                                      OpStore %391 %390 
					                                Private f32* %392 = OpAccessChain %388 %201 
					                                         f32 %393 = OpLoad %392 
					                                         f32 %394 = OpExtInst %1 31 %393 
					                                Private f32* %395 = OpAccessChain %388 %201 
					                                                      OpStore %395 %394 
					                                       f32_4 %396 = OpLoad %153 
					                                       f32_2 %397 = OpLoad %388 
					                                       f32_4 %398 = OpVectorShuffle %397 %397 0 0 0 0 
					                                       f32_4 %399 = OpFMul %396 %398 
					                                                      OpStore %153 %399 
					                                       f32_4 %401 = OpLoad %138 
					                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
					                                       f32_4 %403 = OpLoad %138 
					                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
					                                       f32_3 %405 = OpFMul %402 %404 
					                                       f32_4 %406 = OpLoad %153 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFAdd %405 %407 
					                                       f32_4 %409 = OpLoad %400 
					                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
					                                                      OpStore %400 %410 
					                                Private f32* %411 = OpAccessChain %129 %124 
					                                         f32 %412 = OpLoad %411 
					                                Uniform f32* %413 = OpAccessChain %24 %123 %124 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %412 %414 
					                                Private f32* %416 = OpAccessChain %153 %124 
					                                         f32 %417 = OpLoad %416 
					                                         f32 %418 = OpFAdd %415 %417 
					                                Private f32* %419 = OpAccessChain %400 %124 
					                                                      OpStore %419 %418 
					                                       f32_4 %421 = OpLoad %400 
					                                                      OpStore %420 %421 
					                              Uniform f32_4* %423 = OpAccessChain %24 %422 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_4 %427 = OpExtInst %1 40 %424 %426 
					                                                      OpStore %86 %427 
					                                       f32_4 %428 = OpLoad %86 
					                                       f32_4 %431 = OpExtInst %1 37 %428 %430 
					                                                      OpStore %86 %431 
					                                       f32_2 %432 = OpLoad %9 
					                                       f32_4 %433 = OpLoad %86 
					                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
					                                       f32_2 %435 = OpFNegate %434 
					                                       f32_2 %436 = OpFAdd %432 %435 
					                                                      OpStore %388 %436 
					                                       f32_2 %437 = OpLoad %9 
					                                       f32_2 %440 = OpFMul %437 %439 
					                                       f32_4 %441 = OpLoad %86 
					                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
					                                       f32_2 %443 = OpFNegate %442 
					                                       f32_2 %444 = OpFAdd %440 %443 
					                                                      OpStore %9 %444 
					                                       f32_4 %445 = OpLoad %86 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFNegate %446 
					                                       f32_2 %448 = OpLoad %9 
					                                       f32_2 %449 = OpFAdd %447 %448 
					                                       f32_4 %450 = OpLoad %36 
					                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
					                                                      OpStore %36 %451 
					                                       f32_4 %452 = OpLoad %86 
					                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
					                                       f32_2 %454 = OpFNegate %453 
					                                       f32_4 %455 = OpLoad %86 
					                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
					                                       f32_2 %457 = OpFAdd %454 %456 
					                                                      OpStore %9 %457 
					                                       f32_2 %459 = OpLoad %388 
					                                       f32_2 %460 = OpLoad %9 
					                                       f32_2 %461 = OpFDiv %459 %460 
					                                       f32_4 %462 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %463 
					                                       f32_4 %465 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %465 
					                                       f32_2 %467 = OpLoad %466 
					                                       f32_4 %468 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %469 
					                                  Input f32* %471 = OpAccessChain %306 %114 
					                                         f32 %472 = OpLoad %471 
					                                        bool %473 = OpFOrdGreaterThanEqual %351 %472 
					                                                      OpStore %470 %473 
					                                        bool %474 = OpLoad %470 
					                                         f32 %475 = OpSelect %474 %135 %351 
					                                Private f32* %476 = OpAccessChain %9 %201 
					                                                      OpStore %476 %475 
					                                Uniform f32* %479 = OpAccessChain %24 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFNegate %480 
					                                Uniform f32* %483 = OpAccessChain %24 %482 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpFAdd %481 %484 
					                                Private f32* %486 = OpAccessChain %477 %201 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %201 
					                                         f32 %488 = OpLoad %487 
					                                Private f32* %489 = OpAccessChain %477 %201 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Uniform f32* %492 = OpAccessChain %24 %478 
					                                         f32 %493 = OpLoad %492 
					                                         f32 %494 = OpFAdd %491 %493 
					                                Private f32* %495 = OpAccessChain %9 %201 
					                                                      OpStore %495 %494 
					                                Private f32* %496 = OpAccessChain %9 %201 
					                                         f32 %497 = OpLoad %496 
					                                         f32 %498 = OpFMul %497 %290 
					                                Uniform f32* %500 = OpAccessChain %24 %499 
					                                         f32 %501 = OpLoad %500 
					                                         f32 %502 = OpFAdd %498 %501 
					                                Private f32* %503 = OpAccessChain %9 %201 
					                                                      OpStore %503 %502 
					                                Private f32* %504 = OpAccessChain %9 %201 
					                                         f32 %505 = OpLoad %504 
					                                Uniform f32* %506 = OpAccessChain %24 %366 
					                                         f32 %507 = OpLoad %506 
					                                         f32 %508 = OpFMul %505 %507 
					                                Private f32* %509 = OpAccessChain %9 %201 
					                                                      OpStore %509 %508 
					                                Private f32* %510 = OpAccessChain %9 %201 
					                                         f32 %511 = OpLoad %510 
					                                         f32 %512 = OpFNegate %511 
					                                         f32 %514 = OpFMul %512 %513 
					                                         f32 %515 = OpFAdd %514 %513 
					                                Private f32* %516 = OpAccessChain %9 %201 
					                                                      OpStore %516 %515 
					                                Private f32* %517 = OpAccessChain %9 %201 
					                                         f32 %518 = OpLoad %517 
					                                Private f32* %519 = OpAccessChain %60 %201 
					                                         f32 %520 = OpLoad %519 
					                                         f32 %521 = OpFMul %518 %520 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %60 %124 
					                                                      OpStore %524 %523 
					                                         f32 %525 = OpLoad %277 
					                                         f32 %526 = OpFNegate %525 
					                                         f32 %527 = OpFMul %526 %513 
					                                Private f32* %528 = OpAccessChain %60 %124 
					                                         f32 %529 = OpLoad %528 
					                                         f32 %530 = OpFAdd %527 %529 
					                                Private f32* %531 = OpAccessChain %60 %114 
					                                                      OpStore %531 %530 
					                                         f32 %532 = OpLoad %277 
					                                         f32 %533 = OpFMul %532 %513 
					                                Private f32* %534 = OpAccessChain %60 %124 
					                                         f32 %535 = OpLoad %534 
					                                         f32 %536 = OpFAdd %533 %535 
					                                Private f32* %537 = OpAccessChain %60 %214 
					                                                      OpStore %537 %536 
					                                       f32_4 %539 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %539 
					                                  Input f32* %541 = OpAccessChain %130 %124 
					                                         f32 %542 = OpLoad %541 
					                                 Output f32* %543 = OpAccessChain vs_TEXCOORD3 %214 
					                                                      OpStore %543 %542 
					                                 Output f32* %544 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %544 %351 
					                                Uniform f32* %546 = OpAccessChain %24 %545 
					                                         f32 %547 = OpLoad %546 
					                                Uniform f32* %549 = OpAccessChain %24 %548 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %24 %551 
					                                         f32 %553 = OpLoad %552 
					                                Uniform f32* %555 = OpAccessChain %24 %554 
					                                         f32 %556 = OpLoad %555 
					                                       f32_4 %557 = OpCompositeConstruct %547 %550 %553 %556 
					                                Uniform f32* %559 = OpAccessChain %24 %558 
					                                         f32 %560 = OpLoad %559 
					                                Uniform f32* %561 = OpAccessChain %24 %558 
					                                         f32 %562 = OpLoad %561 
					                                Uniform f32* %563 = OpAccessChain %24 %558 
					                                         f32 %564 = OpLoad %563 
					                                Uniform f32* %565 = OpAccessChain %24 %558 
					                                         f32 %566 = OpLoad %565 
					                                       f32_4 %567 = OpCompositeConstruct %560 %562 %564 %566 
					                                         f32 %568 = OpCompositeExtract %567 0 
					                                         f32 %569 = OpCompositeExtract %567 1 
					                                         f32 %570 = OpCompositeExtract %567 2 
					                                         f32 %571 = OpCompositeExtract %567 3 
					                                       f32_4 %572 = OpCompositeConstruct %568 %569 %570 %571 
					                                       f32_4 %573 = OpFMul %557 %572 
					                                                      OpStore %36 %573 
					                                       f32_4 %574 = OpLoad %36 
					                                       f32_2 %575 = OpVectorShuffle %574 %574 2 3 
					                                       f32_2 %576 = OpFNegate %575 
					                                Uniform f32* %577 = OpAccessChain %24 %311 
					                                         f32 %578 = OpLoad %577 
					                                       f32_2 %579 = OpCompositeConstruct %578 %578 
					                                       f32_2 %580 = OpFMul %576 %579 
					                                       f32_3 %581 = OpLoad %477 
					                                       f32_3 %582 = OpVectorShuffle %581 %580 3 1 4 
					                                                      OpStore %477 %582 
					                                       f32_3 %583 = OpLoad %477 
					                                       f32_2 %584 = OpVectorShuffle %583 %583 0 2 
					                                Uniform f32* %586 = OpAccessChain %24 %585 
					                                         f32 %587 = OpLoad %586 
					                                Uniform f32* %589 = OpAccessChain %24 %588 
					                                         f32 %590 = OpLoad %589 
					                                       f32_2 %591 = OpCompositeConstruct %587 %590 
					                                       f32_2 %592 = OpFDiv %584 %591 
					                                       f32_3 %593 = OpLoad %477 
					                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
					                                                      OpStore %477 %594 
					                                       f32_3 %595 = OpLoad %477 
					                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
					                                       f32_2 %597 = OpLoad %466 
					                                       f32_2 %598 = OpFAdd %596 %597 
					                                       f32_4 %599 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %600 = OpVectorShuffle %599 %598 4 5 2 3 
					                                                      OpStore vs_TEXCOORD3 %600 
					                                Private f32* %601 = OpAccessChain %36 %201 
					                                         f32 %602 = OpLoad %601 
					                                         f32 %603 = OpLoad %179 
					                                         f32 %604 = OpFMul %602 %603 
					                                         f32 %605 = OpFAdd %604 %135 
					                                Private f32* %606 = OpAccessChain %477 %201 
					                                                      OpStore %606 %605 
					                                         f32 %607 = OpLoad %179 
					                                Private f32* %608 = OpAccessChain %477 %201 
					                                         f32 %609 = OpLoad %608 
					                                         f32 %610 = OpFDiv %607 %609 
					                                Private f32* %611 = OpAccessChain %60 %201 
					                                                      OpStore %611 %610 
					                                Private f32* %612 = OpAccessChain %36 %114 
					                                         f32 %613 = OpLoad %612 
					                                Private f32* %614 = OpAccessChain %60 %201 
					                                         f32 %615 = OpLoad %614 
					                                         f32 %616 = OpFMul %613 %615 
					                                Private f32* %617 = OpAccessChain %477 %201 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %9 %201 
					                                         f32 %619 = OpLoad %618 
					                                Private f32* %620 = OpAccessChain %60 %201 
					                                         f32 %621 = OpLoad %620 
					                                         f32 %622 = OpFMul %619 %621 
					                                         f32 %623 = OpFAdd %622 %522 
					                                Private f32* %624 = OpAccessChain %9 %201 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %477 %201 
					                                         f32 %626 = OpLoad %625 
					                                         f32 %627 = OpFNegate %626 
					                                         f32 %628 = OpFMul %627 %513 
					                                Private f32* %629 = OpAccessChain %9 %201 
					                                         f32 %630 = OpLoad %629 
					                                         f32 %631 = OpFAdd %628 %630 
					                                Private f32* %632 = OpAccessChain %60 %114 
					                                                      OpStore %632 %631 
					                                       f32_4 %635 = OpLoad %60 
					                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
					                                                      OpStore vs_TEXCOORD4 %636 
					                                 Output f32* %637 = OpAccessChain %118 %45 %114 
					                                         f32 %638 = OpLoad %637 
					                                         f32 %639 = OpFNegate %638 
					                                 Output f32* %640 = OpAccessChain %118 %45 %114 
					                                                      OpStore %640 %639 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 141
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %33 %76 %78 %86 %95 %138 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD3 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate %31 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 Location 33 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %51 RelaxedPrecision 
					                                             OpMemberDecorate %52 0 RelaxedPrecision 
					                                             OpMemberDecorate %52 0 Offset 52 
					                                             OpDecorate %52 Block 
					                                             OpDecorate %54 DescriptorSet 54 
					                                             OpDecorate %54 Binding 54 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %65 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %73 RelaxedPrecision 
					                                             OpDecorate %74 RelaxedPrecision 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate %76 RelaxedPrecision 
					                                             OpDecorate %76 Location 76 
					                                             OpDecorate %77 RelaxedPrecision 
					                                             OpDecorate %78 RelaxedPrecision 
					                                             OpDecorate %78 Location 78 
					                                             OpDecorate %79 RelaxedPrecision 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 86 
					                                             OpDecorate %90 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 95 
					                                             OpDecorate %96 RelaxedPrecision 
					                                             OpDecorate %97 RelaxedPrecision 
					                                             OpDecorate %98 RelaxedPrecision 
					                                             OpDecorate %99 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %103 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %111 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %113 RelaxedPrecision 
					                                             OpDecorate %114 RelaxedPrecision 
					                                             OpDecorate %115 RelaxedPrecision 
					                                             OpDecorate %116 RelaxedPrecision 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %119 RelaxedPrecision 
					                                             OpDecorate %120 RelaxedPrecision 
					                                             OpDecorate %122 RelaxedPrecision 
					                                             OpDecorate %123 RelaxedPrecision 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %126 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %128 RelaxedPrecision 
					                                             OpDecorate %129 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate %133 RelaxedPrecision 
					                                             OpDecorate %138 RelaxedPrecision 
					                                             OpDecorate %138 Location 138 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                                     %29 = OpTypePointer Private %19 
					                      Private f32_4* %30 = OpVariable Private 
					                                     %32 = OpTypePointer Input %22 
					               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
					                                 u32 %34 = OpConstant 0 
					                                     %35 = OpTypePointer Input %6 
					                                 u32 %39 = OpConstant 1 
					                                 f32 %47 = OpConstant 3,674022E-40 
					                                 f32 %48 = OpConstant 3,674022E-40 
					                      Private f32_4* %51 = OpVariable Private 
					                                     %52 = OpTypeStruct %19 
					                                     %53 = OpTypePointer Uniform %52 
					            Uniform struct {f32_4;}* %54 = OpVariable Uniform 
					                                     %55 = OpTypeInt 32 1 
					                                 i32 %56 = OpConstant 0 
					                                     %57 = OpTypeVector %6 3 
					                                     %58 = OpTypePointer Uniform %19 
					                                     %68 = OpTypePointer Uniform %6 
					                        Input f32_4* %76 = OpVariable Input 
					                        Input f32_4* %78 = OpVariable Input 
					                        Private f32* %82 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %91 = OpTypePointer Private %22 
					                      Private f32_2* %92 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                     Private f32_4* %113 = OpVariable Private 
					                     Private f32_4* %132 = OpVariable Private 
					                                    %137 = OpTypePointer Output %19 
					                      Output f32_4* %138 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD3 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %31 = OpLoad %8 
					                          Input f32* %36 = OpAccessChain vs_TEXCOORD4 %34 
					                                 f32 %37 = OpLoad %36 
					                                 f32 %38 = OpFMul %31 %37 
					                          Input f32* %40 = OpAccessChain vs_TEXCOORD4 %39 
					                                 f32 %41 = OpLoad %40 
					                                 f32 %42 = OpFNegate %41 
					                                 f32 %43 = OpFAdd %38 %42 
					                        Private f32* %44 = OpAccessChain %30 %34 
					                                             OpStore %44 %43 
					                        Private f32* %45 = OpAccessChain %30 %34 
					                                 f32 %46 = OpLoad %45 
					                                 f32 %49 = OpExtInst %1 43 %46 %47 %48 
					                        Private f32* %50 = OpAccessChain %30 %34 
					                                             OpStore %50 %49 
					                      Uniform f32_4* %59 = OpAccessChain %54 %56 
					                               f32_4 %60 = OpLoad %59 
					                               f32_3 %61 = OpVectorShuffle %60 %60 3 3 3 
					                      Uniform f32_4* %62 = OpAccessChain %54 %56 
					                               f32_4 %63 = OpLoad %62 
					                               f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
					                               f32_3 %65 = OpFMul %61 %64 
					                               f32_4 %66 = OpLoad %51 
					                               f32_4 %67 = OpVectorShuffle %66 %65 4 5 6 3 
					                                             OpStore %51 %67 
					                        Uniform f32* %69 = OpAccessChain %54 %56 %27 
					                                 f32 %70 = OpLoad %69 
					                        Private f32* %71 = OpAccessChain %51 %27 
					                                             OpStore %71 %70 
					                               f32_4 %72 = OpLoad %30 
					                               f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                               f32_4 %74 = OpLoad %51 
					                               f32_4 %75 = OpFMul %73 %74 
					                                             OpStore %51 %75 
					                               f32_4 %77 = OpLoad %76 
					                               f32_4 %79 = OpLoad %78 
					                               f32_4 %80 = OpFNegate %79 
					                               f32_4 %81 = OpFAdd %77 %80 
					                                             OpStore %30 %81 
					                 read_only Texture2D %83 = OpLoad %11 
					                             sampler %84 = OpLoad %15 
					          read_only Texture2DSampled %85 = OpSampledImage %83 %84 
					                               f32_4 %87 = OpLoad vs_TEXCOORD0 
					                               f32_2 %88 = OpVectorShuffle %87 %87 0 1 
					                               f32_4 %89 = OpImageSampleImplicitLod %85 %88 
					                                 f32 %90 = OpCompositeExtract %89 3 
					                                             OpStore %82 %90 
					                                 f32 %93 = OpLoad %82 
					                               f32_2 %94 = OpCompositeConstruct %93 %93 
					                               f32_4 %96 = OpLoad vs_TEXCOORD1 
					                               f32_2 %97 = OpVectorShuffle %96 %96 0 0 
					                               f32_2 %98 = OpFMul %94 %97 
					                               f32_4 %99 = OpLoad vs_TEXCOORD1 
					                              f32_2 %100 = OpVectorShuffle %99 %99 2 1 
					                              f32_2 %101 = OpFNegate %100 
					                              f32_2 %102 = OpFAdd %98 %101 
					                                             OpStore %92 %102 
					                              f32_2 %103 = OpLoad %92 
					                              f32_2 %104 = OpCompositeConstruct %47 %47 
					                              f32_2 %105 = OpCompositeConstruct %48 %48 
					                              f32_2 %106 = OpExtInst %1 43 %103 %104 %105 
					                                             OpStore %92 %106 
					                              f32_2 %107 = OpLoad %92 
					                              f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
					                              f32_4 %109 = OpLoad %30 
					                              f32_4 %110 = OpFMul %108 %109 
					                              f32_4 %111 = OpLoad %78 
					                              f32_4 %112 = OpFAdd %110 %111 
					                                             OpStore %30 %112 
					                              f32_2 %114 = OpLoad %92 
					                              f32_4 %115 = OpVectorShuffle %114 %114 1 1 1 1 
					                              f32_4 %116 = OpLoad %30 
					                              f32_4 %117 = OpFMul %115 %116 
					                                             OpStore %113 %117 
					                       Private f32* %118 = OpAccessChain %30 %27 
					                                f32 %119 = OpLoad %118 
					                                f32 %120 = OpFNegate %119 
					                       Private f32* %121 = OpAccessChain %92 %39 
					                                f32 %122 = OpLoad %121 
					                                f32 %123 = OpFMul %120 %122 
					                                f32 %124 = OpFAdd %123 %48 
					                       Private f32* %125 = OpAccessChain %30 %34 
					                                             OpStore %125 %124 
					                              f32_4 %126 = OpLoad %51 
					                              f32_4 %127 = OpLoad %30 
					                              f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
					                              f32_4 %129 = OpFMul %126 %128 
					                              f32_4 %130 = OpLoad %113 
					                              f32_4 %131 = OpFAdd %129 %130 
					                                             OpStore %51 %131 
					                              f32_4 %133 = OpLoad %51 
					                              f32_4 %134 = OpLoad vs_TEXCOORD3 
					                              f32_4 %135 = OpVectorShuffle %134 %134 2 2 2 2 
					                              f32_4 %136 = OpFMul %133 %135 
					                                             OpStore %132 %136 
					                              f32_4 %139 = OpLoad %132 
					                                             OpStore %138 %139 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat10_0.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = vs_COLOR0.w * u_xlat0 + -0.00100000005;
					    u_xlat1 = vec4(u_xlat0) * vs_COLOR0;
					    SV_Target0 = u_xlat1;
					    u_xlatb0 = u_xlat2<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 517
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %123 %136 %155 %266 %390 %430 %437 %439 %509 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %136 Location 136 
					                                                      OpDecorate %137 RelaxedPrecision 
					                                                      OpDecorate %155 Location 155 
					                                                      OpDecorate %266 Location 266 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %363 RelaxedPrecision 
					                                                      OpDecorate %364 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %375 RelaxedPrecision 
					                                                      OpDecorate %377 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %390 Location 390 
					                                                      OpDecorate vs_TEXCOORD0 Location 430 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 437 
					                                                      OpDecorate %439 Location 439 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 509 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 14 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 15 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                              Private f32_4* %122 = OpVariable Private 
					                                Input f32_4* %123 = OpVariable Input 
					                                         i32 %125 = OpConstant 6 
					                               Output f32_4* %136 = OpVariable Output 
					                                             %138 = OpTypePointer Private %6 
					                                Private f32* %139 = OpVariable Private 
					                                             %154 = OpTypePointer Input %15 
					                                Input f32_3* %155 = OpVariable Input 
					                                         u32 %161 = OpConstant 0 
					                                         u32 %174 = OpConstant 2 
					                                         i32 %198 = OpConstant 4 
					                                         i32 %220 = OpConstant 20 
					                                         i32 %223 = OpConstant 21 
					                                Private f32* %237 = OpVariable Private 
					                                         i32 %243 = OpConstant 17 
					                                         i32 %246 = OpConstant 18 
					                                         f32 %250 = OpConstant 3,674022E-40 
					                                       f32_2 %251 = OpConstantComposite %250 %250 
					                                             %265 = OpTypePointer Input %7 
					                                Input f32_2* %266 = OpVariable Input 
					                                             %267 = OpTypePointer Input %6 
					                                         i32 %271 = OpConstant 19 
					                                         f32 %281 = OpConstant 3,674022E-40 
					                                Private f32* %284 = OpVariable Private 
					                                         i32 %285 = OpConstant 22 
					                                         f32 %289 = OpConstant 3,674022E-40 
					                                             %307 = OpTypeBool 
					                                             %308 = OpTypePointer Private %307 
					                               Private bool* %309 = OpVariable Private 
					                                         u32 %310 = OpConstant 3 
					                                         f32 %313 = OpConstant 3,674022E-40 
					                                             %316 = OpTypePointer Function %6 
					                                         i32 %325 = OpConstant 8 
					                                         i32 %328 = OpConstant 13 
					                                         i32 %340 = OpConstant 10 
					                              Private f32_4* %354 = OpVariable Private 
					                                         i32 %357 = OpConstant 9 
					                               Output f32_4* %390 = OpVariable Output 
					                                         i32 %392 = OpConstant 16 
					                                         f32 %395 = OpConstant 3,674022E-40 
					                                       f32_4 %396 = OpConstantComposite %395 %395 %395 %395 
					                                         f32 %399 = OpConstant 3,674022E-40 
					                                       f32_4 %400 = OpConstantComposite %399 %399 %399 %399 
					                                         f32 %410 = OpConstant 3,674022E-40 
					                                       f32_2 %411 = OpConstantComposite %410 %410 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %439 = OpVariable Input 
					                               Private bool* %443 = OpVariable Private 
					                                Private f32* %450 = OpVariable Private 
					                                         i32 %451 = OpConstant 11 
					                                         i32 %455 = OpConstant 12 
					                                         i32 %470 = OpConstant 7 
					                                         f32 %484 = OpConstant 3,674022E-40 
					                                         f32 %493 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                             %511 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %317 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                       f32_4 %124 = OpLoad %123 
					                              Uniform f32_4* %126 = OpAccessChain %24 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpFMul %124 %127 
					                                                      OpStore %122 %128 
					                                       f32_4 %129 = OpLoad %122 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 3 3 3 
					                                       f32_4 %131 = OpLoad %122 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFMul %130 %132 
					                                       f32_4 %134 = OpLoad %122 
					                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
					                                                      OpStore %122 %135 
					                                       f32_4 %137 = OpLoad %122 
					                                                      OpStore %136 %137 
					                                       f32_4 %140 = OpLoad %36 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_4 %142 = OpLoad %36 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %141 %143 
					                                                      OpStore %139 %144 
					                                         f32 %145 = OpLoad %139 
					                                         f32 %146 = OpExtInst %1 32 %145 
					                                                      OpStore %139 %146 
					                                         f32 %147 = OpLoad %139 
					                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
					                                       f32_4 %149 = OpLoad %36 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_3 %151 = OpFMul %148 %150 
					                                       f32_4 %152 = OpLoad %36 
					                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
					                                                      OpStore %36 %153 
					                                       f32_3 %156 = OpLoad %155 
					                              Uniform f32_4* %157 = OpAccessChain %24 %62 %45 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                         f32 %160 = OpDot %156 %159 
					                                Private f32* %162 = OpAccessChain %60 %161 
					                                                      OpStore %162 %160 
					                                       f32_3 %163 = OpLoad %155 
					                              Uniform f32_4* %164 = OpAccessChain %24 %62 %40 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                         f32 %167 = OpDot %163 %166 
					                                Private f32* %168 = OpAccessChain %60 %114 
					                                                      OpStore %168 %167 
					                                       f32_3 %169 = OpLoad %155 
					                              Uniform f32_4* %170 = OpAccessChain %24 %62 %39 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %175 = OpAccessChain %60 %174 
					                                                      OpStore %175 %173 
					                                       f32_4 %176 = OpLoad %60 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_4 %178 = OpLoad %60 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %177 %179 
					                                                      OpStore %139 %180 
					                                         f32 %181 = OpLoad %139 
					                                         f32 %182 = OpExtInst %1 32 %181 
					                                                      OpStore %139 %182 
					                                         f32 %183 = OpLoad %139 
					                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
					                                       f32_4 %185 = OpLoad %60 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_3 %187 = OpFMul %184 %186 
					                                       f32_4 %188 = OpLoad %60 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
					                                                      OpStore %60 %189 
					                                       f32_4 %190 = OpLoad %60 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                         f32 %194 = OpDot %191 %193 
					                                                      OpStore %139 %194 
					                              Uniform f32_4* %195 = OpAccessChain %24 %40 
					                                       f32_4 %196 = OpLoad %195 
					                                       f32_2 %197 = OpVectorShuffle %196 %196 1 1 
					                              Uniform f32_4* %199 = OpAccessChain %24 %198 %40 
					                                       f32_4 %200 = OpLoad %199 
					                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
					                                       f32_2 %202 = OpFMul %197 %201 
					                                       f32_4 %203 = OpLoad %36 
					                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
					                                                      OpStore %36 %204 
					                              Uniform f32_4* %205 = OpAccessChain %24 %198 %45 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                              Uniform f32_4* %208 = OpAccessChain %24 %40 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_2 %210 = OpVectorShuffle %209 %209 0 0 
					                                       f32_2 %211 = OpFMul %207 %210 
					                                       f32_4 %212 = OpLoad %36 
					                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
					                                       f32_2 %214 = OpFAdd %211 %213 
					                                       f32_4 %215 = OpLoad %36 
					                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
					                                                      OpStore %36 %216 
					                                       f32_4 %217 = OpLoad %36 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
					                                       f32_2 %219 = OpExtInst %1 4 %218 
					                                Uniform f32* %221 = OpAccessChain %24 %220 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %224 = OpAccessChain %24 %223 
					                                         f32 %225 = OpLoad %224 
					                                       f32_2 %226 = OpCompositeConstruct %222 %225 
					                                       f32_2 %227 = OpFMul %219 %226 
					                                       f32_4 %228 = OpLoad %36 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
					                                                      OpStore %36 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_2 %231 = OpVectorShuffle %230 %230 3 3 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
					                                       f32_2 %234 = OpFDiv %231 %233 
					                                       f32_4 %235 = OpLoad %36 
					                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
					                                                      OpStore %36 %236 
					                                       f32_4 %238 = OpLoad %36 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_4 %240 = OpLoad %36 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                         f32 %242 = OpDot %239 %241 
					                                                      OpStore %237 %242 
					                                Uniform f32* %244 = OpAccessChain %24 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %247 = OpAccessChain %24 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_2 %249 = OpCompositeConstruct %245 %248 
					                                       f32_2 %252 = OpFMul %249 %251 
					                                       f32_4 %253 = OpLoad %36 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
					                                       f32_2 %255 = OpFAdd %252 %254 
					                                       f32_4 %256 = OpLoad %36 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
					                                                      OpStore %36 %257 
					                                       f32_4 %258 = OpLoad %36 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
					                                       f32_2 %260 = OpFDiv %251 %259 
					                                       f32_4 %261 = OpLoad %36 
					                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
					                                                      OpStore %36 %262 
					                                         f32 %263 = OpLoad %237 
					                                         f32 %264 = OpExtInst %1 32 %263 
					                                                      OpStore %237 %264 
					                                  Input f32* %268 = OpAccessChain %266 %114 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpExtInst %1 4 %269 
					                                Uniform f32* %272 = OpAccessChain %24 %271 
					                                         f32 %273 = OpLoad %272 
					                                         f32 %274 = OpFMul %270 %273 
					                                Private f32* %275 = OpAccessChain %60 %161 
					                                                      OpStore %275 %274 
					                                         f32 %276 = OpLoad %237 
					                                Private f32* %277 = OpAccessChain %60 %161 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpFMul %276 %278 
					                                                      OpStore %237 %279 
					                                         f32 %280 = OpLoad %237 
					                                         f32 %282 = OpFMul %280 %281 
					                                Private f32* %283 = OpAccessChain %60 %161 
					                                                      OpStore %283 %282 
					                                Uniform f32* %286 = OpAccessChain %24 %285 
					                                         f32 %287 = OpLoad %286 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %290 = OpFAdd %288 %289 
					                                                      OpStore %284 %290 
					                                         f32 %291 = OpLoad %284 
					                                Private f32* %292 = OpAccessChain %60 %161 
					                                         f32 %293 = OpLoad %292 
					                                         f32 %294 = OpExtInst %1 4 %293 
					                                         f32 %295 = OpFMul %291 %294 
					                                                      OpStore %284 %295 
					                                         f32 %296 = OpLoad %237 
					                                         f32 %297 = OpFMul %296 %281 
					                                         f32 %298 = OpLoad %284 
					                                         f32 %299 = OpFNegate %298 
					                                         f32 %300 = OpFAdd %297 %299 
					                                                      OpStore %237 %300 
					                                         f32 %301 = OpLoad %139 
					                                         f32 %302 = OpExtInst %1 4 %301 
					                                         f32 %303 = OpLoad %237 
					                                         f32 %304 = OpFMul %302 %303 
					                                         f32 %305 = OpLoad %284 
					                                         f32 %306 = OpFAdd %304 %305 
					                                                      OpStore %139 %306 
					                                Uniform f32* %311 = OpAccessChain %24 %198 %62 %310 
					                                         f32 %312 = OpLoad %311 
					                                        bool %314 = OpFOrdEqual %312 %313 
					                                                      OpStore %309 %314 
					                                        bool %315 = OpLoad %309 
					                                                      OpSelectionMerge %319 None 
					                                                      OpBranchConditional %315 %318 %321 
					                                             %318 = OpLabel 
					                                         f32 %320 = OpLoad %139 
					                                                      OpStore %317 %320 
					                                                      OpBranch %319 
					                                             %321 = OpLabel 
					                                Private f32* %322 = OpAccessChain %60 %161 
					                                         f32 %323 = OpLoad %322 
					                                                      OpStore %317 %323 
					                                                      OpBranch %319 
					                                             %319 = OpLabel 
					                                         f32 %324 = OpLoad %317 
					                                                      OpStore %139 %324 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                Uniform f32* %329 = OpAccessChain %24 %328 
					                                         f32 %330 = OpLoad %329 
					                                         f32 %331 = OpFMul %327 %330 
					                                                      OpStore %237 %331 
					                                         f32 %332 = OpLoad %237 
					                                         f32 %333 = OpLoad %139 
					                                         f32 %334 = OpFMul %332 %333 
					                                         f32 %335 = OpFAdd %334 %289 
					                                                      OpStore %237 %335 
					                                         f32 %336 = OpLoad %139 
					                                         f32 %337 = OpLoad %237 
					                                         f32 %338 = OpFDiv %336 %337 
					                                Private f32* %339 = OpAccessChain %60 %161 
					                                                      OpStore %339 %338 
					                                Uniform f32* %341 = OpAccessChain %24 %340 
					                                         f32 %342 = OpLoad %341 
					                                Uniform f32* %343 = OpAccessChain %24 %328 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                                      OpStore %139 %345 
					                                Private f32* %346 = OpAccessChain %60 %161 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpLoad %139 
					                                         f32 %349 = OpFMul %347 %348 
					                                                      OpStore %139 %349 
					                                         f32 %350 = OpLoad %139 
					                                         f32 %351 = OpExtInst %1 37 %350 %289 
					                                                      OpStore %237 %351 
					                                         f32 %352 = OpLoad %237 
					                                         f32 %353 = OpExtInst %1 31 %352 
					                                                      OpStore %237 %353 
					                                  Input f32* %355 = OpAccessChain %123 %310 
					                                         f32 %356 = OpLoad %355 
					                                Uniform f32* %358 = OpAccessChain %24 %357 %310 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFMul %356 %359 
					                                Private f32* %361 = OpAccessChain %354 %161 
					                                                      OpStore %361 %360 
					                              Uniform f32_4* %362 = OpAccessChain %24 %357 
					                                       f32_4 %363 = OpLoad %362 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %354 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
					                                       f32_3 %367 = OpFMul %364 %366 
					                                       f32_4 %368 = OpLoad %122 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                                       f32_3 %370 = OpFNegate %369 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %354 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %354 %373 
					                                Uniform f32* %374 = OpAccessChain %24 %357 %310 
					                                         f32 %375 = OpLoad %374 
					                                  Input f32* %376 = OpAccessChain %123 %310 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                Private f32* %379 = OpAccessChain %122 %310 
					                                         f32 %380 = OpLoad %379 
					                                         f32 %381 = OpFNegate %380 
					                                         f32 %382 = OpFAdd %378 %381 
					                                Private f32* %383 = OpAccessChain %354 %310 
					                                                      OpStore %383 %382 
					                                         f32 %384 = OpLoad %237 
					                                       f32_4 %385 = OpCompositeConstruct %384 %384 %384 %384 
					                                       f32_4 %386 = OpLoad %354 
					                                       f32_4 %387 = OpFMul %385 %386 
					                                       f32_4 %388 = OpLoad %122 
					                                       f32_4 %389 = OpFAdd %387 %388 
					                                                      OpStore %86 %389 
					                                       f32_4 %391 = OpLoad %86 
					                                                      OpStore %390 %391 
					                              Uniform f32_4* %393 = OpAccessChain %24 %392 
					                                       f32_4 %394 = OpLoad %393 
					                                       f32_4 %397 = OpExtInst %1 40 %394 %396 
					                                                      OpStore %86 %397 
					                                       f32_4 %398 = OpLoad %86 
					                                       f32_4 %401 = OpExtInst %1 37 %398 %400 
					                                                      OpStore %86 %401 
					                                       f32_2 %402 = OpLoad %9 
					                                       f32_4 %403 = OpLoad %86 
					                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
					                                       f32_2 %405 = OpFNegate %404 
					                                       f32_2 %406 = OpFAdd %402 %405 
					                                       f32_4 %407 = OpLoad %354 
					                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
					                                                      OpStore %354 %408 
					                                       f32_2 %409 = OpLoad %9 
					                                       f32_2 %412 = OpFMul %409 %411 
					                                       f32_4 %413 = OpLoad %86 
					                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
					                                       f32_2 %415 = OpFNegate %414 
					                                       f32_2 %416 = OpFAdd %412 %415 
					                                                      OpStore %9 %416 
					                                       f32_4 %417 = OpLoad %86 
					                                       f32_2 %418 = OpVectorShuffle %417 %417 2 3 
					                                       f32_2 %419 = OpFNegate %418 
					                                       f32_2 %420 = OpLoad %9 
					                                       f32_2 %421 = OpFAdd %419 %420 
					                                       f32_4 %422 = OpLoad %36 
					                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 2 3 
					                                                      OpStore %36 %423 
					                                       f32_4 %424 = OpLoad %86 
					                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
					                                       f32_2 %426 = OpFNegate %425 
					                                       f32_4 %427 = OpLoad %86 
					                                       f32_2 %428 = OpVectorShuffle %427 %427 2 3 
					                                       f32_2 %429 = OpFAdd %426 %428 
					                                                      OpStore %9 %429 
					                                       f32_4 %431 = OpLoad %354 
					                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
					                                       f32_2 %433 = OpLoad %9 
					                                       f32_2 %434 = OpFDiv %432 %433 
					                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %436 
					                                       f32_4 %438 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %438 
					                                       f32_2 %440 = OpLoad %439 
					                                       f32_4 %441 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %442 
					                                  Input f32* %444 = OpAccessChain %266 %114 
					                                         f32 %445 = OpLoad %444 
					                                        bool %446 = OpFOrdGreaterThanEqual %313 %445 
					                                                      OpStore %443 %446 
					                                        bool %447 = OpLoad %443 
					                                         f32 %448 = OpSelect %447 %289 %313 
					                                Private f32* %449 = OpAccessChain %9 %161 
					                                                      OpStore %449 %448 
					                                Uniform f32* %452 = OpAccessChain %24 %451 
					                                         f32 %453 = OpLoad %452 
					                                         f32 %454 = OpFNegate %453 
					                                Uniform f32* %456 = OpAccessChain %24 %455 
					                                         f32 %457 = OpLoad %456 
					                                         f32 %458 = OpFAdd %454 %457 
					                                                      OpStore %450 %458 
					                                Private f32* %459 = OpAccessChain %9 %161 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpLoad %450 
					                                         f32 %462 = OpFMul %460 %461 
					                                Uniform f32* %463 = OpAccessChain %24 %451 
					                                         f32 %464 = OpLoad %463 
					                                         f32 %465 = OpFAdd %462 %464 
					                                Private f32* %466 = OpAccessChain %9 %161 
					                                                      OpStore %466 %465 
					                                Private f32* %467 = OpAccessChain %9 %161 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFMul %468 %250 
					                                Uniform f32* %471 = OpAccessChain %24 %470 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %469 %472 
					                                Private f32* %474 = OpAccessChain %9 %161 
					                                                      OpStore %474 %473 
					                                Private f32* %475 = OpAccessChain %9 %161 
					                                         f32 %476 = OpLoad %475 
					                                Uniform f32* %477 = OpAccessChain %24 %328 
					                                         f32 %478 = OpLoad %477 
					                                         f32 %479 = OpFMul %476 %478 
					                                Private f32* %480 = OpAccessChain %9 %161 
					                                                      OpStore %480 %479 
					                                Private f32* %481 = OpAccessChain %9 %161 
					                                         f32 %482 = OpLoad %481 
					                                         f32 %483 = OpFNegate %482 
					                                         f32 %485 = OpFMul %483 %484 
					                                         f32 %486 = OpFAdd %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %161 
					                                                      OpStore %487 %486 
					                                Private f32* %488 = OpAccessChain %9 %161 
					                                         f32 %489 = OpLoad %488 
					                                Private f32* %490 = OpAccessChain %60 %161 
					                                         f32 %491 = OpLoad %490 
					                                         f32 %492 = OpFMul %489 %491 
					                                         f32 %494 = OpFAdd %492 %493 
					                                Private f32* %495 = OpAccessChain %60 %310 
					                                                      OpStore %495 %494 
					                                         f32 %496 = OpLoad %139 
					                                         f32 %497 = OpFNegate %496 
					                                         f32 %498 = OpFMul %497 %484 
					                                Private f32* %499 = OpAccessChain %60 %310 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFAdd %498 %500 
					                                Private f32* %502 = OpAccessChain %60 %114 
					                                                      OpStore %502 %501 
					                                         f32 %503 = OpLoad %139 
					                                         f32 %504 = OpFMul %503 %484 
					                                Private f32* %505 = OpAccessChain %60 %310 
					                                         f32 %506 = OpLoad %505 
					                                         f32 %507 = OpFAdd %504 %506 
					                                Private f32* %508 = OpAccessChain %60 %174 
					                                                      OpStore %508 %507 
					                                       f32_4 %510 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %510 
					                                 Output f32* %512 = OpAccessChain %118 %45 %114 
					                                         f32 %513 = OpLoad %512 
					                                         f32 %514 = OpFNegate %513 
					                                 Output f32* %515 = OpAccessChain %118 %45 %114 
					                                                      OpStore %515 %514 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 79
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %31 %46 %60 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 31 
					                                             OpDecorate %35 RelaxedPrecision 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %45 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %46 Location 46 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %50 RelaxedPrecision 
					                                             OpDecorate %52 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %55 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %58 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %60 Location 60 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %65 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                        Private f32* %29 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                 u32 %32 = OpConstant 0 
					                                     %33 = OpTypePointer Input %6 
					                                 f32 %42 = OpConstant 3,674022E-40 
					                                 f32 %43 = OpConstant 3,674022E-40 
					                        Private f32* %45 = OpVariable Private 
					                        Input f32_4* %46 = OpVariable Input 
					                                 f32 %51 = OpConstant 3,674022E-40 
					                                     %53 = OpTypePointer Private %19 
					                      Private f32_4* %54 = OpVariable Private 
					                                     %59 = OpTypePointer Output %19 
					                       Output f32_4* %60 = OpVariable Output 
					                                     %62 = OpTypeBool 
					                                     %63 = OpTypePointer Private %62 
					                       Private bool* %64 = OpVariable Private 
					                                     %68 = OpTypeInt 32 1 
					                                 i32 %69 = OpConstant 0 
					                                 i32 %70 = OpConstant 1 
					                                 i32 %72 = OpConstant -1 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD0 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %30 = OpLoad %8 
					                          Input f32* %34 = OpAccessChain vs_TEXCOORD1 %32 
					                                 f32 %35 = OpLoad %34 
					                                 f32 %36 = OpFMul %30 %35 
					                          Input f32* %37 = OpAccessChain vs_TEXCOORD1 %27 
					                                 f32 %38 = OpLoad %37 
					                                 f32 %39 = OpFNegate %38 
					                                 f32 %40 = OpFAdd %36 %39 
					                                             OpStore %29 %40 
					                                 f32 %41 = OpLoad %29 
					                                 f32 %44 = OpExtInst %1 43 %41 %42 %43 
					                                             OpStore %29 %44 
					                          Input f32* %47 = OpAccessChain %46 %27 
					                                 f32 %48 = OpLoad %47 
					                                 f32 %49 = OpLoad %29 
					                                 f32 %50 = OpFMul %48 %49 
					                                 f32 %52 = OpFAdd %50 %51 
					                                             OpStore %45 %52 
					                                 f32 %55 = OpLoad %29 
					                               f32_4 %56 = OpCompositeConstruct %55 %55 %55 %55 
					                               f32_4 %57 = OpLoad %46 
					                               f32_4 %58 = OpFMul %56 %57 
					                                             OpStore %54 %58 
					                               f32_4 %61 = OpLoad %54 
					                                             OpStore %60 %61 
					                                 f32 %65 = OpLoad %45 
					                                bool %66 = OpFOrdLessThan %65 %42 
					                                             OpStore %64 %66 
					                                bool %67 = OpLoad %64 
					                                 i32 %71 = OpSelect %67 %70 %69 
					                                 i32 %73 = OpIMul %71 %72 
					                                bool %74 = OpINotEqual %73 %69 
					                                             OpSelectionMerge %76 None 
					                                             OpBranchConditional %74 %75 %76 
					                                     %75 = OpLabel 
					                                             OpKill
					                                     %76 = OpLabel 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					void main()
					{
					    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = u_xlat10_1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
					    u_xlat1.x = u_xlat0.w * u_xlat1.y + -0.00100000005;
					    u_xlat0 = u_xlat1.yyyy * u_xlat0;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 517
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %123 %136 %155 %266 %390 %430 %437 %439 %509 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %136 Location 136 
					                                                      OpDecorate %137 RelaxedPrecision 
					                                                      OpDecorate %155 Location 155 
					                                                      OpDecorate %266 Location 266 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %363 RelaxedPrecision 
					                                                      OpDecorate %364 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %375 RelaxedPrecision 
					                                                      OpDecorate %377 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %390 Location 390 
					                                                      OpDecorate vs_TEXCOORD0 Location 430 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 437 
					                                                      OpDecorate %439 Location 439 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 509 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 14 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 15 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                              Private f32_4* %122 = OpVariable Private 
					                                Input f32_4* %123 = OpVariable Input 
					                                         i32 %125 = OpConstant 6 
					                               Output f32_4* %136 = OpVariable Output 
					                                             %138 = OpTypePointer Private %6 
					                                Private f32* %139 = OpVariable Private 
					                                             %154 = OpTypePointer Input %15 
					                                Input f32_3* %155 = OpVariable Input 
					                                         u32 %161 = OpConstant 0 
					                                         u32 %174 = OpConstant 2 
					                                         i32 %198 = OpConstant 4 
					                                         i32 %220 = OpConstant 20 
					                                         i32 %223 = OpConstant 21 
					                                Private f32* %237 = OpVariable Private 
					                                         i32 %243 = OpConstant 17 
					                                         i32 %246 = OpConstant 18 
					                                         f32 %250 = OpConstant 3,674022E-40 
					                                       f32_2 %251 = OpConstantComposite %250 %250 
					                                             %265 = OpTypePointer Input %7 
					                                Input f32_2* %266 = OpVariable Input 
					                                             %267 = OpTypePointer Input %6 
					                                         i32 %271 = OpConstant 19 
					                                         f32 %281 = OpConstant 3,674022E-40 
					                                Private f32* %284 = OpVariable Private 
					                                         i32 %285 = OpConstant 22 
					                                         f32 %289 = OpConstant 3,674022E-40 
					                                             %307 = OpTypeBool 
					                                             %308 = OpTypePointer Private %307 
					                               Private bool* %309 = OpVariable Private 
					                                         u32 %310 = OpConstant 3 
					                                         f32 %313 = OpConstant 3,674022E-40 
					                                             %316 = OpTypePointer Function %6 
					                                         i32 %325 = OpConstant 8 
					                                         i32 %328 = OpConstant 13 
					                                         i32 %340 = OpConstant 10 
					                              Private f32_4* %354 = OpVariable Private 
					                                         i32 %357 = OpConstant 9 
					                               Output f32_4* %390 = OpVariable Output 
					                                         i32 %392 = OpConstant 16 
					                                         f32 %395 = OpConstant 3,674022E-40 
					                                       f32_4 %396 = OpConstantComposite %395 %395 %395 %395 
					                                         f32 %399 = OpConstant 3,674022E-40 
					                                       f32_4 %400 = OpConstantComposite %399 %399 %399 %399 
					                                         f32 %410 = OpConstant 3,674022E-40 
					                                       f32_2 %411 = OpConstantComposite %410 %410 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %439 = OpVariable Input 
					                               Private bool* %443 = OpVariable Private 
					                                Private f32* %450 = OpVariable Private 
					                                         i32 %451 = OpConstant 11 
					                                         i32 %455 = OpConstant 12 
					                                         i32 %470 = OpConstant 7 
					                                         f32 %484 = OpConstant 3,674022E-40 
					                                         f32 %493 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                             %511 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %317 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                       f32_4 %124 = OpLoad %123 
					                              Uniform f32_4* %126 = OpAccessChain %24 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpFMul %124 %127 
					                                                      OpStore %122 %128 
					                                       f32_4 %129 = OpLoad %122 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 3 3 3 
					                                       f32_4 %131 = OpLoad %122 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFMul %130 %132 
					                                       f32_4 %134 = OpLoad %122 
					                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
					                                                      OpStore %122 %135 
					                                       f32_4 %137 = OpLoad %122 
					                                                      OpStore %136 %137 
					                                       f32_4 %140 = OpLoad %36 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_4 %142 = OpLoad %36 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %141 %143 
					                                                      OpStore %139 %144 
					                                         f32 %145 = OpLoad %139 
					                                         f32 %146 = OpExtInst %1 32 %145 
					                                                      OpStore %139 %146 
					                                         f32 %147 = OpLoad %139 
					                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
					                                       f32_4 %149 = OpLoad %36 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_3 %151 = OpFMul %148 %150 
					                                       f32_4 %152 = OpLoad %36 
					                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
					                                                      OpStore %36 %153 
					                                       f32_3 %156 = OpLoad %155 
					                              Uniform f32_4* %157 = OpAccessChain %24 %62 %45 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                         f32 %160 = OpDot %156 %159 
					                                Private f32* %162 = OpAccessChain %60 %161 
					                                                      OpStore %162 %160 
					                                       f32_3 %163 = OpLoad %155 
					                              Uniform f32_4* %164 = OpAccessChain %24 %62 %40 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                         f32 %167 = OpDot %163 %166 
					                                Private f32* %168 = OpAccessChain %60 %114 
					                                                      OpStore %168 %167 
					                                       f32_3 %169 = OpLoad %155 
					                              Uniform f32_4* %170 = OpAccessChain %24 %62 %39 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %175 = OpAccessChain %60 %174 
					                                                      OpStore %175 %173 
					                                       f32_4 %176 = OpLoad %60 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_4 %178 = OpLoad %60 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %177 %179 
					                                                      OpStore %139 %180 
					                                         f32 %181 = OpLoad %139 
					                                         f32 %182 = OpExtInst %1 32 %181 
					                                                      OpStore %139 %182 
					                                         f32 %183 = OpLoad %139 
					                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
					                                       f32_4 %185 = OpLoad %60 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_3 %187 = OpFMul %184 %186 
					                                       f32_4 %188 = OpLoad %60 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
					                                                      OpStore %60 %189 
					                                       f32_4 %190 = OpLoad %60 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                         f32 %194 = OpDot %191 %193 
					                                                      OpStore %139 %194 
					                              Uniform f32_4* %195 = OpAccessChain %24 %40 
					                                       f32_4 %196 = OpLoad %195 
					                                       f32_2 %197 = OpVectorShuffle %196 %196 1 1 
					                              Uniform f32_4* %199 = OpAccessChain %24 %198 %40 
					                                       f32_4 %200 = OpLoad %199 
					                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
					                                       f32_2 %202 = OpFMul %197 %201 
					                                       f32_4 %203 = OpLoad %36 
					                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
					                                                      OpStore %36 %204 
					                              Uniform f32_4* %205 = OpAccessChain %24 %198 %45 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                              Uniform f32_4* %208 = OpAccessChain %24 %40 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_2 %210 = OpVectorShuffle %209 %209 0 0 
					                                       f32_2 %211 = OpFMul %207 %210 
					                                       f32_4 %212 = OpLoad %36 
					                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
					                                       f32_2 %214 = OpFAdd %211 %213 
					                                       f32_4 %215 = OpLoad %36 
					                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
					                                                      OpStore %36 %216 
					                                       f32_4 %217 = OpLoad %36 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
					                                       f32_2 %219 = OpExtInst %1 4 %218 
					                                Uniform f32* %221 = OpAccessChain %24 %220 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %224 = OpAccessChain %24 %223 
					                                         f32 %225 = OpLoad %224 
					                                       f32_2 %226 = OpCompositeConstruct %222 %225 
					                                       f32_2 %227 = OpFMul %219 %226 
					                                       f32_4 %228 = OpLoad %36 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
					                                                      OpStore %36 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_2 %231 = OpVectorShuffle %230 %230 3 3 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
					                                       f32_2 %234 = OpFDiv %231 %233 
					                                       f32_4 %235 = OpLoad %36 
					                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
					                                                      OpStore %36 %236 
					                                       f32_4 %238 = OpLoad %36 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_4 %240 = OpLoad %36 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                         f32 %242 = OpDot %239 %241 
					                                                      OpStore %237 %242 
					                                Uniform f32* %244 = OpAccessChain %24 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %247 = OpAccessChain %24 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_2 %249 = OpCompositeConstruct %245 %248 
					                                       f32_2 %252 = OpFMul %249 %251 
					                                       f32_4 %253 = OpLoad %36 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
					                                       f32_2 %255 = OpFAdd %252 %254 
					                                       f32_4 %256 = OpLoad %36 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
					                                                      OpStore %36 %257 
					                                       f32_4 %258 = OpLoad %36 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
					                                       f32_2 %260 = OpFDiv %251 %259 
					                                       f32_4 %261 = OpLoad %36 
					                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
					                                                      OpStore %36 %262 
					                                         f32 %263 = OpLoad %237 
					                                         f32 %264 = OpExtInst %1 32 %263 
					                                                      OpStore %237 %264 
					                                  Input f32* %268 = OpAccessChain %266 %114 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpExtInst %1 4 %269 
					                                Uniform f32* %272 = OpAccessChain %24 %271 
					                                         f32 %273 = OpLoad %272 
					                                         f32 %274 = OpFMul %270 %273 
					                                Private f32* %275 = OpAccessChain %60 %161 
					                                                      OpStore %275 %274 
					                                         f32 %276 = OpLoad %237 
					                                Private f32* %277 = OpAccessChain %60 %161 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpFMul %276 %278 
					                                                      OpStore %237 %279 
					                                         f32 %280 = OpLoad %237 
					                                         f32 %282 = OpFMul %280 %281 
					                                Private f32* %283 = OpAccessChain %60 %161 
					                                                      OpStore %283 %282 
					                                Uniform f32* %286 = OpAccessChain %24 %285 
					                                         f32 %287 = OpLoad %286 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %290 = OpFAdd %288 %289 
					                                                      OpStore %284 %290 
					                                         f32 %291 = OpLoad %284 
					                                Private f32* %292 = OpAccessChain %60 %161 
					                                         f32 %293 = OpLoad %292 
					                                         f32 %294 = OpExtInst %1 4 %293 
					                                         f32 %295 = OpFMul %291 %294 
					                                                      OpStore %284 %295 
					                                         f32 %296 = OpLoad %237 
					                                         f32 %297 = OpFMul %296 %281 
					                                         f32 %298 = OpLoad %284 
					                                         f32 %299 = OpFNegate %298 
					                                         f32 %300 = OpFAdd %297 %299 
					                                                      OpStore %237 %300 
					                                         f32 %301 = OpLoad %139 
					                                         f32 %302 = OpExtInst %1 4 %301 
					                                         f32 %303 = OpLoad %237 
					                                         f32 %304 = OpFMul %302 %303 
					                                         f32 %305 = OpLoad %284 
					                                         f32 %306 = OpFAdd %304 %305 
					                                                      OpStore %139 %306 
					                                Uniform f32* %311 = OpAccessChain %24 %198 %62 %310 
					                                         f32 %312 = OpLoad %311 
					                                        bool %314 = OpFOrdEqual %312 %313 
					                                                      OpStore %309 %314 
					                                        bool %315 = OpLoad %309 
					                                                      OpSelectionMerge %319 None 
					                                                      OpBranchConditional %315 %318 %321 
					                                             %318 = OpLabel 
					                                         f32 %320 = OpLoad %139 
					                                                      OpStore %317 %320 
					                                                      OpBranch %319 
					                                             %321 = OpLabel 
					                                Private f32* %322 = OpAccessChain %60 %161 
					                                         f32 %323 = OpLoad %322 
					                                                      OpStore %317 %323 
					                                                      OpBranch %319 
					                                             %319 = OpLabel 
					                                         f32 %324 = OpLoad %317 
					                                                      OpStore %139 %324 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                Uniform f32* %329 = OpAccessChain %24 %328 
					                                         f32 %330 = OpLoad %329 
					                                         f32 %331 = OpFMul %327 %330 
					                                                      OpStore %237 %331 
					                                         f32 %332 = OpLoad %237 
					                                         f32 %333 = OpLoad %139 
					                                         f32 %334 = OpFMul %332 %333 
					                                         f32 %335 = OpFAdd %334 %289 
					                                                      OpStore %237 %335 
					                                         f32 %336 = OpLoad %139 
					                                         f32 %337 = OpLoad %237 
					                                         f32 %338 = OpFDiv %336 %337 
					                                Private f32* %339 = OpAccessChain %60 %161 
					                                                      OpStore %339 %338 
					                                Uniform f32* %341 = OpAccessChain %24 %340 
					                                         f32 %342 = OpLoad %341 
					                                Uniform f32* %343 = OpAccessChain %24 %328 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                                      OpStore %139 %345 
					                                Private f32* %346 = OpAccessChain %60 %161 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpLoad %139 
					                                         f32 %349 = OpFMul %347 %348 
					                                                      OpStore %139 %349 
					                                         f32 %350 = OpLoad %139 
					                                         f32 %351 = OpExtInst %1 37 %350 %289 
					                                                      OpStore %237 %351 
					                                         f32 %352 = OpLoad %237 
					                                         f32 %353 = OpExtInst %1 31 %352 
					                                                      OpStore %237 %353 
					                                  Input f32* %355 = OpAccessChain %123 %310 
					                                         f32 %356 = OpLoad %355 
					                                Uniform f32* %358 = OpAccessChain %24 %357 %310 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFMul %356 %359 
					                                Private f32* %361 = OpAccessChain %354 %161 
					                                                      OpStore %361 %360 
					                              Uniform f32_4* %362 = OpAccessChain %24 %357 
					                                       f32_4 %363 = OpLoad %362 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %354 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
					                                       f32_3 %367 = OpFMul %364 %366 
					                                       f32_4 %368 = OpLoad %122 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                                       f32_3 %370 = OpFNegate %369 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %354 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %354 %373 
					                                Uniform f32* %374 = OpAccessChain %24 %357 %310 
					                                         f32 %375 = OpLoad %374 
					                                  Input f32* %376 = OpAccessChain %123 %310 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                Private f32* %379 = OpAccessChain %122 %310 
					                                         f32 %380 = OpLoad %379 
					                                         f32 %381 = OpFNegate %380 
					                                         f32 %382 = OpFAdd %378 %381 
					                                Private f32* %383 = OpAccessChain %354 %310 
					                                                      OpStore %383 %382 
					                                         f32 %384 = OpLoad %237 
					                                       f32_4 %385 = OpCompositeConstruct %384 %384 %384 %384 
					                                       f32_4 %386 = OpLoad %354 
					                                       f32_4 %387 = OpFMul %385 %386 
					                                       f32_4 %388 = OpLoad %122 
					                                       f32_4 %389 = OpFAdd %387 %388 
					                                                      OpStore %86 %389 
					                                       f32_4 %391 = OpLoad %86 
					                                                      OpStore %390 %391 
					                              Uniform f32_4* %393 = OpAccessChain %24 %392 
					                                       f32_4 %394 = OpLoad %393 
					                                       f32_4 %397 = OpExtInst %1 40 %394 %396 
					                                                      OpStore %86 %397 
					                                       f32_4 %398 = OpLoad %86 
					                                       f32_4 %401 = OpExtInst %1 37 %398 %400 
					                                                      OpStore %86 %401 
					                                       f32_2 %402 = OpLoad %9 
					                                       f32_4 %403 = OpLoad %86 
					                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
					                                       f32_2 %405 = OpFNegate %404 
					                                       f32_2 %406 = OpFAdd %402 %405 
					                                       f32_4 %407 = OpLoad %354 
					                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
					                                                      OpStore %354 %408 
					                                       f32_2 %409 = OpLoad %9 
					                                       f32_2 %412 = OpFMul %409 %411 
					                                       f32_4 %413 = OpLoad %86 
					                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
					                                       f32_2 %415 = OpFNegate %414 
					                                       f32_2 %416 = OpFAdd %412 %415 
					                                                      OpStore %9 %416 
					                                       f32_4 %417 = OpLoad %86 
					                                       f32_2 %418 = OpVectorShuffle %417 %417 2 3 
					                                       f32_2 %419 = OpFNegate %418 
					                                       f32_2 %420 = OpLoad %9 
					                                       f32_2 %421 = OpFAdd %419 %420 
					                                       f32_4 %422 = OpLoad %36 
					                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 2 3 
					                                                      OpStore %36 %423 
					                                       f32_4 %424 = OpLoad %86 
					                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
					                                       f32_2 %426 = OpFNegate %425 
					                                       f32_4 %427 = OpLoad %86 
					                                       f32_2 %428 = OpVectorShuffle %427 %427 2 3 
					                                       f32_2 %429 = OpFAdd %426 %428 
					                                                      OpStore %9 %429 
					                                       f32_4 %431 = OpLoad %354 
					                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
					                                       f32_2 %433 = OpLoad %9 
					                                       f32_2 %434 = OpFDiv %432 %433 
					                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %436 
					                                       f32_4 %438 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %438 
					                                       f32_2 %440 = OpLoad %439 
					                                       f32_4 %441 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %442 
					                                  Input f32* %444 = OpAccessChain %266 %114 
					                                         f32 %445 = OpLoad %444 
					                                        bool %446 = OpFOrdGreaterThanEqual %313 %445 
					                                                      OpStore %443 %446 
					                                        bool %447 = OpLoad %443 
					                                         f32 %448 = OpSelect %447 %289 %313 
					                                Private f32* %449 = OpAccessChain %9 %161 
					                                                      OpStore %449 %448 
					                                Uniform f32* %452 = OpAccessChain %24 %451 
					                                         f32 %453 = OpLoad %452 
					                                         f32 %454 = OpFNegate %453 
					                                Uniform f32* %456 = OpAccessChain %24 %455 
					                                         f32 %457 = OpLoad %456 
					                                         f32 %458 = OpFAdd %454 %457 
					                                                      OpStore %450 %458 
					                                Private f32* %459 = OpAccessChain %9 %161 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpLoad %450 
					                                         f32 %462 = OpFMul %460 %461 
					                                Uniform f32* %463 = OpAccessChain %24 %451 
					                                         f32 %464 = OpLoad %463 
					                                         f32 %465 = OpFAdd %462 %464 
					                                Private f32* %466 = OpAccessChain %9 %161 
					                                                      OpStore %466 %465 
					                                Private f32* %467 = OpAccessChain %9 %161 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFMul %468 %250 
					                                Uniform f32* %471 = OpAccessChain %24 %470 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %469 %472 
					                                Private f32* %474 = OpAccessChain %9 %161 
					                                                      OpStore %474 %473 
					                                Private f32* %475 = OpAccessChain %9 %161 
					                                         f32 %476 = OpLoad %475 
					                                Uniform f32* %477 = OpAccessChain %24 %328 
					                                         f32 %478 = OpLoad %477 
					                                         f32 %479 = OpFMul %476 %478 
					                                Private f32* %480 = OpAccessChain %9 %161 
					                                                      OpStore %480 %479 
					                                Private f32* %481 = OpAccessChain %9 %161 
					                                         f32 %482 = OpLoad %481 
					                                         f32 %483 = OpFNegate %482 
					                                         f32 %485 = OpFMul %483 %484 
					                                         f32 %486 = OpFAdd %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %161 
					                                                      OpStore %487 %486 
					                                Private f32* %488 = OpAccessChain %9 %161 
					                                         f32 %489 = OpLoad %488 
					                                Private f32* %490 = OpAccessChain %60 %161 
					                                         f32 %491 = OpLoad %490 
					                                         f32 %492 = OpFMul %489 %491 
					                                         f32 %494 = OpFAdd %492 %493 
					                                Private f32* %495 = OpAccessChain %60 %310 
					                                                      OpStore %495 %494 
					                                         f32 %496 = OpLoad %139 
					                                         f32 %497 = OpFNegate %496 
					                                         f32 %498 = OpFMul %497 %484 
					                                Private f32* %499 = OpAccessChain %60 %310 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFAdd %498 %500 
					                                Private f32* %502 = OpAccessChain %60 %114 
					                                                      OpStore %502 %501 
					                                         f32 %503 = OpLoad %139 
					                                         f32 %504 = OpFMul %503 %484 
					                                Private f32* %505 = OpAccessChain %60 %310 
					                                         f32 %506 = OpLoad %505 
					                                         f32 %507 = OpFAdd %504 %506 
					                                Private f32* %508 = OpAccessChain %60 %174 
					                                                      OpStore %508 %507 
					                                       f32_4 %510 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %510 
					                                 Output f32* %512 = OpAccessChain %118 %45 %114 
					                                         f32 %513 = OpLoad %512 
					                                         f32 %514 = OpFNegate %513 
					                                 Output f32* %515 = OpAccessChain %118 %45 %114 
					                                                      OpStore %515 %514 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 96
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %11 %13 %29 %41 %76 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpDecorate %9 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 Location 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %13 RelaxedPrecision 
					                                             OpDecorate %13 Location 13 
					                                             OpDecorate %14 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate %18 RelaxedPrecision 
					                                             OpDecorate %21 RelaxedPrecision 
					                                             OpDecorate %21 DescriptorSet 21 
					                                             OpDecorate %21 Binding 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %25 RelaxedPrecision 
					                                             OpDecorate %25 DescriptorSet 25 
					                                             OpDecorate %25 Binding 25 
					                                             OpDecorate %26 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 29 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 41 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %45 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %47 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %52 RelaxedPrecision 
					                                             OpDecorate %53 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %55 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %58 RelaxedPrecision 
					                                             OpDecorate %59 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %65 RelaxedPrecision 
					                                             OpDecorate %66 RelaxedPrecision 
					                                             OpDecorate %68 RelaxedPrecision 
					                                             OpDecorate %71 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %73 RelaxedPrecision 
					                                             OpDecorate %74 RelaxedPrecision 
					                                             OpDecorate %76 RelaxedPrecision 
					                                             OpDecorate %76 Location 76 
					                                             OpDecorate %77 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypePointer Input %7 
					                        Input f32_4* %11 = OpVariable Input 
					                        Input f32_4* %13 = OpVariable Input 
					                                     %17 = OpTypePointer Private %6 
					                        Private f32* %18 = OpVariable Private 
					                                     %19 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %20 = OpTypePointer UniformConstant %19 
					UniformConstant read_only Texture2D* %21 = OpVariable UniformConstant 
					                                     %23 = OpTypeSampler 
					                                     %24 = OpTypePointer UniformConstant %23 
					            UniformConstant sampler* %25 = OpVariable UniformConstant 
					                                     %27 = OpTypeSampledImage %19 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %30 = OpTypeVector %6 2 
					                                     %34 = OpTypeInt 32 0 
					                                 u32 %35 = OpConstant 3 
					                                     %37 = OpTypePointer Private %30 
					                      Private f32_2* %38 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                 f32 %50 = OpConstant 3,674022E-40 
					                                 f32 %51 = OpConstant 3,674022E-40 
					                                 u32 %63 = OpConstant 1 
					                                 f32 %67 = OpConstant 3,674022E-40 
					                                 u32 %69 = OpConstant 0 
					                                     %75 = OpTypePointer Output %7 
					                       Output f32_4* %76 = OpVariable Output 
					                                     %78 = OpTypeBool 
					                                     %79 = OpTypePointer Private %78 
					                       Private bool* %80 = OpVariable Private 
					                                     %85 = OpTypeInt 32 1 
					                                 i32 %86 = OpConstant 0 
					                                 i32 %87 = OpConstant 1 
					                                 i32 %89 = OpConstant -1 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                               f32_4 %12 = OpLoad %11 
					                               f32_4 %14 = OpLoad %13 
					                               f32_4 %15 = OpFNegate %14 
					                               f32_4 %16 = OpFAdd %12 %15 
					                                             OpStore %9 %16 
					                 read_only Texture2D %22 = OpLoad %21 
					                             sampler %26 = OpLoad %25 
					          read_only Texture2DSampled %28 = OpSampledImage %22 %26 
					                               f32_4 %31 = OpLoad vs_TEXCOORD0 
					                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
					                               f32_4 %33 = OpImageSampleImplicitLod %28 %32 
					                                 f32 %36 = OpCompositeExtract %33 3 
					                                             OpStore %18 %36 
					                                 f32 %39 = OpLoad %18 
					                               f32_2 %40 = OpCompositeConstruct %39 %39 
					                               f32_4 %42 = OpLoad vs_TEXCOORD1 
					                               f32_2 %43 = OpVectorShuffle %42 %42 0 0 
					                               f32_2 %44 = OpFMul %40 %43 
					                               f32_4 %45 = OpLoad vs_TEXCOORD1 
					                               f32_2 %46 = OpVectorShuffle %45 %45 2 1 
					                               f32_2 %47 = OpFNegate %46 
					                               f32_2 %48 = OpFAdd %44 %47 
					                                             OpStore %38 %48 
					                               f32_2 %49 = OpLoad %38 
					                               f32_2 %52 = OpCompositeConstruct %50 %50 
					                               f32_2 %53 = OpCompositeConstruct %51 %51 
					                               f32_2 %54 = OpExtInst %1 43 %49 %52 %53 
					                                             OpStore %38 %54 
					                               f32_2 %55 = OpLoad %38 
					                               f32_4 %56 = OpVectorShuffle %55 %55 0 0 0 0 
					                               f32_4 %57 = OpLoad %9 
					                               f32_4 %58 = OpFMul %56 %57 
					                               f32_4 %59 = OpLoad %13 
					                               f32_4 %60 = OpFAdd %58 %59 
					                                             OpStore %9 %60 
					                        Private f32* %61 = OpAccessChain %9 %35 
					                                 f32 %62 = OpLoad %61 
					                        Private f32* %64 = OpAccessChain %38 %63 
					                                 f32 %65 = OpLoad %64 
					                                 f32 %66 = OpFMul %62 %65 
					                                 f32 %68 = OpFAdd %66 %67 
					                        Private f32* %70 = OpAccessChain %38 %69 
					                                             OpStore %70 %68 
					                               f32_2 %71 = OpLoad %38 
					                               f32_4 %72 = OpVectorShuffle %71 %71 1 1 1 1 
					                               f32_4 %73 = OpLoad %9 
					                               f32_4 %74 = OpFMul %72 %73 
					                                             OpStore %9 %74 
					                               f32_4 %77 = OpLoad %9 
					                                             OpStore %76 %77 
					                        Private f32* %81 = OpAccessChain %38 %69 
					                                 f32 %82 = OpLoad %81 
					                                bool %83 = OpFOrdLessThan %82 %50 
					                                             OpStore %80 %83 
					                                bool %84 = OpLoad %80 
					                                 i32 %88 = OpSelect %84 %87 %86 
					                                 i32 %90 = OpIMul %88 %89 
					                                bool %91 = OpINotEqual %90 %86 
					                                             OpSelectionMerge %93 None 
					                                             OpBranchConditional %91 %92 %93 
					                                     %92 = OpLabel 
					                                             OpKill
					                                     %93 = OpLabel 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[12];
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_11[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_18[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _UnderlayOffsetX;
					uniform 	float _UnderlayOffsetY;
					uniform 	float _UnderlayDilate;
					uniform 	float _UnderlaySoftness;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _ScaleRatioC;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _UnderlayColor;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
					    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
					    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
					    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 642
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %130 %195 %306 %420 %458 %464 %466 %538 %540 %634 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpMemberDecorate %22 23 Offset 22 
					                                                      OpMemberDecorate %22 24 Offset 22 
					                                                      OpMemberDecorate %22 25 Offset 22 
					                                                      OpMemberDecorate %22 26 Offset 22 
					                                                      OpMemberDecorate %22 27 Offset 22 
					                                                      OpMemberDecorate %22 28 Offset 22 
					                                                      OpMemberDecorate %22 29 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 Location 122 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %170 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %401 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %403 RelaxedPrecision 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %415 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate vs_TEXCOORD0 Location 458 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 464 
					                                                      OpDecorate %466 Location 466 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 538 
					                                                      OpDecorate vs_TEXCOORD3 Location 540 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 Location 634 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 19 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 20 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                               Output f32_4* %122 = OpVariable Output 
					                                         i32 %123 = OpConstant 6 
					                                         u32 %124 = OpConstant 3 
					                                             %127 = OpTypePointer Output %6 
					                              Private f32_4* %129 = OpVariable Private 
					                                Input f32_4* %130 = OpVariable Input 
					                                         f32 %135 = OpConstant 3,674022E-40 
					                                             %136 = OpTypePointer Private %6 
					                              Private f32_4* %138 = OpVariable Private 
					                                             %143 = OpTypePointer Private %15 
					                              Private f32_3* %144 = OpVariable Private 
					                              Private f32_4* %153 = OpVariable Private 
					                              Private f32_4* %162 = OpVariable Private 
					                                         i32 %163 = OpConstant 9 
					                                Private f32* %179 = OpVariable Private 
					                                             %194 = OpTypePointer Input %15 
					                                Input f32_3* %195 = OpVariable Input 
					                                         u32 %201 = OpConstant 0 
					                                         u32 %214 = OpConstant 2 
					                                         i32 %238 = OpConstant 4 
					                                         i32 %260 = OpConstant 27 
					                                         i32 %263 = OpConstant 28 
					                                Private f32* %277 = OpVariable Private 
					                                         i32 %283 = OpConstant 22 
					                                         i32 %286 = OpConstant 23 
					                                         f32 %290 = OpConstant 3,674022E-40 
					                                       f32_2 %291 = OpConstantComposite %290 %290 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_2* %306 = OpVariable Input 
					                                             %307 = OpTypePointer Input %6 
					                                         i32 %311 = OpConstant 26 
					                                         f32 %321 = OpConstant 3,674022E-40 
					                                Private f32* %324 = OpVariable Private 
					                                         i32 %325 = OpConstant 29 
					                                             %346 = OpTypeBool 
					                                             %347 = OpTypePointer Private %346 
					                               Private bool* %348 = OpVariable Private 
					                                         f32 %351 = OpConstant 3,674022E-40 
					                                             %354 = OpTypePointer Function %6 
					                                         i32 %363 = OpConstant 8 
					                                         i32 %366 = OpConstant 17 
					                                         i32 %378 = OpConstant 10 
					                              Private f32_2* %388 = OpVariable Private 
					                              Private f32_4* %400 = OpVariable Private 
					                               Output f32_4* %420 = OpVariable Output 
					                                         i32 %422 = OpConstant 21 
					                                         f32 %425 = OpConstant 3,674022E-40 
					                                       f32_4 %426 = OpConstantComposite %425 %425 %425 %425 
					                                         f32 %429 = OpConstant 3,674022E-40 
					                                       f32_4 %430 = OpConstantComposite %429 %429 %429 %429 
					                                         f32 %438 = OpConstant 3,674022E-40 
					                                       f32_2 %439 = OpConstantComposite %438 %438 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %466 = OpVariable Input 
					                               Private bool* %470 = OpVariable Private 
					                              Private f32_3* %477 = OpVariable Private 
					                                         i32 %478 = OpConstant 15 
					                                         i32 %482 = OpConstant 16 
					                                         i32 %499 = OpConstant 7 
					                                         f32 %513 = OpConstant 3,674022E-40 
					                                         f32 %522 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %545 = OpConstant 14 
					                                         i32 %548 = OpConstant 13 
					                                         i32 %551 = OpConstant 11 
					                                         i32 %554 = OpConstant 12 
					                                         i32 %558 = OpConstant 18 
					                                         i32 %585 = OpConstant 24 
					                                         i32 %588 = OpConstant 25 
					                                             %633 = OpTypePointer Output %7 
					                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %355 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
					                                         f32 %126 = OpLoad %125 
					                                 Output f32* %128 = OpAccessChain %122 %124 
					                                                      OpStore %128 %126 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_4 %133 = OpLoad %129 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %129 %134 
					                                Private f32* %137 = OpAccessChain %129 %124 
					                                                      OpStore %137 %135 
					                                       f32_4 %139 = OpLoad %129 
					                              Uniform f32_4* %140 = OpAccessChain %24 %123 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_4 %142 = OpFMul %139 %141 
					                                                      OpStore %138 %142 
					                                       f32_4 %145 = OpLoad %138 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 3 3 3 
					                                       f32_4 %147 = OpLoad %138 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
					                                       f32_3 %149 = OpFMul %146 %148 
					                                                      OpStore %144 %149 
					                                       f32_3 %150 = OpLoad %144 
					                                       f32_4 %151 = OpLoad %122 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %122 %152 
					                                       f32_3 %154 = OpLoad %144 
					                                       f32_3 %155 = OpFNegate %154 
					                                       f32_4 %156 = OpLoad %153 
					                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
					                                                      OpStore %153 %157 
					                                Private f32* %158 = OpAccessChain %138 %124 
					                                         f32 %159 = OpLoad %158 
					                                         f32 %160 = OpFNegate %159 
					                                Private f32* %161 = OpAccessChain %153 %124 
					                                                      OpStore %161 %160 
					                              Uniform f32_4* %164 = OpAccessChain %24 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 3 3 3 
					                              Uniform f32_4* %167 = OpAccessChain %24 %163 
					                                       f32_4 %168 = OpLoad %167 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFMul %166 %169 
					                                       f32_4 %171 = OpLoad %162 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
					                                                      OpStore %162 %172 
					                                Uniform f32* %173 = OpAccessChain %24 %163 %124 
					                                         f32 %174 = OpLoad %173 
					                                Private f32* %175 = OpAccessChain %162 %124 
					                                                      OpStore %175 %174 
					                                       f32_4 %176 = OpLoad %153 
					                                       f32_4 %177 = OpLoad %162 
					                                       f32_4 %178 = OpFAdd %176 %177 
					                                                      OpStore %153 %178 
					                                       f32_4 %180 = OpLoad %36 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_4 %182 = OpLoad %36 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
					                                         f32 %184 = OpDot %181 %183 
					                                                      OpStore %179 %184 
					                                         f32 %185 = OpLoad %179 
					                                         f32 %186 = OpExtInst %1 32 %185 
					                                                      OpStore %179 %186 
					                                         f32 %187 = OpLoad %179 
					                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
					                                       f32_4 %189 = OpLoad %36 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %188 %190 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
					                                                      OpStore %36 %193 
					                                       f32_3 %196 = OpLoad %195 
					                              Uniform f32_4* %197 = OpAccessChain %24 %62 %45 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                         f32 %200 = OpDot %196 %199 
					                                Private f32* %202 = OpAccessChain %60 %201 
					                                                      OpStore %202 %200 
					                                       f32_3 %203 = OpLoad %195 
					                              Uniform f32_4* %204 = OpAccessChain %24 %62 %40 
					                                       f32_4 %205 = OpLoad %204 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %203 %206 
					                                Private f32* %208 = OpAccessChain %60 %114 
					                                                      OpStore %208 %207 
					                                       f32_3 %209 = OpLoad %195 
					                              Uniform f32_4* %210 = OpAccessChain %24 %62 %39 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                         f32 %213 = OpDot %209 %212 
					                                Private f32* %215 = OpAccessChain %60 %214 
					                                                      OpStore %215 %213 
					                                       f32_4 %216 = OpLoad %60 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
					                                       f32_4 %218 = OpLoad %60 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                         f32 %220 = OpDot %217 %219 
					                                                      OpStore %179 %220 
					                                         f32 %221 = OpLoad %179 
					                                         f32 %222 = OpExtInst %1 32 %221 
					                                                      OpStore %179 %222 
					                                         f32 %223 = OpLoad %179 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                                       f32_4 %225 = OpLoad %60 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %60 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
					                                                      OpStore %60 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
					                                         f32 %234 = OpDot %231 %233 
					                                                      OpStore %179 %234 
					                              Uniform f32_4* %235 = OpAccessChain %24 %40 
					                                       f32_4 %236 = OpLoad %235 
					                                       f32_2 %237 = OpVectorShuffle %236 %236 1 1 
					                              Uniform f32_4* %239 = OpAccessChain %24 %238 %40 
					                                       f32_4 %240 = OpLoad %239 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                       f32_2 %242 = OpFMul %237 %241 
					                                       f32_4 %243 = OpLoad %36 
					                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 2 3 
					                                                      OpStore %36 %244 
					                              Uniform f32_4* %245 = OpAccessChain %24 %238 %45 
					                                       f32_4 %246 = OpLoad %245 
					                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
					                              Uniform f32_4* %248 = OpAccessChain %24 %40 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_2 %250 = OpVectorShuffle %249 %249 0 0 
					                                       f32_2 %251 = OpFMul %247 %250 
					                                       f32_4 %252 = OpLoad %36 
					                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
					                                       f32_2 %254 = OpFAdd %251 %253 
					                                       f32_4 %255 = OpLoad %36 
					                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
					                                                      OpStore %36 %256 
					                                       f32_4 %257 = OpLoad %36 
					                                       f32_2 %258 = OpVectorShuffle %257 %257 0 1 
					                                       f32_2 %259 = OpExtInst %1 4 %258 
					                                Uniform f32* %261 = OpAccessChain %24 %260 
					                                         f32 %262 = OpLoad %261 
					                                Uniform f32* %264 = OpAccessChain %24 %263 
					                                         f32 %265 = OpLoad %264 
					                                       f32_2 %266 = OpCompositeConstruct %262 %265 
					                                       f32_2 %267 = OpFMul %259 %266 
					                                       f32_4 %268 = OpLoad %36 
					                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 2 3 
					                                                      OpStore %36 %269 
					                                       f32_4 %270 = OpLoad %60 
					                                       f32_2 %271 = OpVectorShuffle %270 %270 3 3 
					                                       f32_4 %272 = OpLoad %36 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFDiv %271 %273 
					                                       f32_4 %275 = OpLoad %36 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %36 %276 
					                                       f32_4 %278 = OpLoad %36 
					                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
					                                       f32_4 %280 = OpLoad %36 
					                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
					                                         f32 %282 = OpDot %279 %281 
					                                                      OpStore %277 %282 
					                                Uniform f32* %284 = OpAccessChain %24 %283 
					                                         f32 %285 = OpLoad %284 
					                                Uniform f32* %287 = OpAccessChain %24 %286 
					                                         f32 %288 = OpLoad %287 
					                                       f32_2 %289 = OpCompositeConstruct %285 %288 
					                                       f32_2 %292 = OpFMul %289 %291 
					                                       f32_4 %293 = OpLoad %36 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_2 %295 = OpFAdd %292 %294 
					                                       f32_4 %296 = OpLoad %36 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
					                                                      OpStore %36 %297 
					                                       f32_4 %298 = OpLoad %36 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                       f32_2 %300 = OpFDiv %291 %299 
					                                       f32_4 %301 = OpLoad %36 
					                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
					                                                      OpStore %36 %302 
					                                         f32 %303 = OpLoad %277 
					                                         f32 %304 = OpExtInst %1 32 %303 
					                                                      OpStore %277 %304 
					                                  Input f32* %308 = OpAccessChain %306 %114 
					                                         f32 %309 = OpLoad %308 
					                                         f32 %310 = OpExtInst %1 4 %309 
					                                Uniform f32* %312 = OpAccessChain %24 %311 
					                                         f32 %313 = OpLoad %312 
					                                         f32 %314 = OpFMul %310 %313 
					                                Private f32* %315 = OpAccessChain %60 %201 
					                                                      OpStore %315 %314 
					                                         f32 %316 = OpLoad %277 
					                                Private f32* %317 = OpAccessChain %60 %201 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFMul %316 %318 
					                                                      OpStore %277 %319 
					                                         f32 %320 = OpLoad %277 
					                                         f32 %322 = OpFMul %320 %321 
					                                Private f32* %323 = OpAccessChain %60 %201 
					                                                      OpStore %323 %322 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                         f32 %328 = OpFNegate %327 
					                                         f32 %329 = OpFAdd %328 %135 
					                                                      OpStore %324 %329 
					                                         f32 %330 = OpLoad %324 
					                                Private f32* %331 = OpAccessChain %60 %201 
					                                         f32 %332 = OpLoad %331 
					                                         f32 %333 = OpExtInst %1 4 %332 
					                                         f32 %334 = OpFMul %330 %333 
					                                                      OpStore %324 %334 
					                                         f32 %335 = OpLoad %277 
					                                         f32 %336 = OpFMul %335 %321 
					                                         f32 %337 = OpLoad %324 
					                                         f32 %338 = OpFNegate %337 
					                                         f32 %339 = OpFAdd %336 %338 
					                                                      OpStore %277 %339 
					                                         f32 %340 = OpLoad %179 
					                                         f32 %341 = OpExtInst %1 4 %340 
					                                         f32 %342 = OpLoad %277 
					                                         f32 %343 = OpFMul %341 %342 
					                                         f32 %344 = OpLoad %324 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %179 %345 
					                                Uniform f32* %349 = OpAccessChain %24 %238 %62 %124 
					                                         f32 %350 = OpLoad %349 
					                                        bool %352 = OpFOrdEqual %350 %351 
					                                                      OpStore %348 %352 
					                                        bool %353 = OpLoad %348 
					                                                      OpSelectionMerge %357 None 
					                                                      OpBranchConditional %353 %356 %359 
					                                             %356 = OpLabel 
					                                         f32 %358 = OpLoad %179 
					                                                      OpStore %355 %358 
					                                                      OpBranch %357 
					                                             %359 = OpLabel 
					                                Private f32* %360 = OpAccessChain %60 %201 
					                                         f32 %361 = OpLoad %360 
					                                                      OpStore %355 %361 
					                                                      OpBranch %357 
					                                             %357 = OpLabel 
					                                         f32 %362 = OpLoad %355 
					                                                      OpStore %179 %362 
					                                Uniform f32* %364 = OpAccessChain %24 %363 
					                                         f32 %365 = OpLoad %364 
					                                Uniform f32* %367 = OpAccessChain %24 %366 
					                                         f32 %368 = OpLoad %367 
					                                         f32 %369 = OpFMul %365 %368 
					                                                      OpStore %277 %369 
					                                         f32 %370 = OpLoad %277 
					                                         f32 %371 = OpLoad %179 
					                                         f32 %372 = OpFMul %370 %371 
					                                         f32 %373 = OpFAdd %372 %135 
					                                                      OpStore %277 %373 
					                                         f32 %374 = OpLoad %179 
					                                         f32 %375 = OpLoad %277 
					                                         f32 %376 = OpFDiv %374 %375 
					                                Private f32* %377 = OpAccessChain %60 %201 
					                                                      OpStore %377 %376 
					                                Uniform f32* %379 = OpAccessChain %24 %378 
					                                         f32 %380 = OpLoad %379 
					                                Uniform f32* %381 = OpAccessChain %24 %366 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpFMul %380 %382 
					                                                      OpStore %277 %383 
					                                Private f32* %384 = OpAccessChain %60 %201 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpLoad %277 
					                                         f32 %387 = OpFMul %385 %386 
					                                                      OpStore %277 %387 
					                                         f32 %389 = OpLoad %277 
					                                         f32 %390 = OpExtInst %1 37 %389 %135 
					                                Private f32* %391 = OpAccessChain %388 %201 
					                                                      OpStore %391 %390 
					                                Private f32* %392 = OpAccessChain %388 %201 
					                                         f32 %393 = OpLoad %392 
					                                         f32 %394 = OpExtInst %1 31 %393 
					                                Private f32* %395 = OpAccessChain %388 %201 
					                                                      OpStore %395 %394 
					                                       f32_4 %396 = OpLoad %153 
					                                       f32_2 %397 = OpLoad %388 
					                                       f32_4 %398 = OpVectorShuffle %397 %397 0 0 0 0 
					                                       f32_4 %399 = OpFMul %396 %398 
					                                                      OpStore %153 %399 
					                                       f32_4 %401 = OpLoad %138 
					                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
					                                       f32_4 %403 = OpLoad %138 
					                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
					                                       f32_3 %405 = OpFMul %402 %404 
					                                       f32_4 %406 = OpLoad %153 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFAdd %405 %407 
					                                       f32_4 %409 = OpLoad %400 
					                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
					                                                      OpStore %400 %410 
					                                Private f32* %411 = OpAccessChain %129 %124 
					                                         f32 %412 = OpLoad %411 
					                                Uniform f32* %413 = OpAccessChain %24 %123 %124 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %412 %414 
					                                Private f32* %416 = OpAccessChain %153 %124 
					                                         f32 %417 = OpLoad %416 
					                                         f32 %418 = OpFAdd %415 %417 
					                                Private f32* %419 = OpAccessChain %400 %124 
					                                                      OpStore %419 %418 
					                                       f32_4 %421 = OpLoad %400 
					                                                      OpStore %420 %421 
					                              Uniform f32_4* %423 = OpAccessChain %24 %422 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_4 %427 = OpExtInst %1 40 %424 %426 
					                                                      OpStore %86 %427 
					                                       f32_4 %428 = OpLoad %86 
					                                       f32_4 %431 = OpExtInst %1 37 %428 %430 
					                                                      OpStore %86 %431 
					                                       f32_2 %432 = OpLoad %9 
					                                       f32_4 %433 = OpLoad %86 
					                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
					                                       f32_2 %435 = OpFNegate %434 
					                                       f32_2 %436 = OpFAdd %432 %435 
					                                                      OpStore %388 %436 
					                                       f32_2 %437 = OpLoad %9 
					                                       f32_2 %440 = OpFMul %437 %439 
					                                       f32_4 %441 = OpLoad %86 
					                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
					                                       f32_2 %443 = OpFNegate %442 
					                                       f32_2 %444 = OpFAdd %440 %443 
					                                                      OpStore %9 %444 
					                                       f32_4 %445 = OpLoad %86 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFNegate %446 
					                                       f32_2 %448 = OpLoad %9 
					                                       f32_2 %449 = OpFAdd %447 %448 
					                                       f32_4 %450 = OpLoad %36 
					                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
					                                                      OpStore %36 %451 
					                                       f32_4 %452 = OpLoad %86 
					                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
					                                       f32_2 %454 = OpFNegate %453 
					                                       f32_4 %455 = OpLoad %86 
					                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
					                                       f32_2 %457 = OpFAdd %454 %456 
					                                                      OpStore %9 %457 
					                                       f32_2 %459 = OpLoad %388 
					                                       f32_2 %460 = OpLoad %9 
					                                       f32_2 %461 = OpFDiv %459 %460 
					                                       f32_4 %462 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %463 
					                                       f32_4 %465 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %465 
					                                       f32_2 %467 = OpLoad %466 
					                                       f32_4 %468 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %469 
					                                  Input f32* %471 = OpAccessChain %306 %114 
					                                         f32 %472 = OpLoad %471 
					                                        bool %473 = OpFOrdGreaterThanEqual %351 %472 
					                                                      OpStore %470 %473 
					                                        bool %474 = OpLoad %470 
					                                         f32 %475 = OpSelect %474 %135 %351 
					                                Private f32* %476 = OpAccessChain %9 %201 
					                                                      OpStore %476 %475 
					                                Uniform f32* %479 = OpAccessChain %24 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFNegate %480 
					                                Uniform f32* %483 = OpAccessChain %24 %482 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpFAdd %481 %484 
					                                Private f32* %486 = OpAccessChain %477 %201 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %201 
					                                         f32 %488 = OpLoad %487 
					                                Private f32* %489 = OpAccessChain %477 %201 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Uniform f32* %492 = OpAccessChain %24 %478 
					                                         f32 %493 = OpLoad %492 
					                                         f32 %494 = OpFAdd %491 %493 
					                                Private f32* %495 = OpAccessChain %9 %201 
					                                                      OpStore %495 %494 
					                                Private f32* %496 = OpAccessChain %9 %201 
					                                         f32 %497 = OpLoad %496 
					                                         f32 %498 = OpFMul %497 %290 
					                                Uniform f32* %500 = OpAccessChain %24 %499 
					                                         f32 %501 = OpLoad %500 
					                                         f32 %502 = OpFAdd %498 %501 
					                                Private f32* %503 = OpAccessChain %9 %201 
					                                                      OpStore %503 %502 
					                                Private f32* %504 = OpAccessChain %9 %201 
					                                         f32 %505 = OpLoad %504 
					                                Uniform f32* %506 = OpAccessChain %24 %366 
					                                         f32 %507 = OpLoad %506 
					                                         f32 %508 = OpFMul %505 %507 
					                                Private f32* %509 = OpAccessChain %9 %201 
					                                                      OpStore %509 %508 
					                                Private f32* %510 = OpAccessChain %9 %201 
					                                         f32 %511 = OpLoad %510 
					                                         f32 %512 = OpFNegate %511 
					                                         f32 %514 = OpFMul %512 %513 
					                                         f32 %515 = OpFAdd %514 %513 
					                                Private f32* %516 = OpAccessChain %9 %201 
					                                                      OpStore %516 %515 
					                                Private f32* %517 = OpAccessChain %9 %201 
					                                         f32 %518 = OpLoad %517 
					                                Private f32* %519 = OpAccessChain %60 %201 
					                                         f32 %520 = OpLoad %519 
					                                         f32 %521 = OpFMul %518 %520 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %60 %124 
					                                                      OpStore %524 %523 
					                                         f32 %525 = OpLoad %277 
					                                         f32 %526 = OpFNegate %525 
					                                         f32 %527 = OpFMul %526 %513 
					                                Private f32* %528 = OpAccessChain %60 %124 
					                                         f32 %529 = OpLoad %528 
					                                         f32 %530 = OpFAdd %527 %529 
					                                Private f32* %531 = OpAccessChain %60 %114 
					                                                      OpStore %531 %530 
					                                         f32 %532 = OpLoad %277 
					                                         f32 %533 = OpFMul %532 %513 
					                                Private f32* %534 = OpAccessChain %60 %124 
					                                         f32 %535 = OpLoad %534 
					                                         f32 %536 = OpFAdd %533 %535 
					                                Private f32* %537 = OpAccessChain %60 %214 
					                                                      OpStore %537 %536 
					                                       f32_4 %539 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %539 
					                                  Input f32* %541 = OpAccessChain %130 %124 
					                                         f32 %542 = OpLoad %541 
					                                 Output f32* %543 = OpAccessChain vs_TEXCOORD3 %214 
					                                                      OpStore %543 %542 
					                                 Output f32* %544 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %544 %351 
					                                Uniform f32* %546 = OpAccessChain %24 %545 
					                                         f32 %547 = OpLoad %546 
					                                Uniform f32* %549 = OpAccessChain %24 %548 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %24 %551 
					                                         f32 %553 = OpLoad %552 
					                                Uniform f32* %555 = OpAccessChain %24 %554 
					                                         f32 %556 = OpLoad %555 
					                                       f32_4 %557 = OpCompositeConstruct %547 %550 %553 %556 
					                                Uniform f32* %559 = OpAccessChain %24 %558 
					                                         f32 %560 = OpLoad %559 
					                                Uniform f32* %561 = OpAccessChain %24 %558 
					                                         f32 %562 = OpLoad %561 
					                                Uniform f32* %563 = OpAccessChain %24 %558 
					                                         f32 %564 = OpLoad %563 
					                                Uniform f32* %565 = OpAccessChain %24 %558 
					                                         f32 %566 = OpLoad %565 
					                                       f32_4 %567 = OpCompositeConstruct %560 %562 %564 %566 
					                                         f32 %568 = OpCompositeExtract %567 0 
					                                         f32 %569 = OpCompositeExtract %567 1 
					                                         f32 %570 = OpCompositeExtract %567 2 
					                                         f32 %571 = OpCompositeExtract %567 3 
					                                       f32_4 %572 = OpCompositeConstruct %568 %569 %570 %571 
					                                       f32_4 %573 = OpFMul %557 %572 
					                                                      OpStore %36 %573 
					                                       f32_4 %574 = OpLoad %36 
					                                       f32_2 %575 = OpVectorShuffle %574 %574 2 3 
					                                       f32_2 %576 = OpFNegate %575 
					                                Uniform f32* %577 = OpAccessChain %24 %311 
					                                         f32 %578 = OpLoad %577 
					                                       f32_2 %579 = OpCompositeConstruct %578 %578 
					                                       f32_2 %580 = OpFMul %576 %579 
					                                       f32_3 %581 = OpLoad %477 
					                                       f32_3 %582 = OpVectorShuffle %581 %580 3 1 4 
					                                                      OpStore %477 %582 
					                                       f32_3 %583 = OpLoad %477 
					                                       f32_2 %584 = OpVectorShuffle %583 %583 0 2 
					                                Uniform f32* %586 = OpAccessChain %24 %585 
					                                         f32 %587 = OpLoad %586 
					                                Uniform f32* %589 = OpAccessChain %24 %588 
					                                         f32 %590 = OpLoad %589 
					                                       f32_2 %591 = OpCompositeConstruct %587 %590 
					                                       f32_2 %592 = OpFDiv %584 %591 
					                                       f32_3 %593 = OpLoad %477 
					                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
					                                                      OpStore %477 %594 
					                                       f32_3 %595 = OpLoad %477 
					                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
					                                       f32_2 %597 = OpLoad %466 
					                                       f32_2 %598 = OpFAdd %596 %597 
					                                       f32_4 %599 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %600 = OpVectorShuffle %599 %598 4 5 2 3 
					                                                      OpStore vs_TEXCOORD3 %600 
					                                Private f32* %601 = OpAccessChain %36 %201 
					                                         f32 %602 = OpLoad %601 
					                                         f32 %603 = OpLoad %179 
					                                         f32 %604 = OpFMul %602 %603 
					                                         f32 %605 = OpFAdd %604 %135 
					                                Private f32* %606 = OpAccessChain %477 %201 
					                                                      OpStore %606 %605 
					                                         f32 %607 = OpLoad %179 
					                                Private f32* %608 = OpAccessChain %477 %201 
					                                         f32 %609 = OpLoad %608 
					                                         f32 %610 = OpFDiv %607 %609 
					                                Private f32* %611 = OpAccessChain %60 %201 
					                                                      OpStore %611 %610 
					                                Private f32* %612 = OpAccessChain %36 %114 
					                                         f32 %613 = OpLoad %612 
					                                Private f32* %614 = OpAccessChain %60 %201 
					                                         f32 %615 = OpLoad %614 
					                                         f32 %616 = OpFMul %613 %615 
					                                Private f32* %617 = OpAccessChain %477 %201 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %9 %201 
					                                         f32 %619 = OpLoad %618 
					                                Private f32* %620 = OpAccessChain %60 %201 
					                                         f32 %621 = OpLoad %620 
					                                         f32 %622 = OpFMul %619 %621 
					                                         f32 %623 = OpFAdd %622 %522 
					                                Private f32* %624 = OpAccessChain %9 %201 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %477 %201 
					                                         f32 %626 = OpLoad %625 
					                                         f32 %627 = OpFNegate %626 
					                                         f32 %628 = OpFMul %627 %513 
					                                Private f32* %629 = OpAccessChain %9 %201 
					                                         f32 %630 = OpLoad %629 
					                                         f32 %631 = OpFAdd %628 %630 
					                                Private f32* %632 = OpAccessChain %60 %114 
					                                                      OpStore %632 %631 
					                                       f32_4 %635 = OpLoad %60 
					                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
					                                                      OpStore vs_TEXCOORD4 %636 
					                                 Output f32* %637 = OpAccessChain %118 %45 %114 
					                                         f32 %638 = OpLoad %637 
					                                         f32 %639 = OpFNegate %638 
					                                 Output f32* %640 = OpAccessChain %118 %45 %114 
					                                                      OpStore %640 %639 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 142
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %32 %77 %83 %96 %125 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD3 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 Location 32 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpMemberDecorate %49 0 RelaxedPrecision 
					                                             OpMemberDecorate %49 0 Offset 49 
					                                             OpDecorate %49 Block 
					                                             OpDecorate %51 DescriptorSet 51 
					                                             OpDecorate %51 Binding 51 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %58 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %67 RelaxedPrecision 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %71 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %73 RelaxedPrecision 
					                                             OpDecorate %74 RelaxedPrecision 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 77 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 83 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %88 RelaxedPrecision 
					                                             OpDecorate %89 RelaxedPrecision 
					                                             OpDecorate %90 RelaxedPrecision 
					                                             OpDecorate %91 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                             OpDecorate %96 RelaxedPrecision 
					                                             OpDecorate %96 Location 96 
					                                             OpDecorate %97 RelaxedPrecision 
					                                             OpDecorate %98 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %103 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %120 RelaxedPrecision 
					                                             OpDecorate %125 RelaxedPrecision 
					                                             OpDecorate %125 Location 125 
					                                             OpDecorate %130 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                        Private f32* %29 = OpVariable Private 
					                                     %31 = OpTypePointer Input %22 
					               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
					                                 u32 %33 = OpConstant 0 
					                                     %34 = OpTypePointer Input %6 
					                                 u32 %38 = OpConstant 1 
					                                 f32 %44 = OpConstant 3,674022E-40 
					                                 f32 %45 = OpConstant 3,674022E-40 
					                                     %47 = OpTypePointer Private %19 
					                      Private f32_4* %48 = OpVariable Private 
					                                     %49 = OpTypeStruct %19 
					                                     %50 = OpTypePointer Uniform %49 
					            Uniform struct {f32_4;}* %51 = OpVariable Uniform 
					                                     %52 = OpTypeInt 32 1 
					                                 i32 %53 = OpConstant 0 
					                                     %54 = OpTypeVector %6 3 
					                                     %55 = OpTypePointer Uniform %19 
					                                     %65 = OpTypePointer Uniform %6 
					                        Private f32* %73 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                      Private f32_4* %93 = OpVariable Private 
					                        Input f32_4* %96 = OpVariable Input 
					                                u32 %113 = OpConstant 2 
					                                f32 %117 = OpConstant 3,674022E-40 
					                     Private f32_4* %119 = OpVariable Private 
					                                    %124 = OpTypePointer Output %19 
					                      Output f32_4* %125 = OpVariable Output 
					                                    %127 = OpTypeBool 
					                                    %128 = OpTypePointer Private %127 
					                      Private bool* %129 = OpVariable Private 
					                                i32 %133 = OpConstant 1 
					                                i32 %135 = OpConstant -1 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD3 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %30 = OpLoad %8 
					                          Input f32* %35 = OpAccessChain vs_TEXCOORD4 %33 
					                                 f32 %36 = OpLoad %35 
					                                 f32 %37 = OpFMul %30 %36 
					                          Input f32* %39 = OpAccessChain vs_TEXCOORD4 %38 
					                                 f32 %40 = OpLoad %39 
					                                 f32 %41 = OpFNegate %40 
					                                 f32 %42 = OpFAdd %37 %41 
					                                             OpStore %29 %42 
					                                 f32 %43 = OpLoad %29 
					                                 f32 %46 = OpExtInst %1 43 %43 %44 %45 
					                                             OpStore %29 %46 
					                      Uniform f32_4* %56 = OpAccessChain %51 %53 
					                               f32_4 %57 = OpLoad %56 
					                               f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                      Uniform f32_4* %59 = OpAccessChain %51 %53 
					                               f32_4 %60 = OpLoad %59 
					                               f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                               f32_3 %62 = OpFMul %58 %61 
					                               f32_4 %63 = OpLoad %48 
					                               f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                             OpStore %48 %64 
					                        Uniform f32* %66 = OpAccessChain %51 %53 %27 
					                                 f32 %67 = OpLoad %66 
					                        Private f32* %68 = OpAccessChain %48 %27 
					                                             OpStore %68 %67 
					                                 f32 %69 = OpLoad %29 
					                               f32_4 %70 = OpCompositeConstruct %69 %69 %69 %69 
					                               f32_4 %71 = OpLoad %48 
					                               f32_4 %72 = OpFMul %70 %71 
					                                             OpStore %48 %72 
					                 read_only Texture2D %74 = OpLoad %11 
					                             sampler %75 = OpLoad %15 
					          read_only Texture2DSampled %76 = OpSampledImage %74 %75 
					                               f32_4 %78 = OpLoad vs_TEXCOORD0 
					                               f32_2 %79 = OpVectorShuffle %78 %78 0 1 
					                               f32_4 %80 = OpImageSampleImplicitLod %76 %79 
					                                 f32 %81 = OpCompositeExtract %80 3 
					                                             OpStore %73 %81 
					                                 f32 %82 = OpLoad %73 
					                          Input f32* %84 = OpAccessChain vs_TEXCOORD1 %33 
					                                 f32 %85 = OpLoad %84 
					                                 f32 %86 = OpFMul %82 %85 
					                          Input f32* %87 = OpAccessChain vs_TEXCOORD1 %27 
					                                 f32 %88 = OpLoad %87 
					                                 f32 %89 = OpFNegate %88 
					                                 f32 %90 = OpFAdd %86 %89 
					                                             OpStore %29 %90 
					                                 f32 %91 = OpLoad %29 
					                                 f32 %92 = OpExtInst %1 43 %91 %44 %45 
					                                             OpStore %29 %92 
					                                 f32 %94 = OpLoad %29 
					                               f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
					                               f32_4 %97 = OpLoad %96 
					                               f32_4 %98 = OpFMul %95 %97 
					                                             OpStore %93 %98 
					                          Input f32* %99 = OpAccessChain %96 %27 
					                                f32 %100 = OpLoad %99 
					                                f32 %101 = OpFNegate %100 
					                                f32 %102 = OpLoad %29 
					                                f32 %103 = OpFMul %101 %102 
					                                f32 %104 = OpFAdd %103 %45 
					                                             OpStore %29 %104 
					                              f32_4 %105 = OpLoad %48 
					                                f32 %106 = OpLoad %29 
					                              f32_4 %107 = OpCompositeConstruct %106 %106 %106 %106 
					                              f32_4 %108 = OpFMul %105 %107 
					                              f32_4 %109 = OpLoad %93 
					                              f32_4 %110 = OpFAdd %108 %109 
					                                             OpStore %48 %110 
					                       Private f32* %111 = OpAccessChain %48 %27 
					                                f32 %112 = OpLoad %111 
					                         Input f32* %114 = OpAccessChain vs_TEXCOORD3 %113 
					                                f32 %115 = OpLoad %114 
					                                f32 %116 = OpFMul %112 %115 
					                                f32 %118 = OpFAdd %116 %117 
					                                             OpStore %29 %118 
					                              f32_4 %120 = OpLoad %48 
					                              f32_4 %121 = OpLoad vs_TEXCOORD3 
					                              f32_4 %122 = OpVectorShuffle %121 %121 2 2 2 2 
					                              f32_4 %123 = OpFMul %120 %122 
					                                             OpStore %119 %123 
					                              f32_4 %126 = OpLoad %119 
					                                             OpStore %125 %126 
					                                f32 %130 = OpLoad %29 
					                               bool %131 = OpFOrdLessThan %130 %44 
					                                             OpStore %129 %131 
					                               bool %132 = OpLoad %129 
					                                i32 %134 = OpSelect %132 %133 %53 
					                                i32 %136 = OpIMul %134 %135 
					                               bool %137 = OpINotEqual %136 %53 
					                                             OpSelectionMerge %139 None 
					                                             OpBranchConditional %137 %138 %139 
					                                    %138 = OpLabel 
					                                             OpKill
					                                    %139 = OpLabel 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[12];
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_11[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_18[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _UnderlayOffsetX;
					uniform 	float _UnderlayOffsetY;
					uniform 	float _UnderlayDilate;
					uniform 	float _UnderlaySoftness;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _ScaleRatioC;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _UnderlayColor;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
					    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 642
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %130 %195 %306 %420 %458 %464 %466 %538 %540 %634 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpMemberDecorate %22 23 Offset 22 
					                                                      OpMemberDecorate %22 24 Offset 22 
					                                                      OpMemberDecorate %22 25 Offset 22 
					                                                      OpMemberDecorate %22 26 Offset 22 
					                                                      OpMemberDecorate %22 27 Offset 22 
					                                                      OpMemberDecorate %22 28 Offset 22 
					                                                      OpMemberDecorate %22 29 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 Location 122 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %170 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %401 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %403 RelaxedPrecision 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %415 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate vs_TEXCOORD0 Location 458 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 464 
					                                                      OpDecorate %466 Location 466 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 538 
					                                                      OpDecorate vs_TEXCOORD3 Location 540 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 Location 634 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 19 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 20 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                               Output f32_4* %122 = OpVariable Output 
					                                         i32 %123 = OpConstant 6 
					                                         u32 %124 = OpConstant 3 
					                                             %127 = OpTypePointer Output %6 
					                              Private f32_4* %129 = OpVariable Private 
					                                Input f32_4* %130 = OpVariable Input 
					                                         f32 %135 = OpConstant 3,674022E-40 
					                                             %136 = OpTypePointer Private %6 
					                              Private f32_4* %138 = OpVariable Private 
					                                             %143 = OpTypePointer Private %15 
					                              Private f32_3* %144 = OpVariable Private 
					                              Private f32_4* %153 = OpVariable Private 
					                              Private f32_4* %162 = OpVariable Private 
					                                         i32 %163 = OpConstant 9 
					                                Private f32* %179 = OpVariable Private 
					                                             %194 = OpTypePointer Input %15 
					                                Input f32_3* %195 = OpVariable Input 
					                                         u32 %201 = OpConstant 0 
					                                         u32 %214 = OpConstant 2 
					                                         i32 %238 = OpConstant 4 
					                                         i32 %260 = OpConstant 27 
					                                         i32 %263 = OpConstant 28 
					                                Private f32* %277 = OpVariable Private 
					                                         i32 %283 = OpConstant 22 
					                                         i32 %286 = OpConstant 23 
					                                         f32 %290 = OpConstant 3,674022E-40 
					                                       f32_2 %291 = OpConstantComposite %290 %290 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_2* %306 = OpVariable Input 
					                                             %307 = OpTypePointer Input %6 
					                                         i32 %311 = OpConstant 26 
					                                         f32 %321 = OpConstant 3,674022E-40 
					                                Private f32* %324 = OpVariable Private 
					                                         i32 %325 = OpConstant 29 
					                                             %346 = OpTypeBool 
					                                             %347 = OpTypePointer Private %346 
					                               Private bool* %348 = OpVariable Private 
					                                         f32 %351 = OpConstant 3,674022E-40 
					                                             %354 = OpTypePointer Function %6 
					                                         i32 %363 = OpConstant 8 
					                                         i32 %366 = OpConstant 17 
					                                         i32 %378 = OpConstant 10 
					                              Private f32_2* %388 = OpVariable Private 
					                              Private f32_4* %400 = OpVariable Private 
					                               Output f32_4* %420 = OpVariable Output 
					                                         i32 %422 = OpConstant 21 
					                                         f32 %425 = OpConstant 3,674022E-40 
					                                       f32_4 %426 = OpConstantComposite %425 %425 %425 %425 
					                                         f32 %429 = OpConstant 3,674022E-40 
					                                       f32_4 %430 = OpConstantComposite %429 %429 %429 %429 
					                                         f32 %438 = OpConstant 3,674022E-40 
					                                       f32_2 %439 = OpConstantComposite %438 %438 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %466 = OpVariable Input 
					                               Private bool* %470 = OpVariable Private 
					                              Private f32_3* %477 = OpVariable Private 
					                                         i32 %478 = OpConstant 15 
					                                         i32 %482 = OpConstant 16 
					                                         i32 %499 = OpConstant 7 
					                                         f32 %513 = OpConstant 3,674022E-40 
					                                         f32 %522 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %545 = OpConstant 14 
					                                         i32 %548 = OpConstant 13 
					                                         i32 %551 = OpConstant 11 
					                                         i32 %554 = OpConstant 12 
					                                         i32 %558 = OpConstant 18 
					                                         i32 %585 = OpConstant 24 
					                                         i32 %588 = OpConstant 25 
					                                             %633 = OpTypePointer Output %7 
					                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %355 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
					                                         f32 %126 = OpLoad %125 
					                                 Output f32* %128 = OpAccessChain %122 %124 
					                                                      OpStore %128 %126 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_4 %133 = OpLoad %129 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %129 %134 
					                                Private f32* %137 = OpAccessChain %129 %124 
					                                                      OpStore %137 %135 
					                                       f32_4 %139 = OpLoad %129 
					                              Uniform f32_4* %140 = OpAccessChain %24 %123 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_4 %142 = OpFMul %139 %141 
					                                                      OpStore %138 %142 
					                                       f32_4 %145 = OpLoad %138 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 3 3 3 
					                                       f32_4 %147 = OpLoad %138 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
					                                       f32_3 %149 = OpFMul %146 %148 
					                                                      OpStore %144 %149 
					                                       f32_3 %150 = OpLoad %144 
					                                       f32_4 %151 = OpLoad %122 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %122 %152 
					                                       f32_3 %154 = OpLoad %144 
					                                       f32_3 %155 = OpFNegate %154 
					                                       f32_4 %156 = OpLoad %153 
					                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
					                                                      OpStore %153 %157 
					                                Private f32* %158 = OpAccessChain %138 %124 
					                                         f32 %159 = OpLoad %158 
					                                         f32 %160 = OpFNegate %159 
					                                Private f32* %161 = OpAccessChain %153 %124 
					                                                      OpStore %161 %160 
					                              Uniform f32_4* %164 = OpAccessChain %24 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 3 3 3 
					                              Uniform f32_4* %167 = OpAccessChain %24 %163 
					                                       f32_4 %168 = OpLoad %167 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFMul %166 %169 
					                                       f32_4 %171 = OpLoad %162 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
					                                                      OpStore %162 %172 
					                                Uniform f32* %173 = OpAccessChain %24 %163 %124 
					                                         f32 %174 = OpLoad %173 
					                                Private f32* %175 = OpAccessChain %162 %124 
					                                                      OpStore %175 %174 
					                                       f32_4 %176 = OpLoad %153 
					                                       f32_4 %177 = OpLoad %162 
					                                       f32_4 %178 = OpFAdd %176 %177 
					                                                      OpStore %153 %178 
					                                       f32_4 %180 = OpLoad %36 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_4 %182 = OpLoad %36 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
					                                         f32 %184 = OpDot %181 %183 
					                                                      OpStore %179 %184 
					                                         f32 %185 = OpLoad %179 
					                                         f32 %186 = OpExtInst %1 32 %185 
					                                                      OpStore %179 %186 
					                                         f32 %187 = OpLoad %179 
					                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
					                                       f32_4 %189 = OpLoad %36 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %188 %190 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
					                                                      OpStore %36 %193 
					                                       f32_3 %196 = OpLoad %195 
					                              Uniform f32_4* %197 = OpAccessChain %24 %62 %45 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                         f32 %200 = OpDot %196 %199 
					                                Private f32* %202 = OpAccessChain %60 %201 
					                                                      OpStore %202 %200 
					                                       f32_3 %203 = OpLoad %195 
					                              Uniform f32_4* %204 = OpAccessChain %24 %62 %40 
					                                       f32_4 %205 = OpLoad %204 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %203 %206 
					                                Private f32* %208 = OpAccessChain %60 %114 
					                                                      OpStore %208 %207 
					                                       f32_3 %209 = OpLoad %195 
					                              Uniform f32_4* %210 = OpAccessChain %24 %62 %39 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                         f32 %213 = OpDot %209 %212 
					                                Private f32* %215 = OpAccessChain %60 %214 
					                                                      OpStore %215 %213 
					                                       f32_4 %216 = OpLoad %60 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
					                                       f32_4 %218 = OpLoad %60 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                         f32 %220 = OpDot %217 %219 
					                                                      OpStore %179 %220 
					                                         f32 %221 = OpLoad %179 
					                                         f32 %222 = OpExtInst %1 32 %221 
					                                                      OpStore %179 %222 
					                                         f32 %223 = OpLoad %179 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                                       f32_4 %225 = OpLoad %60 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %60 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
					                                                      OpStore %60 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
					                                         f32 %234 = OpDot %231 %233 
					                                                      OpStore %179 %234 
					                              Uniform f32_4* %235 = OpAccessChain %24 %40 
					                                       f32_4 %236 = OpLoad %235 
					                                       f32_2 %237 = OpVectorShuffle %236 %236 1 1 
					                              Uniform f32_4* %239 = OpAccessChain %24 %238 %40 
					                                       f32_4 %240 = OpLoad %239 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                       f32_2 %242 = OpFMul %237 %241 
					                                       f32_4 %243 = OpLoad %36 
					                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 2 3 
					                                                      OpStore %36 %244 
					                              Uniform f32_4* %245 = OpAccessChain %24 %238 %45 
					                                       f32_4 %246 = OpLoad %245 
					                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
					                              Uniform f32_4* %248 = OpAccessChain %24 %40 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_2 %250 = OpVectorShuffle %249 %249 0 0 
					                                       f32_2 %251 = OpFMul %247 %250 
					                                       f32_4 %252 = OpLoad %36 
					                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
					                                       f32_2 %254 = OpFAdd %251 %253 
					                                       f32_4 %255 = OpLoad %36 
					                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
					                                                      OpStore %36 %256 
					                                       f32_4 %257 = OpLoad %36 
					                                       f32_2 %258 = OpVectorShuffle %257 %257 0 1 
					                                       f32_2 %259 = OpExtInst %1 4 %258 
					                                Uniform f32* %261 = OpAccessChain %24 %260 
					                                         f32 %262 = OpLoad %261 
					                                Uniform f32* %264 = OpAccessChain %24 %263 
					                                         f32 %265 = OpLoad %264 
					                                       f32_2 %266 = OpCompositeConstruct %262 %265 
					                                       f32_2 %267 = OpFMul %259 %266 
					                                       f32_4 %268 = OpLoad %36 
					                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 2 3 
					                                                      OpStore %36 %269 
					                                       f32_4 %270 = OpLoad %60 
					                                       f32_2 %271 = OpVectorShuffle %270 %270 3 3 
					                                       f32_4 %272 = OpLoad %36 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFDiv %271 %273 
					                                       f32_4 %275 = OpLoad %36 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %36 %276 
					                                       f32_4 %278 = OpLoad %36 
					                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
					                                       f32_4 %280 = OpLoad %36 
					                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
					                                         f32 %282 = OpDot %279 %281 
					                                                      OpStore %277 %282 
					                                Uniform f32* %284 = OpAccessChain %24 %283 
					                                         f32 %285 = OpLoad %284 
					                                Uniform f32* %287 = OpAccessChain %24 %286 
					                                         f32 %288 = OpLoad %287 
					                                       f32_2 %289 = OpCompositeConstruct %285 %288 
					                                       f32_2 %292 = OpFMul %289 %291 
					                                       f32_4 %293 = OpLoad %36 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_2 %295 = OpFAdd %292 %294 
					                                       f32_4 %296 = OpLoad %36 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
					                                                      OpStore %36 %297 
					                                       f32_4 %298 = OpLoad %36 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                       f32_2 %300 = OpFDiv %291 %299 
					                                       f32_4 %301 = OpLoad %36 
					                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
					                                                      OpStore %36 %302 
					                                         f32 %303 = OpLoad %277 
					                                         f32 %304 = OpExtInst %1 32 %303 
					                                                      OpStore %277 %304 
					                                  Input f32* %308 = OpAccessChain %306 %114 
					                                         f32 %309 = OpLoad %308 
					                                         f32 %310 = OpExtInst %1 4 %309 
					                                Uniform f32* %312 = OpAccessChain %24 %311 
					                                         f32 %313 = OpLoad %312 
					                                         f32 %314 = OpFMul %310 %313 
					                                Private f32* %315 = OpAccessChain %60 %201 
					                                                      OpStore %315 %314 
					                                         f32 %316 = OpLoad %277 
					                                Private f32* %317 = OpAccessChain %60 %201 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFMul %316 %318 
					                                                      OpStore %277 %319 
					                                         f32 %320 = OpLoad %277 
					                                         f32 %322 = OpFMul %320 %321 
					                                Private f32* %323 = OpAccessChain %60 %201 
					                                                      OpStore %323 %322 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                         f32 %328 = OpFNegate %327 
					                                         f32 %329 = OpFAdd %328 %135 
					                                                      OpStore %324 %329 
					                                         f32 %330 = OpLoad %324 
					                                Private f32* %331 = OpAccessChain %60 %201 
					                                         f32 %332 = OpLoad %331 
					                                         f32 %333 = OpExtInst %1 4 %332 
					                                         f32 %334 = OpFMul %330 %333 
					                                                      OpStore %324 %334 
					                                         f32 %335 = OpLoad %277 
					                                         f32 %336 = OpFMul %335 %321 
					                                         f32 %337 = OpLoad %324 
					                                         f32 %338 = OpFNegate %337 
					                                         f32 %339 = OpFAdd %336 %338 
					                                                      OpStore %277 %339 
					                                         f32 %340 = OpLoad %179 
					                                         f32 %341 = OpExtInst %1 4 %340 
					                                         f32 %342 = OpLoad %277 
					                                         f32 %343 = OpFMul %341 %342 
					                                         f32 %344 = OpLoad %324 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %179 %345 
					                                Uniform f32* %349 = OpAccessChain %24 %238 %62 %124 
					                                         f32 %350 = OpLoad %349 
					                                        bool %352 = OpFOrdEqual %350 %351 
					                                                      OpStore %348 %352 
					                                        bool %353 = OpLoad %348 
					                                                      OpSelectionMerge %357 None 
					                                                      OpBranchConditional %353 %356 %359 
					                                             %356 = OpLabel 
					                                         f32 %358 = OpLoad %179 
					                                                      OpStore %355 %358 
					                                                      OpBranch %357 
					                                             %359 = OpLabel 
					                                Private f32* %360 = OpAccessChain %60 %201 
					                                         f32 %361 = OpLoad %360 
					                                                      OpStore %355 %361 
					                                                      OpBranch %357 
					                                             %357 = OpLabel 
					                                         f32 %362 = OpLoad %355 
					                                                      OpStore %179 %362 
					                                Uniform f32* %364 = OpAccessChain %24 %363 
					                                         f32 %365 = OpLoad %364 
					                                Uniform f32* %367 = OpAccessChain %24 %366 
					                                         f32 %368 = OpLoad %367 
					                                         f32 %369 = OpFMul %365 %368 
					                                                      OpStore %277 %369 
					                                         f32 %370 = OpLoad %277 
					                                         f32 %371 = OpLoad %179 
					                                         f32 %372 = OpFMul %370 %371 
					                                         f32 %373 = OpFAdd %372 %135 
					                                                      OpStore %277 %373 
					                                         f32 %374 = OpLoad %179 
					                                         f32 %375 = OpLoad %277 
					                                         f32 %376 = OpFDiv %374 %375 
					                                Private f32* %377 = OpAccessChain %60 %201 
					                                                      OpStore %377 %376 
					                                Uniform f32* %379 = OpAccessChain %24 %378 
					                                         f32 %380 = OpLoad %379 
					                                Uniform f32* %381 = OpAccessChain %24 %366 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpFMul %380 %382 
					                                                      OpStore %277 %383 
					                                Private f32* %384 = OpAccessChain %60 %201 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpLoad %277 
					                                         f32 %387 = OpFMul %385 %386 
					                                                      OpStore %277 %387 
					                                         f32 %389 = OpLoad %277 
					                                         f32 %390 = OpExtInst %1 37 %389 %135 
					                                Private f32* %391 = OpAccessChain %388 %201 
					                                                      OpStore %391 %390 
					                                Private f32* %392 = OpAccessChain %388 %201 
					                                         f32 %393 = OpLoad %392 
					                                         f32 %394 = OpExtInst %1 31 %393 
					                                Private f32* %395 = OpAccessChain %388 %201 
					                                                      OpStore %395 %394 
					                                       f32_4 %396 = OpLoad %153 
					                                       f32_2 %397 = OpLoad %388 
					                                       f32_4 %398 = OpVectorShuffle %397 %397 0 0 0 0 
					                                       f32_4 %399 = OpFMul %396 %398 
					                                                      OpStore %153 %399 
					                                       f32_4 %401 = OpLoad %138 
					                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
					                                       f32_4 %403 = OpLoad %138 
					                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
					                                       f32_3 %405 = OpFMul %402 %404 
					                                       f32_4 %406 = OpLoad %153 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFAdd %405 %407 
					                                       f32_4 %409 = OpLoad %400 
					                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
					                                                      OpStore %400 %410 
					                                Private f32* %411 = OpAccessChain %129 %124 
					                                         f32 %412 = OpLoad %411 
					                                Uniform f32* %413 = OpAccessChain %24 %123 %124 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %412 %414 
					                                Private f32* %416 = OpAccessChain %153 %124 
					                                         f32 %417 = OpLoad %416 
					                                         f32 %418 = OpFAdd %415 %417 
					                                Private f32* %419 = OpAccessChain %400 %124 
					                                                      OpStore %419 %418 
					                                       f32_4 %421 = OpLoad %400 
					                                                      OpStore %420 %421 
					                              Uniform f32_4* %423 = OpAccessChain %24 %422 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_4 %427 = OpExtInst %1 40 %424 %426 
					                                                      OpStore %86 %427 
					                                       f32_4 %428 = OpLoad %86 
					                                       f32_4 %431 = OpExtInst %1 37 %428 %430 
					                                                      OpStore %86 %431 
					                                       f32_2 %432 = OpLoad %9 
					                                       f32_4 %433 = OpLoad %86 
					                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
					                                       f32_2 %435 = OpFNegate %434 
					                                       f32_2 %436 = OpFAdd %432 %435 
					                                                      OpStore %388 %436 
					                                       f32_2 %437 = OpLoad %9 
					                                       f32_2 %440 = OpFMul %437 %439 
					                                       f32_4 %441 = OpLoad %86 
					                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
					                                       f32_2 %443 = OpFNegate %442 
					                                       f32_2 %444 = OpFAdd %440 %443 
					                                                      OpStore %9 %444 
					                                       f32_4 %445 = OpLoad %86 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFNegate %446 
					                                       f32_2 %448 = OpLoad %9 
					                                       f32_2 %449 = OpFAdd %447 %448 
					                                       f32_4 %450 = OpLoad %36 
					                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
					                                                      OpStore %36 %451 
					                                       f32_4 %452 = OpLoad %86 
					                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
					                                       f32_2 %454 = OpFNegate %453 
					                                       f32_4 %455 = OpLoad %86 
					                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
					                                       f32_2 %457 = OpFAdd %454 %456 
					                                                      OpStore %9 %457 
					                                       f32_2 %459 = OpLoad %388 
					                                       f32_2 %460 = OpLoad %9 
					                                       f32_2 %461 = OpFDiv %459 %460 
					                                       f32_4 %462 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %463 
					                                       f32_4 %465 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %465 
					                                       f32_2 %467 = OpLoad %466 
					                                       f32_4 %468 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %469 
					                                  Input f32* %471 = OpAccessChain %306 %114 
					                                         f32 %472 = OpLoad %471 
					                                        bool %473 = OpFOrdGreaterThanEqual %351 %472 
					                                                      OpStore %470 %473 
					                                        bool %474 = OpLoad %470 
					                                         f32 %475 = OpSelect %474 %135 %351 
					                                Private f32* %476 = OpAccessChain %9 %201 
					                                                      OpStore %476 %475 
					                                Uniform f32* %479 = OpAccessChain %24 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFNegate %480 
					                                Uniform f32* %483 = OpAccessChain %24 %482 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpFAdd %481 %484 
					                                Private f32* %486 = OpAccessChain %477 %201 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %201 
					                                         f32 %488 = OpLoad %487 
					                                Private f32* %489 = OpAccessChain %477 %201 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Uniform f32* %492 = OpAccessChain %24 %478 
					                                         f32 %493 = OpLoad %492 
					                                         f32 %494 = OpFAdd %491 %493 
					                                Private f32* %495 = OpAccessChain %9 %201 
					                                                      OpStore %495 %494 
					                                Private f32* %496 = OpAccessChain %9 %201 
					                                         f32 %497 = OpLoad %496 
					                                         f32 %498 = OpFMul %497 %290 
					                                Uniform f32* %500 = OpAccessChain %24 %499 
					                                         f32 %501 = OpLoad %500 
					                                         f32 %502 = OpFAdd %498 %501 
					                                Private f32* %503 = OpAccessChain %9 %201 
					                                                      OpStore %503 %502 
					                                Private f32* %504 = OpAccessChain %9 %201 
					                                         f32 %505 = OpLoad %504 
					                                Uniform f32* %506 = OpAccessChain %24 %366 
					                                         f32 %507 = OpLoad %506 
					                                         f32 %508 = OpFMul %505 %507 
					                                Private f32* %509 = OpAccessChain %9 %201 
					                                                      OpStore %509 %508 
					                                Private f32* %510 = OpAccessChain %9 %201 
					                                         f32 %511 = OpLoad %510 
					                                         f32 %512 = OpFNegate %511 
					                                         f32 %514 = OpFMul %512 %513 
					                                         f32 %515 = OpFAdd %514 %513 
					                                Private f32* %516 = OpAccessChain %9 %201 
					                                                      OpStore %516 %515 
					                                Private f32* %517 = OpAccessChain %9 %201 
					                                         f32 %518 = OpLoad %517 
					                                Private f32* %519 = OpAccessChain %60 %201 
					                                         f32 %520 = OpLoad %519 
					                                         f32 %521 = OpFMul %518 %520 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %60 %124 
					                                                      OpStore %524 %523 
					                                         f32 %525 = OpLoad %277 
					                                         f32 %526 = OpFNegate %525 
					                                         f32 %527 = OpFMul %526 %513 
					                                Private f32* %528 = OpAccessChain %60 %124 
					                                         f32 %529 = OpLoad %528 
					                                         f32 %530 = OpFAdd %527 %529 
					                                Private f32* %531 = OpAccessChain %60 %114 
					                                                      OpStore %531 %530 
					                                         f32 %532 = OpLoad %277 
					                                         f32 %533 = OpFMul %532 %513 
					                                Private f32* %534 = OpAccessChain %60 %124 
					                                         f32 %535 = OpLoad %534 
					                                         f32 %536 = OpFAdd %533 %535 
					                                Private f32* %537 = OpAccessChain %60 %214 
					                                                      OpStore %537 %536 
					                                       f32_4 %539 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %539 
					                                  Input f32* %541 = OpAccessChain %130 %124 
					                                         f32 %542 = OpLoad %541 
					                                 Output f32* %543 = OpAccessChain vs_TEXCOORD3 %214 
					                                                      OpStore %543 %542 
					                                 Output f32* %544 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %544 %351 
					                                Uniform f32* %546 = OpAccessChain %24 %545 
					                                         f32 %547 = OpLoad %546 
					                                Uniform f32* %549 = OpAccessChain %24 %548 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %24 %551 
					                                         f32 %553 = OpLoad %552 
					                                Uniform f32* %555 = OpAccessChain %24 %554 
					                                         f32 %556 = OpLoad %555 
					                                       f32_4 %557 = OpCompositeConstruct %547 %550 %553 %556 
					                                Uniform f32* %559 = OpAccessChain %24 %558 
					                                         f32 %560 = OpLoad %559 
					                                Uniform f32* %561 = OpAccessChain %24 %558 
					                                         f32 %562 = OpLoad %561 
					                                Uniform f32* %563 = OpAccessChain %24 %558 
					                                         f32 %564 = OpLoad %563 
					                                Uniform f32* %565 = OpAccessChain %24 %558 
					                                         f32 %566 = OpLoad %565 
					                                       f32_4 %567 = OpCompositeConstruct %560 %562 %564 %566 
					                                         f32 %568 = OpCompositeExtract %567 0 
					                                         f32 %569 = OpCompositeExtract %567 1 
					                                         f32 %570 = OpCompositeExtract %567 2 
					                                         f32 %571 = OpCompositeExtract %567 3 
					                                       f32_4 %572 = OpCompositeConstruct %568 %569 %570 %571 
					                                       f32_4 %573 = OpFMul %557 %572 
					                                                      OpStore %36 %573 
					                                       f32_4 %574 = OpLoad %36 
					                                       f32_2 %575 = OpVectorShuffle %574 %574 2 3 
					                                       f32_2 %576 = OpFNegate %575 
					                                Uniform f32* %577 = OpAccessChain %24 %311 
					                                         f32 %578 = OpLoad %577 
					                                       f32_2 %579 = OpCompositeConstruct %578 %578 
					                                       f32_2 %580 = OpFMul %576 %579 
					                                       f32_3 %581 = OpLoad %477 
					                                       f32_3 %582 = OpVectorShuffle %581 %580 3 1 4 
					                                                      OpStore %477 %582 
					                                       f32_3 %583 = OpLoad %477 
					                                       f32_2 %584 = OpVectorShuffle %583 %583 0 2 
					                                Uniform f32* %586 = OpAccessChain %24 %585 
					                                         f32 %587 = OpLoad %586 
					                                Uniform f32* %589 = OpAccessChain %24 %588 
					                                         f32 %590 = OpLoad %589 
					                                       f32_2 %591 = OpCompositeConstruct %587 %590 
					                                       f32_2 %592 = OpFDiv %584 %591 
					                                       f32_3 %593 = OpLoad %477 
					                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
					                                                      OpStore %477 %594 
					                                       f32_3 %595 = OpLoad %477 
					                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
					                                       f32_2 %597 = OpLoad %466 
					                                       f32_2 %598 = OpFAdd %596 %597 
					                                       f32_4 %599 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %600 = OpVectorShuffle %599 %598 4 5 2 3 
					                                                      OpStore vs_TEXCOORD3 %600 
					                                Private f32* %601 = OpAccessChain %36 %201 
					                                         f32 %602 = OpLoad %601 
					                                         f32 %603 = OpLoad %179 
					                                         f32 %604 = OpFMul %602 %603 
					                                         f32 %605 = OpFAdd %604 %135 
					                                Private f32* %606 = OpAccessChain %477 %201 
					                                                      OpStore %606 %605 
					                                         f32 %607 = OpLoad %179 
					                                Private f32* %608 = OpAccessChain %477 %201 
					                                         f32 %609 = OpLoad %608 
					                                         f32 %610 = OpFDiv %607 %609 
					                                Private f32* %611 = OpAccessChain %60 %201 
					                                                      OpStore %611 %610 
					                                Private f32* %612 = OpAccessChain %36 %114 
					                                         f32 %613 = OpLoad %612 
					                                Private f32* %614 = OpAccessChain %60 %201 
					                                         f32 %615 = OpLoad %614 
					                                         f32 %616 = OpFMul %613 %615 
					                                Private f32* %617 = OpAccessChain %477 %201 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %9 %201 
					                                         f32 %619 = OpLoad %618 
					                                Private f32* %620 = OpAccessChain %60 %201 
					                                         f32 %621 = OpLoad %620 
					                                         f32 %622 = OpFMul %619 %621 
					                                         f32 %623 = OpFAdd %622 %522 
					                                Private f32* %624 = OpAccessChain %9 %201 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %477 %201 
					                                         f32 %626 = OpLoad %625 
					                                         f32 %627 = OpFNegate %626 
					                                         f32 %628 = OpFMul %627 %513 
					                                Private f32* %629 = OpAccessChain %9 %201 
					                                         f32 %630 = OpLoad %629 
					                                         f32 %631 = OpFAdd %628 %630 
					                                Private f32* %632 = OpAccessChain %60 %114 
					                                                      OpStore %632 %631 
					                                       f32_4 %635 = OpLoad %60 
					                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
					                                                      OpStore vs_TEXCOORD4 %636 
					                                 Output f32* %637 = OpAccessChain %118 %45 %114 
					                                         f32 %638 = OpLoad %637 
					                                         f32 %639 = OpFNegate %638 
					                                 Output f32* %640 = OpAccessChain %118 %45 %114 
					                                                      OpStore %640 %639 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 165
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %33 %76 %78 %86 %95 %147 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD3 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate %31 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 Location 33 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %51 RelaxedPrecision 
					                                             OpMemberDecorate %52 0 RelaxedPrecision 
					                                             OpMemberDecorate %52 0 Offset 52 
					                                             OpDecorate %52 Block 
					                                             OpDecorate %54 DescriptorSet 54 
					                                             OpDecorate %54 Binding 54 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %65 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %73 RelaxedPrecision 
					                                             OpDecorate %74 RelaxedPrecision 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate %76 RelaxedPrecision 
					                                             OpDecorate %76 Location 76 
					                                             OpDecorate %77 RelaxedPrecision 
					                                             OpDecorate %78 RelaxedPrecision 
					                                             OpDecorate %78 Location 78 
					                                             OpDecorate %79 RelaxedPrecision 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 86 
					                                             OpDecorate %90 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 95 
					                                             OpDecorate %96 RelaxedPrecision 
					                                             OpDecorate %97 RelaxedPrecision 
					                                             OpDecorate %98 RelaxedPrecision 
					                                             OpDecorate %99 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %103 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %111 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %113 RelaxedPrecision 
					                                             OpDecorate %114 RelaxedPrecision 
					                                             OpDecorate %115 RelaxedPrecision 
					                                             OpDecorate %116 RelaxedPrecision 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %119 RelaxedPrecision 
					                                             OpDecorate %120 RelaxedPrecision 
					                                             OpDecorate %122 RelaxedPrecision 
					                                             OpDecorate %123 RelaxedPrecision 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %126 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %128 RelaxedPrecision 
					                                             OpDecorate %129 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate %133 RelaxedPrecision 
					                                             OpDecorate %142 RelaxedPrecision 
					                                             OpDecorate %147 RelaxedPrecision 
					                                             OpDecorate %147 Location 147 
					                                             OpDecorate %153 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                                     %29 = OpTypePointer Private %19 
					                      Private f32_4* %30 = OpVariable Private 
					                                     %32 = OpTypePointer Input %22 
					               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
					                                 u32 %34 = OpConstant 0 
					                                     %35 = OpTypePointer Input %6 
					                                 u32 %39 = OpConstant 1 
					                                 f32 %47 = OpConstant 3,674022E-40 
					                                 f32 %48 = OpConstant 3,674022E-40 
					                      Private f32_4* %51 = OpVariable Private 
					                                     %52 = OpTypeStruct %19 
					                                     %53 = OpTypePointer Uniform %52 
					            Uniform struct {f32_4;}* %54 = OpVariable Uniform 
					                                     %55 = OpTypeInt 32 1 
					                                 i32 %56 = OpConstant 0 
					                                     %57 = OpTypeVector %6 3 
					                                     %58 = OpTypePointer Uniform %19 
					                                     %68 = OpTypePointer Uniform %6 
					                        Input f32_4* %76 = OpVariable Input 
					                        Input f32_4* %78 = OpVariable Input 
					                        Private f32* %82 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %91 = OpTypePointer Private %22 
					                      Private f32_2* %92 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                     Private f32_4* %113 = OpVariable Private 
					                                u32 %134 = OpConstant 2 
					                                f32 %138 = OpConstant 3,674022E-40 
					                     Private f32_4* %141 = OpVariable Private 
					                                    %146 = OpTypePointer Output %19 
					                      Output f32_4* %147 = OpVariable Output 
					                                    %149 = OpTypeBool 
					                                    %150 = OpTypePointer Private %149 
					                      Private bool* %151 = OpVariable Private 
					                                i32 %156 = OpConstant 1 
					                                i32 %158 = OpConstant -1 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD3 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %31 = OpLoad %8 
					                          Input f32* %36 = OpAccessChain vs_TEXCOORD4 %34 
					                                 f32 %37 = OpLoad %36 
					                                 f32 %38 = OpFMul %31 %37 
					                          Input f32* %40 = OpAccessChain vs_TEXCOORD4 %39 
					                                 f32 %41 = OpLoad %40 
					                                 f32 %42 = OpFNegate %41 
					                                 f32 %43 = OpFAdd %38 %42 
					                        Private f32* %44 = OpAccessChain %30 %34 
					                                             OpStore %44 %43 
					                        Private f32* %45 = OpAccessChain %30 %34 
					                                 f32 %46 = OpLoad %45 
					                                 f32 %49 = OpExtInst %1 43 %46 %47 %48 
					                        Private f32* %50 = OpAccessChain %30 %34 
					                                             OpStore %50 %49 
					                      Uniform f32_4* %59 = OpAccessChain %54 %56 
					                               f32_4 %60 = OpLoad %59 
					                               f32_3 %61 = OpVectorShuffle %60 %60 3 3 3 
					                      Uniform f32_4* %62 = OpAccessChain %54 %56 
					                               f32_4 %63 = OpLoad %62 
					                               f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
					                               f32_3 %65 = OpFMul %61 %64 
					                               f32_4 %66 = OpLoad %51 
					                               f32_4 %67 = OpVectorShuffle %66 %65 4 5 6 3 
					                                             OpStore %51 %67 
					                        Uniform f32* %69 = OpAccessChain %54 %56 %27 
					                                 f32 %70 = OpLoad %69 
					                        Private f32* %71 = OpAccessChain %51 %27 
					                                             OpStore %71 %70 
					                               f32_4 %72 = OpLoad %30 
					                               f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                               f32_4 %74 = OpLoad %51 
					                               f32_4 %75 = OpFMul %73 %74 
					                                             OpStore %51 %75 
					                               f32_4 %77 = OpLoad %76 
					                               f32_4 %79 = OpLoad %78 
					                               f32_4 %80 = OpFNegate %79 
					                               f32_4 %81 = OpFAdd %77 %80 
					                                             OpStore %30 %81 
					                 read_only Texture2D %83 = OpLoad %11 
					                             sampler %84 = OpLoad %15 
					          read_only Texture2DSampled %85 = OpSampledImage %83 %84 
					                               f32_4 %87 = OpLoad vs_TEXCOORD0 
					                               f32_2 %88 = OpVectorShuffle %87 %87 0 1 
					                               f32_4 %89 = OpImageSampleImplicitLod %85 %88 
					                                 f32 %90 = OpCompositeExtract %89 3 
					                                             OpStore %82 %90 
					                                 f32 %93 = OpLoad %82 
					                               f32_2 %94 = OpCompositeConstruct %93 %93 
					                               f32_4 %96 = OpLoad vs_TEXCOORD1 
					                               f32_2 %97 = OpVectorShuffle %96 %96 0 0 
					                               f32_2 %98 = OpFMul %94 %97 
					                               f32_4 %99 = OpLoad vs_TEXCOORD1 
					                              f32_2 %100 = OpVectorShuffle %99 %99 2 1 
					                              f32_2 %101 = OpFNegate %100 
					                              f32_2 %102 = OpFAdd %98 %101 
					                                             OpStore %92 %102 
					                              f32_2 %103 = OpLoad %92 
					                              f32_2 %104 = OpCompositeConstruct %47 %47 
					                              f32_2 %105 = OpCompositeConstruct %48 %48 
					                              f32_2 %106 = OpExtInst %1 43 %103 %104 %105 
					                                             OpStore %92 %106 
					                              f32_2 %107 = OpLoad %92 
					                              f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
					                              f32_4 %109 = OpLoad %30 
					                              f32_4 %110 = OpFMul %108 %109 
					                              f32_4 %111 = OpLoad %78 
					                              f32_4 %112 = OpFAdd %110 %111 
					                                             OpStore %30 %112 
					                              f32_2 %114 = OpLoad %92 
					                              f32_4 %115 = OpVectorShuffle %114 %114 1 1 1 1 
					                              f32_4 %116 = OpLoad %30 
					                              f32_4 %117 = OpFMul %115 %116 
					                                             OpStore %113 %117 
					                       Private f32* %118 = OpAccessChain %30 %27 
					                                f32 %119 = OpLoad %118 
					                                f32 %120 = OpFNegate %119 
					                       Private f32* %121 = OpAccessChain %92 %39 
					                                f32 %122 = OpLoad %121 
					                                f32 %123 = OpFMul %120 %122 
					                                f32 %124 = OpFAdd %123 %48 
					                       Private f32* %125 = OpAccessChain %30 %34 
					                                             OpStore %125 %124 
					                              f32_4 %126 = OpLoad %51 
					                              f32_4 %127 = OpLoad %30 
					                              f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
					                              f32_4 %129 = OpFMul %126 %128 
					                              f32_4 %130 = OpLoad %113 
					                              f32_4 %131 = OpFAdd %129 %130 
					                                             OpStore %51 %131 
					                       Private f32* %132 = OpAccessChain %51 %27 
					                                f32 %133 = OpLoad %132 
					                         Input f32* %135 = OpAccessChain vs_TEXCOORD3 %134 
					                                f32 %136 = OpLoad %135 
					                                f32 %137 = OpFMul %133 %136 
					                                f32 %139 = OpFAdd %137 %138 
					                       Private f32* %140 = OpAccessChain %30 %34 
					                                             OpStore %140 %139 
					                              f32_4 %142 = OpLoad %51 
					                              f32_4 %143 = OpLoad vs_TEXCOORD3 
					                              f32_4 %144 = OpVectorShuffle %143 %143 2 2 2 2 
					                              f32_4 %145 = OpFMul %142 %144 
					                                             OpStore %141 %145 
					                              f32_4 %148 = OpLoad %141 
					                                             OpStore %147 %148 
					                       Private f32* %152 = OpAccessChain %30 %34 
					                                f32 %153 = OpLoad %152 
					                               bool %154 = OpFOrdLessThan %153 %47 
					                                             OpStore %151 %154 
					                               bool %155 = OpLoad %151 
					                                i32 %157 = OpSelect %155 %156 %56 
					                                i32 %159 = OpIMul %157 %158 
					                               bool %160 = OpINotEqual %159 %56 
					                                             OpSelectionMerge %162 None 
					                                             OpBranchConditional %160 %161 %162 
					                                    %161 = OpLabel 
					                                             OpKill
					                                    %162 = OpLabel 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_UI_CLIP_RECT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ClipRect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					void main()
					{
					    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat1 = vec4(u_xlat2) * vs_COLOR0;
					    SV_Target0 = u_xlat0.xxxx * u_xlat1;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_UI_CLIP_RECT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 517
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %123 %136 %155 %266 %390 %430 %437 %439 %509 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %136 Location 136 
					                                                      OpDecorate %137 RelaxedPrecision 
					                                                      OpDecorate %155 Location 155 
					                                                      OpDecorate %266 Location 266 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %363 RelaxedPrecision 
					                                                      OpDecorate %364 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %375 RelaxedPrecision 
					                                                      OpDecorate %377 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %390 Location 390 
					                                                      OpDecorate vs_TEXCOORD0 Location 430 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 437 
					                                                      OpDecorate %439 Location 439 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 509 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 14 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 15 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                              Private f32_4* %122 = OpVariable Private 
					                                Input f32_4* %123 = OpVariable Input 
					                                         i32 %125 = OpConstant 6 
					                               Output f32_4* %136 = OpVariable Output 
					                                             %138 = OpTypePointer Private %6 
					                                Private f32* %139 = OpVariable Private 
					                                             %154 = OpTypePointer Input %15 
					                                Input f32_3* %155 = OpVariable Input 
					                                         u32 %161 = OpConstant 0 
					                                         u32 %174 = OpConstant 2 
					                                         i32 %198 = OpConstant 4 
					                                         i32 %220 = OpConstant 20 
					                                         i32 %223 = OpConstant 21 
					                                Private f32* %237 = OpVariable Private 
					                                         i32 %243 = OpConstant 17 
					                                         i32 %246 = OpConstant 18 
					                                         f32 %250 = OpConstant 3,674022E-40 
					                                       f32_2 %251 = OpConstantComposite %250 %250 
					                                             %265 = OpTypePointer Input %7 
					                                Input f32_2* %266 = OpVariable Input 
					                                             %267 = OpTypePointer Input %6 
					                                         i32 %271 = OpConstant 19 
					                                         f32 %281 = OpConstant 3,674022E-40 
					                                Private f32* %284 = OpVariable Private 
					                                         i32 %285 = OpConstant 22 
					                                         f32 %289 = OpConstant 3,674022E-40 
					                                             %307 = OpTypeBool 
					                                             %308 = OpTypePointer Private %307 
					                               Private bool* %309 = OpVariable Private 
					                                         u32 %310 = OpConstant 3 
					                                         f32 %313 = OpConstant 3,674022E-40 
					                                             %316 = OpTypePointer Function %6 
					                                         i32 %325 = OpConstant 8 
					                                         i32 %328 = OpConstant 13 
					                                         i32 %340 = OpConstant 10 
					                              Private f32_4* %354 = OpVariable Private 
					                                         i32 %357 = OpConstant 9 
					                               Output f32_4* %390 = OpVariable Output 
					                                         i32 %392 = OpConstant 16 
					                                         f32 %395 = OpConstant 3,674022E-40 
					                                       f32_4 %396 = OpConstantComposite %395 %395 %395 %395 
					                                         f32 %399 = OpConstant 3,674022E-40 
					                                       f32_4 %400 = OpConstantComposite %399 %399 %399 %399 
					                                         f32 %410 = OpConstant 3,674022E-40 
					                                       f32_2 %411 = OpConstantComposite %410 %410 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %439 = OpVariable Input 
					                               Private bool* %443 = OpVariable Private 
					                                Private f32* %450 = OpVariable Private 
					                                         i32 %451 = OpConstant 11 
					                                         i32 %455 = OpConstant 12 
					                                         i32 %470 = OpConstant 7 
					                                         f32 %484 = OpConstant 3,674022E-40 
					                                         f32 %493 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                             %511 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %317 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                       f32_4 %124 = OpLoad %123 
					                              Uniform f32_4* %126 = OpAccessChain %24 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpFMul %124 %127 
					                                                      OpStore %122 %128 
					                                       f32_4 %129 = OpLoad %122 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 3 3 3 
					                                       f32_4 %131 = OpLoad %122 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFMul %130 %132 
					                                       f32_4 %134 = OpLoad %122 
					                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
					                                                      OpStore %122 %135 
					                                       f32_4 %137 = OpLoad %122 
					                                                      OpStore %136 %137 
					                                       f32_4 %140 = OpLoad %36 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_4 %142 = OpLoad %36 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %141 %143 
					                                                      OpStore %139 %144 
					                                         f32 %145 = OpLoad %139 
					                                         f32 %146 = OpExtInst %1 32 %145 
					                                                      OpStore %139 %146 
					                                         f32 %147 = OpLoad %139 
					                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
					                                       f32_4 %149 = OpLoad %36 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_3 %151 = OpFMul %148 %150 
					                                       f32_4 %152 = OpLoad %36 
					                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
					                                                      OpStore %36 %153 
					                                       f32_3 %156 = OpLoad %155 
					                              Uniform f32_4* %157 = OpAccessChain %24 %62 %45 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                         f32 %160 = OpDot %156 %159 
					                                Private f32* %162 = OpAccessChain %60 %161 
					                                                      OpStore %162 %160 
					                                       f32_3 %163 = OpLoad %155 
					                              Uniform f32_4* %164 = OpAccessChain %24 %62 %40 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                         f32 %167 = OpDot %163 %166 
					                                Private f32* %168 = OpAccessChain %60 %114 
					                                                      OpStore %168 %167 
					                                       f32_3 %169 = OpLoad %155 
					                              Uniform f32_4* %170 = OpAccessChain %24 %62 %39 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %175 = OpAccessChain %60 %174 
					                                                      OpStore %175 %173 
					                                       f32_4 %176 = OpLoad %60 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_4 %178 = OpLoad %60 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %177 %179 
					                                                      OpStore %139 %180 
					                                         f32 %181 = OpLoad %139 
					                                         f32 %182 = OpExtInst %1 32 %181 
					                                                      OpStore %139 %182 
					                                         f32 %183 = OpLoad %139 
					                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
					                                       f32_4 %185 = OpLoad %60 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_3 %187 = OpFMul %184 %186 
					                                       f32_4 %188 = OpLoad %60 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
					                                                      OpStore %60 %189 
					                                       f32_4 %190 = OpLoad %60 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                         f32 %194 = OpDot %191 %193 
					                                                      OpStore %139 %194 
					                              Uniform f32_4* %195 = OpAccessChain %24 %40 
					                                       f32_4 %196 = OpLoad %195 
					                                       f32_2 %197 = OpVectorShuffle %196 %196 1 1 
					                              Uniform f32_4* %199 = OpAccessChain %24 %198 %40 
					                                       f32_4 %200 = OpLoad %199 
					                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
					                                       f32_2 %202 = OpFMul %197 %201 
					                                       f32_4 %203 = OpLoad %36 
					                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
					                                                      OpStore %36 %204 
					                              Uniform f32_4* %205 = OpAccessChain %24 %198 %45 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                              Uniform f32_4* %208 = OpAccessChain %24 %40 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_2 %210 = OpVectorShuffle %209 %209 0 0 
					                                       f32_2 %211 = OpFMul %207 %210 
					                                       f32_4 %212 = OpLoad %36 
					                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
					                                       f32_2 %214 = OpFAdd %211 %213 
					                                       f32_4 %215 = OpLoad %36 
					                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
					                                                      OpStore %36 %216 
					                                       f32_4 %217 = OpLoad %36 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
					                                       f32_2 %219 = OpExtInst %1 4 %218 
					                                Uniform f32* %221 = OpAccessChain %24 %220 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %224 = OpAccessChain %24 %223 
					                                         f32 %225 = OpLoad %224 
					                                       f32_2 %226 = OpCompositeConstruct %222 %225 
					                                       f32_2 %227 = OpFMul %219 %226 
					                                       f32_4 %228 = OpLoad %36 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
					                                                      OpStore %36 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_2 %231 = OpVectorShuffle %230 %230 3 3 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
					                                       f32_2 %234 = OpFDiv %231 %233 
					                                       f32_4 %235 = OpLoad %36 
					                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
					                                                      OpStore %36 %236 
					                                       f32_4 %238 = OpLoad %36 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_4 %240 = OpLoad %36 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                         f32 %242 = OpDot %239 %241 
					                                                      OpStore %237 %242 
					                                Uniform f32* %244 = OpAccessChain %24 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %247 = OpAccessChain %24 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_2 %249 = OpCompositeConstruct %245 %248 
					                                       f32_2 %252 = OpFMul %249 %251 
					                                       f32_4 %253 = OpLoad %36 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
					                                       f32_2 %255 = OpFAdd %252 %254 
					                                       f32_4 %256 = OpLoad %36 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
					                                                      OpStore %36 %257 
					                                       f32_4 %258 = OpLoad %36 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
					                                       f32_2 %260 = OpFDiv %251 %259 
					                                       f32_4 %261 = OpLoad %36 
					                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
					                                                      OpStore %36 %262 
					                                         f32 %263 = OpLoad %237 
					                                         f32 %264 = OpExtInst %1 32 %263 
					                                                      OpStore %237 %264 
					                                  Input f32* %268 = OpAccessChain %266 %114 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpExtInst %1 4 %269 
					                                Uniform f32* %272 = OpAccessChain %24 %271 
					                                         f32 %273 = OpLoad %272 
					                                         f32 %274 = OpFMul %270 %273 
					                                Private f32* %275 = OpAccessChain %60 %161 
					                                                      OpStore %275 %274 
					                                         f32 %276 = OpLoad %237 
					                                Private f32* %277 = OpAccessChain %60 %161 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpFMul %276 %278 
					                                                      OpStore %237 %279 
					                                         f32 %280 = OpLoad %237 
					                                         f32 %282 = OpFMul %280 %281 
					                                Private f32* %283 = OpAccessChain %60 %161 
					                                                      OpStore %283 %282 
					                                Uniform f32* %286 = OpAccessChain %24 %285 
					                                         f32 %287 = OpLoad %286 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %290 = OpFAdd %288 %289 
					                                                      OpStore %284 %290 
					                                         f32 %291 = OpLoad %284 
					                                Private f32* %292 = OpAccessChain %60 %161 
					                                         f32 %293 = OpLoad %292 
					                                         f32 %294 = OpExtInst %1 4 %293 
					                                         f32 %295 = OpFMul %291 %294 
					                                                      OpStore %284 %295 
					                                         f32 %296 = OpLoad %237 
					                                         f32 %297 = OpFMul %296 %281 
					                                         f32 %298 = OpLoad %284 
					                                         f32 %299 = OpFNegate %298 
					                                         f32 %300 = OpFAdd %297 %299 
					                                                      OpStore %237 %300 
					                                         f32 %301 = OpLoad %139 
					                                         f32 %302 = OpExtInst %1 4 %301 
					                                         f32 %303 = OpLoad %237 
					                                         f32 %304 = OpFMul %302 %303 
					                                         f32 %305 = OpLoad %284 
					                                         f32 %306 = OpFAdd %304 %305 
					                                                      OpStore %139 %306 
					                                Uniform f32* %311 = OpAccessChain %24 %198 %62 %310 
					                                         f32 %312 = OpLoad %311 
					                                        bool %314 = OpFOrdEqual %312 %313 
					                                                      OpStore %309 %314 
					                                        bool %315 = OpLoad %309 
					                                                      OpSelectionMerge %319 None 
					                                                      OpBranchConditional %315 %318 %321 
					                                             %318 = OpLabel 
					                                         f32 %320 = OpLoad %139 
					                                                      OpStore %317 %320 
					                                                      OpBranch %319 
					                                             %321 = OpLabel 
					                                Private f32* %322 = OpAccessChain %60 %161 
					                                         f32 %323 = OpLoad %322 
					                                                      OpStore %317 %323 
					                                                      OpBranch %319 
					                                             %319 = OpLabel 
					                                         f32 %324 = OpLoad %317 
					                                                      OpStore %139 %324 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                Uniform f32* %329 = OpAccessChain %24 %328 
					                                         f32 %330 = OpLoad %329 
					                                         f32 %331 = OpFMul %327 %330 
					                                                      OpStore %237 %331 
					                                         f32 %332 = OpLoad %237 
					                                         f32 %333 = OpLoad %139 
					                                         f32 %334 = OpFMul %332 %333 
					                                         f32 %335 = OpFAdd %334 %289 
					                                                      OpStore %237 %335 
					                                         f32 %336 = OpLoad %139 
					                                         f32 %337 = OpLoad %237 
					                                         f32 %338 = OpFDiv %336 %337 
					                                Private f32* %339 = OpAccessChain %60 %161 
					                                                      OpStore %339 %338 
					                                Uniform f32* %341 = OpAccessChain %24 %340 
					                                         f32 %342 = OpLoad %341 
					                                Uniform f32* %343 = OpAccessChain %24 %328 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                                      OpStore %139 %345 
					                                Private f32* %346 = OpAccessChain %60 %161 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpLoad %139 
					                                         f32 %349 = OpFMul %347 %348 
					                                                      OpStore %139 %349 
					                                         f32 %350 = OpLoad %139 
					                                         f32 %351 = OpExtInst %1 37 %350 %289 
					                                                      OpStore %237 %351 
					                                         f32 %352 = OpLoad %237 
					                                         f32 %353 = OpExtInst %1 31 %352 
					                                                      OpStore %237 %353 
					                                  Input f32* %355 = OpAccessChain %123 %310 
					                                         f32 %356 = OpLoad %355 
					                                Uniform f32* %358 = OpAccessChain %24 %357 %310 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFMul %356 %359 
					                                Private f32* %361 = OpAccessChain %354 %161 
					                                                      OpStore %361 %360 
					                              Uniform f32_4* %362 = OpAccessChain %24 %357 
					                                       f32_4 %363 = OpLoad %362 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %354 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
					                                       f32_3 %367 = OpFMul %364 %366 
					                                       f32_4 %368 = OpLoad %122 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                                       f32_3 %370 = OpFNegate %369 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %354 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %354 %373 
					                                Uniform f32* %374 = OpAccessChain %24 %357 %310 
					                                         f32 %375 = OpLoad %374 
					                                  Input f32* %376 = OpAccessChain %123 %310 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                Private f32* %379 = OpAccessChain %122 %310 
					                                         f32 %380 = OpLoad %379 
					                                         f32 %381 = OpFNegate %380 
					                                         f32 %382 = OpFAdd %378 %381 
					                                Private f32* %383 = OpAccessChain %354 %310 
					                                                      OpStore %383 %382 
					                                         f32 %384 = OpLoad %237 
					                                       f32_4 %385 = OpCompositeConstruct %384 %384 %384 %384 
					                                       f32_4 %386 = OpLoad %354 
					                                       f32_4 %387 = OpFMul %385 %386 
					                                       f32_4 %388 = OpLoad %122 
					                                       f32_4 %389 = OpFAdd %387 %388 
					                                                      OpStore %86 %389 
					                                       f32_4 %391 = OpLoad %86 
					                                                      OpStore %390 %391 
					                              Uniform f32_4* %393 = OpAccessChain %24 %392 
					                                       f32_4 %394 = OpLoad %393 
					                                       f32_4 %397 = OpExtInst %1 40 %394 %396 
					                                                      OpStore %86 %397 
					                                       f32_4 %398 = OpLoad %86 
					                                       f32_4 %401 = OpExtInst %1 37 %398 %400 
					                                                      OpStore %86 %401 
					                                       f32_2 %402 = OpLoad %9 
					                                       f32_4 %403 = OpLoad %86 
					                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
					                                       f32_2 %405 = OpFNegate %404 
					                                       f32_2 %406 = OpFAdd %402 %405 
					                                       f32_4 %407 = OpLoad %354 
					                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
					                                                      OpStore %354 %408 
					                                       f32_2 %409 = OpLoad %9 
					                                       f32_2 %412 = OpFMul %409 %411 
					                                       f32_4 %413 = OpLoad %86 
					                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
					                                       f32_2 %415 = OpFNegate %414 
					                                       f32_2 %416 = OpFAdd %412 %415 
					                                                      OpStore %9 %416 
					                                       f32_4 %417 = OpLoad %86 
					                                       f32_2 %418 = OpVectorShuffle %417 %417 2 3 
					                                       f32_2 %419 = OpFNegate %418 
					                                       f32_2 %420 = OpLoad %9 
					                                       f32_2 %421 = OpFAdd %419 %420 
					                                       f32_4 %422 = OpLoad %36 
					                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 2 3 
					                                                      OpStore %36 %423 
					                                       f32_4 %424 = OpLoad %86 
					                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
					                                       f32_2 %426 = OpFNegate %425 
					                                       f32_4 %427 = OpLoad %86 
					                                       f32_2 %428 = OpVectorShuffle %427 %427 2 3 
					                                       f32_2 %429 = OpFAdd %426 %428 
					                                                      OpStore %9 %429 
					                                       f32_4 %431 = OpLoad %354 
					                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
					                                       f32_2 %433 = OpLoad %9 
					                                       f32_2 %434 = OpFDiv %432 %433 
					                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %436 
					                                       f32_4 %438 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %438 
					                                       f32_2 %440 = OpLoad %439 
					                                       f32_4 %441 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %442 
					                                  Input f32* %444 = OpAccessChain %266 %114 
					                                         f32 %445 = OpLoad %444 
					                                        bool %446 = OpFOrdGreaterThanEqual %313 %445 
					                                                      OpStore %443 %446 
					                                        bool %447 = OpLoad %443 
					                                         f32 %448 = OpSelect %447 %289 %313 
					                                Private f32* %449 = OpAccessChain %9 %161 
					                                                      OpStore %449 %448 
					                                Uniform f32* %452 = OpAccessChain %24 %451 
					                                         f32 %453 = OpLoad %452 
					                                         f32 %454 = OpFNegate %453 
					                                Uniform f32* %456 = OpAccessChain %24 %455 
					                                         f32 %457 = OpLoad %456 
					                                         f32 %458 = OpFAdd %454 %457 
					                                                      OpStore %450 %458 
					                                Private f32* %459 = OpAccessChain %9 %161 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpLoad %450 
					                                         f32 %462 = OpFMul %460 %461 
					                                Uniform f32* %463 = OpAccessChain %24 %451 
					                                         f32 %464 = OpLoad %463 
					                                         f32 %465 = OpFAdd %462 %464 
					                                Private f32* %466 = OpAccessChain %9 %161 
					                                                      OpStore %466 %465 
					                                Private f32* %467 = OpAccessChain %9 %161 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFMul %468 %250 
					                                Uniform f32* %471 = OpAccessChain %24 %470 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %469 %472 
					                                Private f32* %474 = OpAccessChain %9 %161 
					                                                      OpStore %474 %473 
					                                Private f32* %475 = OpAccessChain %9 %161 
					                                         f32 %476 = OpLoad %475 
					                                Uniform f32* %477 = OpAccessChain %24 %328 
					                                         f32 %478 = OpLoad %477 
					                                         f32 %479 = OpFMul %476 %478 
					                                Private f32* %480 = OpAccessChain %9 %161 
					                                                      OpStore %480 %479 
					                                Private f32* %481 = OpAccessChain %9 %161 
					                                         f32 %482 = OpLoad %481 
					                                         f32 %483 = OpFNegate %482 
					                                         f32 %485 = OpFMul %483 %484 
					                                         f32 %486 = OpFAdd %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %161 
					                                                      OpStore %487 %486 
					                                Private f32* %488 = OpAccessChain %9 %161 
					                                         f32 %489 = OpLoad %488 
					                                Private f32* %490 = OpAccessChain %60 %161 
					                                         f32 %491 = OpLoad %490 
					                                         f32 %492 = OpFMul %489 %491 
					                                         f32 %494 = OpFAdd %492 %493 
					                                Private f32* %495 = OpAccessChain %60 %310 
					                                                      OpStore %495 %494 
					                                         f32 %496 = OpLoad %139 
					                                         f32 %497 = OpFNegate %496 
					                                         f32 %498 = OpFMul %497 %484 
					                                Private f32* %499 = OpAccessChain %60 %310 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFAdd %498 %500 
					                                Private f32* %502 = OpAccessChain %60 %114 
					                                                      OpStore %502 %501 
					                                         f32 %503 = OpLoad %139 
					                                         f32 %504 = OpFMul %503 %484 
					                                Private f32* %505 = OpAccessChain %60 %310 
					                                         f32 %506 = OpLoad %505 
					                                         f32 %507 = OpFAdd %504 %506 
					                                Private f32* %508 = OpAccessChain %60 %174 
					                                                      OpStore %508 %507 
					                                       f32_4 %510 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %510 
					                                 Output f32* %512 = OpAccessChain %118 %45 %114 
					                                         f32 %513 = OpLoad %512 
					                                         f32 %514 = OpFNegate %513 
					                                 Output f32* %515 = OpAccessChain %118 %45 %114 
					                                                      OpStore %515 %514 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 97
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %27 %64 %72 %87 %91 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpMemberDecorate %11 0 Offset 11 
					                                             OpDecorate %11 Block 
					                                             OpDecorate %13 DescriptorSet 13 
					                                             OpDecorate %13 Binding 13 
					                                             OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 27 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate %31 RelaxedPrecision 
					                                             OpDecorate %34 RelaxedPrecision 
					                                             OpDecorate %35 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %53 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %56 DescriptorSet 56 
					                                             OpDecorate %56 Binding 56 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %60 DescriptorSet 60 
					                                             OpDecorate %60 Binding 60 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 64 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %71 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 72 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate %76 RelaxedPrecision 
					                                             OpDecorate %78 RelaxedPrecision 
					                                             OpDecorate %79 RelaxedPrecision 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %87 RelaxedPrecision 
					                                             OpDecorate %87 Location 87 
					                                             OpDecorate %88 RelaxedPrecision 
					                                             OpDecorate %89 RelaxedPrecision 
					                                             OpDecorate %91 RelaxedPrecision 
					                                             OpDecorate %91 Location 91 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 2 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_2* %9 = OpVariable Private 
					                                     %10 = OpTypeVector %6 4 
					                                     %11 = OpTypeStruct %10 
					                                     %12 = OpTypePointer Uniform %11 
					            Uniform struct {f32_4;}* %13 = OpVariable Uniform 
					                                     %14 = OpTypeInt 32 1 
					                                 i32 %15 = OpConstant 0 
					                                     %16 = OpTypePointer Uniform %10 
					                                     %26 = OpTypePointer Input %10 
					               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                 f32 %38 = OpConstant 3,674022E-40 
					                                 f32 %39 = OpConstant 3,674022E-40 
					                                     %43 = OpTypePointer Private %6 
					                        Private f32* %44 = OpVariable Private 
					                                     %45 = OpTypeInt 32 0 
					                                 u32 %46 = OpConstant 1 
					                                 u32 %49 = OpConstant 0 
					                        Private f32* %53 = OpVariable Private 
					                                     %54 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %55 = OpTypePointer UniformConstant %54 
					UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
					                                     %58 = OpTypeSampler 
					                                     %59 = OpTypePointer UniformConstant %58 
					            UniformConstant sampler* %60 = OpVariable UniformConstant 
					                                     %62 = OpTypeSampledImage %54 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                 u32 %68 = OpConstant 3 
					                        Private f32* %70 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                     %73 = OpTypePointer Input %6 
					                                     %83 = OpTypePointer Private %10 
					                      Private f32_4* %84 = OpVariable Private 
					                        Input f32_4* %87 = OpVariable Input 
					                                     %90 = OpTypePointer Output %10 
					                       Output f32_4* %91 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                      Uniform f32_4* %17 = OpAccessChain %13 %15 
					                               f32_4 %18 = OpLoad %17 
					                               f32_2 %19 = OpVectorShuffle %18 %18 0 1 
					                               f32_2 %20 = OpFNegate %19 
					                      Uniform f32_4* %21 = OpAccessChain %13 %15 
					                               f32_4 %22 = OpLoad %21 
					                               f32_2 %23 = OpVectorShuffle %22 %22 2 3 
					                               f32_2 %24 = OpFAdd %20 %23 
					                                             OpStore %9 %24 
					                               f32_2 %25 = OpLoad %9 
					                               f32_4 %28 = OpLoad vs_TEXCOORD2 
					                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
					                               f32_2 %30 = OpExtInst %1 4 %29 
					                               f32_2 %31 = OpFNegate %30 
					                               f32_2 %32 = OpFAdd %25 %31 
					                                             OpStore %9 %32 
					                               f32_2 %33 = OpLoad %9 
					                               f32_4 %34 = OpLoad vs_TEXCOORD2 
					                               f32_2 %35 = OpVectorShuffle %34 %34 2 3 
					                               f32_2 %36 = OpFMul %33 %35 
					                                             OpStore %9 %36 
					                               f32_2 %37 = OpLoad %9 
					                               f32_2 %40 = OpCompositeConstruct %38 %38 
					                               f32_2 %41 = OpCompositeConstruct %39 %39 
					                               f32_2 %42 = OpExtInst %1 43 %37 %40 %41 
					                                             OpStore %9 %42 
					                        Private f32* %47 = OpAccessChain %9 %46 
					                                 f32 %48 = OpLoad %47 
					                        Private f32* %50 = OpAccessChain %9 %49 
					                                 f32 %51 = OpLoad %50 
					                                 f32 %52 = OpFMul %48 %51 
					                                             OpStore %44 %52 
					                 read_only Texture2D %57 = OpLoad %56 
					                             sampler %61 = OpLoad %60 
					          read_only Texture2DSampled %63 = OpSampledImage %57 %61 
					                               f32_4 %65 = OpLoad vs_TEXCOORD0 
					                               f32_2 %66 = OpVectorShuffle %65 %65 0 1 
					                               f32_4 %67 = OpImageSampleImplicitLod %63 %66 
					                                 f32 %69 = OpCompositeExtract %67 3 
					                                             OpStore %53 %69 
					                                 f32 %71 = OpLoad %53 
					                          Input f32* %74 = OpAccessChain vs_TEXCOORD1 %49 
					                                 f32 %75 = OpLoad %74 
					                                 f32 %76 = OpFMul %71 %75 
					                          Input f32* %77 = OpAccessChain vs_TEXCOORD1 %68 
					                                 f32 %78 = OpLoad %77 
					                                 f32 %79 = OpFNegate %78 
					                                 f32 %80 = OpFAdd %76 %79 
					                                             OpStore %70 %80 
					                                 f32 %81 = OpLoad %70 
					                                 f32 %82 = OpExtInst %1 43 %81 %38 %39 
					                                             OpStore %70 %82 
					                                 f32 %85 = OpLoad %70 
					                               f32_4 %86 = OpCompositeConstruct %85 %85 %85 %85 
					                               f32_4 %88 = OpLoad %87 
					                               f32_4 %89 = OpFMul %86 %88 
					                                             OpStore %84 %89 
					                                 f32 %92 = OpLoad %44 
					                               f32_4 %93 = OpCompositeConstruct %92 %92 %92 %92 
					                               f32_4 %94 = OpLoad %84 
					                               f32_4 %95 = OpFMul %93 %94 
					                                             OpStore %91 %95 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ClipRect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					void main()
					{
					    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = u_xlat10_1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
					    u_xlat0 = u_xlat1.yyyy * u_xlat0;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 517
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %123 %136 %155 %266 %390 %430 %437 %439 %509 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %136 Location 136 
					                                                      OpDecorate %137 RelaxedPrecision 
					                                                      OpDecorate %155 Location 155 
					                                                      OpDecorate %266 Location 266 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %363 RelaxedPrecision 
					                                                      OpDecorate %364 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %375 RelaxedPrecision 
					                                                      OpDecorate %377 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %390 Location 390 
					                                                      OpDecorate vs_TEXCOORD0 Location 430 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 437 
					                                                      OpDecorate %439 Location 439 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 509 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 14 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 15 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                              Private f32_4* %122 = OpVariable Private 
					                                Input f32_4* %123 = OpVariable Input 
					                                         i32 %125 = OpConstant 6 
					                               Output f32_4* %136 = OpVariable Output 
					                                             %138 = OpTypePointer Private %6 
					                                Private f32* %139 = OpVariable Private 
					                                             %154 = OpTypePointer Input %15 
					                                Input f32_3* %155 = OpVariable Input 
					                                         u32 %161 = OpConstant 0 
					                                         u32 %174 = OpConstant 2 
					                                         i32 %198 = OpConstant 4 
					                                         i32 %220 = OpConstant 20 
					                                         i32 %223 = OpConstant 21 
					                                Private f32* %237 = OpVariable Private 
					                                         i32 %243 = OpConstant 17 
					                                         i32 %246 = OpConstant 18 
					                                         f32 %250 = OpConstant 3,674022E-40 
					                                       f32_2 %251 = OpConstantComposite %250 %250 
					                                             %265 = OpTypePointer Input %7 
					                                Input f32_2* %266 = OpVariable Input 
					                                             %267 = OpTypePointer Input %6 
					                                         i32 %271 = OpConstant 19 
					                                         f32 %281 = OpConstant 3,674022E-40 
					                                Private f32* %284 = OpVariable Private 
					                                         i32 %285 = OpConstant 22 
					                                         f32 %289 = OpConstant 3,674022E-40 
					                                             %307 = OpTypeBool 
					                                             %308 = OpTypePointer Private %307 
					                               Private bool* %309 = OpVariable Private 
					                                         u32 %310 = OpConstant 3 
					                                         f32 %313 = OpConstant 3,674022E-40 
					                                             %316 = OpTypePointer Function %6 
					                                         i32 %325 = OpConstant 8 
					                                         i32 %328 = OpConstant 13 
					                                         i32 %340 = OpConstant 10 
					                              Private f32_4* %354 = OpVariable Private 
					                                         i32 %357 = OpConstant 9 
					                               Output f32_4* %390 = OpVariable Output 
					                                         i32 %392 = OpConstant 16 
					                                         f32 %395 = OpConstant 3,674022E-40 
					                                       f32_4 %396 = OpConstantComposite %395 %395 %395 %395 
					                                         f32 %399 = OpConstant 3,674022E-40 
					                                       f32_4 %400 = OpConstantComposite %399 %399 %399 %399 
					                                         f32 %410 = OpConstant 3,674022E-40 
					                                       f32_2 %411 = OpConstantComposite %410 %410 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %439 = OpVariable Input 
					                               Private bool* %443 = OpVariable Private 
					                                Private f32* %450 = OpVariable Private 
					                                         i32 %451 = OpConstant 11 
					                                         i32 %455 = OpConstant 12 
					                                         i32 %470 = OpConstant 7 
					                                         f32 %484 = OpConstant 3,674022E-40 
					                                         f32 %493 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                             %511 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %317 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                       f32_4 %124 = OpLoad %123 
					                              Uniform f32_4* %126 = OpAccessChain %24 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpFMul %124 %127 
					                                                      OpStore %122 %128 
					                                       f32_4 %129 = OpLoad %122 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 3 3 3 
					                                       f32_4 %131 = OpLoad %122 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFMul %130 %132 
					                                       f32_4 %134 = OpLoad %122 
					                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
					                                                      OpStore %122 %135 
					                                       f32_4 %137 = OpLoad %122 
					                                                      OpStore %136 %137 
					                                       f32_4 %140 = OpLoad %36 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_4 %142 = OpLoad %36 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %141 %143 
					                                                      OpStore %139 %144 
					                                         f32 %145 = OpLoad %139 
					                                         f32 %146 = OpExtInst %1 32 %145 
					                                                      OpStore %139 %146 
					                                         f32 %147 = OpLoad %139 
					                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
					                                       f32_4 %149 = OpLoad %36 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_3 %151 = OpFMul %148 %150 
					                                       f32_4 %152 = OpLoad %36 
					                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
					                                                      OpStore %36 %153 
					                                       f32_3 %156 = OpLoad %155 
					                              Uniform f32_4* %157 = OpAccessChain %24 %62 %45 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                         f32 %160 = OpDot %156 %159 
					                                Private f32* %162 = OpAccessChain %60 %161 
					                                                      OpStore %162 %160 
					                                       f32_3 %163 = OpLoad %155 
					                              Uniform f32_4* %164 = OpAccessChain %24 %62 %40 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                         f32 %167 = OpDot %163 %166 
					                                Private f32* %168 = OpAccessChain %60 %114 
					                                                      OpStore %168 %167 
					                                       f32_3 %169 = OpLoad %155 
					                              Uniform f32_4* %170 = OpAccessChain %24 %62 %39 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %175 = OpAccessChain %60 %174 
					                                                      OpStore %175 %173 
					                                       f32_4 %176 = OpLoad %60 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_4 %178 = OpLoad %60 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %177 %179 
					                                                      OpStore %139 %180 
					                                         f32 %181 = OpLoad %139 
					                                         f32 %182 = OpExtInst %1 32 %181 
					                                                      OpStore %139 %182 
					                                         f32 %183 = OpLoad %139 
					                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
					                                       f32_4 %185 = OpLoad %60 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_3 %187 = OpFMul %184 %186 
					                                       f32_4 %188 = OpLoad %60 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
					                                                      OpStore %60 %189 
					                                       f32_4 %190 = OpLoad %60 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                         f32 %194 = OpDot %191 %193 
					                                                      OpStore %139 %194 
					                              Uniform f32_4* %195 = OpAccessChain %24 %40 
					                                       f32_4 %196 = OpLoad %195 
					                                       f32_2 %197 = OpVectorShuffle %196 %196 1 1 
					                              Uniform f32_4* %199 = OpAccessChain %24 %198 %40 
					                                       f32_4 %200 = OpLoad %199 
					                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
					                                       f32_2 %202 = OpFMul %197 %201 
					                                       f32_4 %203 = OpLoad %36 
					                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
					                                                      OpStore %36 %204 
					                              Uniform f32_4* %205 = OpAccessChain %24 %198 %45 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                              Uniform f32_4* %208 = OpAccessChain %24 %40 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_2 %210 = OpVectorShuffle %209 %209 0 0 
					                                       f32_2 %211 = OpFMul %207 %210 
					                                       f32_4 %212 = OpLoad %36 
					                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
					                                       f32_2 %214 = OpFAdd %211 %213 
					                                       f32_4 %215 = OpLoad %36 
					                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
					                                                      OpStore %36 %216 
					                                       f32_4 %217 = OpLoad %36 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
					                                       f32_2 %219 = OpExtInst %1 4 %218 
					                                Uniform f32* %221 = OpAccessChain %24 %220 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %224 = OpAccessChain %24 %223 
					                                         f32 %225 = OpLoad %224 
					                                       f32_2 %226 = OpCompositeConstruct %222 %225 
					                                       f32_2 %227 = OpFMul %219 %226 
					                                       f32_4 %228 = OpLoad %36 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
					                                                      OpStore %36 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_2 %231 = OpVectorShuffle %230 %230 3 3 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
					                                       f32_2 %234 = OpFDiv %231 %233 
					                                       f32_4 %235 = OpLoad %36 
					                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
					                                                      OpStore %36 %236 
					                                       f32_4 %238 = OpLoad %36 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_4 %240 = OpLoad %36 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                         f32 %242 = OpDot %239 %241 
					                                                      OpStore %237 %242 
					                                Uniform f32* %244 = OpAccessChain %24 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %247 = OpAccessChain %24 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_2 %249 = OpCompositeConstruct %245 %248 
					                                       f32_2 %252 = OpFMul %249 %251 
					                                       f32_4 %253 = OpLoad %36 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
					                                       f32_2 %255 = OpFAdd %252 %254 
					                                       f32_4 %256 = OpLoad %36 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
					                                                      OpStore %36 %257 
					                                       f32_4 %258 = OpLoad %36 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
					                                       f32_2 %260 = OpFDiv %251 %259 
					                                       f32_4 %261 = OpLoad %36 
					                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
					                                                      OpStore %36 %262 
					                                         f32 %263 = OpLoad %237 
					                                         f32 %264 = OpExtInst %1 32 %263 
					                                                      OpStore %237 %264 
					                                  Input f32* %268 = OpAccessChain %266 %114 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpExtInst %1 4 %269 
					                                Uniform f32* %272 = OpAccessChain %24 %271 
					                                         f32 %273 = OpLoad %272 
					                                         f32 %274 = OpFMul %270 %273 
					                                Private f32* %275 = OpAccessChain %60 %161 
					                                                      OpStore %275 %274 
					                                         f32 %276 = OpLoad %237 
					                                Private f32* %277 = OpAccessChain %60 %161 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpFMul %276 %278 
					                                                      OpStore %237 %279 
					                                         f32 %280 = OpLoad %237 
					                                         f32 %282 = OpFMul %280 %281 
					                                Private f32* %283 = OpAccessChain %60 %161 
					                                                      OpStore %283 %282 
					                                Uniform f32* %286 = OpAccessChain %24 %285 
					                                         f32 %287 = OpLoad %286 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %290 = OpFAdd %288 %289 
					                                                      OpStore %284 %290 
					                                         f32 %291 = OpLoad %284 
					                                Private f32* %292 = OpAccessChain %60 %161 
					                                         f32 %293 = OpLoad %292 
					                                         f32 %294 = OpExtInst %1 4 %293 
					                                         f32 %295 = OpFMul %291 %294 
					                                                      OpStore %284 %295 
					                                         f32 %296 = OpLoad %237 
					                                         f32 %297 = OpFMul %296 %281 
					                                         f32 %298 = OpLoad %284 
					                                         f32 %299 = OpFNegate %298 
					                                         f32 %300 = OpFAdd %297 %299 
					                                                      OpStore %237 %300 
					                                         f32 %301 = OpLoad %139 
					                                         f32 %302 = OpExtInst %1 4 %301 
					                                         f32 %303 = OpLoad %237 
					                                         f32 %304 = OpFMul %302 %303 
					                                         f32 %305 = OpLoad %284 
					                                         f32 %306 = OpFAdd %304 %305 
					                                                      OpStore %139 %306 
					                                Uniform f32* %311 = OpAccessChain %24 %198 %62 %310 
					                                         f32 %312 = OpLoad %311 
					                                        bool %314 = OpFOrdEqual %312 %313 
					                                                      OpStore %309 %314 
					                                        bool %315 = OpLoad %309 
					                                                      OpSelectionMerge %319 None 
					                                                      OpBranchConditional %315 %318 %321 
					                                             %318 = OpLabel 
					                                         f32 %320 = OpLoad %139 
					                                                      OpStore %317 %320 
					                                                      OpBranch %319 
					                                             %321 = OpLabel 
					                                Private f32* %322 = OpAccessChain %60 %161 
					                                         f32 %323 = OpLoad %322 
					                                                      OpStore %317 %323 
					                                                      OpBranch %319 
					                                             %319 = OpLabel 
					                                         f32 %324 = OpLoad %317 
					                                                      OpStore %139 %324 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                Uniform f32* %329 = OpAccessChain %24 %328 
					                                         f32 %330 = OpLoad %329 
					                                         f32 %331 = OpFMul %327 %330 
					                                                      OpStore %237 %331 
					                                         f32 %332 = OpLoad %237 
					                                         f32 %333 = OpLoad %139 
					                                         f32 %334 = OpFMul %332 %333 
					                                         f32 %335 = OpFAdd %334 %289 
					                                                      OpStore %237 %335 
					                                         f32 %336 = OpLoad %139 
					                                         f32 %337 = OpLoad %237 
					                                         f32 %338 = OpFDiv %336 %337 
					                                Private f32* %339 = OpAccessChain %60 %161 
					                                                      OpStore %339 %338 
					                                Uniform f32* %341 = OpAccessChain %24 %340 
					                                         f32 %342 = OpLoad %341 
					                                Uniform f32* %343 = OpAccessChain %24 %328 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                                      OpStore %139 %345 
					                                Private f32* %346 = OpAccessChain %60 %161 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpLoad %139 
					                                         f32 %349 = OpFMul %347 %348 
					                                                      OpStore %139 %349 
					                                         f32 %350 = OpLoad %139 
					                                         f32 %351 = OpExtInst %1 37 %350 %289 
					                                                      OpStore %237 %351 
					                                         f32 %352 = OpLoad %237 
					                                         f32 %353 = OpExtInst %1 31 %352 
					                                                      OpStore %237 %353 
					                                  Input f32* %355 = OpAccessChain %123 %310 
					                                         f32 %356 = OpLoad %355 
					                                Uniform f32* %358 = OpAccessChain %24 %357 %310 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFMul %356 %359 
					                                Private f32* %361 = OpAccessChain %354 %161 
					                                                      OpStore %361 %360 
					                              Uniform f32_4* %362 = OpAccessChain %24 %357 
					                                       f32_4 %363 = OpLoad %362 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %354 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
					                                       f32_3 %367 = OpFMul %364 %366 
					                                       f32_4 %368 = OpLoad %122 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                                       f32_3 %370 = OpFNegate %369 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %354 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %354 %373 
					                                Uniform f32* %374 = OpAccessChain %24 %357 %310 
					                                         f32 %375 = OpLoad %374 
					                                  Input f32* %376 = OpAccessChain %123 %310 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                Private f32* %379 = OpAccessChain %122 %310 
					                                         f32 %380 = OpLoad %379 
					                                         f32 %381 = OpFNegate %380 
					                                         f32 %382 = OpFAdd %378 %381 
					                                Private f32* %383 = OpAccessChain %354 %310 
					                                                      OpStore %383 %382 
					                                         f32 %384 = OpLoad %237 
					                                       f32_4 %385 = OpCompositeConstruct %384 %384 %384 %384 
					                                       f32_4 %386 = OpLoad %354 
					                                       f32_4 %387 = OpFMul %385 %386 
					                                       f32_4 %388 = OpLoad %122 
					                                       f32_4 %389 = OpFAdd %387 %388 
					                                                      OpStore %86 %389 
					                                       f32_4 %391 = OpLoad %86 
					                                                      OpStore %390 %391 
					                              Uniform f32_4* %393 = OpAccessChain %24 %392 
					                                       f32_4 %394 = OpLoad %393 
					                                       f32_4 %397 = OpExtInst %1 40 %394 %396 
					                                                      OpStore %86 %397 
					                                       f32_4 %398 = OpLoad %86 
					                                       f32_4 %401 = OpExtInst %1 37 %398 %400 
					                                                      OpStore %86 %401 
					                                       f32_2 %402 = OpLoad %9 
					                                       f32_4 %403 = OpLoad %86 
					                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
					                                       f32_2 %405 = OpFNegate %404 
					                                       f32_2 %406 = OpFAdd %402 %405 
					                                       f32_4 %407 = OpLoad %354 
					                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
					                                                      OpStore %354 %408 
					                                       f32_2 %409 = OpLoad %9 
					                                       f32_2 %412 = OpFMul %409 %411 
					                                       f32_4 %413 = OpLoad %86 
					                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
					                                       f32_2 %415 = OpFNegate %414 
					                                       f32_2 %416 = OpFAdd %412 %415 
					                                                      OpStore %9 %416 
					                                       f32_4 %417 = OpLoad %86 
					                                       f32_2 %418 = OpVectorShuffle %417 %417 2 3 
					                                       f32_2 %419 = OpFNegate %418 
					                                       f32_2 %420 = OpLoad %9 
					                                       f32_2 %421 = OpFAdd %419 %420 
					                                       f32_4 %422 = OpLoad %36 
					                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 2 3 
					                                                      OpStore %36 %423 
					                                       f32_4 %424 = OpLoad %86 
					                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
					                                       f32_2 %426 = OpFNegate %425 
					                                       f32_4 %427 = OpLoad %86 
					                                       f32_2 %428 = OpVectorShuffle %427 %427 2 3 
					                                       f32_2 %429 = OpFAdd %426 %428 
					                                                      OpStore %9 %429 
					                                       f32_4 %431 = OpLoad %354 
					                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
					                                       f32_2 %433 = OpLoad %9 
					                                       f32_2 %434 = OpFDiv %432 %433 
					                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %436 
					                                       f32_4 %438 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %438 
					                                       f32_2 %440 = OpLoad %439 
					                                       f32_4 %441 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %442 
					                                  Input f32* %444 = OpAccessChain %266 %114 
					                                         f32 %445 = OpLoad %444 
					                                        bool %446 = OpFOrdGreaterThanEqual %313 %445 
					                                                      OpStore %443 %446 
					                                        bool %447 = OpLoad %443 
					                                         f32 %448 = OpSelect %447 %289 %313 
					                                Private f32* %449 = OpAccessChain %9 %161 
					                                                      OpStore %449 %448 
					                                Uniform f32* %452 = OpAccessChain %24 %451 
					                                         f32 %453 = OpLoad %452 
					                                         f32 %454 = OpFNegate %453 
					                                Uniform f32* %456 = OpAccessChain %24 %455 
					                                         f32 %457 = OpLoad %456 
					                                         f32 %458 = OpFAdd %454 %457 
					                                                      OpStore %450 %458 
					                                Private f32* %459 = OpAccessChain %9 %161 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpLoad %450 
					                                         f32 %462 = OpFMul %460 %461 
					                                Uniform f32* %463 = OpAccessChain %24 %451 
					                                         f32 %464 = OpLoad %463 
					                                         f32 %465 = OpFAdd %462 %464 
					                                Private f32* %466 = OpAccessChain %9 %161 
					                                                      OpStore %466 %465 
					                                Private f32* %467 = OpAccessChain %9 %161 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFMul %468 %250 
					                                Uniform f32* %471 = OpAccessChain %24 %470 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %469 %472 
					                                Private f32* %474 = OpAccessChain %9 %161 
					                                                      OpStore %474 %473 
					                                Private f32* %475 = OpAccessChain %9 %161 
					                                         f32 %476 = OpLoad %475 
					                                Uniform f32* %477 = OpAccessChain %24 %328 
					                                         f32 %478 = OpLoad %477 
					                                         f32 %479 = OpFMul %476 %478 
					                                Private f32* %480 = OpAccessChain %9 %161 
					                                                      OpStore %480 %479 
					                                Private f32* %481 = OpAccessChain %9 %161 
					                                         f32 %482 = OpLoad %481 
					                                         f32 %483 = OpFNegate %482 
					                                         f32 %485 = OpFMul %483 %484 
					                                         f32 %486 = OpFAdd %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %161 
					                                                      OpStore %487 %486 
					                                Private f32* %488 = OpAccessChain %9 %161 
					                                         f32 %489 = OpLoad %488 
					                                Private f32* %490 = OpAccessChain %60 %161 
					                                         f32 %491 = OpLoad %490 
					                                         f32 %492 = OpFMul %489 %491 
					                                         f32 %494 = OpFAdd %492 %493 
					                                Private f32* %495 = OpAccessChain %60 %310 
					                                                      OpStore %495 %494 
					                                         f32 %496 = OpLoad %139 
					                                         f32 %497 = OpFNegate %496 
					                                         f32 %498 = OpFMul %497 %484 
					                                Private f32* %499 = OpAccessChain %60 %310 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFAdd %498 %500 
					                                Private f32* %502 = OpAccessChain %60 %114 
					                                                      OpStore %502 %501 
					                                         f32 %503 = OpLoad %139 
					                                         f32 %504 = OpFMul %503 %484 
					                                Private f32* %505 = OpAccessChain %60 %310 
					                                         f32 %506 = OpLoad %505 
					                                         f32 %507 = OpFAdd %504 %506 
					                                Private f32* %508 = OpAccessChain %60 %174 
					                                                      OpStore %508 %507 
					                                       f32_4 %510 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %510 
					                                 Output f32* %512 = OpAccessChain %118 %45 %114 
					                                         f32 %513 = OpLoad %512 
					                                         f32 %514 = OpFNegate %513 
					                                 Output f32* %515 = OpAccessChain %118 %45 %114 
					                                                      OpStore %515 %514 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 110
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %11 %13 %29 %41 %81 %104 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpDecorate %9 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 Location 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %13 RelaxedPrecision 
					                                             OpDecorate %13 Location 13 
					                                             OpDecorate %14 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate %18 RelaxedPrecision 
					                                             OpDecorate %21 RelaxedPrecision 
					                                             OpDecorate %21 DescriptorSet 21 
					                                             OpDecorate %21 Binding 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %25 RelaxedPrecision 
					                                             OpDecorate %25 DescriptorSet 25 
					                                             OpDecorate %25 Binding 25 
					                                             OpDecorate %26 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 29 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 41 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %45 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %47 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %52 RelaxedPrecision 
					                                             OpDecorate %53 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %55 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %58 RelaxedPrecision 
					                                             OpDecorate %59 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpMemberDecorate %66 0 Offset 66 
					                                             OpDecorate %66 Block 
					                                             OpDecorate %68 DescriptorSet 68 
					                                             OpDecorate %68 Binding 68 
					                                             OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 81 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %88 RelaxedPrecision 
					                                             OpDecorate %89 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %104 Location 104 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypePointer Input %7 
					                        Input f32_4* %11 = OpVariable Input 
					                        Input f32_4* %13 = OpVariable Input 
					                                     %17 = OpTypePointer Private %6 
					                        Private f32* %18 = OpVariable Private 
					                                     %19 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %20 = OpTypePointer UniformConstant %19 
					UniformConstant read_only Texture2D* %21 = OpVariable UniformConstant 
					                                     %23 = OpTypeSampler 
					                                     %24 = OpTypePointer UniformConstant %23 
					            UniformConstant sampler* %25 = OpVariable UniformConstant 
					                                     %27 = OpTypeSampledImage %19 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %30 = OpTypeVector %6 2 
					                                     %34 = OpTypeInt 32 0 
					                                 u32 %35 = OpConstant 3 
					                                     %37 = OpTypePointer Private %30 
					                      Private f32_2* %38 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                 f32 %50 = OpConstant 3,674022E-40 
					                                 f32 %51 = OpConstant 3,674022E-40 
					                      Private f32_2* %65 = OpVariable Private 
					                                     %66 = OpTypeStruct %7 
					                                     %67 = OpTypePointer Uniform %66 
					            Uniform struct {f32_4;}* %68 = OpVariable Uniform 
					                                     %69 = OpTypeInt 32 1 
					                                 i32 %70 = OpConstant 0 
					                                     %71 = OpTypePointer Uniform %7 
					               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                 u32 %95 = OpConstant 1 
					                                 u32 %98 = OpConstant 0 
					                                    %103 = OpTypePointer Output %7 
					                      Output f32_4* %104 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                               f32_4 %12 = OpLoad %11 
					                               f32_4 %14 = OpLoad %13 
					                               f32_4 %15 = OpFNegate %14 
					                               f32_4 %16 = OpFAdd %12 %15 
					                                             OpStore %9 %16 
					                 read_only Texture2D %22 = OpLoad %21 
					                             sampler %26 = OpLoad %25 
					          read_only Texture2DSampled %28 = OpSampledImage %22 %26 
					                               f32_4 %31 = OpLoad vs_TEXCOORD0 
					                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
					                               f32_4 %33 = OpImageSampleImplicitLod %28 %32 
					                                 f32 %36 = OpCompositeExtract %33 3 
					                                             OpStore %18 %36 
					                                 f32 %39 = OpLoad %18 
					                               f32_2 %40 = OpCompositeConstruct %39 %39 
					                               f32_4 %42 = OpLoad vs_TEXCOORD1 
					                               f32_2 %43 = OpVectorShuffle %42 %42 0 0 
					                               f32_2 %44 = OpFMul %40 %43 
					                               f32_4 %45 = OpLoad vs_TEXCOORD1 
					                               f32_2 %46 = OpVectorShuffle %45 %45 2 1 
					                               f32_2 %47 = OpFNegate %46 
					                               f32_2 %48 = OpFAdd %44 %47 
					                                             OpStore %38 %48 
					                               f32_2 %49 = OpLoad %38 
					                               f32_2 %52 = OpCompositeConstruct %50 %50 
					                               f32_2 %53 = OpCompositeConstruct %51 %51 
					                               f32_2 %54 = OpExtInst %1 43 %49 %52 %53 
					                                             OpStore %38 %54 
					                               f32_2 %55 = OpLoad %38 
					                               f32_4 %56 = OpVectorShuffle %55 %55 0 0 0 0 
					                               f32_4 %57 = OpLoad %9 
					                               f32_4 %58 = OpFMul %56 %57 
					                               f32_4 %59 = OpLoad %13 
					                               f32_4 %60 = OpFAdd %58 %59 
					                                             OpStore %9 %60 
					                               f32_2 %61 = OpLoad %38 
					                               f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
					                               f32_4 %63 = OpLoad %9 
					                               f32_4 %64 = OpFMul %62 %63 
					                                             OpStore %9 %64 
					                      Uniform f32_4* %72 = OpAccessChain %68 %70 
					                               f32_4 %73 = OpLoad %72 
					                               f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                               f32_2 %75 = OpFNegate %74 
					                      Uniform f32_4* %76 = OpAccessChain %68 %70 
					                               f32_4 %77 = OpLoad %76 
					                               f32_2 %78 = OpVectorShuffle %77 %77 2 3 
					                               f32_2 %79 = OpFAdd %75 %78 
					                                             OpStore %65 %79 
					                               f32_2 %80 = OpLoad %65 
					                               f32_4 %82 = OpLoad vs_TEXCOORD2 
					                               f32_2 %83 = OpVectorShuffle %82 %82 0 1 
					                               f32_2 %84 = OpExtInst %1 4 %83 
					                               f32_2 %85 = OpFNegate %84 
					                               f32_2 %86 = OpFAdd %80 %85 
					                                             OpStore %65 %86 
					                               f32_2 %87 = OpLoad %65 
					                               f32_4 %88 = OpLoad vs_TEXCOORD2 
					                               f32_2 %89 = OpVectorShuffle %88 %88 2 3 
					                               f32_2 %90 = OpFMul %87 %89 
					                                             OpStore %65 %90 
					                               f32_2 %91 = OpLoad %65 
					                               f32_2 %92 = OpCompositeConstruct %50 %50 
					                               f32_2 %93 = OpCompositeConstruct %51 %51 
					                               f32_2 %94 = OpExtInst %1 43 %91 %92 %93 
					                                             OpStore %65 %94 
					                        Private f32* %96 = OpAccessChain %65 %95 
					                                 f32 %97 = OpLoad %96 
					                        Private f32* %99 = OpAccessChain %65 %98 
					                                f32 %100 = OpLoad %99 
					                                f32 %101 = OpFMul %97 %100 
					                       Private f32* %102 = OpAccessChain %38 %98 
					                                             OpStore %102 %101 
					                              f32_4 %105 = OpLoad %9 
					                              f32_2 %106 = OpLoad %38 
					                              f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
					                              f32_4 %108 = OpFMul %105 %107 
					                                             OpStore %104 %108 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[12];
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_11[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_18[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _UnderlayOffsetX;
					uniform 	float _UnderlayOffsetY;
					uniform 	float _UnderlayDilate;
					uniform 	float _UnderlaySoftness;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _ScaleRatioC;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _UnderlayColor;
					uniform 	vec4 _ClipRect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
					    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 642
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %130 %195 %306 %420 %458 %464 %466 %538 %540 %634 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpMemberDecorate %22 23 Offset 22 
					                                                      OpMemberDecorate %22 24 Offset 22 
					                                                      OpMemberDecorate %22 25 Offset 22 
					                                                      OpMemberDecorate %22 26 Offset 22 
					                                                      OpMemberDecorate %22 27 Offset 22 
					                                                      OpMemberDecorate %22 28 Offset 22 
					                                                      OpMemberDecorate %22 29 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 Location 122 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %170 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %401 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %403 RelaxedPrecision 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %415 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate vs_TEXCOORD0 Location 458 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 464 
					                                                      OpDecorate %466 Location 466 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 538 
					                                                      OpDecorate vs_TEXCOORD3 Location 540 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 Location 634 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 19 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 20 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                               Output f32_4* %122 = OpVariable Output 
					                                         i32 %123 = OpConstant 6 
					                                         u32 %124 = OpConstant 3 
					                                             %127 = OpTypePointer Output %6 
					                              Private f32_4* %129 = OpVariable Private 
					                                Input f32_4* %130 = OpVariable Input 
					                                         f32 %135 = OpConstant 3,674022E-40 
					                                             %136 = OpTypePointer Private %6 
					                              Private f32_4* %138 = OpVariable Private 
					                                             %143 = OpTypePointer Private %15 
					                              Private f32_3* %144 = OpVariable Private 
					                              Private f32_4* %153 = OpVariable Private 
					                              Private f32_4* %162 = OpVariable Private 
					                                         i32 %163 = OpConstant 9 
					                                Private f32* %179 = OpVariable Private 
					                                             %194 = OpTypePointer Input %15 
					                                Input f32_3* %195 = OpVariable Input 
					                                         u32 %201 = OpConstant 0 
					                                         u32 %214 = OpConstant 2 
					                                         i32 %238 = OpConstant 4 
					                                         i32 %260 = OpConstant 27 
					                                         i32 %263 = OpConstant 28 
					                                Private f32* %277 = OpVariable Private 
					                                         i32 %283 = OpConstant 22 
					                                         i32 %286 = OpConstant 23 
					                                         f32 %290 = OpConstant 3,674022E-40 
					                                       f32_2 %291 = OpConstantComposite %290 %290 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_2* %306 = OpVariable Input 
					                                             %307 = OpTypePointer Input %6 
					                                         i32 %311 = OpConstant 26 
					                                         f32 %321 = OpConstant 3,674022E-40 
					                                Private f32* %324 = OpVariable Private 
					                                         i32 %325 = OpConstant 29 
					                                             %346 = OpTypeBool 
					                                             %347 = OpTypePointer Private %346 
					                               Private bool* %348 = OpVariable Private 
					                                         f32 %351 = OpConstant 3,674022E-40 
					                                             %354 = OpTypePointer Function %6 
					                                         i32 %363 = OpConstant 8 
					                                         i32 %366 = OpConstant 17 
					                                         i32 %378 = OpConstant 10 
					                              Private f32_2* %388 = OpVariable Private 
					                              Private f32_4* %400 = OpVariable Private 
					                               Output f32_4* %420 = OpVariable Output 
					                                         i32 %422 = OpConstant 21 
					                                         f32 %425 = OpConstant 3,674022E-40 
					                                       f32_4 %426 = OpConstantComposite %425 %425 %425 %425 
					                                         f32 %429 = OpConstant 3,674022E-40 
					                                       f32_4 %430 = OpConstantComposite %429 %429 %429 %429 
					                                         f32 %438 = OpConstant 3,674022E-40 
					                                       f32_2 %439 = OpConstantComposite %438 %438 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %466 = OpVariable Input 
					                               Private bool* %470 = OpVariable Private 
					                              Private f32_3* %477 = OpVariable Private 
					                                         i32 %478 = OpConstant 15 
					                                         i32 %482 = OpConstant 16 
					                                         i32 %499 = OpConstant 7 
					                                         f32 %513 = OpConstant 3,674022E-40 
					                                         f32 %522 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %545 = OpConstant 14 
					                                         i32 %548 = OpConstant 13 
					                                         i32 %551 = OpConstant 11 
					                                         i32 %554 = OpConstant 12 
					                                         i32 %558 = OpConstant 18 
					                                         i32 %585 = OpConstant 24 
					                                         i32 %588 = OpConstant 25 
					                                             %633 = OpTypePointer Output %7 
					                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %355 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
					                                         f32 %126 = OpLoad %125 
					                                 Output f32* %128 = OpAccessChain %122 %124 
					                                                      OpStore %128 %126 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_4 %133 = OpLoad %129 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %129 %134 
					                                Private f32* %137 = OpAccessChain %129 %124 
					                                                      OpStore %137 %135 
					                                       f32_4 %139 = OpLoad %129 
					                              Uniform f32_4* %140 = OpAccessChain %24 %123 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_4 %142 = OpFMul %139 %141 
					                                                      OpStore %138 %142 
					                                       f32_4 %145 = OpLoad %138 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 3 3 3 
					                                       f32_4 %147 = OpLoad %138 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
					                                       f32_3 %149 = OpFMul %146 %148 
					                                                      OpStore %144 %149 
					                                       f32_3 %150 = OpLoad %144 
					                                       f32_4 %151 = OpLoad %122 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %122 %152 
					                                       f32_3 %154 = OpLoad %144 
					                                       f32_3 %155 = OpFNegate %154 
					                                       f32_4 %156 = OpLoad %153 
					                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
					                                                      OpStore %153 %157 
					                                Private f32* %158 = OpAccessChain %138 %124 
					                                         f32 %159 = OpLoad %158 
					                                         f32 %160 = OpFNegate %159 
					                                Private f32* %161 = OpAccessChain %153 %124 
					                                                      OpStore %161 %160 
					                              Uniform f32_4* %164 = OpAccessChain %24 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 3 3 3 
					                              Uniform f32_4* %167 = OpAccessChain %24 %163 
					                                       f32_4 %168 = OpLoad %167 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFMul %166 %169 
					                                       f32_4 %171 = OpLoad %162 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
					                                                      OpStore %162 %172 
					                                Uniform f32* %173 = OpAccessChain %24 %163 %124 
					                                         f32 %174 = OpLoad %173 
					                                Private f32* %175 = OpAccessChain %162 %124 
					                                                      OpStore %175 %174 
					                                       f32_4 %176 = OpLoad %153 
					                                       f32_4 %177 = OpLoad %162 
					                                       f32_4 %178 = OpFAdd %176 %177 
					                                                      OpStore %153 %178 
					                                       f32_4 %180 = OpLoad %36 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_4 %182 = OpLoad %36 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
					                                         f32 %184 = OpDot %181 %183 
					                                                      OpStore %179 %184 
					                                         f32 %185 = OpLoad %179 
					                                         f32 %186 = OpExtInst %1 32 %185 
					                                                      OpStore %179 %186 
					                                         f32 %187 = OpLoad %179 
					                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
					                                       f32_4 %189 = OpLoad %36 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %188 %190 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
					                                                      OpStore %36 %193 
					                                       f32_3 %196 = OpLoad %195 
					                              Uniform f32_4* %197 = OpAccessChain %24 %62 %45 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                         f32 %200 = OpDot %196 %199 
					                                Private f32* %202 = OpAccessChain %60 %201 
					                                                      OpStore %202 %200 
					                                       f32_3 %203 = OpLoad %195 
					                              Uniform f32_4* %204 = OpAccessChain %24 %62 %40 
					                                       f32_4 %205 = OpLoad %204 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %203 %206 
					                                Private f32* %208 = OpAccessChain %60 %114 
					                                                      OpStore %208 %207 
					                                       f32_3 %209 = OpLoad %195 
					                              Uniform f32_4* %210 = OpAccessChain %24 %62 %39 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                         f32 %213 = OpDot %209 %212 
					                                Private f32* %215 = OpAccessChain %60 %214 
					                                                      OpStore %215 %213 
					                                       f32_4 %216 = OpLoad %60 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
					                                       f32_4 %218 = OpLoad %60 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                         f32 %220 = OpDot %217 %219 
					                                                      OpStore %179 %220 
					                                         f32 %221 = OpLoad %179 
					                                         f32 %222 = OpExtInst %1 32 %221 
					                                                      OpStore %179 %222 
					                                         f32 %223 = OpLoad %179 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                                       f32_4 %225 = OpLoad %60 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %60 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
					                                                      OpStore %60 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
					                                         f32 %234 = OpDot %231 %233 
					                                                      OpStore %179 %234 
					                              Uniform f32_4* %235 = OpAccessChain %24 %40 
					                                       f32_4 %236 = OpLoad %235 
					                                       f32_2 %237 = OpVectorShuffle %236 %236 1 1 
					                              Uniform f32_4* %239 = OpAccessChain %24 %238 %40 
					                                       f32_4 %240 = OpLoad %239 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                       f32_2 %242 = OpFMul %237 %241 
					                                       f32_4 %243 = OpLoad %36 
					                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 2 3 
					                                                      OpStore %36 %244 
					                              Uniform f32_4* %245 = OpAccessChain %24 %238 %45 
					                                       f32_4 %246 = OpLoad %245 
					                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
					                              Uniform f32_4* %248 = OpAccessChain %24 %40 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_2 %250 = OpVectorShuffle %249 %249 0 0 
					                                       f32_2 %251 = OpFMul %247 %250 
					                                       f32_4 %252 = OpLoad %36 
					                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
					                                       f32_2 %254 = OpFAdd %251 %253 
					                                       f32_4 %255 = OpLoad %36 
					                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
					                                                      OpStore %36 %256 
					                                       f32_4 %257 = OpLoad %36 
					                                       f32_2 %258 = OpVectorShuffle %257 %257 0 1 
					                                       f32_2 %259 = OpExtInst %1 4 %258 
					                                Uniform f32* %261 = OpAccessChain %24 %260 
					                                         f32 %262 = OpLoad %261 
					                                Uniform f32* %264 = OpAccessChain %24 %263 
					                                         f32 %265 = OpLoad %264 
					                                       f32_2 %266 = OpCompositeConstruct %262 %265 
					                                       f32_2 %267 = OpFMul %259 %266 
					                                       f32_4 %268 = OpLoad %36 
					                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 2 3 
					                                                      OpStore %36 %269 
					                                       f32_4 %270 = OpLoad %60 
					                                       f32_2 %271 = OpVectorShuffle %270 %270 3 3 
					                                       f32_4 %272 = OpLoad %36 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFDiv %271 %273 
					                                       f32_4 %275 = OpLoad %36 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %36 %276 
					                                       f32_4 %278 = OpLoad %36 
					                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
					                                       f32_4 %280 = OpLoad %36 
					                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
					                                         f32 %282 = OpDot %279 %281 
					                                                      OpStore %277 %282 
					                                Uniform f32* %284 = OpAccessChain %24 %283 
					                                         f32 %285 = OpLoad %284 
					                                Uniform f32* %287 = OpAccessChain %24 %286 
					                                         f32 %288 = OpLoad %287 
					                                       f32_2 %289 = OpCompositeConstruct %285 %288 
					                                       f32_2 %292 = OpFMul %289 %291 
					                                       f32_4 %293 = OpLoad %36 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_2 %295 = OpFAdd %292 %294 
					                                       f32_4 %296 = OpLoad %36 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
					                                                      OpStore %36 %297 
					                                       f32_4 %298 = OpLoad %36 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                       f32_2 %300 = OpFDiv %291 %299 
					                                       f32_4 %301 = OpLoad %36 
					                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
					                                                      OpStore %36 %302 
					                                         f32 %303 = OpLoad %277 
					                                         f32 %304 = OpExtInst %1 32 %303 
					                                                      OpStore %277 %304 
					                                  Input f32* %308 = OpAccessChain %306 %114 
					                                         f32 %309 = OpLoad %308 
					                                         f32 %310 = OpExtInst %1 4 %309 
					                                Uniform f32* %312 = OpAccessChain %24 %311 
					                                         f32 %313 = OpLoad %312 
					                                         f32 %314 = OpFMul %310 %313 
					                                Private f32* %315 = OpAccessChain %60 %201 
					                                                      OpStore %315 %314 
					                                         f32 %316 = OpLoad %277 
					                                Private f32* %317 = OpAccessChain %60 %201 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFMul %316 %318 
					                                                      OpStore %277 %319 
					                                         f32 %320 = OpLoad %277 
					                                         f32 %322 = OpFMul %320 %321 
					                                Private f32* %323 = OpAccessChain %60 %201 
					                                                      OpStore %323 %322 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                         f32 %328 = OpFNegate %327 
					                                         f32 %329 = OpFAdd %328 %135 
					                                                      OpStore %324 %329 
					                                         f32 %330 = OpLoad %324 
					                                Private f32* %331 = OpAccessChain %60 %201 
					                                         f32 %332 = OpLoad %331 
					                                         f32 %333 = OpExtInst %1 4 %332 
					                                         f32 %334 = OpFMul %330 %333 
					                                                      OpStore %324 %334 
					                                         f32 %335 = OpLoad %277 
					                                         f32 %336 = OpFMul %335 %321 
					                                         f32 %337 = OpLoad %324 
					                                         f32 %338 = OpFNegate %337 
					                                         f32 %339 = OpFAdd %336 %338 
					                                                      OpStore %277 %339 
					                                         f32 %340 = OpLoad %179 
					                                         f32 %341 = OpExtInst %1 4 %340 
					                                         f32 %342 = OpLoad %277 
					                                         f32 %343 = OpFMul %341 %342 
					                                         f32 %344 = OpLoad %324 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %179 %345 
					                                Uniform f32* %349 = OpAccessChain %24 %238 %62 %124 
					                                         f32 %350 = OpLoad %349 
					                                        bool %352 = OpFOrdEqual %350 %351 
					                                                      OpStore %348 %352 
					                                        bool %353 = OpLoad %348 
					                                                      OpSelectionMerge %357 None 
					                                                      OpBranchConditional %353 %356 %359 
					                                             %356 = OpLabel 
					                                         f32 %358 = OpLoad %179 
					                                                      OpStore %355 %358 
					                                                      OpBranch %357 
					                                             %359 = OpLabel 
					                                Private f32* %360 = OpAccessChain %60 %201 
					                                         f32 %361 = OpLoad %360 
					                                                      OpStore %355 %361 
					                                                      OpBranch %357 
					                                             %357 = OpLabel 
					                                         f32 %362 = OpLoad %355 
					                                                      OpStore %179 %362 
					                                Uniform f32* %364 = OpAccessChain %24 %363 
					                                         f32 %365 = OpLoad %364 
					                                Uniform f32* %367 = OpAccessChain %24 %366 
					                                         f32 %368 = OpLoad %367 
					                                         f32 %369 = OpFMul %365 %368 
					                                                      OpStore %277 %369 
					                                         f32 %370 = OpLoad %277 
					                                         f32 %371 = OpLoad %179 
					                                         f32 %372 = OpFMul %370 %371 
					                                         f32 %373 = OpFAdd %372 %135 
					                                                      OpStore %277 %373 
					                                         f32 %374 = OpLoad %179 
					                                         f32 %375 = OpLoad %277 
					                                         f32 %376 = OpFDiv %374 %375 
					                                Private f32* %377 = OpAccessChain %60 %201 
					                                                      OpStore %377 %376 
					                                Uniform f32* %379 = OpAccessChain %24 %378 
					                                         f32 %380 = OpLoad %379 
					                                Uniform f32* %381 = OpAccessChain %24 %366 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpFMul %380 %382 
					                                                      OpStore %277 %383 
					                                Private f32* %384 = OpAccessChain %60 %201 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpLoad %277 
					                                         f32 %387 = OpFMul %385 %386 
					                                                      OpStore %277 %387 
					                                         f32 %389 = OpLoad %277 
					                                         f32 %390 = OpExtInst %1 37 %389 %135 
					                                Private f32* %391 = OpAccessChain %388 %201 
					                                                      OpStore %391 %390 
					                                Private f32* %392 = OpAccessChain %388 %201 
					                                         f32 %393 = OpLoad %392 
					                                         f32 %394 = OpExtInst %1 31 %393 
					                                Private f32* %395 = OpAccessChain %388 %201 
					                                                      OpStore %395 %394 
					                                       f32_4 %396 = OpLoad %153 
					                                       f32_2 %397 = OpLoad %388 
					                                       f32_4 %398 = OpVectorShuffle %397 %397 0 0 0 0 
					                                       f32_4 %399 = OpFMul %396 %398 
					                                                      OpStore %153 %399 
					                                       f32_4 %401 = OpLoad %138 
					                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
					                                       f32_4 %403 = OpLoad %138 
					                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
					                                       f32_3 %405 = OpFMul %402 %404 
					                                       f32_4 %406 = OpLoad %153 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFAdd %405 %407 
					                                       f32_4 %409 = OpLoad %400 
					                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
					                                                      OpStore %400 %410 
					                                Private f32* %411 = OpAccessChain %129 %124 
					                                         f32 %412 = OpLoad %411 
					                                Uniform f32* %413 = OpAccessChain %24 %123 %124 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %412 %414 
					                                Private f32* %416 = OpAccessChain %153 %124 
					                                         f32 %417 = OpLoad %416 
					                                         f32 %418 = OpFAdd %415 %417 
					                                Private f32* %419 = OpAccessChain %400 %124 
					                                                      OpStore %419 %418 
					                                       f32_4 %421 = OpLoad %400 
					                                                      OpStore %420 %421 
					                              Uniform f32_4* %423 = OpAccessChain %24 %422 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_4 %427 = OpExtInst %1 40 %424 %426 
					                                                      OpStore %86 %427 
					                                       f32_4 %428 = OpLoad %86 
					                                       f32_4 %431 = OpExtInst %1 37 %428 %430 
					                                                      OpStore %86 %431 
					                                       f32_2 %432 = OpLoad %9 
					                                       f32_4 %433 = OpLoad %86 
					                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
					                                       f32_2 %435 = OpFNegate %434 
					                                       f32_2 %436 = OpFAdd %432 %435 
					                                                      OpStore %388 %436 
					                                       f32_2 %437 = OpLoad %9 
					                                       f32_2 %440 = OpFMul %437 %439 
					                                       f32_4 %441 = OpLoad %86 
					                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
					                                       f32_2 %443 = OpFNegate %442 
					                                       f32_2 %444 = OpFAdd %440 %443 
					                                                      OpStore %9 %444 
					                                       f32_4 %445 = OpLoad %86 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFNegate %446 
					                                       f32_2 %448 = OpLoad %9 
					                                       f32_2 %449 = OpFAdd %447 %448 
					                                       f32_4 %450 = OpLoad %36 
					                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
					                                                      OpStore %36 %451 
					                                       f32_4 %452 = OpLoad %86 
					                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
					                                       f32_2 %454 = OpFNegate %453 
					                                       f32_4 %455 = OpLoad %86 
					                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
					                                       f32_2 %457 = OpFAdd %454 %456 
					                                                      OpStore %9 %457 
					                                       f32_2 %459 = OpLoad %388 
					                                       f32_2 %460 = OpLoad %9 
					                                       f32_2 %461 = OpFDiv %459 %460 
					                                       f32_4 %462 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %463 
					                                       f32_4 %465 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %465 
					                                       f32_2 %467 = OpLoad %466 
					                                       f32_4 %468 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %469 
					                                  Input f32* %471 = OpAccessChain %306 %114 
					                                         f32 %472 = OpLoad %471 
					                                        bool %473 = OpFOrdGreaterThanEqual %351 %472 
					                                                      OpStore %470 %473 
					                                        bool %474 = OpLoad %470 
					                                         f32 %475 = OpSelect %474 %135 %351 
					                                Private f32* %476 = OpAccessChain %9 %201 
					                                                      OpStore %476 %475 
					                                Uniform f32* %479 = OpAccessChain %24 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFNegate %480 
					                                Uniform f32* %483 = OpAccessChain %24 %482 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpFAdd %481 %484 
					                                Private f32* %486 = OpAccessChain %477 %201 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %201 
					                                         f32 %488 = OpLoad %487 
					                                Private f32* %489 = OpAccessChain %477 %201 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Uniform f32* %492 = OpAccessChain %24 %478 
					                                         f32 %493 = OpLoad %492 
					                                         f32 %494 = OpFAdd %491 %493 
					                                Private f32* %495 = OpAccessChain %9 %201 
					                                                      OpStore %495 %494 
					                                Private f32* %496 = OpAccessChain %9 %201 
					                                         f32 %497 = OpLoad %496 
					                                         f32 %498 = OpFMul %497 %290 
					                                Uniform f32* %500 = OpAccessChain %24 %499 
					                                         f32 %501 = OpLoad %500 
					                                         f32 %502 = OpFAdd %498 %501 
					                                Private f32* %503 = OpAccessChain %9 %201 
					                                                      OpStore %503 %502 
					                                Private f32* %504 = OpAccessChain %9 %201 
					                                         f32 %505 = OpLoad %504 
					                                Uniform f32* %506 = OpAccessChain %24 %366 
					                                         f32 %507 = OpLoad %506 
					                                         f32 %508 = OpFMul %505 %507 
					                                Private f32* %509 = OpAccessChain %9 %201 
					                                                      OpStore %509 %508 
					                                Private f32* %510 = OpAccessChain %9 %201 
					                                         f32 %511 = OpLoad %510 
					                                         f32 %512 = OpFNegate %511 
					                                         f32 %514 = OpFMul %512 %513 
					                                         f32 %515 = OpFAdd %514 %513 
					                                Private f32* %516 = OpAccessChain %9 %201 
					                                                      OpStore %516 %515 
					                                Private f32* %517 = OpAccessChain %9 %201 
					                                         f32 %518 = OpLoad %517 
					                                Private f32* %519 = OpAccessChain %60 %201 
					                                         f32 %520 = OpLoad %519 
					                                         f32 %521 = OpFMul %518 %520 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %60 %124 
					                                                      OpStore %524 %523 
					                                         f32 %525 = OpLoad %277 
					                                         f32 %526 = OpFNegate %525 
					                                         f32 %527 = OpFMul %526 %513 
					                                Private f32* %528 = OpAccessChain %60 %124 
					                                         f32 %529 = OpLoad %528 
					                                         f32 %530 = OpFAdd %527 %529 
					                                Private f32* %531 = OpAccessChain %60 %114 
					                                                      OpStore %531 %530 
					                                         f32 %532 = OpLoad %277 
					                                         f32 %533 = OpFMul %532 %513 
					                                Private f32* %534 = OpAccessChain %60 %124 
					                                         f32 %535 = OpLoad %534 
					                                         f32 %536 = OpFAdd %533 %535 
					                                Private f32* %537 = OpAccessChain %60 %214 
					                                                      OpStore %537 %536 
					                                       f32_4 %539 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %539 
					                                  Input f32* %541 = OpAccessChain %130 %124 
					                                         f32 %542 = OpLoad %541 
					                                 Output f32* %543 = OpAccessChain vs_TEXCOORD3 %214 
					                                                      OpStore %543 %542 
					                                 Output f32* %544 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %544 %351 
					                                Uniform f32* %546 = OpAccessChain %24 %545 
					                                         f32 %547 = OpLoad %546 
					                                Uniform f32* %549 = OpAccessChain %24 %548 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %24 %551 
					                                         f32 %553 = OpLoad %552 
					                                Uniform f32* %555 = OpAccessChain %24 %554 
					                                         f32 %556 = OpLoad %555 
					                                       f32_4 %557 = OpCompositeConstruct %547 %550 %553 %556 
					                                Uniform f32* %559 = OpAccessChain %24 %558 
					                                         f32 %560 = OpLoad %559 
					                                Uniform f32* %561 = OpAccessChain %24 %558 
					                                         f32 %562 = OpLoad %561 
					                                Uniform f32* %563 = OpAccessChain %24 %558 
					                                         f32 %564 = OpLoad %563 
					                                Uniform f32* %565 = OpAccessChain %24 %558 
					                                         f32 %566 = OpLoad %565 
					                                       f32_4 %567 = OpCompositeConstruct %560 %562 %564 %566 
					                                         f32 %568 = OpCompositeExtract %567 0 
					                                         f32 %569 = OpCompositeExtract %567 1 
					                                         f32 %570 = OpCompositeExtract %567 2 
					                                         f32 %571 = OpCompositeExtract %567 3 
					                                       f32_4 %572 = OpCompositeConstruct %568 %569 %570 %571 
					                                       f32_4 %573 = OpFMul %557 %572 
					                                                      OpStore %36 %573 
					                                       f32_4 %574 = OpLoad %36 
					                                       f32_2 %575 = OpVectorShuffle %574 %574 2 3 
					                                       f32_2 %576 = OpFNegate %575 
					                                Uniform f32* %577 = OpAccessChain %24 %311 
					                                         f32 %578 = OpLoad %577 
					                                       f32_2 %579 = OpCompositeConstruct %578 %578 
					                                       f32_2 %580 = OpFMul %576 %579 
					                                       f32_3 %581 = OpLoad %477 
					                                       f32_3 %582 = OpVectorShuffle %581 %580 3 1 4 
					                                                      OpStore %477 %582 
					                                       f32_3 %583 = OpLoad %477 
					                                       f32_2 %584 = OpVectorShuffle %583 %583 0 2 
					                                Uniform f32* %586 = OpAccessChain %24 %585 
					                                         f32 %587 = OpLoad %586 
					                                Uniform f32* %589 = OpAccessChain %24 %588 
					                                         f32 %590 = OpLoad %589 
					                                       f32_2 %591 = OpCompositeConstruct %587 %590 
					                                       f32_2 %592 = OpFDiv %584 %591 
					                                       f32_3 %593 = OpLoad %477 
					                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
					                                                      OpStore %477 %594 
					                                       f32_3 %595 = OpLoad %477 
					                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
					                                       f32_2 %597 = OpLoad %466 
					                                       f32_2 %598 = OpFAdd %596 %597 
					                                       f32_4 %599 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %600 = OpVectorShuffle %599 %598 4 5 2 3 
					                                                      OpStore vs_TEXCOORD3 %600 
					                                Private f32* %601 = OpAccessChain %36 %201 
					                                         f32 %602 = OpLoad %601 
					                                         f32 %603 = OpLoad %179 
					                                         f32 %604 = OpFMul %602 %603 
					                                         f32 %605 = OpFAdd %604 %135 
					                                Private f32* %606 = OpAccessChain %477 %201 
					                                                      OpStore %606 %605 
					                                         f32 %607 = OpLoad %179 
					                                Private f32* %608 = OpAccessChain %477 %201 
					                                         f32 %609 = OpLoad %608 
					                                         f32 %610 = OpFDiv %607 %609 
					                                Private f32* %611 = OpAccessChain %60 %201 
					                                                      OpStore %611 %610 
					                                Private f32* %612 = OpAccessChain %36 %114 
					                                         f32 %613 = OpLoad %612 
					                                Private f32* %614 = OpAccessChain %60 %201 
					                                         f32 %615 = OpLoad %614 
					                                         f32 %616 = OpFMul %613 %615 
					                                Private f32* %617 = OpAccessChain %477 %201 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %9 %201 
					                                         f32 %619 = OpLoad %618 
					                                Private f32* %620 = OpAccessChain %60 %201 
					                                         f32 %621 = OpLoad %620 
					                                         f32 %622 = OpFMul %619 %621 
					                                         f32 %623 = OpFAdd %622 %522 
					                                Private f32* %624 = OpAccessChain %9 %201 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %477 %201 
					                                         f32 %626 = OpLoad %625 
					                                         f32 %627 = OpFNegate %626 
					                                         f32 %628 = OpFMul %627 %513 
					                                Private f32* %629 = OpAccessChain %9 %201 
					                                         f32 %630 = OpLoad %629 
					                                         f32 %631 = OpFAdd %628 %630 
					                                Private f32* %632 = OpAccessChain %60 %114 
					                                                      OpStore %632 %631 
					                                       f32_4 %635 = OpLoad %60 
					                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
					                                                      OpStore vs_TEXCOORD4 %636 
					                                 Output f32* %637 = OpAccessChain %118 %45 %114 
					                                         f32 %638 = OpLoad %637 
					                                         f32 %639 = OpFNegate %638 
					                                 Output f32* %640 = OpAccessChain %118 %45 %114 
					                                                      OpStore %640 %639 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 155
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %32 %77 %83 %96 %123 %152 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD3 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 Location 32 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpMemberDecorate %49 0 RelaxedPrecision 
					                                             OpMemberDecorate %49 0 Offset 49 
					                                             OpMemberDecorate %49 1 Offset 49 
					                                             OpDecorate %49 Block 
					                                             OpDecorate %51 DescriptorSet 51 
					                                             OpDecorate %51 Binding 51 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %58 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %67 RelaxedPrecision 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %71 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %73 RelaxedPrecision 
					                                             OpDecorate %74 RelaxedPrecision 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 77 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 83 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %88 RelaxedPrecision 
					                                             OpDecorate %89 RelaxedPrecision 
					                                             OpDecorate %90 RelaxedPrecision 
					                                             OpDecorate %91 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                             OpDecorate %96 RelaxedPrecision 
					                                             OpDecorate %96 Location 96 
					                                             OpDecorate %97 RelaxedPrecision 
					                                             OpDecorate %98 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %103 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 123 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %125 RelaxedPrecision 
					                                             OpDecorate %126 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate %142 RelaxedPrecision 
					                                             OpDecorate %143 RelaxedPrecision 
					                                             OpDecorate %144 RelaxedPrecision 
					                                             OpDecorate %145 RelaxedPrecision 
					                                             OpDecorate %147 RelaxedPrecision 
					                                             OpDecorate %152 RelaxedPrecision 
					                                             OpDecorate %152 Location 152 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                        Private f32* %29 = OpVariable Private 
					                                     %31 = OpTypePointer Input %22 
					               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
					                                 u32 %33 = OpConstant 0 
					                                     %34 = OpTypePointer Input %6 
					                                 u32 %38 = OpConstant 1 
					                                 f32 %44 = OpConstant 3,674022E-40 
					                                 f32 %45 = OpConstant 3,674022E-40 
					                                     %47 = OpTypePointer Private %19 
					                      Private f32_4* %48 = OpVariable Private 
					                                     %49 = OpTypeStruct %19 %19 
					                                     %50 = OpTypePointer Uniform %49 
					     Uniform struct {f32_4; f32_4;}* %51 = OpVariable Uniform 
					                                     %52 = OpTypeInt 32 1 
					                                 i32 %53 = OpConstant 0 
					                                     %54 = OpTypeVector %6 3 
					                                     %55 = OpTypePointer Uniform %19 
					                                     %65 = OpTypePointer Uniform %6 
					                        Private f32* %73 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                      Private f32_4* %93 = OpVariable Private 
					                        Input f32_4* %96 = OpVariable Input 
					                                    %111 = OpTypePointer Private %22 
					                     Private f32_2* %112 = OpVariable Private 
					                                i32 %113 = OpConstant 1 
					               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                     Private f32_4* %146 = OpVariable Private 
					                                    %151 = OpTypePointer Output %19 
					                      Output f32_4* %152 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD3 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %30 = OpLoad %8 
					                          Input f32* %35 = OpAccessChain vs_TEXCOORD4 %33 
					                                 f32 %36 = OpLoad %35 
					                                 f32 %37 = OpFMul %30 %36 
					                          Input f32* %39 = OpAccessChain vs_TEXCOORD4 %38 
					                                 f32 %40 = OpLoad %39 
					                                 f32 %41 = OpFNegate %40 
					                                 f32 %42 = OpFAdd %37 %41 
					                                             OpStore %29 %42 
					                                 f32 %43 = OpLoad %29 
					                                 f32 %46 = OpExtInst %1 43 %43 %44 %45 
					                                             OpStore %29 %46 
					                      Uniform f32_4* %56 = OpAccessChain %51 %53 
					                               f32_4 %57 = OpLoad %56 
					                               f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                      Uniform f32_4* %59 = OpAccessChain %51 %53 
					                               f32_4 %60 = OpLoad %59 
					                               f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                               f32_3 %62 = OpFMul %58 %61 
					                               f32_4 %63 = OpLoad %48 
					                               f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                             OpStore %48 %64 
					                        Uniform f32* %66 = OpAccessChain %51 %53 %27 
					                                 f32 %67 = OpLoad %66 
					                        Private f32* %68 = OpAccessChain %48 %27 
					                                             OpStore %68 %67 
					                                 f32 %69 = OpLoad %29 
					                               f32_4 %70 = OpCompositeConstruct %69 %69 %69 %69 
					                               f32_4 %71 = OpLoad %48 
					                               f32_4 %72 = OpFMul %70 %71 
					                                             OpStore %48 %72 
					                 read_only Texture2D %74 = OpLoad %11 
					                             sampler %75 = OpLoad %15 
					          read_only Texture2DSampled %76 = OpSampledImage %74 %75 
					                               f32_4 %78 = OpLoad vs_TEXCOORD0 
					                               f32_2 %79 = OpVectorShuffle %78 %78 0 1 
					                               f32_4 %80 = OpImageSampleImplicitLod %76 %79 
					                                 f32 %81 = OpCompositeExtract %80 3 
					                                             OpStore %73 %81 
					                                 f32 %82 = OpLoad %73 
					                          Input f32* %84 = OpAccessChain vs_TEXCOORD1 %33 
					                                 f32 %85 = OpLoad %84 
					                                 f32 %86 = OpFMul %82 %85 
					                          Input f32* %87 = OpAccessChain vs_TEXCOORD1 %27 
					                                 f32 %88 = OpLoad %87 
					                                 f32 %89 = OpFNegate %88 
					                                 f32 %90 = OpFAdd %86 %89 
					                                             OpStore %29 %90 
					                                 f32 %91 = OpLoad %29 
					                                 f32 %92 = OpExtInst %1 43 %91 %44 %45 
					                                             OpStore %29 %92 
					                                 f32 %94 = OpLoad %29 
					                               f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
					                               f32_4 %97 = OpLoad %96 
					                               f32_4 %98 = OpFMul %95 %97 
					                                             OpStore %93 %98 
					                          Input f32* %99 = OpAccessChain %96 %27 
					                                f32 %100 = OpLoad %99 
					                                f32 %101 = OpFNegate %100 
					                                f32 %102 = OpLoad %29 
					                                f32 %103 = OpFMul %101 %102 
					                                f32 %104 = OpFAdd %103 %45 
					                                             OpStore %29 %104 
					                              f32_4 %105 = OpLoad %48 
					                                f32 %106 = OpLoad %29 
					                              f32_4 %107 = OpCompositeConstruct %106 %106 %106 %106 
					                              f32_4 %108 = OpFMul %105 %107 
					                              f32_4 %109 = OpLoad %93 
					                              f32_4 %110 = OpFAdd %108 %109 
					                                             OpStore %48 %110 
					                     Uniform f32_4* %114 = OpAccessChain %51 %113 
					                              f32_4 %115 = OpLoad %114 
					                              f32_2 %116 = OpVectorShuffle %115 %115 0 1 
					                              f32_2 %117 = OpFNegate %116 
					                     Uniform f32_4* %118 = OpAccessChain %51 %113 
					                              f32_4 %119 = OpLoad %118 
					                              f32_2 %120 = OpVectorShuffle %119 %119 2 3 
					                              f32_2 %121 = OpFAdd %117 %120 
					                                             OpStore %112 %121 
					                              f32_2 %122 = OpLoad %112 
					                              f32_4 %124 = OpLoad vs_TEXCOORD2 
					                              f32_2 %125 = OpVectorShuffle %124 %124 0 1 
					                              f32_2 %126 = OpExtInst %1 4 %125 
					                              f32_2 %127 = OpFNegate %126 
					                              f32_2 %128 = OpFAdd %122 %127 
					                                             OpStore %112 %128 
					                              f32_2 %129 = OpLoad %112 
					                              f32_4 %130 = OpLoad vs_TEXCOORD2 
					                              f32_2 %131 = OpVectorShuffle %130 %130 2 3 
					                              f32_2 %132 = OpFMul %129 %131 
					                                             OpStore %112 %132 
					                              f32_2 %133 = OpLoad %112 
					                              f32_2 %134 = OpCompositeConstruct %44 %44 
					                              f32_2 %135 = OpCompositeConstruct %45 %45 
					                              f32_2 %136 = OpExtInst %1 43 %133 %134 %135 
					                                             OpStore %112 %136 
					                       Private f32* %137 = OpAccessChain %112 %38 
					                                f32 %138 = OpLoad %137 
					                       Private f32* %139 = OpAccessChain %112 %33 
					                                f32 %140 = OpLoad %139 
					                                f32 %141 = OpFMul %138 %140 
					                                             OpStore %29 %141 
					                              f32_4 %142 = OpLoad %48 
					                                f32 %143 = OpLoad %29 
					                              f32_4 %144 = OpCompositeConstruct %143 %143 %143 %143 
					                              f32_4 %145 = OpFMul %142 %144 
					                                             OpStore %48 %145 
					                              f32_4 %147 = OpLoad %48 
					                              f32_4 %148 = OpLoad vs_TEXCOORD3 
					                              f32_4 %149 = OpVectorShuffle %148 %148 2 2 2 2 
					                              f32_4 %150 = OpFMul %147 %149 
					                                             OpStore %146 %150 
					                              f32_4 %153 = OpLoad %146 
					                                             OpStore %152 %153 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[12];
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_11[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_18[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _UnderlayOffsetX;
					uniform 	float _UnderlayOffsetY;
					uniform 	float _UnderlayDilate;
					uniform 	float _UnderlaySoftness;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _ScaleRatioC;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _UnderlayColor;
					uniform 	vec4 _ClipRect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 642
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %130 %195 %306 %420 %458 %464 %466 %538 %540 %634 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpMemberDecorate %22 23 Offset 22 
					                                                      OpMemberDecorate %22 24 Offset 22 
					                                                      OpMemberDecorate %22 25 Offset 22 
					                                                      OpMemberDecorate %22 26 Offset 22 
					                                                      OpMemberDecorate %22 27 Offset 22 
					                                                      OpMemberDecorate %22 28 Offset 22 
					                                                      OpMemberDecorate %22 29 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 Location 122 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %170 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %401 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %403 RelaxedPrecision 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %415 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate vs_TEXCOORD0 Location 458 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 464 
					                                                      OpDecorate %466 Location 466 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 538 
					                                                      OpDecorate vs_TEXCOORD3 Location 540 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 Location 634 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 19 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 20 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                               Output f32_4* %122 = OpVariable Output 
					                                         i32 %123 = OpConstant 6 
					                                         u32 %124 = OpConstant 3 
					                                             %127 = OpTypePointer Output %6 
					                              Private f32_4* %129 = OpVariable Private 
					                                Input f32_4* %130 = OpVariable Input 
					                                         f32 %135 = OpConstant 3,674022E-40 
					                                             %136 = OpTypePointer Private %6 
					                              Private f32_4* %138 = OpVariable Private 
					                                             %143 = OpTypePointer Private %15 
					                              Private f32_3* %144 = OpVariable Private 
					                              Private f32_4* %153 = OpVariable Private 
					                              Private f32_4* %162 = OpVariable Private 
					                                         i32 %163 = OpConstant 9 
					                                Private f32* %179 = OpVariable Private 
					                                             %194 = OpTypePointer Input %15 
					                                Input f32_3* %195 = OpVariable Input 
					                                         u32 %201 = OpConstant 0 
					                                         u32 %214 = OpConstant 2 
					                                         i32 %238 = OpConstant 4 
					                                         i32 %260 = OpConstant 27 
					                                         i32 %263 = OpConstant 28 
					                                Private f32* %277 = OpVariable Private 
					                                         i32 %283 = OpConstant 22 
					                                         i32 %286 = OpConstant 23 
					                                         f32 %290 = OpConstant 3,674022E-40 
					                                       f32_2 %291 = OpConstantComposite %290 %290 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_2* %306 = OpVariable Input 
					                                             %307 = OpTypePointer Input %6 
					                                         i32 %311 = OpConstant 26 
					                                         f32 %321 = OpConstant 3,674022E-40 
					                                Private f32* %324 = OpVariable Private 
					                                         i32 %325 = OpConstant 29 
					                                             %346 = OpTypeBool 
					                                             %347 = OpTypePointer Private %346 
					                               Private bool* %348 = OpVariable Private 
					                                         f32 %351 = OpConstant 3,674022E-40 
					                                             %354 = OpTypePointer Function %6 
					                                         i32 %363 = OpConstant 8 
					                                         i32 %366 = OpConstant 17 
					                                         i32 %378 = OpConstant 10 
					                              Private f32_2* %388 = OpVariable Private 
					                              Private f32_4* %400 = OpVariable Private 
					                               Output f32_4* %420 = OpVariable Output 
					                                         i32 %422 = OpConstant 21 
					                                         f32 %425 = OpConstant 3,674022E-40 
					                                       f32_4 %426 = OpConstantComposite %425 %425 %425 %425 
					                                         f32 %429 = OpConstant 3,674022E-40 
					                                       f32_4 %430 = OpConstantComposite %429 %429 %429 %429 
					                                         f32 %438 = OpConstant 3,674022E-40 
					                                       f32_2 %439 = OpConstantComposite %438 %438 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %466 = OpVariable Input 
					                               Private bool* %470 = OpVariable Private 
					                              Private f32_3* %477 = OpVariable Private 
					                                         i32 %478 = OpConstant 15 
					                                         i32 %482 = OpConstant 16 
					                                         i32 %499 = OpConstant 7 
					                                         f32 %513 = OpConstant 3,674022E-40 
					                                         f32 %522 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %545 = OpConstant 14 
					                                         i32 %548 = OpConstant 13 
					                                         i32 %551 = OpConstant 11 
					                                         i32 %554 = OpConstant 12 
					                                         i32 %558 = OpConstant 18 
					                                         i32 %585 = OpConstant 24 
					                                         i32 %588 = OpConstant 25 
					                                             %633 = OpTypePointer Output %7 
					                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %355 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
					                                         f32 %126 = OpLoad %125 
					                                 Output f32* %128 = OpAccessChain %122 %124 
					                                                      OpStore %128 %126 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_4 %133 = OpLoad %129 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %129 %134 
					                                Private f32* %137 = OpAccessChain %129 %124 
					                                                      OpStore %137 %135 
					                                       f32_4 %139 = OpLoad %129 
					                              Uniform f32_4* %140 = OpAccessChain %24 %123 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_4 %142 = OpFMul %139 %141 
					                                                      OpStore %138 %142 
					                                       f32_4 %145 = OpLoad %138 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 3 3 3 
					                                       f32_4 %147 = OpLoad %138 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
					                                       f32_3 %149 = OpFMul %146 %148 
					                                                      OpStore %144 %149 
					                                       f32_3 %150 = OpLoad %144 
					                                       f32_4 %151 = OpLoad %122 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %122 %152 
					                                       f32_3 %154 = OpLoad %144 
					                                       f32_3 %155 = OpFNegate %154 
					                                       f32_4 %156 = OpLoad %153 
					                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
					                                                      OpStore %153 %157 
					                                Private f32* %158 = OpAccessChain %138 %124 
					                                         f32 %159 = OpLoad %158 
					                                         f32 %160 = OpFNegate %159 
					                                Private f32* %161 = OpAccessChain %153 %124 
					                                                      OpStore %161 %160 
					                              Uniform f32_4* %164 = OpAccessChain %24 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 3 3 3 
					                              Uniform f32_4* %167 = OpAccessChain %24 %163 
					                                       f32_4 %168 = OpLoad %167 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFMul %166 %169 
					                                       f32_4 %171 = OpLoad %162 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
					                                                      OpStore %162 %172 
					                                Uniform f32* %173 = OpAccessChain %24 %163 %124 
					                                         f32 %174 = OpLoad %173 
					                                Private f32* %175 = OpAccessChain %162 %124 
					                                                      OpStore %175 %174 
					                                       f32_4 %176 = OpLoad %153 
					                                       f32_4 %177 = OpLoad %162 
					                                       f32_4 %178 = OpFAdd %176 %177 
					                                                      OpStore %153 %178 
					                                       f32_4 %180 = OpLoad %36 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_4 %182 = OpLoad %36 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
					                                         f32 %184 = OpDot %181 %183 
					                                                      OpStore %179 %184 
					                                         f32 %185 = OpLoad %179 
					                                         f32 %186 = OpExtInst %1 32 %185 
					                                                      OpStore %179 %186 
					                                         f32 %187 = OpLoad %179 
					                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
					                                       f32_4 %189 = OpLoad %36 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %188 %190 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
					                                                      OpStore %36 %193 
					                                       f32_3 %196 = OpLoad %195 
					                              Uniform f32_4* %197 = OpAccessChain %24 %62 %45 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                         f32 %200 = OpDot %196 %199 
					                                Private f32* %202 = OpAccessChain %60 %201 
					                                                      OpStore %202 %200 
					                                       f32_3 %203 = OpLoad %195 
					                              Uniform f32_4* %204 = OpAccessChain %24 %62 %40 
					                                       f32_4 %205 = OpLoad %204 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %203 %206 
					                                Private f32* %208 = OpAccessChain %60 %114 
					                                                      OpStore %208 %207 
					                                       f32_3 %209 = OpLoad %195 
					                              Uniform f32_4* %210 = OpAccessChain %24 %62 %39 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                         f32 %213 = OpDot %209 %212 
					                                Private f32* %215 = OpAccessChain %60 %214 
					                                                      OpStore %215 %213 
					                                       f32_4 %216 = OpLoad %60 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
					                                       f32_4 %218 = OpLoad %60 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                         f32 %220 = OpDot %217 %219 
					                                                      OpStore %179 %220 
					                                         f32 %221 = OpLoad %179 
					                                         f32 %222 = OpExtInst %1 32 %221 
					                                                      OpStore %179 %222 
					                                         f32 %223 = OpLoad %179 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                                       f32_4 %225 = OpLoad %60 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %60 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
					                                                      OpStore %60 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
					                                         f32 %234 = OpDot %231 %233 
					                                                      OpStore %179 %234 
					                              Uniform f32_4* %235 = OpAccessChain %24 %40 
					                                       f32_4 %236 = OpLoad %235 
					                                       f32_2 %237 = OpVectorShuffle %236 %236 1 1 
					                              Uniform f32_4* %239 = OpAccessChain %24 %238 %40 
					                                       f32_4 %240 = OpLoad %239 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                       f32_2 %242 = OpFMul %237 %241 
					                                       f32_4 %243 = OpLoad %36 
					                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 2 3 
					                                                      OpStore %36 %244 
					                              Uniform f32_4* %245 = OpAccessChain %24 %238 %45 
					                                       f32_4 %246 = OpLoad %245 
					                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
					                              Uniform f32_4* %248 = OpAccessChain %24 %40 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_2 %250 = OpVectorShuffle %249 %249 0 0 
					                                       f32_2 %251 = OpFMul %247 %250 
					                                       f32_4 %252 = OpLoad %36 
					                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
					                                       f32_2 %254 = OpFAdd %251 %253 
					                                       f32_4 %255 = OpLoad %36 
					                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
					                                                      OpStore %36 %256 
					                                       f32_4 %257 = OpLoad %36 
					                                       f32_2 %258 = OpVectorShuffle %257 %257 0 1 
					                                       f32_2 %259 = OpExtInst %1 4 %258 
					                                Uniform f32* %261 = OpAccessChain %24 %260 
					                                         f32 %262 = OpLoad %261 
					                                Uniform f32* %264 = OpAccessChain %24 %263 
					                                         f32 %265 = OpLoad %264 
					                                       f32_2 %266 = OpCompositeConstruct %262 %265 
					                                       f32_2 %267 = OpFMul %259 %266 
					                                       f32_4 %268 = OpLoad %36 
					                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 2 3 
					                                                      OpStore %36 %269 
					                                       f32_4 %270 = OpLoad %60 
					                                       f32_2 %271 = OpVectorShuffle %270 %270 3 3 
					                                       f32_4 %272 = OpLoad %36 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFDiv %271 %273 
					                                       f32_4 %275 = OpLoad %36 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %36 %276 
					                                       f32_4 %278 = OpLoad %36 
					                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
					                                       f32_4 %280 = OpLoad %36 
					                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
					                                         f32 %282 = OpDot %279 %281 
					                                                      OpStore %277 %282 
					                                Uniform f32* %284 = OpAccessChain %24 %283 
					                                         f32 %285 = OpLoad %284 
					                                Uniform f32* %287 = OpAccessChain %24 %286 
					                                         f32 %288 = OpLoad %287 
					                                       f32_2 %289 = OpCompositeConstruct %285 %288 
					                                       f32_2 %292 = OpFMul %289 %291 
					                                       f32_4 %293 = OpLoad %36 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_2 %295 = OpFAdd %292 %294 
					                                       f32_4 %296 = OpLoad %36 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
					                                                      OpStore %36 %297 
					                                       f32_4 %298 = OpLoad %36 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                       f32_2 %300 = OpFDiv %291 %299 
					                                       f32_4 %301 = OpLoad %36 
					                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
					                                                      OpStore %36 %302 
					                                         f32 %303 = OpLoad %277 
					                                         f32 %304 = OpExtInst %1 32 %303 
					                                                      OpStore %277 %304 
					                                  Input f32* %308 = OpAccessChain %306 %114 
					                                         f32 %309 = OpLoad %308 
					                                         f32 %310 = OpExtInst %1 4 %309 
					                                Uniform f32* %312 = OpAccessChain %24 %311 
					                                         f32 %313 = OpLoad %312 
					                                         f32 %314 = OpFMul %310 %313 
					                                Private f32* %315 = OpAccessChain %60 %201 
					                                                      OpStore %315 %314 
					                                         f32 %316 = OpLoad %277 
					                                Private f32* %317 = OpAccessChain %60 %201 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFMul %316 %318 
					                                                      OpStore %277 %319 
					                                         f32 %320 = OpLoad %277 
					                                         f32 %322 = OpFMul %320 %321 
					                                Private f32* %323 = OpAccessChain %60 %201 
					                                                      OpStore %323 %322 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                         f32 %328 = OpFNegate %327 
					                                         f32 %329 = OpFAdd %328 %135 
					                                                      OpStore %324 %329 
					                                         f32 %330 = OpLoad %324 
					                                Private f32* %331 = OpAccessChain %60 %201 
					                                         f32 %332 = OpLoad %331 
					                                         f32 %333 = OpExtInst %1 4 %332 
					                                         f32 %334 = OpFMul %330 %333 
					                                                      OpStore %324 %334 
					                                         f32 %335 = OpLoad %277 
					                                         f32 %336 = OpFMul %335 %321 
					                                         f32 %337 = OpLoad %324 
					                                         f32 %338 = OpFNegate %337 
					                                         f32 %339 = OpFAdd %336 %338 
					                                                      OpStore %277 %339 
					                                         f32 %340 = OpLoad %179 
					                                         f32 %341 = OpExtInst %1 4 %340 
					                                         f32 %342 = OpLoad %277 
					                                         f32 %343 = OpFMul %341 %342 
					                                         f32 %344 = OpLoad %324 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %179 %345 
					                                Uniform f32* %349 = OpAccessChain %24 %238 %62 %124 
					                                         f32 %350 = OpLoad %349 
					                                        bool %352 = OpFOrdEqual %350 %351 
					                                                      OpStore %348 %352 
					                                        bool %353 = OpLoad %348 
					                                                      OpSelectionMerge %357 None 
					                                                      OpBranchConditional %353 %356 %359 
					                                             %356 = OpLabel 
					                                         f32 %358 = OpLoad %179 
					                                                      OpStore %355 %358 
					                                                      OpBranch %357 
					                                             %359 = OpLabel 
					                                Private f32* %360 = OpAccessChain %60 %201 
					                                         f32 %361 = OpLoad %360 
					                                                      OpStore %355 %361 
					                                                      OpBranch %357 
					                                             %357 = OpLabel 
					                                         f32 %362 = OpLoad %355 
					                                                      OpStore %179 %362 
					                                Uniform f32* %364 = OpAccessChain %24 %363 
					                                         f32 %365 = OpLoad %364 
					                                Uniform f32* %367 = OpAccessChain %24 %366 
					                                         f32 %368 = OpLoad %367 
					                                         f32 %369 = OpFMul %365 %368 
					                                                      OpStore %277 %369 
					                                         f32 %370 = OpLoad %277 
					                                         f32 %371 = OpLoad %179 
					                                         f32 %372 = OpFMul %370 %371 
					                                         f32 %373 = OpFAdd %372 %135 
					                                                      OpStore %277 %373 
					                                         f32 %374 = OpLoad %179 
					                                         f32 %375 = OpLoad %277 
					                                         f32 %376 = OpFDiv %374 %375 
					                                Private f32* %377 = OpAccessChain %60 %201 
					                                                      OpStore %377 %376 
					                                Uniform f32* %379 = OpAccessChain %24 %378 
					                                         f32 %380 = OpLoad %379 
					                                Uniform f32* %381 = OpAccessChain %24 %366 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpFMul %380 %382 
					                                                      OpStore %277 %383 
					                                Private f32* %384 = OpAccessChain %60 %201 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpLoad %277 
					                                         f32 %387 = OpFMul %385 %386 
					                                                      OpStore %277 %387 
					                                         f32 %389 = OpLoad %277 
					                                         f32 %390 = OpExtInst %1 37 %389 %135 
					                                Private f32* %391 = OpAccessChain %388 %201 
					                                                      OpStore %391 %390 
					                                Private f32* %392 = OpAccessChain %388 %201 
					                                         f32 %393 = OpLoad %392 
					                                         f32 %394 = OpExtInst %1 31 %393 
					                                Private f32* %395 = OpAccessChain %388 %201 
					                                                      OpStore %395 %394 
					                                       f32_4 %396 = OpLoad %153 
					                                       f32_2 %397 = OpLoad %388 
					                                       f32_4 %398 = OpVectorShuffle %397 %397 0 0 0 0 
					                                       f32_4 %399 = OpFMul %396 %398 
					                                                      OpStore %153 %399 
					                                       f32_4 %401 = OpLoad %138 
					                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
					                                       f32_4 %403 = OpLoad %138 
					                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
					                                       f32_3 %405 = OpFMul %402 %404 
					                                       f32_4 %406 = OpLoad %153 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFAdd %405 %407 
					                                       f32_4 %409 = OpLoad %400 
					                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
					                                                      OpStore %400 %410 
					                                Private f32* %411 = OpAccessChain %129 %124 
					                                         f32 %412 = OpLoad %411 
					                                Uniform f32* %413 = OpAccessChain %24 %123 %124 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %412 %414 
					                                Private f32* %416 = OpAccessChain %153 %124 
					                                         f32 %417 = OpLoad %416 
					                                         f32 %418 = OpFAdd %415 %417 
					                                Private f32* %419 = OpAccessChain %400 %124 
					                                                      OpStore %419 %418 
					                                       f32_4 %421 = OpLoad %400 
					                                                      OpStore %420 %421 
					                              Uniform f32_4* %423 = OpAccessChain %24 %422 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_4 %427 = OpExtInst %1 40 %424 %426 
					                                                      OpStore %86 %427 
					                                       f32_4 %428 = OpLoad %86 
					                                       f32_4 %431 = OpExtInst %1 37 %428 %430 
					                                                      OpStore %86 %431 
					                                       f32_2 %432 = OpLoad %9 
					                                       f32_4 %433 = OpLoad %86 
					                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
					                                       f32_2 %435 = OpFNegate %434 
					                                       f32_2 %436 = OpFAdd %432 %435 
					                                                      OpStore %388 %436 
					                                       f32_2 %437 = OpLoad %9 
					                                       f32_2 %440 = OpFMul %437 %439 
					                                       f32_4 %441 = OpLoad %86 
					                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
					                                       f32_2 %443 = OpFNegate %442 
					                                       f32_2 %444 = OpFAdd %440 %443 
					                                                      OpStore %9 %444 
					                                       f32_4 %445 = OpLoad %86 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFNegate %446 
					                                       f32_2 %448 = OpLoad %9 
					                                       f32_2 %449 = OpFAdd %447 %448 
					                                       f32_4 %450 = OpLoad %36 
					                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
					                                                      OpStore %36 %451 
					                                       f32_4 %452 = OpLoad %86 
					                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
					                                       f32_2 %454 = OpFNegate %453 
					                                       f32_4 %455 = OpLoad %86 
					                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
					                                       f32_2 %457 = OpFAdd %454 %456 
					                                                      OpStore %9 %457 
					                                       f32_2 %459 = OpLoad %388 
					                                       f32_2 %460 = OpLoad %9 
					                                       f32_2 %461 = OpFDiv %459 %460 
					                                       f32_4 %462 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %463 
					                                       f32_4 %465 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %465 
					                                       f32_2 %467 = OpLoad %466 
					                                       f32_4 %468 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %469 
					                                  Input f32* %471 = OpAccessChain %306 %114 
					                                         f32 %472 = OpLoad %471 
					                                        bool %473 = OpFOrdGreaterThanEqual %351 %472 
					                                                      OpStore %470 %473 
					                                        bool %474 = OpLoad %470 
					                                         f32 %475 = OpSelect %474 %135 %351 
					                                Private f32* %476 = OpAccessChain %9 %201 
					                                                      OpStore %476 %475 
					                                Uniform f32* %479 = OpAccessChain %24 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFNegate %480 
					                                Uniform f32* %483 = OpAccessChain %24 %482 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpFAdd %481 %484 
					                                Private f32* %486 = OpAccessChain %477 %201 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %201 
					                                         f32 %488 = OpLoad %487 
					                                Private f32* %489 = OpAccessChain %477 %201 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Uniform f32* %492 = OpAccessChain %24 %478 
					                                         f32 %493 = OpLoad %492 
					                                         f32 %494 = OpFAdd %491 %493 
					                                Private f32* %495 = OpAccessChain %9 %201 
					                                                      OpStore %495 %494 
					                                Private f32* %496 = OpAccessChain %9 %201 
					                                         f32 %497 = OpLoad %496 
					                                         f32 %498 = OpFMul %497 %290 
					                                Uniform f32* %500 = OpAccessChain %24 %499 
					                                         f32 %501 = OpLoad %500 
					                                         f32 %502 = OpFAdd %498 %501 
					                                Private f32* %503 = OpAccessChain %9 %201 
					                                                      OpStore %503 %502 
					                                Private f32* %504 = OpAccessChain %9 %201 
					                                         f32 %505 = OpLoad %504 
					                                Uniform f32* %506 = OpAccessChain %24 %366 
					                                         f32 %507 = OpLoad %506 
					                                         f32 %508 = OpFMul %505 %507 
					                                Private f32* %509 = OpAccessChain %9 %201 
					                                                      OpStore %509 %508 
					                                Private f32* %510 = OpAccessChain %9 %201 
					                                         f32 %511 = OpLoad %510 
					                                         f32 %512 = OpFNegate %511 
					                                         f32 %514 = OpFMul %512 %513 
					                                         f32 %515 = OpFAdd %514 %513 
					                                Private f32* %516 = OpAccessChain %9 %201 
					                                                      OpStore %516 %515 
					                                Private f32* %517 = OpAccessChain %9 %201 
					                                         f32 %518 = OpLoad %517 
					                                Private f32* %519 = OpAccessChain %60 %201 
					                                         f32 %520 = OpLoad %519 
					                                         f32 %521 = OpFMul %518 %520 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %60 %124 
					                                                      OpStore %524 %523 
					                                         f32 %525 = OpLoad %277 
					                                         f32 %526 = OpFNegate %525 
					                                         f32 %527 = OpFMul %526 %513 
					                                Private f32* %528 = OpAccessChain %60 %124 
					                                         f32 %529 = OpLoad %528 
					                                         f32 %530 = OpFAdd %527 %529 
					                                Private f32* %531 = OpAccessChain %60 %114 
					                                                      OpStore %531 %530 
					                                         f32 %532 = OpLoad %277 
					                                         f32 %533 = OpFMul %532 %513 
					                                Private f32* %534 = OpAccessChain %60 %124 
					                                         f32 %535 = OpLoad %534 
					                                         f32 %536 = OpFAdd %533 %535 
					                                Private f32* %537 = OpAccessChain %60 %214 
					                                                      OpStore %537 %536 
					                                       f32_4 %539 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %539 
					                                  Input f32* %541 = OpAccessChain %130 %124 
					                                         f32 %542 = OpLoad %541 
					                                 Output f32* %543 = OpAccessChain vs_TEXCOORD3 %214 
					                                                      OpStore %543 %542 
					                                 Output f32* %544 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %544 %351 
					                                Uniform f32* %546 = OpAccessChain %24 %545 
					                                         f32 %547 = OpLoad %546 
					                                Uniform f32* %549 = OpAccessChain %24 %548 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %24 %551 
					                                         f32 %553 = OpLoad %552 
					                                Uniform f32* %555 = OpAccessChain %24 %554 
					                                         f32 %556 = OpLoad %555 
					                                       f32_4 %557 = OpCompositeConstruct %547 %550 %553 %556 
					                                Uniform f32* %559 = OpAccessChain %24 %558 
					                                         f32 %560 = OpLoad %559 
					                                Uniform f32* %561 = OpAccessChain %24 %558 
					                                         f32 %562 = OpLoad %561 
					                                Uniform f32* %563 = OpAccessChain %24 %558 
					                                         f32 %564 = OpLoad %563 
					                                Uniform f32* %565 = OpAccessChain %24 %558 
					                                         f32 %566 = OpLoad %565 
					                                       f32_4 %567 = OpCompositeConstruct %560 %562 %564 %566 
					                                         f32 %568 = OpCompositeExtract %567 0 
					                                         f32 %569 = OpCompositeExtract %567 1 
					                                         f32 %570 = OpCompositeExtract %567 2 
					                                         f32 %571 = OpCompositeExtract %567 3 
					                                       f32_4 %572 = OpCompositeConstruct %568 %569 %570 %571 
					                                       f32_4 %573 = OpFMul %557 %572 
					                                                      OpStore %36 %573 
					                                       f32_4 %574 = OpLoad %36 
					                                       f32_2 %575 = OpVectorShuffle %574 %574 2 3 
					                                       f32_2 %576 = OpFNegate %575 
					                                Uniform f32* %577 = OpAccessChain %24 %311 
					                                         f32 %578 = OpLoad %577 
					                                       f32_2 %579 = OpCompositeConstruct %578 %578 
					                                       f32_2 %580 = OpFMul %576 %579 
					                                       f32_3 %581 = OpLoad %477 
					                                       f32_3 %582 = OpVectorShuffle %581 %580 3 1 4 
					                                                      OpStore %477 %582 
					                                       f32_3 %583 = OpLoad %477 
					                                       f32_2 %584 = OpVectorShuffle %583 %583 0 2 
					                                Uniform f32* %586 = OpAccessChain %24 %585 
					                                         f32 %587 = OpLoad %586 
					                                Uniform f32* %589 = OpAccessChain %24 %588 
					                                         f32 %590 = OpLoad %589 
					                                       f32_2 %591 = OpCompositeConstruct %587 %590 
					                                       f32_2 %592 = OpFDiv %584 %591 
					                                       f32_3 %593 = OpLoad %477 
					                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
					                                                      OpStore %477 %594 
					                                       f32_3 %595 = OpLoad %477 
					                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
					                                       f32_2 %597 = OpLoad %466 
					                                       f32_2 %598 = OpFAdd %596 %597 
					                                       f32_4 %599 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %600 = OpVectorShuffle %599 %598 4 5 2 3 
					                                                      OpStore vs_TEXCOORD3 %600 
					                                Private f32* %601 = OpAccessChain %36 %201 
					                                         f32 %602 = OpLoad %601 
					                                         f32 %603 = OpLoad %179 
					                                         f32 %604 = OpFMul %602 %603 
					                                         f32 %605 = OpFAdd %604 %135 
					                                Private f32* %606 = OpAccessChain %477 %201 
					                                                      OpStore %606 %605 
					                                         f32 %607 = OpLoad %179 
					                                Private f32* %608 = OpAccessChain %477 %201 
					                                         f32 %609 = OpLoad %608 
					                                         f32 %610 = OpFDiv %607 %609 
					                                Private f32* %611 = OpAccessChain %60 %201 
					                                                      OpStore %611 %610 
					                                Private f32* %612 = OpAccessChain %36 %114 
					                                         f32 %613 = OpLoad %612 
					                                Private f32* %614 = OpAccessChain %60 %201 
					                                         f32 %615 = OpLoad %614 
					                                         f32 %616 = OpFMul %613 %615 
					                                Private f32* %617 = OpAccessChain %477 %201 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %9 %201 
					                                         f32 %619 = OpLoad %618 
					                                Private f32* %620 = OpAccessChain %60 %201 
					                                         f32 %621 = OpLoad %620 
					                                         f32 %622 = OpFMul %619 %621 
					                                         f32 %623 = OpFAdd %622 %522 
					                                Private f32* %624 = OpAccessChain %9 %201 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %477 %201 
					                                         f32 %626 = OpLoad %625 
					                                         f32 %627 = OpFNegate %626 
					                                         f32 %628 = OpFMul %627 %513 
					                                Private f32* %629 = OpAccessChain %9 %201 
					                                         f32 %630 = OpLoad %629 
					                                         f32 %631 = OpFAdd %628 %630 
					                                Private f32* %632 = OpAccessChain %60 %114 
					                                                      OpStore %632 %631 
					                                       f32_4 %635 = OpLoad %60 
					                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
					                                                      OpStore vs_TEXCOORD4 %636 
					                                 Output f32* %637 = OpAccessChain %118 %45 %114 
					                                         f32 %638 = OpLoad %637 
					                                         f32 %639 = OpFNegate %638 
					                                 Output f32* %640 = OpAccessChain %118 %45 %114 
					                                                      OpStore %640 %639 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 176
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %33 %76 %78 %86 %95 %143 %173 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD3 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate %31 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 Location 33 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %51 RelaxedPrecision 
					                                             OpMemberDecorate %52 0 RelaxedPrecision 
					                                             OpMemberDecorate %52 0 Offset 52 
					                                             OpMemberDecorate %52 1 Offset 52 
					                                             OpDecorate %52 Block 
					                                             OpDecorate %54 DescriptorSet 54 
					                                             OpDecorate %54 Binding 54 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %65 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %73 RelaxedPrecision 
					                                             OpDecorate %74 RelaxedPrecision 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate %76 RelaxedPrecision 
					                                             OpDecorate %76 Location 76 
					                                             OpDecorate %77 RelaxedPrecision 
					                                             OpDecorate %78 RelaxedPrecision 
					                                             OpDecorate %78 Location 78 
					                                             OpDecorate %79 RelaxedPrecision 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 86 
					                                             OpDecorate %90 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 95 
					                                             OpDecorate %96 RelaxedPrecision 
					                                             OpDecorate %97 RelaxedPrecision 
					                                             OpDecorate %98 RelaxedPrecision 
					                                             OpDecorate %99 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %103 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %111 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %113 RelaxedPrecision 
					                                             OpDecorate %114 RelaxedPrecision 
					                                             OpDecorate %115 RelaxedPrecision 
					                                             OpDecorate %116 RelaxedPrecision 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %119 RelaxedPrecision 
					                                             OpDecorate %120 RelaxedPrecision 
					                                             OpDecorate %122 RelaxedPrecision 
					                                             OpDecorate %123 RelaxedPrecision 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %126 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %128 RelaxedPrecision 
					                                             OpDecorate %129 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 143 
					                                             OpDecorate %144 RelaxedPrecision 
					                                             OpDecorate %145 RelaxedPrecision 
					                                             OpDecorate %146 RelaxedPrecision 
					                                             OpDecorate %147 RelaxedPrecision 
					                                             OpDecorate %150 RelaxedPrecision 
					                                             OpDecorate %151 RelaxedPrecision 
					                                             OpDecorate %163 RelaxedPrecision 
					                                             OpDecorate %164 RelaxedPrecision 
					                                             OpDecorate %165 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %168 RelaxedPrecision 
					                                             OpDecorate %173 RelaxedPrecision 
					                                             OpDecorate %173 Location 173 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                                     %29 = OpTypePointer Private %19 
					                      Private f32_4* %30 = OpVariable Private 
					                                     %32 = OpTypePointer Input %22 
					               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
					                                 u32 %34 = OpConstant 0 
					                                     %35 = OpTypePointer Input %6 
					                                 u32 %39 = OpConstant 1 
					                                 f32 %47 = OpConstant 3,674022E-40 
					                                 f32 %48 = OpConstant 3,674022E-40 
					                      Private f32_4* %51 = OpVariable Private 
					                                     %52 = OpTypeStruct %19 %19 
					                                     %53 = OpTypePointer Uniform %52 
					     Uniform struct {f32_4; f32_4;}* %54 = OpVariable Uniform 
					                                     %55 = OpTypeInt 32 1 
					                                 i32 %56 = OpConstant 0 
					                                     %57 = OpTypeVector %6 3 
					                                     %58 = OpTypePointer Uniform %19 
					                                     %68 = OpTypePointer Uniform %6 
					                        Input f32_4* %76 = OpVariable Input 
					                        Input f32_4* %78 = OpVariable Input 
					                        Private f32* %82 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %91 = OpTypePointer Private %22 
					                      Private f32_2* %92 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                     Private f32_4* %113 = OpVariable Private 
					                     Private f32_2* %132 = OpVariable Private 
					                                i32 %133 = OpConstant 1 
					               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                     Private f32_4* %167 = OpVariable Private 
					                                    %172 = OpTypePointer Output %19 
					                      Output f32_4* %173 = OpVariable Output 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD3 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %31 = OpLoad %8 
					                          Input f32* %36 = OpAccessChain vs_TEXCOORD4 %34 
					                                 f32 %37 = OpLoad %36 
					                                 f32 %38 = OpFMul %31 %37 
					                          Input f32* %40 = OpAccessChain vs_TEXCOORD4 %39 
					                                 f32 %41 = OpLoad %40 
					                                 f32 %42 = OpFNegate %41 
					                                 f32 %43 = OpFAdd %38 %42 
					                        Private f32* %44 = OpAccessChain %30 %34 
					                                             OpStore %44 %43 
					                        Private f32* %45 = OpAccessChain %30 %34 
					                                 f32 %46 = OpLoad %45 
					                                 f32 %49 = OpExtInst %1 43 %46 %47 %48 
					                        Private f32* %50 = OpAccessChain %30 %34 
					                                             OpStore %50 %49 
					                      Uniform f32_4* %59 = OpAccessChain %54 %56 
					                               f32_4 %60 = OpLoad %59 
					                               f32_3 %61 = OpVectorShuffle %60 %60 3 3 3 
					                      Uniform f32_4* %62 = OpAccessChain %54 %56 
					                               f32_4 %63 = OpLoad %62 
					                               f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
					                               f32_3 %65 = OpFMul %61 %64 
					                               f32_4 %66 = OpLoad %51 
					                               f32_4 %67 = OpVectorShuffle %66 %65 4 5 6 3 
					                                             OpStore %51 %67 
					                        Uniform f32* %69 = OpAccessChain %54 %56 %27 
					                                 f32 %70 = OpLoad %69 
					                        Private f32* %71 = OpAccessChain %51 %27 
					                                             OpStore %71 %70 
					                               f32_4 %72 = OpLoad %30 
					                               f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                               f32_4 %74 = OpLoad %51 
					                               f32_4 %75 = OpFMul %73 %74 
					                                             OpStore %51 %75 
					                               f32_4 %77 = OpLoad %76 
					                               f32_4 %79 = OpLoad %78 
					                               f32_4 %80 = OpFNegate %79 
					                               f32_4 %81 = OpFAdd %77 %80 
					                                             OpStore %30 %81 
					                 read_only Texture2D %83 = OpLoad %11 
					                             sampler %84 = OpLoad %15 
					          read_only Texture2DSampled %85 = OpSampledImage %83 %84 
					                               f32_4 %87 = OpLoad vs_TEXCOORD0 
					                               f32_2 %88 = OpVectorShuffle %87 %87 0 1 
					                               f32_4 %89 = OpImageSampleImplicitLod %85 %88 
					                                 f32 %90 = OpCompositeExtract %89 3 
					                                             OpStore %82 %90 
					                                 f32 %93 = OpLoad %82 
					                               f32_2 %94 = OpCompositeConstruct %93 %93 
					                               f32_4 %96 = OpLoad vs_TEXCOORD1 
					                               f32_2 %97 = OpVectorShuffle %96 %96 0 0 
					                               f32_2 %98 = OpFMul %94 %97 
					                               f32_4 %99 = OpLoad vs_TEXCOORD1 
					                              f32_2 %100 = OpVectorShuffle %99 %99 2 1 
					                              f32_2 %101 = OpFNegate %100 
					                              f32_2 %102 = OpFAdd %98 %101 
					                                             OpStore %92 %102 
					                              f32_2 %103 = OpLoad %92 
					                              f32_2 %104 = OpCompositeConstruct %47 %47 
					                              f32_2 %105 = OpCompositeConstruct %48 %48 
					                              f32_2 %106 = OpExtInst %1 43 %103 %104 %105 
					                                             OpStore %92 %106 
					                              f32_2 %107 = OpLoad %92 
					                              f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
					                              f32_4 %109 = OpLoad %30 
					                              f32_4 %110 = OpFMul %108 %109 
					                              f32_4 %111 = OpLoad %78 
					                              f32_4 %112 = OpFAdd %110 %111 
					                                             OpStore %30 %112 
					                              f32_2 %114 = OpLoad %92 
					                              f32_4 %115 = OpVectorShuffle %114 %114 1 1 1 1 
					                              f32_4 %116 = OpLoad %30 
					                              f32_4 %117 = OpFMul %115 %116 
					                                             OpStore %113 %117 
					                       Private f32* %118 = OpAccessChain %30 %27 
					                                f32 %119 = OpLoad %118 
					                                f32 %120 = OpFNegate %119 
					                       Private f32* %121 = OpAccessChain %92 %39 
					                                f32 %122 = OpLoad %121 
					                                f32 %123 = OpFMul %120 %122 
					                                f32 %124 = OpFAdd %123 %48 
					                       Private f32* %125 = OpAccessChain %30 %34 
					                                             OpStore %125 %124 
					                              f32_4 %126 = OpLoad %51 
					                              f32_4 %127 = OpLoad %30 
					                              f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
					                              f32_4 %129 = OpFMul %126 %128 
					                              f32_4 %130 = OpLoad %113 
					                              f32_4 %131 = OpFAdd %129 %130 
					                                             OpStore %51 %131 
					                     Uniform f32_4* %134 = OpAccessChain %54 %133 
					                              f32_4 %135 = OpLoad %134 
					                              f32_2 %136 = OpVectorShuffle %135 %135 0 1 
					                              f32_2 %137 = OpFNegate %136 
					                     Uniform f32_4* %138 = OpAccessChain %54 %133 
					                              f32_4 %139 = OpLoad %138 
					                              f32_2 %140 = OpVectorShuffle %139 %139 2 3 
					                              f32_2 %141 = OpFAdd %137 %140 
					                                             OpStore %132 %141 
					                              f32_2 %142 = OpLoad %132 
					                              f32_4 %144 = OpLoad vs_TEXCOORD2 
					                              f32_2 %145 = OpVectorShuffle %144 %144 0 1 
					                              f32_2 %146 = OpExtInst %1 4 %145 
					                              f32_2 %147 = OpFNegate %146 
					                              f32_2 %148 = OpFAdd %142 %147 
					                                             OpStore %132 %148 
					                              f32_2 %149 = OpLoad %132 
					                              f32_4 %150 = OpLoad vs_TEXCOORD2 
					                              f32_2 %151 = OpVectorShuffle %150 %150 2 3 
					                              f32_2 %152 = OpFMul %149 %151 
					                                             OpStore %132 %152 
					                              f32_2 %153 = OpLoad %132 
					                              f32_2 %154 = OpCompositeConstruct %47 %47 
					                              f32_2 %155 = OpCompositeConstruct %48 %48 
					                              f32_2 %156 = OpExtInst %1 43 %153 %154 %155 
					                                             OpStore %132 %156 
					                       Private f32* %157 = OpAccessChain %132 %39 
					                                f32 %158 = OpLoad %157 
					                       Private f32* %159 = OpAccessChain %132 %34 
					                                f32 %160 = OpLoad %159 
					                                f32 %161 = OpFMul %158 %160 
					                       Private f32* %162 = OpAccessChain %30 %34 
					                                             OpStore %162 %161 
					                              f32_4 %163 = OpLoad %51 
					                              f32_4 %164 = OpLoad %30 
					                              f32_4 %165 = OpVectorShuffle %164 %164 0 0 0 0 
					                              f32_4 %166 = OpFMul %163 %165 
					                                             OpStore %51 %166 
					                              f32_4 %168 = OpLoad %51 
					                              f32_4 %169 = OpLoad vs_TEXCOORD3 
					                              f32_4 %170 = OpVectorShuffle %169 %169 2 2 2 2 
					                              f32_4 %171 = OpFMul %168 %170 
					                                             OpStore %167 %171 
					                              f32_4 %174 = OpLoad %167 
					                                             OpStore %173 %174 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ClipRect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					void main()
					{
					    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat1 = vec4(u_xlat2) * vs_COLOR0;
					    u_xlat2 = u_xlat1.w * u_xlat0.x + -0.00100000005;
					    u_xlat1 = u_xlat0.xxxx * u_xlat1;
					    SV_Target0 = u_xlat1;
					    u_xlatb0 = u_xlat2<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 517
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %123 %136 %155 %266 %390 %430 %437 %439 %509 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %136 Location 136 
					                                                      OpDecorate %137 RelaxedPrecision 
					                                                      OpDecorate %155 Location 155 
					                                                      OpDecorate %266 Location 266 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %363 RelaxedPrecision 
					                                                      OpDecorate %364 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %375 RelaxedPrecision 
					                                                      OpDecorate %377 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %390 Location 390 
					                                                      OpDecorate vs_TEXCOORD0 Location 430 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 437 
					                                                      OpDecorate %439 Location 439 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 509 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 14 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 15 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                              Private f32_4* %122 = OpVariable Private 
					                                Input f32_4* %123 = OpVariable Input 
					                                         i32 %125 = OpConstant 6 
					                               Output f32_4* %136 = OpVariable Output 
					                                             %138 = OpTypePointer Private %6 
					                                Private f32* %139 = OpVariable Private 
					                                             %154 = OpTypePointer Input %15 
					                                Input f32_3* %155 = OpVariable Input 
					                                         u32 %161 = OpConstant 0 
					                                         u32 %174 = OpConstant 2 
					                                         i32 %198 = OpConstant 4 
					                                         i32 %220 = OpConstant 20 
					                                         i32 %223 = OpConstant 21 
					                                Private f32* %237 = OpVariable Private 
					                                         i32 %243 = OpConstant 17 
					                                         i32 %246 = OpConstant 18 
					                                         f32 %250 = OpConstant 3,674022E-40 
					                                       f32_2 %251 = OpConstantComposite %250 %250 
					                                             %265 = OpTypePointer Input %7 
					                                Input f32_2* %266 = OpVariable Input 
					                                             %267 = OpTypePointer Input %6 
					                                         i32 %271 = OpConstant 19 
					                                         f32 %281 = OpConstant 3,674022E-40 
					                                Private f32* %284 = OpVariable Private 
					                                         i32 %285 = OpConstant 22 
					                                         f32 %289 = OpConstant 3,674022E-40 
					                                             %307 = OpTypeBool 
					                                             %308 = OpTypePointer Private %307 
					                               Private bool* %309 = OpVariable Private 
					                                         u32 %310 = OpConstant 3 
					                                         f32 %313 = OpConstant 3,674022E-40 
					                                             %316 = OpTypePointer Function %6 
					                                         i32 %325 = OpConstant 8 
					                                         i32 %328 = OpConstant 13 
					                                         i32 %340 = OpConstant 10 
					                              Private f32_4* %354 = OpVariable Private 
					                                         i32 %357 = OpConstant 9 
					                               Output f32_4* %390 = OpVariable Output 
					                                         i32 %392 = OpConstant 16 
					                                         f32 %395 = OpConstant 3,674022E-40 
					                                       f32_4 %396 = OpConstantComposite %395 %395 %395 %395 
					                                         f32 %399 = OpConstant 3,674022E-40 
					                                       f32_4 %400 = OpConstantComposite %399 %399 %399 %399 
					                                         f32 %410 = OpConstant 3,674022E-40 
					                                       f32_2 %411 = OpConstantComposite %410 %410 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %439 = OpVariable Input 
					                               Private bool* %443 = OpVariable Private 
					                                Private f32* %450 = OpVariable Private 
					                                         i32 %451 = OpConstant 11 
					                                         i32 %455 = OpConstant 12 
					                                         i32 %470 = OpConstant 7 
					                                         f32 %484 = OpConstant 3,674022E-40 
					                                         f32 %493 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                             %511 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %317 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                       f32_4 %124 = OpLoad %123 
					                              Uniform f32_4* %126 = OpAccessChain %24 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpFMul %124 %127 
					                                                      OpStore %122 %128 
					                                       f32_4 %129 = OpLoad %122 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 3 3 3 
					                                       f32_4 %131 = OpLoad %122 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFMul %130 %132 
					                                       f32_4 %134 = OpLoad %122 
					                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
					                                                      OpStore %122 %135 
					                                       f32_4 %137 = OpLoad %122 
					                                                      OpStore %136 %137 
					                                       f32_4 %140 = OpLoad %36 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_4 %142 = OpLoad %36 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %141 %143 
					                                                      OpStore %139 %144 
					                                         f32 %145 = OpLoad %139 
					                                         f32 %146 = OpExtInst %1 32 %145 
					                                                      OpStore %139 %146 
					                                         f32 %147 = OpLoad %139 
					                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
					                                       f32_4 %149 = OpLoad %36 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_3 %151 = OpFMul %148 %150 
					                                       f32_4 %152 = OpLoad %36 
					                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
					                                                      OpStore %36 %153 
					                                       f32_3 %156 = OpLoad %155 
					                              Uniform f32_4* %157 = OpAccessChain %24 %62 %45 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                         f32 %160 = OpDot %156 %159 
					                                Private f32* %162 = OpAccessChain %60 %161 
					                                                      OpStore %162 %160 
					                                       f32_3 %163 = OpLoad %155 
					                              Uniform f32_4* %164 = OpAccessChain %24 %62 %40 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                         f32 %167 = OpDot %163 %166 
					                                Private f32* %168 = OpAccessChain %60 %114 
					                                                      OpStore %168 %167 
					                                       f32_3 %169 = OpLoad %155 
					                              Uniform f32_4* %170 = OpAccessChain %24 %62 %39 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %175 = OpAccessChain %60 %174 
					                                                      OpStore %175 %173 
					                                       f32_4 %176 = OpLoad %60 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_4 %178 = OpLoad %60 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %177 %179 
					                                                      OpStore %139 %180 
					                                         f32 %181 = OpLoad %139 
					                                         f32 %182 = OpExtInst %1 32 %181 
					                                                      OpStore %139 %182 
					                                         f32 %183 = OpLoad %139 
					                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
					                                       f32_4 %185 = OpLoad %60 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_3 %187 = OpFMul %184 %186 
					                                       f32_4 %188 = OpLoad %60 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
					                                                      OpStore %60 %189 
					                                       f32_4 %190 = OpLoad %60 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                         f32 %194 = OpDot %191 %193 
					                                                      OpStore %139 %194 
					                              Uniform f32_4* %195 = OpAccessChain %24 %40 
					                                       f32_4 %196 = OpLoad %195 
					                                       f32_2 %197 = OpVectorShuffle %196 %196 1 1 
					                              Uniform f32_4* %199 = OpAccessChain %24 %198 %40 
					                                       f32_4 %200 = OpLoad %199 
					                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
					                                       f32_2 %202 = OpFMul %197 %201 
					                                       f32_4 %203 = OpLoad %36 
					                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
					                                                      OpStore %36 %204 
					                              Uniform f32_4* %205 = OpAccessChain %24 %198 %45 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                              Uniform f32_4* %208 = OpAccessChain %24 %40 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_2 %210 = OpVectorShuffle %209 %209 0 0 
					                                       f32_2 %211 = OpFMul %207 %210 
					                                       f32_4 %212 = OpLoad %36 
					                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
					                                       f32_2 %214 = OpFAdd %211 %213 
					                                       f32_4 %215 = OpLoad %36 
					                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
					                                                      OpStore %36 %216 
					                                       f32_4 %217 = OpLoad %36 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
					                                       f32_2 %219 = OpExtInst %1 4 %218 
					                                Uniform f32* %221 = OpAccessChain %24 %220 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %224 = OpAccessChain %24 %223 
					                                         f32 %225 = OpLoad %224 
					                                       f32_2 %226 = OpCompositeConstruct %222 %225 
					                                       f32_2 %227 = OpFMul %219 %226 
					                                       f32_4 %228 = OpLoad %36 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
					                                                      OpStore %36 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_2 %231 = OpVectorShuffle %230 %230 3 3 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
					                                       f32_2 %234 = OpFDiv %231 %233 
					                                       f32_4 %235 = OpLoad %36 
					                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
					                                                      OpStore %36 %236 
					                                       f32_4 %238 = OpLoad %36 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_4 %240 = OpLoad %36 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                         f32 %242 = OpDot %239 %241 
					                                                      OpStore %237 %242 
					                                Uniform f32* %244 = OpAccessChain %24 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %247 = OpAccessChain %24 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_2 %249 = OpCompositeConstruct %245 %248 
					                                       f32_2 %252 = OpFMul %249 %251 
					                                       f32_4 %253 = OpLoad %36 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
					                                       f32_2 %255 = OpFAdd %252 %254 
					                                       f32_4 %256 = OpLoad %36 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
					                                                      OpStore %36 %257 
					                                       f32_4 %258 = OpLoad %36 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
					                                       f32_2 %260 = OpFDiv %251 %259 
					                                       f32_4 %261 = OpLoad %36 
					                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
					                                                      OpStore %36 %262 
					                                         f32 %263 = OpLoad %237 
					                                         f32 %264 = OpExtInst %1 32 %263 
					                                                      OpStore %237 %264 
					                                  Input f32* %268 = OpAccessChain %266 %114 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpExtInst %1 4 %269 
					                                Uniform f32* %272 = OpAccessChain %24 %271 
					                                         f32 %273 = OpLoad %272 
					                                         f32 %274 = OpFMul %270 %273 
					                                Private f32* %275 = OpAccessChain %60 %161 
					                                                      OpStore %275 %274 
					                                         f32 %276 = OpLoad %237 
					                                Private f32* %277 = OpAccessChain %60 %161 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpFMul %276 %278 
					                                                      OpStore %237 %279 
					                                         f32 %280 = OpLoad %237 
					                                         f32 %282 = OpFMul %280 %281 
					                                Private f32* %283 = OpAccessChain %60 %161 
					                                                      OpStore %283 %282 
					                                Uniform f32* %286 = OpAccessChain %24 %285 
					                                         f32 %287 = OpLoad %286 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %290 = OpFAdd %288 %289 
					                                                      OpStore %284 %290 
					                                         f32 %291 = OpLoad %284 
					                                Private f32* %292 = OpAccessChain %60 %161 
					                                         f32 %293 = OpLoad %292 
					                                         f32 %294 = OpExtInst %1 4 %293 
					                                         f32 %295 = OpFMul %291 %294 
					                                                      OpStore %284 %295 
					                                         f32 %296 = OpLoad %237 
					                                         f32 %297 = OpFMul %296 %281 
					                                         f32 %298 = OpLoad %284 
					                                         f32 %299 = OpFNegate %298 
					                                         f32 %300 = OpFAdd %297 %299 
					                                                      OpStore %237 %300 
					                                         f32 %301 = OpLoad %139 
					                                         f32 %302 = OpExtInst %1 4 %301 
					                                         f32 %303 = OpLoad %237 
					                                         f32 %304 = OpFMul %302 %303 
					                                         f32 %305 = OpLoad %284 
					                                         f32 %306 = OpFAdd %304 %305 
					                                                      OpStore %139 %306 
					                                Uniform f32* %311 = OpAccessChain %24 %198 %62 %310 
					                                         f32 %312 = OpLoad %311 
					                                        bool %314 = OpFOrdEqual %312 %313 
					                                                      OpStore %309 %314 
					                                        bool %315 = OpLoad %309 
					                                                      OpSelectionMerge %319 None 
					                                                      OpBranchConditional %315 %318 %321 
					                                             %318 = OpLabel 
					                                         f32 %320 = OpLoad %139 
					                                                      OpStore %317 %320 
					                                                      OpBranch %319 
					                                             %321 = OpLabel 
					                                Private f32* %322 = OpAccessChain %60 %161 
					                                         f32 %323 = OpLoad %322 
					                                                      OpStore %317 %323 
					                                                      OpBranch %319 
					                                             %319 = OpLabel 
					                                         f32 %324 = OpLoad %317 
					                                                      OpStore %139 %324 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                Uniform f32* %329 = OpAccessChain %24 %328 
					                                         f32 %330 = OpLoad %329 
					                                         f32 %331 = OpFMul %327 %330 
					                                                      OpStore %237 %331 
					                                         f32 %332 = OpLoad %237 
					                                         f32 %333 = OpLoad %139 
					                                         f32 %334 = OpFMul %332 %333 
					                                         f32 %335 = OpFAdd %334 %289 
					                                                      OpStore %237 %335 
					                                         f32 %336 = OpLoad %139 
					                                         f32 %337 = OpLoad %237 
					                                         f32 %338 = OpFDiv %336 %337 
					                                Private f32* %339 = OpAccessChain %60 %161 
					                                                      OpStore %339 %338 
					                                Uniform f32* %341 = OpAccessChain %24 %340 
					                                         f32 %342 = OpLoad %341 
					                                Uniform f32* %343 = OpAccessChain %24 %328 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                                      OpStore %139 %345 
					                                Private f32* %346 = OpAccessChain %60 %161 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpLoad %139 
					                                         f32 %349 = OpFMul %347 %348 
					                                                      OpStore %139 %349 
					                                         f32 %350 = OpLoad %139 
					                                         f32 %351 = OpExtInst %1 37 %350 %289 
					                                                      OpStore %237 %351 
					                                         f32 %352 = OpLoad %237 
					                                         f32 %353 = OpExtInst %1 31 %352 
					                                                      OpStore %237 %353 
					                                  Input f32* %355 = OpAccessChain %123 %310 
					                                         f32 %356 = OpLoad %355 
					                                Uniform f32* %358 = OpAccessChain %24 %357 %310 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFMul %356 %359 
					                                Private f32* %361 = OpAccessChain %354 %161 
					                                                      OpStore %361 %360 
					                              Uniform f32_4* %362 = OpAccessChain %24 %357 
					                                       f32_4 %363 = OpLoad %362 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %354 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
					                                       f32_3 %367 = OpFMul %364 %366 
					                                       f32_4 %368 = OpLoad %122 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                                       f32_3 %370 = OpFNegate %369 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %354 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %354 %373 
					                                Uniform f32* %374 = OpAccessChain %24 %357 %310 
					                                         f32 %375 = OpLoad %374 
					                                  Input f32* %376 = OpAccessChain %123 %310 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                Private f32* %379 = OpAccessChain %122 %310 
					                                         f32 %380 = OpLoad %379 
					                                         f32 %381 = OpFNegate %380 
					                                         f32 %382 = OpFAdd %378 %381 
					                                Private f32* %383 = OpAccessChain %354 %310 
					                                                      OpStore %383 %382 
					                                         f32 %384 = OpLoad %237 
					                                       f32_4 %385 = OpCompositeConstruct %384 %384 %384 %384 
					                                       f32_4 %386 = OpLoad %354 
					                                       f32_4 %387 = OpFMul %385 %386 
					                                       f32_4 %388 = OpLoad %122 
					                                       f32_4 %389 = OpFAdd %387 %388 
					                                                      OpStore %86 %389 
					                                       f32_4 %391 = OpLoad %86 
					                                                      OpStore %390 %391 
					                              Uniform f32_4* %393 = OpAccessChain %24 %392 
					                                       f32_4 %394 = OpLoad %393 
					                                       f32_4 %397 = OpExtInst %1 40 %394 %396 
					                                                      OpStore %86 %397 
					                                       f32_4 %398 = OpLoad %86 
					                                       f32_4 %401 = OpExtInst %1 37 %398 %400 
					                                                      OpStore %86 %401 
					                                       f32_2 %402 = OpLoad %9 
					                                       f32_4 %403 = OpLoad %86 
					                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
					                                       f32_2 %405 = OpFNegate %404 
					                                       f32_2 %406 = OpFAdd %402 %405 
					                                       f32_4 %407 = OpLoad %354 
					                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
					                                                      OpStore %354 %408 
					                                       f32_2 %409 = OpLoad %9 
					                                       f32_2 %412 = OpFMul %409 %411 
					                                       f32_4 %413 = OpLoad %86 
					                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
					                                       f32_2 %415 = OpFNegate %414 
					                                       f32_2 %416 = OpFAdd %412 %415 
					                                                      OpStore %9 %416 
					                                       f32_4 %417 = OpLoad %86 
					                                       f32_2 %418 = OpVectorShuffle %417 %417 2 3 
					                                       f32_2 %419 = OpFNegate %418 
					                                       f32_2 %420 = OpLoad %9 
					                                       f32_2 %421 = OpFAdd %419 %420 
					                                       f32_4 %422 = OpLoad %36 
					                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 2 3 
					                                                      OpStore %36 %423 
					                                       f32_4 %424 = OpLoad %86 
					                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
					                                       f32_2 %426 = OpFNegate %425 
					                                       f32_4 %427 = OpLoad %86 
					                                       f32_2 %428 = OpVectorShuffle %427 %427 2 3 
					                                       f32_2 %429 = OpFAdd %426 %428 
					                                                      OpStore %9 %429 
					                                       f32_4 %431 = OpLoad %354 
					                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
					                                       f32_2 %433 = OpLoad %9 
					                                       f32_2 %434 = OpFDiv %432 %433 
					                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %436 
					                                       f32_4 %438 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %438 
					                                       f32_2 %440 = OpLoad %439 
					                                       f32_4 %441 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %442 
					                                  Input f32* %444 = OpAccessChain %266 %114 
					                                         f32 %445 = OpLoad %444 
					                                        bool %446 = OpFOrdGreaterThanEqual %313 %445 
					                                                      OpStore %443 %446 
					                                        bool %447 = OpLoad %443 
					                                         f32 %448 = OpSelect %447 %289 %313 
					                                Private f32* %449 = OpAccessChain %9 %161 
					                                                      OpStore %449 %448 
					                                Uniform f32* %452 = OpAccessChain %24 %451 
					                                         f32 %453 = OpLoad %452 
					                                         f32 %454 = OpFNegate %453 
					                                Uniform f32* %456 = OpAccessChain %24 %455 
					                                         f32 %457 = OpLoad %456 
					                                         f32 %458 = OpFAdd %454 %457 
					                                                      OpStore %450 %458 
					                                Private f32* %459 = OpAccessChain %9 %161 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpLoad %450 
					                                         f32 %462 = OpFMul %460 %461 
					                                Uniform f32* %463 = OpAccessChain %24 %451 
					                                         f32 %464 = OpLoad %463 
					                                         f32 %465 = OpFAdd %462 %464 
					                                Private f32* %466 = OpAccessChain %9 %161 
					                                                      OpStore %466 %465 
					                                Private f32* %467 = OpAccessChain %9 %161 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFMul %468 %250 
					                                Uniform f32* %471 = OpAccessChain %24 %470 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %469 %472 
					                                Private f32* %474 = OpAccessChain %9 %161 
					                                                      OpStore %474 %473 
					                                Private f32* %475 = OpAccessChain %9 %161 
					                                         f32 %476 = OpLoad %475 
					                                Uniform f32* %477 = OpAccessChain %24 %328 
					                                         f32 %478 = OpLoad %477 
					                                         f32 %479 = OpFMul %476 %478 
					                                Private f32* %480 = OpAccessChain %9 %161 
					                                                      OpStore %480 %479 
					                                Private f32* %481 = OpAccessChain %9 %161 
					                                         f32 %482 = OpLoad %481 
					                                         f32 %483 = OpFNegate %482 
					                                         f32 %485 = OpFMul %483 %484 
					                                         f32 %486 = OpFAdd %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %161 
					                                                      OpStore %487 %486 
					                                Private f32* %488 = OpAccessChain %9 %161 
					                                         f32 %489 = OpLoad %488 
					                                Private f32* %490 = OpAccessChain %60 %161 
					                                         f32 %491 = OpLoad %490 
					                                         f32 %492 = OpFMul %489 %491 
					                                         f32 %494 = OpFAdd %492 %493 
					                                Private f32* %495 = OpAccessChain %60 %310 
					                                                      OpStore %495 %494 
					                                         f32 %496 = OpLoad %139 
					                                         f32 %497 = OpFNegate %496 
					                                         f32 %498 = OpFMul %497 %484 
					                                Private f32* %499 = OpAccessChain %60 %310 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFAdd %498 %500 
					                                Private f32* %502 = OpAccessChain %60 %114 
					                                                      OpStore %502 %501 
					                                         f32 %503 = OpLoad %139 
					                                         f32 %504 = OpFMul %503 %484 
					                                Private f32* %505 = OpAccessChain %60 %310 
					                                         f32 %506 = OpLoad %505 
					                                         f32 %507 = OpFAdd %504 %506 
					                                Private f32* %508 = OpAccessChain %60 %174 
					                                                      OpStore %508 %507 
					                                       f32_4 %510 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %510 
					                                 Output f32* %512 = OpAccessChain %118 %45 %114 
					                                         f32 %513 = OpLoad %512 
					                                         f32 %514 = OpFNegate %513 
					                                 Output f32* %515 = OpAccessChain %118 %45 %114 
					                                                      OpStore %515 %514 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 118
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %27 %64 %72 %87 %101 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpMemberDecorate %11 0 Offset 11 
					                                             OpDecorate %11 Block 
					                                             OpDecorate %13 DescriptorSet 13 
					                                             OpDecorate %13 Binding 13 
					                                             OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 27 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate %31 RelaxedPrecision 
					                                             OpDecorate %34 RelaxedPrecision 
					                                             OpDecorate %35 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %53 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %56 DescriptorSet 56 
					                                             OpDecorate %56 Binding 56 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %60 DescriptorSet 60 
					                                             OpDecorate %60 Binding 60 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 64 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %71 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 72 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate %76 RelaxedPrecision 
					                                             OpDecorate %78 RelaxedPrecision 
					                                             OpDecorate %79 RelaxedPrecision 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %87 RelaxedPrecision 
					                                             OpDecorate %87 Location 87 
					                                             OpDecorate %88 RelaxedPrecision 
					                                             OpDecorate %89 RelaxedPrecision 
					                                             OpDecorate %91 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                             OpDecorate %96 RelaxedPrecision 
					                                             OpDecorate %97 RelaxedPrecision 
					                                             OpDecorate %98 RelaxedPrecision 
					                                             OpDecorate %99 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %101 Location 101 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 2 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_2* %9 = OpVariable Private 
					                                     %10 = OpTypeVector %6 4 
					                                     %11 = OpTypeStruct %10 
					                                     %12 = OpTypePointer Uniform %11 
					            Uniform struct {f32_4;}* %13 = OpVariable Uniform 
					                                     %14 = OpTypeInt 32 1 
					                                 i32 %15 = OpConstant 0 
					                                     %16 = OpTypePointer Uniform %10 
					                                     %26 = OpTypePointer Input %10 
					               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                 f32 %38 = OpConstant 3,674022E-40 
					                                 f32 %39 = OpConstant 3,674022E-40 
					                                     %43 = OpTypePointer Private %6 
					                        Private f32* %44 = OpVariable Private 
					                                     %45 = OpTypeInt 32 0 
					                                 u32 %46 = OpConstant 1 
					                                 u32 %49 = OpConstant 0 
					                        Private f32* %53 = OpVariable Private 
					                                     %54 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %55 = OpTypePointer UniformConstant %54 
					UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
					                                     %58 = OpTypeSampler 
					                                     %59 = OpTypePointer UniformConstant %58 
					            UniformConstant sampler* %60 = OpVariable UniformConstant 
					                                     %62 = OpTypeSampledImage %54 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                 u32 %68 = OpConstant 3 
					                        Private f32* %70 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                     %73 = OpTypePointer Input %6 
					                                     %83 = OpTypePointer Private %10 
					                      Private f32_4* %84 = OpVariable Private 
					                        Input f32_4* %87 = OpVariable Input 
					                                 f32 %94 = OpConstant 3,674022E-40 
					                                    %100 = OpTypePointer Output %10 
					                      Output f32_4* %101 = OpVariable Output 
					                                    %103 = OpTypeBool 
					                                    %104 = OpTypePointer Private %103 
					                      Private bool* %105 = OpVariable Private 
					                                i32 %109 = OpConstant 1 
					                                i32 %111 = OpConstant -1 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                      Uniform f32_4* %17 = OpAccessChain %13 %15 
					                               f32_4 %18 = OpLoad %17 
					                               f32_2 %19 = OpVectorShuffle %18 %18 0 1 
					                               f32_2 %20 = OpFNegate %19 
					                      Uniform f32_4* %21 = OpAccessChain %13 %15 
					                               f32_4 %22 = OpLoad %21 
					                               f32_2 %23 = OpVectorShuffle %22 %22 2 3 
					                               f32_2 %24 = OpFAdd %20 %23 
					                                             OpStore %9 %24 
					                               f32_2 %25 = OpLoad %9 
					                               f32_4 %28 = OpLoad vs_TEXCOORD2 
					                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
					                               f32_2 %30 = OpExtInst %1 4 %29 
					                               f32_2 %31 = OpFNegate %30 
					                               f32_2 %32 = OpFAdd %25 %31 
					                                             OpStore %9 %32 
					                               f32_2 %33 = OpLoad %9 
					                               f32_4 %34 = OpLoad vs_TEXCOORD2 
					                               f32_2 %35 = OpVectorShuffle %34 %34 2 3 
					                               f32_2 %36 = OpFMul %33 %35 
					                                             OpStore %9 %36 
					                               f32_2 %37 = OpLoad %9 
					                               f32_2 %40 = OpCompositeConstruct %38 %38 
					                               f32_2 %41 = OpCompositeConstruct %39 %39 
					                               f32_2 %42 = OpExtInst %1 43 %37 %40 %41 
					                                             OpStore %9 %42 
					                        Private f32* %47 = OpAccessChain %9 %46 
					                                 f32 %48 = OpLoad %47 
					                        Private f32* %50 = OpAccessChain %9 %49 
					                                 f32 %51 = OpLoad %50 
					                                 f32 %52 = OpFMul %48 %51 
					                                             OpStore %44 %52 
					                 read_only Texture2D %57 = OpLoad %56 
					                             sampler %61 = OpLoad %60 
					          read_only Texture2DSampled %63 = OpSampledImage %57 %61 
					                               f32_4 %65 = OpLoad vs_TEXCOORD0 
					                               f32_2 %66 = OpVectorShuffle %65 %65 0 1 
					                               f32_4 %67 = OpImageSampleImplicitLod %63 %66 
					                                 f32 %69 = OpCompositeExtract %67 3 
					                                             OpStore %53 %69 
					                                 f32 %71 = OpLoad %53 
					                          Input f32* %74 = OpAccessChain vs_TEXCOORD1 %49 
					                                 f32 %75 = OpLoad %74 
					                                 f32 %76 = OpFMul %71 %75 
					                          Input f32* %77 = OpAccessChain vs_TEXCOORD1 %68 
					                                 f32 %78 = OpLoad %77 
					                                 f32 %79 = OpFNegate %78 
					                                 f32 %80 = OpFAdd %76 %79 
					                                             OpStore %70 %80 
					                                 f32 %81 = OpLoad %70 
					                                 f32 %82 = OpExtInst %1 43 %81 %38 %39 
					                                             OpStore %70 %82 
					                                 f32 %85 = OpLoad %70 
					                               f32_4 %86 = OpCompositeConstruct %85 %85 %85 %85 
					                               f32_4 %88 = OpLoad %87 
					                               f32_4 %89 = OpFMul %86 %88 
					                                             OpStore %84 %89 
					                        Private f32* %90 = OpAccessChain %84 %68 
					                                 f32 %91 = OpLoad %90 
					                                 f32 %92 = OpLoad %44 
					                                 f32 %93 = OpFMul %91 %92 
					                                 f32 %95 = OpFAdd %93 %94 
					                                             OpStore %70 %95 
					                                 f32 %96 = OpLoad %44 
					                               f32_4 %97 = OpCompositeConstruct %96 %96 %96 %96 
					                               f32_4 %98 = OpLoad %84 
					                               f32_4 %99 = OpFMul %97 %98 
					                                             OpStore %84 %99 
					                              f32_4 %102 = OpLoad %84 
					                                             OpStore %101 %102 
					                                f32 %106 = OpLoad %70 
					                               bool %107 = OpFOrdLessThan %106 %38 
					                                             OpStore %105 %107 
					                               bool %108 = OpLoad %105 
					                                i32 %110 = OpSelect %108 %109 %15 
					                                i32 %112 = OpIMul %110 %111 
					                               bool %113 = OpINotEqual %112 %15 
					                                             OpSelectionMerge %115 None 
					                                             OpBranchConditional %113 %114 %115 
					                                    %114 = OpLabel 
					                                             OpKill
					                                    %115 = OpLabel 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat10;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3 = in_COLOR0 * _FaceColor;
					    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
					    vs_COLOR0 = u_xlat3;
					    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
					    u_xlat4 = (-u_xlat3) + u_xlat4;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat1.x = u_xlat15 * 1.5;
					    u_xlat6.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat6.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat15 = u_xlat15 * 1.5 + (-u_xlat6.x);
					    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat6.x;
					    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat1.x;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
					    u_xlat1.x = u_xlat10 / u_xlat15;
					    u_xlat10 = _OutlineWidth * _ScaleRatioA;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat15 = u_xlat1.x * u_xlat10;
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = sqrt(u_xlat15);
					    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ClipRect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = u_xlat10_1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
					    u_xlat0 = u_xlat1.yyyy * u_xlat0;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3 = u_xlat0.w * u_xlat1.x + -0.00100000005;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat3<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 517
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %123 %136 %155 %266 %390 %430 %437 %439 %509 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %123 RelaxedPrecision 
					                                                      OpDecorate %123 Location 123 
					                                                      OpDecorate %124 RelaxedPrecision 
					                                                      OpDecorate %127 RelaxedPrecision 
					                                                      OpDecorate %128 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %133 RelaxedPrecision 
					                                                      OpDecorate %136 RelaxedPrecision 
					                                                      OpDecorate %136 Location 136 
					                                                      OpDecorate %137 RelaxedPrecision 
					                                                      OpDecorate %155 Location 155 
					                                                      OpDecorate %266 Location 266 
					                                                      OpDecorate %356 RelaxedPrecision 
					                                                      OpDecorate %359 RelaxedPrecision 
					                                                      OpDecorate %360 RelaxedPrecision 
					                                                      OpDecorate %363 RelaxedPrecision 
					                                                      OpDecorate %364 RelaxedPrecision 
					                                                      OpDecorate %368 RelaxedPrecision 
					                                                      OpDecorate %369 RelaxedPrecision 
					                                                      OpDecorate %370 RelaxedPrecision 
					                                                      OpDecorate %375 RelaxedPrecision 
					                                                      OpDecorate %377 RelaxedPrecision 
					                                                      OpDecorate %378 RelaxedPrecision 
					                                                      OpDecorate %380 RelaxedPrecision 
					                                                      OpDecorate %381 RelaxedPrecision 
					                                                      OpDecorate %382 RelaxedPrecision 
					                                                      OpDecorate %388 RelaxedPrecision 
					                                                      OpDecorate %390 RelaxedPrecision 
					                                                      OpDecorate %390 Location 390 
					                                                      OpDecorate vs_TEXCOORD0 Location 430 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 437 
					                                                      OpDecorate %439 Location 439 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 509 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 14 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 15 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                              Private f32_4* %122 = OpVariable Private 
					                                Input f32_4* %123 = OpVariable Input 
					                                         i32 %125 = OpConstant 6 
					                               Output f32_4* %136 = OpVariable Output 
					                                             %138 = OpTypePointer Private %6 
					                                Private f32* %139 = OpVariable Private 
					                                             %154 = OpTypePointer Input %15 
					                                Input f32_3* %155 = OpVariable Input 
					                                         u32 %161 = OpConstant 0 
					                                         u32 %174 = OpConstant 2 
					                                         i32 %198 = OpConstant 4 
					                                         i32 %220 = OpConstant 20 
					                                         i32 %223 = OpConstant 21 
					                                Private f32* %237 = OpVariable Private 
					                                         i32 %243 = OpConstant 17 
					                                         i32 %246 = OpConstant 18 
					                                         f32 %250 = OpConstant 3,674022E-40 
					                                       f32_2 %251 = OpConstantComposite %250 %250 
					                                             %265 = OpTypePointer Input %7 
					                                Input f32_2* %266 = OpVariable Input 
					                                             %267 = OpTypePointer Input %6 
					                                         i32 %271 = OpConstant 19 
					                                         f32 %281 = OpConstant 3,674022E-40 
					                                Private f32* %284 = OpVariable Private 
					                                         i32 %285 = OpConstant 22 
					                                         f32 %289 = OpConstant 3,674022E-40 
					                                             %307 = OpTypeBool 
					                                             %308 = OpTypePointer Private %307 
					                               Private bool* %309 = OpVariable Private 
					                                         u32 %310 = OpConstant 3 
					                                         f32 %313 = OpConstant 3,674022E-40 
					                                             %316 = OpTypePointer Function %6 
					                                         i32 %325 = OpConstant 8 
					                                         i32 %328 = OpConstant 13 
					                                         i32 %340 = OpConstant 10 
					                              Private f32_4* %354 = OpVariable Private 
					                                         i32 %357 = OpConstant 9 
					                               Output f32_4* %390 = OpVariable Output 
					                                         i32 %392 = OpConstant 16 
					                                         f32 %395 = OpConstant 3,674022E-40 
					                                       f32_4 %396 = OpConstantComposite %395 %395 %395 %395 
					                                         f32 %399 = OpConstant 3,674022E-40 
					                                       f32_4 %400 = OpConstantComposite %399 %399 %399 %399 
					                                         f32 %410 = OpConstant 3,674022E-40 
					                                       f32_2 %411 = OpConstantComposite %410 %410 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %439 = OpVariable Input 
					                               Private bool* %443 = OpVariable Private 
					                                Private f32* %450 = OpVariable Private 
					                                         i32 %451 = OpConstant 11 
					                                         i32 %455 = OpConstant 12 
					                                         i32 %470 = OpConstant 7 
					                                         f32 %484 = OpConstant 3,674022E-40 
					                                         f32 %493 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                                             %511 = OpTypePointer Output %6 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %317 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                       f32_4 %124 = OpLoad %123 
					                              Uniform f32_4* %126 = OpAccessChain %24 %125 
					                                       f32_4 %127 = OpLoad %126 
					                                       f32_4 %128 = OpFMul %124 %127 
					                                                      OpStore %122 %128 
					                                       f32_4 %129 = OpLoad %122 
					                                       f32_3 %130 = OpVectorShuffle %129 %129 3 3 3 
					                                       f32_4 %131 = OpLoad %122 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_3 %133 = OpFMul %130 %132 
					                                       f32_4 %134 = OpLoad %122 
					                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
					                                                      OpStore %122 %135 
					                                       f32_4 %137 = OpLoad %122 
					                                                      OpStore %136 %137 
					                                       f32_4 %140 = OpLoad %36 
					                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
					                                       f32_4 %142 = OpLoad %36 
					                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
					                                         f32 %144 = OpDot %141 %143 
					                                                      OpStore %139 %144 
					                                         f32 %145 = OpLoad %139 
					                                         f32 %146 = OpExtInst %1 32 %145 
					                                                      OpStore %139 %146 
					                                         f32 %147 = OpLoad %139 
					                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
					                                       f32_4 %149 = OpLoad %36 
					                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
					                                       f32_3 %151 = OpFMul %148 %150 
					                                       f32_4 %152 = OpLoad %36 
					                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
					                                                      OpStore %36 %153 
					                                       f32_3 %156 = OpLoad %155 
					                              Uniform f32_4* %157 = OpAccessChain %24 %62 %45 
					                                       f32_4 %158 = OpLoad %157 
					                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
					                                         f32 %160 = OpDot %156 %159 
					                                Private f32* %162 = OpAccessChain %60 %161 
					                                                      OpStore %162 %160 
					                                       f32_3 %163 = OpLoad %155 
					                              Uniform f32_4* %164 = OpAccessChain %24 %62 %40 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
					                                         f32 %167 = OpDot %163 %166 
					                                Private f32* %168 = OpAccessChain %60 %114 
					                                                      OpStore %168 %167 
					                                       f32_3 %169 = OpLoad %155 
					                              Uniform f32_4* %170 = OpAccessChain %24 %62 %39 
					                                       f32_4 %171 = OpLoad %170 
					                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
					                                         f32 %173 = OpDot %169 %172 
					                                Private f32* %175 = OpAccessChain %60 %174 
					                                                      OpStore %175 %173 
					                                       f32_4 %176 = OpLoad %60 
					                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
					                                       f32_4 %178 = OpLoad %60 
					                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
					                                         f32 %180 = OpDot %177 %179 
					                                                      OpStore %139 %180 
					                                         f32 %181 = OpLoad %139 
					                                         f32 %182 = OpExtInst %1 32 %181 
					                                                      OpStore %139 %182 
					                                         f32 %183 = OpLoad %139 
					                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
					                                       f32_4 %185 = OpLoad %60 
					                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
					                                       f32_3 %187 = OpFMul %184 %186 
					                                       f32_4 %188 = OpLoad %60 
					                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
					                                                      OpStore %60 %189 
					                                       f32_4 %190 = OpLoad %60 
					                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
					                                         f32 %194 = OpDot %191 %193 
					                                                      OpStore %139 %194 
					                              Uniform f32_4* %195 = OpAccessChain %24 %40 
					                                       f32_4 %196 = OpLoad %195 
					                                       f32_2 %197 = OpVectorShuffle %196 %196 1 1 
					                              Uniform f32_4* %199 = OpAccessChain %24 %198 %40 
					                                       f32_4 %200 = OpLoad %199 
					                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
					                                       f32_2 %202 = OpFMul %197 %201 
					                                       f32_4 %203 = OpLoad %36 
					                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 2 3 
					                                                      OpStore %36 %204 
					                              Uniform f32_4* %205 = OpAccessChain %24 %198 %45 
					                                       f32_4 %206 = OpLoad %205 
					                                       f32_2 %207 = OpVectorShuffle %206 %206 0 1 
					                              Uniform f32_4* %208 = OpAccessChain %24 %40 
					                                       f32_4 %209 = OpLoad %208 
					                                       f32_2 %210 = OpVectorShuffle %209 %209 0 0 
					                                       f32_2 %211 = OpFMul %207 %210 
					                                       f32_4 %212 = OpLoad %36 
					                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
					                                       f32_2 %214 = OpFAdd %211 %213 
					                                       f32_4 %215 = OpLoad %36 
					                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
					                                                      OpStore %36 %216 
					                                       f32_4 %217 = OpLoad %36 
					                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
					                                       f32_2 %219 = OpExtInst %1 4 %218 
					                                Uniform f32* %221 = OpAccessChain %24 %220 
					                                         f32 %222 = OpLoad %221 
					                                Uniform f32* %224 = OpAccessChain %24 %223 
					                                         f32 %225 = OpLoad %224 
					                                       f32_2 %226 = OpCompositeConstruct %222 %225 
					                                       f32_2 %227 = OpFMul %219 %226 
					                                       f32_4 %228 = OpLoad %36 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 2 3 
					                                                      OpStore %36 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_2 %231 = OpVectorShuffle %230 %230 3 3 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
					                                       f32_2 %234 = OpFDiv %231 %233 
					                                       f32_4 %235 = OpLoad %36 
					                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
					                                                      OpStore %36 %236 
					                                       f32_4 %238 = OpLoad %36 
					                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
					                                       f32_4 %240 = OpLoad %36 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                         f32 %242 = OpDot %239 %241 
					                                                      OpStore %237 %242 
					                                Uniform f32* %244 = OpAccessChain %24 %243 
					                                         f32 %245 = OpLoad %244 
					                                Uniform f32* %247 = OpAccessChain %24 %246 
					                                         f32 %248 = OpLoad %247 
					                                       f32_2 %249 = OpCompositeConstruct %245 %248 
					                                       f32_2 %252 = OpFMul %249 %251 
					                                       f32_4 %253 = OpLoad %36 
					                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
					                                       f32_2 %255 = OpFAdd %252 %254 
					                                       f32_4 %256 = OpLoad %36 
					                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
					                                                      OpStore %36 %257 
					                                       f32_4 %258 = OpLoad %36 
					                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
					                                       f32_2 %260 = OpFDiv %251 %259 
					                                       f32_4 %261 = OpLoad %36 
					                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
					                                                      OpStore %36 %262 
					                                         f32 %263 = OpLoad %237 
					                                         f32 %264 = OpExtInst %1 32 %263 
					                                                      OpStore %237 %264 
					                                  Input f32* %268 = OpAccessChain %266 %114 
					                                         f32 %269 = OpLoad %268 
					                                         f32 %270 = OpExtInst %1 4 %269 
					                                Uniform f32* %272 = OpAccessChain %24 %271 
					                                         f32 %273 = OpLoad %272 
					                                         f32 %274 = OpFMul %270 %273 
					                                Private f32* %275 = OpAccessChain %60 %161 
					                                                      OpStore %275 %274 
					                                         f32 %276 = OpLoad %237 
					                                Private f32* %277 = OpAccessChain %60 %161 
					                                         f32 %278 = OpLoad %277 
					                                         f32 %279 = OpFMul %276 %278 
					                                                      OpStore %237 %279 
					                                         f32 %280 = OpLoad %237 
					                                         f32 %282 = OpFMul %280 %281 
					                                Private f32* %283 = OpAccessChain %60 %161 
					                                                      OpStore %283 %282 
					                                Uniform f32* %286 = OpAccessChain %24 %285 
					                                         f32 %287 = OpLoad %286 
					                                         f32 %288 = OpFNegate %287 
					                                         f32 %290 = OpFAdd %288 %289 
					                                                      OpStore %284 %290 
					                                         f32 %291 = OpLoad %284 
					                                Private f32* %292 = OpAccessChain %60 %161 
					                                         f32 %293 = OpLoad %292 
					                                         f32 %294 = OpExtInst %1 4 %293 
					                                         f32 %295 = OpFMul %291 %294 
					                                                      OpStore %284 %295 
					                                         f32 %296 = OpLoad %237 
					                                         f32 %297 = OpFMul %296 %281 
					                                         f32 %298 = OpLoad %284 
					                                         f32 %299 = OpFNegate %298 
					                                         f32 %300 = OpFAdd %297 %299 
					                                                      OpStore %237 %300 
					                                         f32 %301 = OpLoad %139 
					                                         f32 %302 = OpExtInst %1 4 %301 
					                                         f32 %303 = OpLoad %237 
					                                         f32 %304 = OpFMul %302 %303 
					                                         f32 %305 = OpLoad %284 
					                                         f32 %306 = OpFAdd %304 %305 
					                                                      OpStore %139 %306 
					                                Uniform f32* %311 = OpAccessChain %24 %198 %62 %310 
					                                         f32 %312 = OpLoad %311 
					                                        bool %314 = OpFOrdEqual %312 %313 
					                                                      OpStore %309 %314 
					                                        bool %315 = OpLoad %309 
					                                                      OpSelectionMerge %319 None 
					                                                      OpBranchConditional %315 %318 %321 
					                                             %318 = OpLabel 
					                                         f32 %320 = OpLoad %139 
					                                                      OpStore %317 %320 
					                                                      OpBranch %319 
					                                             %321 = OpLabel 
					                                Private f32* %322 = OpAccessChain %60 %161 
					                                         f32 %323 = OpLoad %322 
					                                                      OpStore %317 %323 
					                                                      OpBranch %319 
					                                             %319 = OpLabel 
					                                         f32 %324 = OpLoad %317 
					                                                      OpStore %139 %324 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                Uniform f32* %329 = OpAccessChain %24 %328 
					                                         f32 %330 = OpLoad %329 
					                                         f32 %331 = OpFMul %327 %330 
					                                                      OpStore %237 %331 
					                                         f32 %332 = OpLoad %237 
					                                         f32 %333 = OpLoad %139 
					                                         f32 %334 = OpFMul %332 %333 
					                                         f32 %335 = OpFAdd %334 %289 
					                                                      OpStore %237 %335 
					                                         f32 %336 = OpLoad %139 
					                                         f32 %337 = OpLoad %237 
					                                         f32 %338 = OpFDiv %336 %337 
					                                Private f32* %339 = OpAccessChain %60 %161 
					                                                      OpStore %339 %338 
					                                Uniform f32* %341 = OpAccessChain %24 %340 
					                                         f32 %342 = OpLoad %341 
					                                Uniform f32* %343 = OpAccessChain %24 %328 
					                                         f32 %344 = OpLoad %343 
					                                         f32 %345 = OpFMul %342 %344 
					                                                      OpStore %139 %345 
					                                Private f32* %346 = OpAccessChain %60 %161 
					                                         f32 %347 = OpLoad %346 
					                                         f32 %348 = OpLoad %139 
					                                         f32 %349 = OpFMul %347 %348 
					                                                      OpStore %139 %349 
					                                         f32 %350 = OpLoad %139 
					                                         f32 %351 = OpExtInst %1 37 %350 %289 
					                                                      OpStore %237 %351 
					                                         f32 %352 = OpLoad %237 
					                                         f32 %353 = OpExtInst %1 31 %352 
					                                                      OpStore %237 %353 
					                                  Input f32* %355 = OpAccessChain %123 %310 
					                                         f32 %356 = OpLoad %355 
					                                Uniform f32* %358 = OpAccessChain %24 %357 %310 
					                                         f32 %359 = OpLoad %358 
					                                         f32 %360 = OpFMul %356 %359 
					                                Private f32* %361 = OpAccessChain %354 %161 
					                                                      OpStore %361 %360 
					                              Uniform f32_4* %362 = OpAccessChain %24 %357 
					                                       f32_4 %363 = OpLoad %362 
					                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
					                                       f32_4 %365 = OpLoad %354 
					                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
					                                       f32_3 %367 = OpFMul %364 %366 
					                                       f32_4 %368 = OpLoad %122 
					                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
					                                       f32_3 %370 = OpFNegate %369 
					                                       f32_3 %371 = OpFAdd %367 %370 
					                                       f32_4 %372 = OpLoad %354 
					                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
					                                                      OpStore %354 %373 
					                                Uniform f32* %374 = OpAccessChain %24 %357 %310 
					                                         f32 %375 = OpLoad %374 
					                                  Input f32* %376 = OpAccessChain %123 %310 
					                                         f32 %377 = OpLoad %376 
					                                         f32 %378 = OpFMul %375 %377 
					                                Private f32* %379 = OpAccessChain %122 %310 
					                                         f32 %380 = OpLoad %379 
					                                         f32 %381 = OpFNegate %380 
					                                         f32 %382 = OpFAdd %378 %381 
					                                Private f32* %383 = OpAccessChain %354 %310 
					                                                      OpStore %383 %382 
					                                         f32 %384 = OpLoad %237 
					                                       f32_4 %385 = OpCompositeConstruct %384 %384 %384 %384 
					                                       f32_4 %386 = OpLoad %354 
					                                       f32_4 %387 = OpFMul %385 %386 
					                                       f32_4 %388 = OpLoad %122 
					                                       f32_4 %389 = OpFAdd %387 %388 
					                                                      OpStore %86 %389 
					                                       f32_4 %391 = OpLoad %86 
					                                                      OpStore %390 %391 
					                              Uniform f32_4* %393 = OpAccessChain %24 %392 
					                                       f32_4 %394 = OpLoad %393 
					                                       f32_4 %397 = OpExtInst %1 40 %394 %396 
					                                                      OpStore %86 %397 
					                                       f32_4 %398 = OpLoad %86 
					                                       f32_4 %401 = OpExtInst %1 37 %398 %400 
					                                                      OpStore %86 %401 
					                                       f32_2 %402 = OpLoad %9 
					                                       f32_4 %403 = OpLoad %86 
					                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
					                                       f32_2 %405 = OpFNegate %404 
					                                       f32_2 %406 = OpFAdd %402 %405 
					                                       f32_4 %407 = OpLoad %354 
					                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 2 3 
					                                                      OpStore %354 %408 
					                                       f32_2 %409 = OpLoad %9 
					                                       f32_2 %412 = OpFMul %409 %411 
					                                       f32_4 %413 = OpLoad %86 
					                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
					                                       f32_2 %415 = OpFNegate %414 
					                                       f32_2 %416 = OpFAdd %412 %415 
					                                                      OpStore %9 %416 
					                                       f32_4 %417 = OpLoad %86 
					                                       f32_2 %418 = OpVectorShuffle %417 %417 2 3 
					                                       f32_2 %419 = OpFNegate %418 
					                                       f32_2 %420 = OpLoad %9 
					                                       f32_2 %421 = OpFAdd %419 %420 
					                                       f32_4 %422 = OpLoad %36 
					                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 2 3 
					                                                      OpStore %36 %423 
					                                       f32_4 %424 = OpLoad %86 
					                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
					                                       f32_2 %426 = OpFNegate %425 
					                                       f32_4 %427 = OpLoad %86 
					                                       f32_2 %428 = OpVectorShuffle %427 %427 2 3 
					                                       f32_2 %429 = OpFAdd %426 %428 
					                                                      OpStore %9 %429 
					                                       f32_4 %431 = OpLoad %354 
					                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
					                                       f32_2 %433 = OpLoad %9 
					                                       f32_2 %434 = OpFDiv %432 %433 
					                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %436 = OpVectorShuffle %435 %434 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %436 
					                                       f32_4 %438 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %438 
					                                       f32_2 %440 = OpLoad %439 
					                                       f32_4 %441 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %442 = OpVectorShuffle %441 %440 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %442 
					                                  Input f32* %444 = OpAccessChain %266 %114 
					                                         f32 %445 = OpLoad %444 
					                                        bool %446 = OpFOrdGreaterThanEqual %313 %445 
					                                                      OpStore %443 %446 
					                                        bool %447 = OpLoad %443 
					                                         f32 %448 = OpSelect %447 %289 %313 
					                                Private f32* %449 = OpAccessChain %9 %161 
					                                                      OpStore %449 %448 
					                                Uniform f32* %452 = OpAccessChain %24 %451 
					                                         f32 %453 = OpLoad %452 
					                                         f32 %454 = OpFNegate %453 
					                                Uniform f32* %456 = OpAccessChain %24 %455 
					                                         f32 %457 = OpLoad %456 
					                                         f32 %458 = OpFAdd %454 %457 
					                                                      OpStore %450 %458 
					                                Private f32* %459 = OpAccessChain %9 %161 
					                                         f32 %460 = OpLoad %459 
					                                         f32 %461 = OpLoad %450 
					                                         f32 %462 = OpFMul %460 %461 
					                                Uniform f32* %463 = OpAccessChain %24 %451 
					                                         f32 %464 = OpLoad %463 
					                                         f32 %465 = OpFAdd %462 %464 
					                                Private f32* %466 = OpAccessChain %9 %161 
					                                                      OpStore %466 %465 
					                                Private f32* %467 = OpAccessChain %9 %161 
					                                         f32 %468 = OpLoad %467 
					                                         f32 %469 = OpFMul %468 %250 
					                                Uniform f32* %471 = OpAccessChain %24 %470 
					                                         f32 %472 = OpLoad %471 
					                                         f32 %473 = OpFAdd %469 %472 
					                                Private f32* %474 = OpAccessChain %9 %161 
					                                                      OpStore %474 %473 
					                                Private f32* %475 = OpAccessChain %9 %161 
					                                         f32 %476 = OpLoad %475 
					                                Uniform f32* %477 = OpAccessChain %24 %328 
					                                         f32 %478 = OpLoad %477 
					                                         f32 %479 = OpFMul %476 %478 
					                                Private f32* %480 = OpAccessChain %9 %161 
					                                                      OpStore %480 %479 
					                                Private f32* %481 = OpAccessChain %9 %161 
					                                         f32 %482 = OpLoad %481 
					                                         f32 %483 = OpFNegate %482 
					                                         f32 %485 = OpFMul %483 %484 
					                                         f32 %486 = OpFAdd %485 %484 
					                                Private f32* %487 = OpAccessChain %9 %161 
					                                                      OpStore %487 %486 
					                                Private f32* %488 = OpAccessChain %9 %161 
					                                         f32 %489 = OpLoad %488 
					                                Private f32* %490 = OpAccessChain %60 %161 
					                                         f32 %491 = OpLoad %490 
					                                         f32 %492 = OpFMul %489 %491 
					                                         f32 %494 = OpFAdd %492 %493 
					                                Private f32* %495 = OpAccessChain %60 %310 
					                                                      OpStore %495 %494 
					                                         f32 %496 = OpLoad %139 
					                                         f32 %497 = OpFNegate %496 
					                                         f32 %498 = OpFMul %497 %484 
					                                Private f32* %499 = OpAccessChain %60 %310 
					                                         f32 %500 = OpLoad %499 
					                                         f32 %501 = OpFAdd %498 %500 
					                                Private f32* %502 = OpAccessChain %60 %114 
					                                                      OpStore %502 %501 
					                                         f32 %503 = OpLoad %139 
					                                         f32 %504 = OpFMul %503 %484 
					                                Private f32* %505 = OpAccessChain %60 %310 
					                                         f32 %506 = OpLoad %505 
					                                         f32 %507 = OpFAdd %504 %506 
					                                Private f32* %508 = OpAccessChain %60 %174 
					                                                      OpStore %508 %507 
					                                       f32_4 %510 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %510 
					                                 Output f32* %512 = OpAccessChain %118 %45 %114 
					                                         f32 %513 = OpLoad %512 
					                                         f32 %514 = OpFNegate %513 
					                                 Output f32* %515 = OpAccessChain %118 %45 %114 
					                                                      OpStore %515 %514 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 133
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %11 %13 %29 %41 %81 %116 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpDecorate %9 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 Location 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %13 RelaxedPrecision 
					                                             OpDecorate %13 Location 13 
					                                             OpDecorate %14 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate %18 RelaxedPrecision 
					                                             OpDecorate %21 RelaxedPrecision 
					                                             OpDecorate %21 DescriptorSet 21 
					                                             OpDecorate %21 Binding 21 
					                                             OpDecorate %22 RelaxedPrecision 
					                                             OpDecorate %25 RelaxedPrecision 
					                                             OpDecorate %25 DescriptorSet 25 
					                                             OpDecorate %25 Binding 25 
					                                             OpDecorate %26 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 29 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %39 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 41 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %44 RelaxedPrecision 
					                                             OpDecorate %45 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %47 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %52 RelaxedPrecision 
					                                             OpDecorate %53 RelaxedPrecision 
					                                             OpDecorate %54 RelaxedPrecision 
					                                             OpDecorate %55 RelaxedPrecision 
					                                             OpDecorate %56 RelaxedPrecision 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %58 RelaxedPrecision 
					                                             OpDecorate %59 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpMemberDecorate %66 0 Offset 66 
					                                             OpDecorate %66 Block 
					                                             OpDecorate %68 DescriptorSet 68 
					                                             OpDecorate %68 Binding 68 
					                                             OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 81 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %88 RelaxedPrecision 
					                                             OpDecorate %89 RelaxedPrecision 
					                                             OpDecorate %103 RelaxedPrecision 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %111 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %113 RelaxedPrecision 
					                                             OpDecorate %114 RelaxedPrecision 
					                                             OpDecorate %116 RelaxedPrecision 
					                                             OpDecorate %116 Location 116 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %121 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypeVector %6 4 
					                                      %8 = OpTypePointer Private %7 
					                       Private f32_4* %9 = OpVariable Private 
					                                     %10 = OpTypePointer Input %7 
					                        Input f32_4* %11 = OpVariable Input 
					                        Input f32_4* %13 = OpVariable Input 
					                                     %17 = OpTypePointer Private %6 
					                        Private f32* %18 = OpVariable Private 
					                                     %19 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %20 = OpTypePointer UniformConstant %19 
					UniformConstant read_only Texture2D* %21 = OpVariable UniformConstant 
					                                     %23 = OpTypeSampler 
					                                     %24 = OpTypePointer UniformConstant %23 
					            UniformConstant sampler* %25 = OpVariable UniformConstant 
					                                     %27 = OpTypeSampledImage %19 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %30 = OpTypeVector %6 2 
					                                     %34 = OpTypeInt 32 0 
					                                 u32 %35 = OpConstant 3 
					                                     %37 = OpTypePointer Private %30 
					                      Private f32_2* %38 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                                 f32 %50 = OpConstant 3,674022E-40 
					                                 f32 %51 = OpConstant 3,674022E-40 
					                      Private f32_2* %65 = OpVariable Private 
					                                     %66 = OpTypeStruct %7 
					                                     %67 = OpTypePointer Uniform %66 
					            Uniform struct {f32_4;}* %68 = OpVariable Uniform 
					                                     %69 = OpTypeInt 32 1 
					                                 i32 %70 = OpConstant 0 
					                                     %71 = OpTypePointer Uniform %7 
					               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                 u32 %95 = OpConstant 1 
					                                 u32 %98 = OpConstant 0 
					                       Private f32* %103 = OpVariable Private 
					                                f32 %109 = OpConstant 3,674022E-40 
					                                    %115 = OpTypePointer Output %7 
					                      Output f32_4* %116 = OpVariable Output 
					                                    %118 = OpTypeBool 
					                                    %119 = OpTypePointer Private %118 
					                      Private bool* %120 = OpVariable Private 
					                                i32 %124 = OpConstant 1 
					                                i32 %126 = OpConstant -1 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                               f32_4 %12 = OpLoad %11 
					                               f32_4 %14 = OpLoad %13 
					                               f32_4 %15 = OpFNegate %14 
					                               f32_4 %16 = OpFAdd %12 %15 
					                                             OpStore %9 %16 
					                 read_only Texture2D %22 = OpLoad %21 
					                             sampler %26 = OpLoad %25 
					          read_only Texture2DSampled %28 = OpSampledImage %22 %26 
					                               f32_4 %31 = OpLoad vs_TEXCOORD0 
					                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
					                               f32_4 %33 = OpImageSampleImplicitLod %28 %32 
					                                 f32 %36 = OpCompositeExtract %33 3 
					                                             OpStore %18 %36 
					                                 f32 %39 = OpLoad %18 
					                               f32_2 %40 = OpCompositeConstruct %39 %39 
					                               f32_4 %42 = OpLoad vs_TEXCOORD1 
					                               f32_2 %43 = OpVectorShuffle %42 %42 0 0 
					                               f32_2 %44 = OpFMul %40 %43 
					                               f32_4 %45 = OpLoad vs_TEXCOORD1 
					                               f32_2 %46 = OpVectorShuffle %45 %45 2 1 
					                               f32_2 %47 = OpFNegate %46 
					                               f32_2 %48 = OpFAdd %44 %47 
					                                             OpStore %38 %48 
					                               f32_2 %49 = OpLoad %38 
					                               f32_2 %52 = OpCompositeConstruct %50 %50 
					                               f32_2 %53 = OpCompositeConstruct %51 %51 
					                               f32_2 %54 = OpExtInst %1 43 %49 %52 %53 
					                                             OpStore %38 %54 
					                               f32_2 %55 = OpLoad %38 
					                               f32_4 %56 = OpVectorShuffle %55 %55 0 0 0 0 
					                               f32_4 %57 = OpLoad %9 
					                               f32_4 %58 = OpFMul %56 %57 
					                               f32_4 %59 = OpLoad %13 
					                               f32_4 %60 = OpFAdd %58 %59 
					                                             OpStore %9 %60 
					                               f32_2 %61 = OpLoad %38 
					                               f32_4 %62 = OpVectorShuffle %61 %61 1 1 1 1 
					                               f32_4 %63 = OpLoad %9 
					                               f32_4 %64 = OpFMul %62 %63 
					                                             OpStore %9 %64 
					                      Uniform f32_4* %72 = OpAccessChain %68 %70 
					                               f32_4 %73 = OpLoad %72 
					                               f32_2 %74 = OpVectorShuffle %73 %73 0 1 
					                               f32_2 %75 = OpFNegate %74 
					                      Uniform f32_4* %76 = OpAccessChain %68 %70 
					                               f32_4 %77 = OpLoad %76 
					                               f32_2 %78 = OpVectorShuffle %77 %77 2 3 
					                               f32_2 %79 = OpFAdd %75 %78 
					                                             OpStore %65 %79 
					                               f32_2 %80 = OpLoad %65 
					                               f32_4 %82 = OpLoad vs_TEXCOORD2 
					                               f32_2 %83 = OpVectorShuffle %82 %82 0 1 
					                               f32_2 %84 = OpExtInst %1 4 %83 
					                               f32_2 %85 = OpFNegate %84 
					                               f32_2 %86 = OpFAdd %80 %85 
					                                             OpStore %65 %86 
					                               f32_2 %87 = OpLoad %65 
					                               f32_4 %88 = OpLoad vs_TEXCOORD2 
					                               f32_2 %89 = OpVectorShuffle %88 %88 2 3 
					                               f32_2 %90 = OpFMul %87 %89 
					                                             OpStore %65 %90 
					                               f32_2 %91 = OpLoad %65 
					                               f32_2 %92 = OpCompositeConstruct %50 %50 
					                               f32_2 %93 = OpCompositeConstruct %51 %51 
					                               f32_2 %94 = OpExtInst %1 43 %91 %92 %93 
					                                             OpStore %65 %94 
					                        Private f32* %96 = OpAccessChain %65 %95 
					                                 f32 %97 = OpLoad %96 
					                        Private f32* %99 = OpAccessChain %65 %98 
					                                f32 %100 = OpLoad %99 
					                                f32 %101 = OpFMul %97 %100 
					                       Private f32* %102 = OpAccessChain %38 %98 
					                                             OpStore %102 %101 
					                       Private f32* %104 = OpAccessChain %9 %35 
					                                f32 %105 = OpLoad %104 
					                       Private f32* %106 = OpAccessChain %38 %98 
					                                f32 %107 = OpLoad %106 
					                                f32 %108 = OpFMul %105 %107 
					                                f32 %110 = OpFAdd %108 %109 
					                                             OpStore %103 %110 
					                              f32_4 %111 = OpLoad %9 
					                              f32_2 %112 = OpLoad %38 
					                              f32_4 %113 = OpVectorShuffle %112 %112 0 0 0 0 
					                              f32_4 %114 = OpFMul %111 %113 
					                                             OpStore %9 %114 
					                              f32_4 %117 = OpLoad %9 
					                                             OpStore %116 %117 
					                                f32 %121 = OpLoad %103 
					                               bool %122 = OpFOrdLessThan %121 %50 
					                                             OpStore %120 %122 
					                               bool %123 = OpLoad %120 
					                                i32 %125 = OpSelect %123 %124 %70 
					                                i32 %127 = OpIMul %125 %126 
					                               bool %128 = OpINotEqual %127 %70 
					                                             OpSelectionMerge %130 None 
					                                             OpBranchConditional %128 %129 %130 
					                                    %129 = OpLabel 
					                                             OpKill
					                                    %130 = OpLabel 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[12];
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_11[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_18[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _UnderlayOffsetX;
					uniform 	float _UnderlayOffsetY;
					uniform 	float _UnderlayDilate;
					uniform 	float _UnderlaySoftness;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _ScaleRatioC;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _UnderlayColor;
					uniform 	vec4 _ClipRect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
					    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
					    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 642
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %130 %195 %306 %420 %458 %464 %466 %538 %540 %634 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpMemberDecorate %22 23 Offset 22 
					                                                      OpMemberDecorate %22 24 Offset 22 
					                                                      OpMemberDecorate %22 25 Offset 22 
					                                                      OpMemberDecorate %22 26 Offset 22 
					                                                      OpMemberDecorate %22 27 Offset 22 
					                                                      OpMemberDecorate %22 28 Offset 22 
					                                                      OpMemberDecorate %22 29 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 Location 122 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %170 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %401 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %403 RelaxedPrecision 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %415 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate vs_TEXCOORD0 Location 458 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 464 
					                                                      OpDecorate %466 Location 466 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 538 
					                                                      OpDecorate vs_TEXCOORD3 Location 540 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 Location 634 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 19 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 20 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                               Output f32_4* %122 = OpVariable Output 
					                                         i32 %123 = OpConstant 6 
					                                         u32 %124 = OpConstant 3 
					                                             %127 = OpTypePointer Output %6 
					                              Private f32_4* %129 = OpVariable Private 
					                                Input f32_4* %130 = OpVariable Input 
					                                         f32 %135 = OpConstant 3,674022E-40 
					                                             %136 = OpTypePointer Private %6 
					                              Private f32_4* %138 = OpVariable Private 
					                                             %143 = OpTypePointer Private %15 
					                              Private f32_3* %144 = OpVariable Private 
					                              Private f32_4* %153 = OpVariable Private 
					                              Private f32_4* %162 = OpVariable Private 
					                                         i32 %163 = OpConstant 9 
					                                Private f32* %179 = OpVariable Private 
					                                             %194 = OpTypePointer Input %15 
					                                Input f32_3* %195 = OpVariable Input 
					                                         u32 %201 = OpConstant 0 
					                                         u32 %214 = OpConstant 2 
					                                         i32 %238 = OpConstant 4 
					                                         i32 %260 = OpConstant 27 
					                                         i32 %263 = OpConstant 28 
					                                Private f32* %277 = OpVariable Private 
					                                         i32 %283 = OpConstant 22 
					                                         i32 %286 = OpConstant 23 
					                                         f32 %290 = OpConstant 3,674022E-40 
					                                       f32_2 %291 = OpConstantComposite %290 %290 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_2* %306 = OpVariable Input 
					                                             %307 = OpTypePointer Input %6 
					                                         i32 %311 = OpConstant 26 
					                                         f32 %321 = OpConstant 3,674022E-40 
					                                Private f32* %324 = OpVariable Private 
					                                         i32 %325 = OpConstant 29 
					                                             %346 = OpTypeBool 
					                                             %347 = OpTypePointer Private %346 
					                               Private bool* %348 = OpVariable Private 
					                                         f32 %351 = OpConstant 3,674022E-40 
					                                             %354 = OpTypePointer Function %6 
					                                         i32 %363 = OpConstant 8 
					                                         i32 %366 = OpConstant 17 
					                                         i32 %378 = OpConstant 10 
					                              Private f32_2* %388 = OpVariable Private 
					                              Private f32_4* %400 = OpVariable Private 
					                               Output f32_4* %420 = OpVariable Output 
					                                         i32 %422 = OpConstant 21 
					                                         f32 %425 = OpConstant 3,674022E-40 
					                                       f32_4 %426 = OpConstantComposite %425 %425 %425 %425 
					                                         f32 %429 = OpConstant 3,674022E-40 
					                                       f32_4 %430 = OpConstantComposite %429 %429 %429 %429 
					                                         f32 %438 = OpConstant 3,674022E-40 
					                                       f32_2 %439 = OpConstantComposite %438 %438 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %466 = OpVariable Input 
					                               Private bool* %470 = OpVariable Private 
					                              Private f32_3* %477 = OpVariable Private 
					                                         i32 %478 = OpConstant 15 
					                                         i32 %482 = OpConstant 16 
					                                         i32 %499 = OpConstant 7 
					                                         f32 %513 = OpConstant 3,674022E-40 
					                                         f32 %522 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %545 = OpConstant 14 
					                                         i32 %548 = OpConstant 13 
					                                         i32 %551 = OpConstant 11 
					                                         i32 %554 = OpConstant 12 
					                                         i32 %558 = OpConstant 18 
					                                         i32 %585 = OpConstant 24 
					                                         i32 %588 = OpConstant 25 
					                                             %633 = OpTypePointer Output %7 
					                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %355 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
					                                         f32 %126 = OpLoad %125 
					                                 Output f32* %128 = OpAccessChain %122 %124 
					                                                      OpStore %128 %126 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_4 %133 = OpLoad %129 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %129 %134 
					                                Private f32* %137 = OpAccessChain %129 %124 
					                                                      OpStore %137 %135 
					                                       f32_4 %139 = OpLoad %129 
					                              Uniform f32_4* %140 = OpAccessChain %24 %123 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_4 %142 = OpFMul %139 %141 
					                                                      OpStore %138 %142 
					                                       f32_4 %145 = OpLoad %138 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 3 3 3 
					                                       f32_4 %147 = OpLoad %138 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
					                                       f32_3 %149 = OpFMul %146 %148 
					                                                      OpStore %144 %149 
					                                       f32_3 %150 = OpLoad %144 
					                                       f32_4 %151 = OpLoad %122 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %122 %152 
					                                       f32_3 %154 = OpLoad %144 
					                                       f32_3 %155 = OpFNegate %154 
					                                       f32_4 %156 = OpLoad %153 
					                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
					                                                      OpStore %153 %157 
					                                Private f32* %158 = OpAccessChain %138 %124 
					                                         f32 %159 = OpLoad %158 
					                                         f32 %160 = OpFNegate %159 
					                                Private f32* %161 = OpAccessChain %153 %124 
					                                                      OpStore %161 %160 
					                              Uniform f32_4* %164 = OpAccessChain %24 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 3 3 3 
					                              Uniform f32_4* %167 = OpAccessChain %24 %163 
					                                       f32_4 %168 = OpLoad %167 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFMul %166 %169 
					                                       f32_4 %171 = OpLoad %162 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
					                                                      OpStore %162 %172 
					                                Uniform f32* %173 = OpAccessChain %24 %163 %124 
					                                         f32 %174 = OpLoad %173 
					                                Private f32* %175 = OpAccessChain %162 %124 
					                                                      OpStore %175 %174 
					                                       f32_4 %176 = OpLoad %153 
					                                       f32_4 %177 = OpLoad %162 
					                                       f32_4 %178 = OpFAdd %176 %177 
					                                                      OpStore %153 %178 
					                                       f32_4 %180 = OpLoad %36 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_4 %182 = OpLoad %36 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
					                                         f32 %184 = OpDot %181 %183 
					                                                      OpStore %179 %184 
					                                         f32 %185 = OpLoad %179 
					                                         f32 %186 = OpExtInst %1 32 %185 
					                                                      OpStore %179 %186 
					                                         f32 %187 = OpLoad %179 
					                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
					                                       f32_4 %189 = OpLoad %36 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %188 %190 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
					                                                      OpStore %36 %193 
					                                       f32_3 %196 = OpLoad %195 
					                              Uniform f32_4* %197 = OpAccessChain %24 %62 %45 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                         f32 %200 = OpDot %196 %199 
					                                Private f32* %202 = OpAccessChain %60 %201 
					                                                      OpStore %202 %200 
					                                       f32_3 %203 = OpLoad %195 
					                              Uniform f32_4* %204 = OpAccessChain %24 %62 %40 
					                                       f32_4 %205 = OpLoad %204 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %203 %206 
					                                Private f32* %208 = OpAccessChain %60 %114 
					                                                      OpStore %208 %207 
					                                       f32_3 %209 = OpLoad %195 
					                              Uniform f32_4* %210 = OpAccessChain %24 %62 %39 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                         f32 %213 = OpDot %209 %212 
					                                Private f32* %215 = OpAccessChain %60 %214 
					                                                      OpStore %215 %213 
					                                       f32_4 %216 = OpLoad %60 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
					                                       f32_4 %218 = OpLoad %60 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                         f32 %220 = OpDot %217 %219 
					                                                      OpStore %179 %220 
					                                         f32 %221 = OpLoad %179 
					                                         f32 %222 = OpExtInst %1 32 %221 
					                                                      OpStore %179 %222 
					                                         f32 %223 = OpLoad %179 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                                       f32_4 %225 = OpLoad %60 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %60 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
					                                                      OpStore %60 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
					                                         f32 %234 = OpDot %231 %233 
					                                                      OpStore %179 %234 
					                              Uniform f32_4* %235 = OpAccessChain %24 %40 
					                                       f32_4 %236 = OpLoad %235 
					                                       f32_2 %237 = OpVectorShuffle %236 %236 1 1 
					                              Uniform f32_4* %239 = OpAccessChain %24 %238 %40 
					                                       f32_4 %240 = OpLoad %239 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                       f32_2 %242 = OpFMul %237 %241 
					                                       f32_4 %243 = OpLoad %36 
					                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 2 3 
					                                                      OpStore %36 %244 
					                              Uniform f32_4* %245 = OpAccessChain %24 %238 %45 
					                                       f32_4 %246 = OpLoad %245 
					                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
					                              Uniform f32_4* %248 = OpAccessChain %24 %40 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_2 %250 = OpVectorShuffle %249 %249 0 0 
					                                       f32_2 %251 = OpFMul %247 %250 
					                                       f32_4 %252 = OpLoad %36 
					                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
					                                       f32_2 %254 = OpFAdd %251 %253 
					                                       f32_4 %255 = OpLoad %36 
					                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
					                                                      OpStore %36 %256 
					                                       f32_4 %257 = OpLoad %36 
					                                       f32_2 %258 = OpVectorShuffle %257 %257 0 1 
					                                       f32_2 %259 = OpExtInst %1 4 %258 
					                                Uniform f32* %261 = OpAccessChain %24 %260 
					                                         f32 %262 = OpLoad %261 
					                                Uniform f32* %264 = OpAccessChain %24 %263 
					                                         f32 %265 = OpLoad %264 
					                                       f32_2 %266 = OpCompositeConstruct %262 %265 
					                                       f32_2 %267 = OpFMul %259 %266 
					                                       f32_4 %268 = OpLoad %36 
					                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 2 3 
					                                                      OpStore %36 %269 
					                                       f32_4 %270 = OpLoad %60 
					                                       f32_2 %271 = OpVectorShuffle %270 %270 3 3 
					                                       f32_4 %272 = OpLoad %36 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFDiv %271 %273 
					                                       f32_4 %275 = OpLoad %36 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %36 %276 
					                                       f32_4 %278 = OpLoad %36 
					                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
					                                       f32_4 %280 = OpLoad %36 
					                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
					                                         f32 %282 = OpDot %279 %281 
					                                                      OpStore %277 %282 
					                                Uniform f32* %284 = OpAccessChain %24 %283 
					                                         f32 %285 = OpLoad %284 
					                                Uniform f32* %287 = OpAccessChain %24 %286 
					                                         f32 %288 = OpLoad %287 
					                                       f32_2 %289 = OpCompositeConstruct %285 %288 
					                                       f32_2 %292 = OpFMul %289 %291 
					                                       f32_4 %293 = OpLoad %36 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_2 %295 = OpFAdd %292 %294 
					                                       f32_4 %296 = OpLoad %36 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
					                                                      OpStore %36 %297 
					                                       f32_4 %298 = OpLoad %36 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                       f32_2 %300 = OpFDiv %291 %299 
					                                       f32_4 %301 = OpLoad %36 
					                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
					                                                      OpStore %36 %302 
					                                         f32 %303 = OpLoad %277 
					                                         f32 %304 = OpExtInst %1 32 %303 
					                                                      OpStore %277 %304 
					                                  Input f32* %308 = OpAccessChain %306 %114 
					                                         f32 %309 = OpLoad %308 
					                                         f32 %310 = OpExtInst %1 4 %309 
					                                Uniform f32* %312 = OpAccessChain %24 %311 
					                                         f32 %313 = OpLoad %312 
					                                         f32 %314 = OpFMul %310 %313 
					                                Private f32* %315 = OpAccessChain %60 %201 
					                                                      OpStore %315 %314 
					                                         f32 %316 = OpLoad %277 
					                                Private f32* %317 = OpAccessChain %60 %201 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFMul %316 %318 
					                                                      OpStore %277 %319 
					                                         f32 %320 = OpLoad %277 
					                                         f32 %322 = OpFMul %320 %321 
					                                Private f32* %323 = OpAccessChain %60 %201 
					                                                      OpStore %323 %322 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                         f32 %328 = OpFNegate %327 
					                                         f32 %329 = OpFAdd %328 %135 
					                                                      OpStore %324 %329 
					                                         f32 %330 = OpLoad %324 
					                                Private f32* %331 = OpAccessChain %60 %201 
					                                         f32 %332 = OpLoad %331 
					                                         f32 %333 = OpExtInst %1 4 %332 
					                                         f32 %334 = OpFMul %330 %333 
					                                                      OpStore %324 %334 
					                                         f32 %335 = OpLoad %277 
					                                         f32 %336 = OpFMul %335 %321 
					                                         f32 %337 = OpLoad %324 
					                                         f32 %338 = OpFNegate %337 
					                                         f32 %339 = OpFAdd %336 %338 
					                                                      OpStore %277 %339 
					                                         f32 %340 = OpLoad %179 
					                                         f32 %341 = OpExtInst %1 4 %340 
					                                         f32 %342 = OpLoad %277 
					                                         f32 %343 = OpFMul %341 %342 
					                                         f32 %344 = OpLoad %324 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %179 %345 
					                                Uniform f32* %349 = OpAccessChain %24 %238 %62 %124 
					                                         f32 %350 = OpLoad %349 
					                                        bool %352 = OpFOrdEqual %350 %351 
					                                                      OpStore %348 %352 
					                                        bool %353 = OpLoad %348 
					                                                      OpSelectionMerge %357 None 
					                                                      OpBranchConditional %353 %356 %359 
					                                             %356 = OpLabel 
					                                         f32 %358 = OpLoad %179 
					                                                      OpStore %355 %358 
					                                                      OpBranch %357 
					                                             %359 = OpLabel 
					                                Private f32* %360 = OpAccessChain %60 %201 
					                                         f32 %361 = OpLoad %360 
					                                                      OpStore %355 %361 
					                                                      OpBranch %357 
					                                             %357 = OpLabel 
					                                         f32 %362 = OpLoad %355 
					                                                      OpStore %179 %362 
					                                Uniform f32* %364 = OpAccessChain %24 %363 
					                                         f32 %365 = OpLoad %364 
					                                Uniform f32* %367 = OpAccessChain %24 %366 
					                                         f32 %368 = OpLoad %367 
					                                         f32 %369 = OpFMul %365 %368 
					                                                      OpStore %277 %369 
					                                         f32 %370 = OpLoad %277 
					                                         f32 %371 = OpLoad %179 
					                                         f32 %372 = OpFMul %370 %371 
					                                         f32 %373 = OpFAdd %372 %135 
					                                                      OpStore %277 %373 
					                                         f32 %374 = OpLoad %179 
					                                         f32 %375 = OpLoad %277 
					                                         f32 %376 = OpFDiv %374 %375 
					                                Private f32* %377 = OpAccessChain %60 %201 
					                                                      OpStore %377 %376 
					                                Uniform f32* %379 = OpAccessChain %24 %378 
					                                         f32 %380 = OpLoad %379 
					                                Uniform f32* %381 = OpAccessChain %24 %366 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpFMul %380 %382 
					                                                      OpStore %277 %383 
					                                Private f32* %384 = OpAccessChain %60 %201 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpLoad %277 
					                                         f32 %387 = OpFMul %385 %386 
					                                                      OpStore %277 %387 
					                                         f32 %389 = OpLoad %277 
					                                         f32 %390 = OpExtInst %1 37 %389 %135 
					                                Private f32* %391 = OpAccessChain %388 %201 
					                                                      OpStore %391 %390 
					                                Private f32* %392 = OpAccessChain %388 %201 
					                                         f32 %393 = OpLoad %392 
					                                         f32 %394 = OpExtInst %1 31 %393 
					                                Private f32* %395 = OpAccessChain %388 %201 
					                                                      OpStore %395 %394 
					                                       f32_4 %396 = OpLoad %153 
					                                       f32_2 %397 = OpLoad %388 
					                                       f32_4 %398 = OpVectorShuffle %397 %397 0 0 0 0 
					                                       f32_4 %399 = OpFMul %396 %398 
					                                                      OpStore %153 %399 
					                                       f32_4 %401 = OpLoad %138 
					                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
					                                       f32_4 %403 = OpLoad %138 
					                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
					                                       f32_3 %405 = OpFMul %402 %404 
					                                       f32_4 %406 = OpLoad %153 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFAdd %405 %407 
					                                       f32_4 %409 = OpLoad %400 
					                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
					                                                      OpStore %400 %410 
					                                Private f32* %411 = OpAccessChain %129 %124 
					                                         f32 %412 = OpLoad %411 
					                                Uniform f32* %413 = OpAccessChain %24 %123 %124 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %412 %414 
					                                Private f32* %416 = OpAccessChain %153 %124 
					                                         f32 %417 = OpLoad %416 
					                                         f32 %418 = OpFAdd %415 %417 
					                                Private f32* %419 = OpAccessChain %400 %124 
					                                                      OpStore %419 %418 
					                                       f32_4 %421 = OpLoad %400 
					                                                      OpStore %420 %421 
					                              Uniform f32_4* %423 = OpAccessChain %24 %422 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_4 %427 = OpExtInst %1 40 %424 %426 
					                                                      OpStore %86 %427 
					                                       f32_4 %428 = OpLoad %86 
					                                       f32_4 %431 = OpExtInst %1 37 %428 %430 
					                                                      OpStore %86 %431 
					                                       f32_2 %432 = OpLoad %9 
					                                       f32_4 %433 = OpLoad %86 
					                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
					                                       f32_2 %435 = OpFNegate %434 
					                                       f32_2 %436 = OpFAdd %432 %435 
					                                                      OpStore %388 %436 
					                                       f32_2 %437 = OpLoad %9 
					                                       f32_2 %440 = OpFMul %437 %439 
					                                       f32_4 %441 = OpLoad %86 
					                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
					                                       f32_2 %443 = OpFNegate %442 
					                                       f32_2 %444 = OpFAdd %440 %443 
					                                                      OpStore %9 %444 
					                                       f32_4 %445 = OpLoad %86 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFNegate %446 
					                                       f32_2 %448 = OpLoad %9 
					                                       f32_2 %449 = OpFAdd %447 %448 
					                                       f32_4 %450 = OpLoad %36 
					                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
					                                                      OpStore %36 %451 
					                                       f32_4 %452 = OpLoad %86 
					                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
					                                       f32_2 %454 = OpFNegate %453 
					                                       f32_4 %455 = OpLoad %86 
					                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
					                                       f32_2 %457 = OpFAdd %454 %456 
					                                                      OpStore %9 %457 
					                                       f32_2 %459 = OpLoad %388 
					                                       f32_2 %460 = OpLoad %9 
					                                       f32_2 %461 = OpFDiv %459 %460 
					                                       f32_4 %462 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %463 
					                                       f32_4 %465 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %465 
					                                       f32_2 %467 = OpLoad %466 
					                                       f32_4 %468 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %469 
					                                  Input f32* %471 = OpAccessChain %306 %114 
					                                         f32 %472 = OpLoad %471 
					                                        bool %473 = OpFOrdGreaterThanEqual %351 %472 
					                                                      OpStore %470 %473 
					                                        bool %474 = OpLoad %470 
					                                         f32 %475 = OpSelect %474 %135 %351 
					                                Private f32* %476 = OpAccessChain %9 %201 
					                                                      OpStore %476 %475 
					                                Uniform f32* %479 = OpAccessChain %24 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFNegate %480 
					                                Uniform f32* %483 = OpAccessChain %24 %482 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpFAdd %481 %484 
					                                Private f32* %486 = OpAccessChain %477 %201 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %201 
					                                         f32 %488 = OpLoad %487 
					                                Private f32* %489 = OpAccessChain %477 %201 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Uniform f32* %492 = OpAccessChain %24 %478 
					                                         f32 %493 = OpLoad %492 
					                                         f32 %494 = OpFAdd %491 %493 
					                                Private f32* %495 = OpAccessChain %9 %201 
					                                                      OpStore %495 %494 
					                                Private f32* %496 = OpAccessChain %9 %201 
					                                         f32 %497 = OpLoad %496 
					                                         f32 %498 = OpFMul %497 %290 
					                                Uniform f32* %500 = OpAccessChain %24 %499 
					                                         f32 %501 = OpLoad %500 
					                                         f32 %502 = OpFAdd %498 %501 
					                                Private f32* %503 = OpAccessChain %9 %201 
					                                                      OpStore %503 %502 
					                                Private f32* %504 = OpAccessChain %9 %201 
					                                         f32 %505 = OpLoad %504 
					                                Uniform f32* %506 = OpAccessChain %24 %366 
					                                         f32 %507 = OpLoad %506 
					                                         f32 %508 = OpFMul %505 %507 
					                                Private f32* %509 = OpAccessChain %9 %201 
					                                                      OpStore %509 %508 
					                                Private f32* %510 = OpAccessChain %9 %201 
					                                         f32 %511 = OpLoad %510 
					                                         f32 %512 = OpFNegate %511 
					                                         f32 %514 = OpFMul %512 %513 
					                                         f32 %515 = OpFAdd %514 %513 
					                                Private f32* %516 = OpAccessChain %9 %201 
					                                                      OpStore %516 %515 
					                                Private f32* %517 = OpAccessChain %9 %201 
					                                         f32 %518 = OpLoad %517 
					                                Private f32* %519 = OpAccessChain %60 %201 
					                                         f32 %520 = OpLoad %519 
					                                         f32 %521 = OpFMul %518 %520 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %60 %124 
					                                                      OpStore %524 %523 
					                                         f32 %525 = OpLoad %277 
					                                         f32 %526 = OpFNegate %525 
					                                         f32 %527 = OpFMul %526 %513 
					                                Private f32* %528 = OpAccessChain %60 %124 
					                                         f32 %529 = OpLoad %528 
					                                         f32 %530 = OpFAdd %527 %529 
					                                Private f32* %531 = OpAccessChain %60 %114 
					                                                      OpStore %531 %530 
					                                         f32 %532 = OpLoad %277 
					                                         f32 %533 = OpFMul %532 %513 
					                                Private f32* %534 = OpAccessChain %60 %124 
					                                         f32 %535 = OpLoad %534 
					                                         f32 %536 = OpFAdd %533 %535 
					                                Private f32* %537 = OpAccessChain %60 %214 
					                                                      OpStore %537 %536 
					                                       f32_4 %539 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %539 
					                                  Input f32* %541 = OpAccessChain %130 %124 
					                                         f32 %542 = OpLoad %541 
					                                 Output f32* %543 = OpAccessChain vs_TEXCOORD3 %214 
					                                                      OpStore %543 %542 
					                                 Output f32* %544 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %544 %351 
					                                Uniform f32* %546 = OpAccessChain %24 %545 
					                                         f32 %547 = OpLoad %546 
					                                Uniform f32* %549 = OpAccessChain %24 %548 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %24 %551 
					                                         f32 %553 = OpLoad %552 
					                                Uniform f32* %555 = OpAccessChain %24 %554 
					                                         f32 %556 = OpLoad %555 
					                                       f32_4 %557 = OpCompositeConstruct %547 %550 %553 %556 
					                                Uniform f32* %559 = OpAccessChain %24 %558 
					                                         f32 %560 = OpLoad %559 
					                                Uniform f32* %561 = OpAccessChain %24 %558 
					                                         f32 %562 = OpLoad %561 
					                                Uniform f32* %563 = OpAccessChain %24 %558 
					                                         f32 %564 = OpLoad %563 
					                                Uniform f32* %565 = OpAccessChain %24 %558 
					                                         f32 %566 = OpLoad %565 
					                                       f32_4 %567 = OpCompositeConstruct %560 %562 %564 %566 
					                                         f32 %568 = OpCompositeExtract %567 0 
					                                         f32 %569 = OpCompositeExtract %567 1 
					                                         f32 %570 = OpCompositeExtract %567 2 
					                                         f32 %571 = OpCompositeExtract %567 3 
					                                       f32_4 %572 = OpCompositeConstruct %568 %569 %570 %571 
					                                       f32_4 %573 = OpFMul %557 %572 
					                                                      OpStore %36 %573 
					                                       f32_4 %574 = OpLoad %36 
					                                       f32_2 %575 = OpVectorShuffle %574 %574 2 3 
					                                       f32_2 %576 = OpFNegate %575 
					                                Uniform f32* %577 = OpAccessChain %24 %311 
					                                         f32 %578 = OpLoad %577 
					                                       f32_2 %579 = OpCompositeConstruct %578 %578 
					                                       f32_2 %580 = OpFMul %576 %579 
					                                       f32_3 %581 = OpLoad %477 
					                                       f32_3 %582 = OpVectorShuffle %581 %580 3 1 4 
					                                                      OpStore %477 %582 
					                                       f32_3 %583 = OpLoad %477 
					                                       f32_2 %584 = OpVectorShuffle %583 %583 0 2 
					                                Uniform f32* %586 = OpAccessChain %24 %585 
					                                         f32 %587 = OpLoad %586 
					                                Uniform f32* %589 = OpAccessChain %24 %588 
					                                         f32 %590 = OpLoad %589 
					                                       f32_2 %591 = OpCompositeConstruct %587 %590 
					                                       f32_2 %592 = OpFDiv %584 %591 
					                                       f32_3 %593 = OpLoad %477 
					                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
					                                                      OpStore %477 %594 
					                                       f32_3 %595 = OpLoad %477 
					                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
					                                       f32_2 %597 = OpLoad %466 
					                                       f32_2 %598 = OpFAdd %596 %597 
					                                       f32_4 %599 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %600 = OpVectorShuffle %599 %598 4 5 2 3 
					                                                      OpStore vs_TEXCOORD3 %600 
					                                Private f32* %601 = OpAccessChain %36 %201 
					                                         f32 %602 = OpLoad %601 
					                                         f32 %603 = OpLoad %179 
					                                         f32 %604 = OpFMul %602 %603 
					                                         f32 %605 = OpFAdd %604 %135 
					                                Private f32* %606 = OpAccessChain %477 %201 
					                                                      OpStore %606 %605 
					                                         f32 %607 = OpLoad %179 
					                                Private f32* %608 = OpAccessChain %477 %201 
					                                         f32 %609 = OpLoad %608 
					                                         f32 %610 = OpFDiv %607 %609 
					                                Private f32* %611 = OpAccessChain %60 %201 
					                                                      OpStore %611 %610 
					                                Private f32* %612 = OpAccessChain %36 %114 
					                                         f32 %613 = OpLoad %612 
					                                Private f32* %614 = OpAccessChain %60 %201 
					                                         f32 %615 = OpLoad %614 
					                                         f32 %616 = OpFMul %613 %615 
					                                Private f32* %617 = OpAccessChain %477 %201 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %9 %201 
					                                         f32 %619 = OpLoad %618 
					                                Private f32* %620 = OpAccessChain %60 %201 
					                                         f32 %621 = OpLoad %620 
					                                         f32 %622 = OpFMul %619 %621 
					                                         f32 %623 = OpFAdd %622 %522 
					                                Private f32* %624 = OpAccessChain %9 %201 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %477 %201 
					                                         f32 %626 = OpLoad %625 
					                                         f32 %627 = OpFNegate %626 
					                                         f32 %628 = OpFMul %627 %513 
					                                Private f32* %629 = OpAccessChain %9 %201 
					                                         f32 %630 = OpLoad %629 
					                                         f32 %631 = OpFAdd %628 %630 
					                                Private f32* %632 = OpAccessChain %60 %114 
					                                                      OpStore %632 %631 
					                                       f32_4 %635 = OpLoad %60 
					                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
					                                                      OpStore vs_TEXCOORD4 %636 
					                                 Output f32* %637 = OpAccessChain %118 %45 %114 
					                                         f32 %638 = OpLoad %637 
					                                         f32 %639 = OpFNegate %638 
					                                 Output f32* %640 = OpAccessChain %118 %45 %114 
					                                                      OpStore %640 %639 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 176
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %32 %77 %83 %96 %123 %160 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD3 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %29 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 Location 32 
					                                             OpDecorate %36 RelaxedPrecision 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %40 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %48 RelaxedPrecision 
					                                             OpMemberDecorate %49 0 RelaxedPrecision 
					                                             OpMemberDecorate %49 0 Offset 49 
					                                             OpMemberDecorate %49 1 Offset 49 
					                                             OpDecorate %49 Block 
					                                             OpDecorate %51 DescriptorSet 51 
					                                             OpDecorate %51 Binding 51 
					                                             OpDecorate %57 RelaxedPrecision 
					                                             OpDecorate %58 RelaxedPrecision 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %62 RelaxedPrecision 
					                                             OpDecorate %67 RelaxedPrecision 
					                                             OpDecorate %69 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %71 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %73 RelaxedPrecision 
					                                             OpDecorate %74 RelaxedPrecision 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 77 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 83 
					                                             OpDecorate %85 RelaxedPrecision 
					                                             OpDecorate %86 RelaxedPrecision 
					                                             OpDecorate %88 RelaxedPrecision 
					                                             OpDecorate %89 RelaxedPrecision 
					                                             OpDecorate %90 RelaxedPrecision 
					                                             OpDecorate %91 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate %95 RelaxedPrecision 
					                                             OpDecorate %96 RelaxedPrecision 
					                                             OpDecorate %96 Location 96 
					                                             OpDecorate %97 RelaxedPrecision 
					                                             OpDecorate %98 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %103 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 123 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %125 RelaxedPrecision 
					                                             OpDecorate %126 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate %142 RelaxedPrecision 
					                                             OpDecorate %143 RelaxedPrecision 
					                                             OpDecorate %144 RelaxedPrecision 
					                                             OpDecorate %145 RelaxedPrecision 
					                                             OpDecorate %147 RelaxedPrecision 
					                                             OpDecorate %155 RelaxedPrecision 
					                                             OpDecorate %160 RelaxedPrecision 
					                                             OpDecorate %160 Location 160 
					                                             OpDecorate %165 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                        Private f32* %29 = OpVariable Private 
					                                     %31 = OpTypePointer Input %22 
					               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
					                                 u32 %33 = OpConstant 0 
					                                     %34 = OpTypePointer Input %6 
					                                 u32 %38 = OpConstant 1 
					                                 f32 %44 = OpConstant 3,674022E-40 
					                                 f32 %45 = OpConstant 3,674022E-40 
					                                     %47 = OpTypePointer Private %19 
					                      Private f32_4* %48 = OpVariable Private 
					                                     %49 = OpTypeStruct %19 %19 
					                                     %50 = OpTypePointer Uniform %49 
					     Uniform struct {f32_4; f32_4;}* %51 = OpVariable Uniform 
					                                     %52 = OpTypeInt 32 1 
					                                 i32 %53 = OpConstant 0 
					                                     %54 = OpTypeVector %6 3 
					                                     %55 = OpTypePointer Uniform %19 
					                                     %65 = OpTypePointer Uniform %6 
					                        Private f32* %73 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                      Private f32_4* %93 = OpVariable Private 
					                        Input f32_4* %96 = OpVariable Input 
					                                    %111 = OpTypePointer Private %22 
					                     Private f32_2* %112 = OpVariable Private 
					                                i32 %113 = OpConstant 1 
					               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                u32 %148 = OpConstant 2 
					                                f32 %152 = OpConstant 3,674022E-40 
					                     Private f32_4* %154 = OpVariable Private 
					                                    %159 = OpTypePointer Output %19 
					                      Output f32_4* %160 = OpVariable Output 
					                                    %162 = OpTypeBool 
					                                    %163 = OpTypePointer Private %162 
					                      Private bool* %164 = OpVariable Private 
					                                i32 %169 = OpConstant -1 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD3 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %30 = OpLoad %8 
					                          Input f32* %35 = OpAccessChain vs_TEXCOORD4 %33 
					                                 f32 %36 = OpLoad %35 
					                                 f32 %37 = OpFMul %30 %36 
					                          Input f32* %39 = OpAccessChain vs_TEXCOORD4 %38 
					                                 f32 %40 = OpLoad %39 
					                                 f32 %41 = OpFNegate %40 
					                                 f32 %42 = OpFAdd %37 %41 
					                                             OpStore %29 %42 
					                                 f32 %43 = OpLoad %29 
					                                 f32 %46 = OpExtInst %1 43 %43 %44 %45 
					                                             OpStore %29 %46 
					                      Uniform f32_4* %56 = OpAccessChain %51 %53 
					                               f32_4 %57 = OpLoad %56 
					                               f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
					                      Uniform f32_4* %59 = OpAccessChain %51 %53 
					                               f32_4 %60 = OpLoad %59 
					                               f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
					                               f32_3 %62 = OpFMul %58 %61 
					                               f32_4 %63 = OpLoad %48 
					                               f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
					                                             OpStore %48 %64 
					                        Uniform f32* %66 = OpAccessChain %51 %53 %27 
					                                 f32 %67 = OpLoad %66 
					                        Private f32* %68 = OpAccessChain %48 %27 
					                                             OpStore %68 %67 
					                                 f32 %69 = OpLoad %29 
					                               f32_4 %70 = OpCompositeConstruct %69 %69 %69 %69 
					                               f32_4 %71 = OpLoad %48 
					                               f32_4 %72 = OpFMul %70 %71 
					                                             OpStore %48 %72 
					                 read_only Texture2D %74 = OpLoad %11 
					                             sampler %75 = OpLoad %15 
					          read_only Texture2DSampled %76 = OpSampledImage %74 %75 
					                               f32_4 %78 = OpLoad vs_TEXCOORD0 
					                               f32_2 %79 = OpVectorShuffle %78 %78 0 1 
					                               f32_4 %80 = OpImageSampleImplicitLod %76 %79 
					                                 f32 %81 = OpCompositeExtract %80 3 
					                                             OpStore %73 %81 
					                                 f32 %82 = OpLoad %73 
					                          Input f32* %84 = OpAccessChain vs_TEXCOORD1 %33 
					                                 f32 %85 = OpLoad %84 
					                                 f32 %86 = OpFMul %82 %85 
					                          Input f32* %87 = OpAccessChain vs_TEXCOORD1 %27 
					                                 f32 %88 = OpLoad %87 
					                                 f32 %89 = OpFNegate %88 
					                                 f32 %90 = OpFAdd %86 %89 
					                                             OpStore %29 %90 
					                                 f32 %91 = OpLoad %29 
					                                 f32 %92 = OpExtInst %1 43 %91 %44 %45 
					                                             OpStore %29 %92 
					                                 f32 %94 = OpLoad %29 
					                               f32_4 %95 = OpCompositeConstruct %94 %94 %94 %94 
					                               f32_4 %97 = OpLoad %96 
					                               f32_4 %98 = OpFMul %95 %97 
					                                             OpStore %93 %98 
					                          Input f32* %99 = OpAccessChain %96 %27 
					                                f32 %100 = OpLoad %99 
					                                f32 %101 = OpFNegate %100 
					                                f32 %102 = OpLoad %29 
					                                f32 %103 = OpFMul %101 %102 
					                                f32 %104 = OpFAdd %103 %45 
					                                             OpStore %29 %104 
					                              f32_4 %105 = OpLoad %48 
					                                f32 %106 = OpLoad %29 
					                              f32_4 %107 = OpCompositeConstruct %106 %106 %106 %106 
					                              f32_4 %108 = OpFMul %105 %107 
					                              f32_4 %109 = OpLoad %93 
					                              f32_4 %110 = OpFAdd %108 %109 
					                                             OpStore %48 %110 
					                     Uniform f32_4* %114 = OpAccessChain %51 %113 
					                              f32_4 %115 = OpLoad %114 
					                              f32_2 %116 = OpVectorShuffle %115 %115 0 1 
					                              f32_2 %117 = OpFNegate %116 
					                     Uniform f32_4* %118 = OpAccessChain %51 %113 
					                              f32_4 %119 = OpLoad %118 
					                              f32_2 %120 = OpVectorShuffle %119 %119 2 3 
					                              f32_2 %121 = OpFAdd %117 %120 
					                                             OpStore %112 %121 
					                              f32_2 %122 = OpLoad %112 
					                              f32_4 %124 = OpLoad vs_TEXCOORD2 
					                              f32_2 %125 = OpVectorShuffle %124 %124 0 1 
					                              f32_2 %126 = OpExtInst %1 4 %125 
					                              f32_2 %127 = OpFNegate %126 
					                              f32_2 %128 = OpFAdd %122 %127 
					                                             OpStore %112 %128 
					                              f32_2 %129 = OpLoad %112 
					                              f32_4 %130 = OpLoad vs_TEXCOORD2 
					                              f32_2 %131 = OpVectorShuffle %130 %130 2 3 
					                              f32_2 %132 = OpFMul %129 %131 
					                                             OpStore %112 %132 
					                              f32_2 %133 = OpLoad %112 
					                              f32_2 %134 = OpCompositeConstruct %44 %44 
					                              f32_2 %135 = OpCompositeConstruct %45 %45 
					                              f32_2 %136 = OpExtInst %1 43 %133 %134 %135 
					                                             OpStore %112 %136 
					                       Private f32* %137 = OpAccessChain %112 %38 
					                                f32 %138 = OpLoad %137 
					                       Private f32* %139 = OpAccessChain %112 %33 
					                                f32 %140 = OpLoad %139 
					                                f32 %141 = OpFMul %138 %140 
					                                             OpStore %29 %141 
					                              f32_4 %142 = OpLoad %48 
					                                f32 %143 = OpLoad %29 
					                              f32_4 %144 = OpCompositeConstruct %143 %143 %143 %143 
					                              f32_4 %145 = OpFMul %142 %144 
					                                             OpStore %48 %145 
					                       Private f32* %146 = OpAccessChain %48 %27 
					                                f32 %147 = OpLoad %146 
					                         Input f32* %149 = OpAccessChain vs_TEXCOORD3 %148 
					                                f32 %150 = OpLoad %149 
					                                f32 %151 = OpFMul %147 %150 
					                                f32 %153 = OpFAdd %151 %152 
					                                             OpStore %29 %153 
					                              f32_4 %155 = OpLoad %48 
					                              f32_4 %156 = OpLoad vs_TEXCOORD3 
					                              f32_4 %157 = OpVectorShuffle %156 %156 2 2 2 2 
					                              f32_4 %158 = OpFMul %155 %157 
					                                             OpStore %154 %158 
					                              f32_4 %161 = OpLoad %154 
					                                             OpStore %160 %161 
					                                f32 %165 = OpLoad %29 
					                               bool %166 = OpFOrdLessThan %165 %44 
					                                             OpStore %164 %166 
					                               bool %167 = OpLoad %164 
					                                i32 %168 = OpSelect %167 %113 %53 
					                                i32 %170 = OpIMul %168 %169 
					                               bool %171 = OpINotEqual %170 %53 
					                                             OpSelectionMerge %173 None 
					                                             OpBranchConditional %171 %172 %173 
					                                    %172 = OpLabel 
					                                             OpKill
					                                    %173 = OpLabel 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[12];
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_11[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_18[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * unity_MatrixVP[1];
					    u_xlat3 = unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x
					#ifdef VERTEX
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _FaceColor;
					uniform 	float _FaceDilate;
					uniform 	float _OutlineSoftness;
					uniform 	vec4 _OutlineColor;
					uniform 	float _OutlineWidth;
					uniform 	float _UnderlayOffsetX;
					uniform 	float _UnderlayOffsetY;
					uniform 	float _UnderlayDilate;
					uniform 	float _UnderlaySoftness;
					uniform 	float _WeightNormal;
					uniform 	float _WeightBold;
					uniform 	float _ScaleRatioA;
					uniform 	float _ScaleRatioC;
					uniform 	float _VertexOffsetX;
					uniform 	float _VertexOffsetY;
					uniform 	vec4 _ClipRect;
					uniform 	float _MaskSoftnessX;
					uniform 	float _MaskSoftnessY;
					uniform 	float _TextureWidth;
					uniform 	float _TextureHeight;
					uniform 	float _GradientScale;
					uniform 	float _ScaleX;
					uniform 	float _ScaleY;
					uniform 	float _PerspectiveFilter;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat14;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_COLOR0.w = _FaceColor.w;
					    u_xlat3.xyz = in_COLOR0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4 = u_xlat3 * _FaceColor;
					    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
					    vs_COLOR0.xyz = u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz);
					    u_xlat5.w = (-u_xlat4.w);
					    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
					    u_xlat6.w = _OutlineColor.w;
					    u_xlat5 = u_xlat5 + u_xlat6;
					    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat1.x = u_xlat21 * 1.5;
					    u_xlat8.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);
					    u_xlat21 = u_xlat21 * 1.5 + (-u_xlat8.x);
					    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat8.x;
					    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
					    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat1.x;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
					    u_xlat1.x = u_xlat14 / u_xlat21;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * 0.5;
					    u_xlat8.x = u_xlat1.x * u_xlat21;
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat8.x = min(u_xlat8.x, 1.0);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
					    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
					    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
					    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
					    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
					    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat7.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
					    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
					    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    vs_TEXCOORD3.z = in_COLOR0.w;
					    vs_TEXCOORD3.w = 0.0;
					    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
					    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
					    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
					    u_xlat7.x = u_xlat14 / u_xlat7.x;
					    u_xlat14 = u_xlat1.y * 0.5;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
					    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat7.x;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 150
					#extension GL_ARB_explicit_attrib_location : require
					#ifdef GL_ARB_shader_bit_encoding
					#extension GL_ARB_shader_bit_encoding : enable
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _UnderlayColor;
					uniform 	vec4 _ClipRect;
					UNITY_LOCATION(0) uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
					    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}
					
					#endif"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vulkan
					
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 642
					; Schema: 0
					                                                      OpCapability Shader 
					                                               %1 = OpExtInstImport "GLSL.std.450" 
					                                                      OpMemoryModel Logical GLSL450 
					                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %130 %195 %306 %420 %458 %464 %466 %538 %540 %634 
					                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                                      OpDecorate %12 Location 12 
					                                                      OpDecorate %18 ArrayStride 18 
					                                                      OpDecorate %19 ArrayStride 19 
					                                                      OpDecorate %20 ArrayStride 20 
					                                                      OpDecorate %21 ArrayStride 21 
					                                                      OpMemberDecorate %22 0 Offset 22 
					                                                      OpMemberDecorate %22 1 Offset 22 
					                                                      OpMemberDecorate %22 2 Offset 22 
					                                                      OpMemberDecorate %22 3 Offset 22 
					                                                      OpMemberDecorate %22 4 Offset 22 
					                                                      OpMemberDecorate %22 5 Offset 22 
					                                                      OpMemberDecorate %22 6 RelaxedPrecision 
					                                                      OpMemberDecorate %22 6 Offset 22 
					                                                      OpMemberDecorate %22 7 Offset 22 
					                                                      OpMemberDecorate %22 8 Offset 22 
					                                                      OpMemberDecorate %22 9 RelaxedPrecision 
					                                                      OpMemberDecorate %22 9 Offset 22 
					                                                      OpMemberDecorate %22 10 Offset 22 
					                                                      OpMemberDecorate %22 11 Offset 22 
					                                                      OpMemberDecorate %22 12 Offset 22 
					                                                      OpMemberDecorate %22 13 Offset 22 
					                                                      OpMemberDecorate %22 14 Offset 22 
					                                                      OpMemberDecorate %22 15 Offset 22 
					                                                      OpMemberDecorate %22 16 Offset 22 
					                                                      OpMemberDecorate %22 17 Offset 22 
					                                                      OpMemberDecorate %22 18 Offset 22 
					                                                      OpMemberDecorate %22 19 Offset 22 
					                                                      OpMemberDecorate %22 20 Offset 22 
					                                                      OpMemberDecorate %22 21 Offset 22 
					                                                      OpMemberDecorate %22 22 Offset 22 
					                                                      OpMemberDecorate %22 23 Offset 22 
					                                                      OpMemberDecorate %22 24 Offset 22 
					                                                      OpMemberDecorate %22 25 Offset 22 
					                                                      OpMemberDecorate %22 26 Offset 22 
					                                                      OpMemberDecorate %22 27 Offset 22 
					                                                      OpMemberDecorate %22 28 Offset 22 
					                                                      OpMemberDecorate %22 29 Offset 22 
					                                                      OpDecorate %22 Block 
					                                                      OpDecorate %24 DescriptorSet 24 
					                                                      OpDecorate %24 Binding 24 
					                                                      OpMemberDecorate %116 0 BuiltIn 116 
					                                                      OpMemberDecorate %116 1 BuiltIn 116 
					                                                      OpMemberDecorate %116 2 BuiltIn 116 
					                                                      OpDecorate %116 Block 
					                                                      OpDecorate %122 RelaxedPrecision 
					                                                      OpDecorate %122 Location 122 
					                                                      OpDecorate %126 RelaxedPrecision 
					                                                      OpDecorate %129 RelaxedPrecision 
					                                                      OpDecorate %130 RelaxedPrecision 
					                                                      OpDecorate %130 Location 130 
					                                                      OpDecorate %131 RelaxedPrecision 
					                                                      OpDecorate %132 RelaxedPrecision 
					                                                      OpDecorate %138 RelaxedPrecision 
					                                                      OpDecorate %139 RelaxedPrecision 
					                                                      OpDecorate %141 RelaxedPrecision 
					                                                      OpDecorate %142 RelaxedPrecision 
					                                                      OpDecorate %144 RelaxedPrecision 
					                                                      OpDecorate %145 RelaxedPrecision 
					                                                      OpDecorate %146 RelaxedPrecision 
					                                                      OpDecorate %147 RelaxedPrecision 
					                                                      OpDecorate %148 RelaxedPrecision 
					                                                      OpDecorate %149 RelaxedPrecision 
					                                                      OpDecorate %150 RelaxedPrecision 
					                                                      OpDecorate %154 RelaxedPrecision 
					                                                      OpDecorate %155 RelaxedPrecision 
					                                                      OpDecorate %159 RelaxedPrecision 
					                                                      OpDecorate %160 RelaxedPrecision 
					                                                      OpDecorate %162 RelaxedPrecision 
					                                                      OpDecorate %165 RelaxedPrecision 
					                                                      OpDecorate %166 RelaxedPrecision 
					                                                      OpDecorate %168 RelaxedPrecision 
					                                                      OpDecorate %169 RelaxedPrecision 
					                                                      OpDecorate %170 RelaxedPrecision 
					                                                      OpDecorate %174 RelaxedPrecision 
					                                                      OpDecorate %177 RelaxedPrecision 
					                                                      OpDecorate %195 Location 195 
					                                                      OpDecorate %306 Location 306 
					                                                      OpDecorate %401 RelaxedPrecision 
					                                                      OpDecorate %402 RelaxedPrecision 
					                                                      OpDecorate %403 RelaxedPrecision 
					                                                      OpDecorate %404 RelaxedPrecision 
					                                                      OpDecorate %405 RelaxedPrecision 
					                                                      OpDecorate %412 RelaxedPrecision 
					                                                      OpDecorate %414 RelaxedPrecision 
					                                                      OpDecorate %415 RelaxedPrecision 
					                                                      OpDecorate %420 RelaxedPrecision 
					                                                      OpDecorate %420 Location 420 
					                                                      OpDecorate vs_TEXCOORD0 Location 458 
					                                                      OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD2 Location 464 
					                                                      OpDecorate %466 Location 466 
					                                                      OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD1 Location 538 
					                                                      OpDecorate vs_TEXCOORD3 Location 540 
					                                                      OpDecorate %542 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                                      OpDecorate vs_TEXCOORD4 Location 634 
					                                               %2 = OpTypeVoid 
					                                               %3 = OpTypeFunction %2 
					                                               %6 = OpTypeFloat 32 
					                                               %7 = OpTypeVector %6 2 
					                                               %8 = OpTypePointer Private %7 
					                                Private f32_2* %9 = OpVariable Private 
					                                              %10 = OpTypeVector %6 4 
					                                              %11 = OpTypePointer Input %10 
					                                 Input f32_4* %12 = OpVariable Input 
					                                              %15 = OpTypeVector %6 3 
					                                              %16 = OpTypeInt 32 0 
					                                          u32 %17 = OpConstant 4 
					                                              %18 = OpTypeArray %10 %17 
					                                              %19 = OpTypeArray %10 %17 
					                                              %20 = OpTypeArray %10 %17 
					                                              %21 = OpTypeArray %10 %17 
					                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 
					                                              %23 = OpTypePointer Uniform %22 
					Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
					                                              %25 = OpTypeInt 32 1 
					                                          i32 %26 = OpConstant 19 
					                                              %27 = OpTypePointer Uniform %6 
					                                          i32 %30 = OpConstant 20 
					                                              %35 = OpTypePointer Private %10 
					                               Private f32_4* %36 = OpVariable Private 
					                                          i32 %39 = OpConstant 2 
					                                          i32 %40 = OpConstant 1 
					                                              %41 = OpTypePointer Uniform %10 
					                                          i32 %45 = OpConstant 0 
					                               Private f32_4* %60 = OpVariable Private 
					                                          i32 %62 = OpConstant 3 
					                                              %80 = OpTypePointer Uniform %15 
					                               Private f32_4* %86 = OpVariable Private 
					                                          i32 %89 = OpConstant 5 
					                                         u32 %114 = OpConstant 1 
					                                             %115 = OpTypeArray %6 %114 
					                                             %116 = OpTypeStruct %10 %6 %115 
					                                             %117 = OpTypePointer Output %116 
					        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
					                                             %120 = OpTypePointer Output %10 
					                               Output f32_4* %122 = OpVariable Output 
					                                         i32 %123 = OpConstant 6 
					                                         u32 %124 = OpConstant 3 
					                                             %127 = OpTypePointer Output %6 
					                              Private f32_4* %129 = OpVariable Private 
					                                Input f32_4* %130 = OpVariable Input 
					                                         f32 %135 = OpConstant 3,674022E-40 
					                                             %136 = OpTypePointer Private %6 
					                              Private f32_4* %138 = OpVariable Private 
					                                             %143 = OpTypePointer Private %15 
					                              Private f32_3* %144 = OpVariable Private 
					                              Private f32_4* %153 = OpVariable Private 
					                              Private f32_4* %162 = OpVariable Private 
					                                         i32 %163 = OpConstant 9 
					                                Private f32* %179 = OpVariable Private 
					                                             %194 = OpTypePointer Input %15 
					                                Input f32_3* %195 = OpVariable Input 
					                                         u32 %201 = OpConstant 0 
					                                         u32 %214 = OpConstant 2 
					                                         i32 %238 = OpConstant 4 
					                                         i32 %260 = OpConstant 27 
					                                         i32 %263 = OpConstant 28 
					                                Private f32* %277 = OpVariable Private 
					                                         i32 %283 = OpConstant 22 
					                                         i32 %286 = OpConstant 23 
					                                         f32 %290 = OpConstant 3,674022E-40 
					                                       f32_2 %291 = OpConstantComposite %290 %290 
					                                             %305 = OpTypePointer Input %7 
					                                Input f32_2* %306 = OpVariable Input 
					                                             %307 = OpTypePointer Input %6 
					                                         i32 %311 = OpConstant 26 
					                                         f32 %321 = OpConstant 3,674022E-40 
					                                Private f32* %324 = OpVariable Private 
					                                         i32 %325 = OpConstant 29 
					                                             %346 = OpTypeBool 
					                                             %347 = OpTypePointer Private %346 
					                               Private bool* %348 = OpVariable Private 
					                                         f32 %351 = OpConstant 3,674022E-40 
					                                             %354 = OpTypePointer Function %6 
					                                         i32 %363 = OpConstant 8 
					                                         i32 %366 = OpConstant 17 
					                                         i32 %378 = OpConstant 10 
					                              Private f32_2* %388 = OpVariable Private 
					                              Private f32_4* %400 = OpVariable Private 
					                               Output f32_4* %420 = OpVariable Output 
					                                         i32 %422 = OpConstant 21 
					                                         f32 %425 = OpConstant 3,674022E-40 
					                                       f32_4 %426 = OpConstantComposite %425 %425 %425 %425 
					                                         f32 %429 = OpConstant 3,674022E-40 
					                                       f32_4 %430 = OpConstantComposite %429 %429 %429 %429 
					                                         f32 %438 = OpConstant 3,674022E-40 
					                                       f32_2 %439 = OpConstantComposite %438 %438 
					                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
					                                Input f32_2* %466 = OpVariable Input 
					                               Private bool* %470 = OpVariable Private 
					                              Private f32_3* %477 = OpVariable Private 
					                                         i32 %478 = OpConstant 15 
					                                         i32 %482 = OpConstant 16 
					                                         i32 %499 = OpConstant 7 
					                                         f32 %513 = OpConstant 3,674022E-40 
					                                         f32 %522 = OpConstant 3,674022E-40 
					                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
					                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
					                                         i32 %545 = OpConstant 14 
					                                         i32 %548 = OpConstant 13 
					                                         i32 %551 = OpConstant 11 
					                                         i32 %554 = OpConstant 12 
					                                         i32 %558 = OpConstant 18 
					                                         i32 %585 = OpConstant 24 
					                                         i32 %588 = OpConstant 25 
					                                             %633 = OpTypePointer Output %7 
					                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
					                                          void %4 = OpFunction None %3 
					                                               %5 = OpLabel 
					                               Function f32* %355 = OpVariable Function 
					                                        f32_4 %13 = OpLoad %12 
					                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
					                                 Uniform f32* %28 = OpAccessChain %24 %26 
					                                          f32 %29 = OpLoad %28 
					                                 Uniform f32* %31 = OpAccessChain %24 %30 
					                                          f32 %32 = OpLoad %31 
					                                        f32_2 %33 = OpCompositeConstruct %29 %32 
					                                        f32_2 %34 = OpFAdd %14 %33 
					                                                      OpStore %9 %34 
					                                        f32_2 %37 = OpLoad %9 
					                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
					                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
					                                        f32_4 %43 = OpLoad %42 
					                                        f32_4 %44 = OpFMul %38 %43 
					                                                      OpStore %36 %44 
					                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
					                                        f32_4 %47 = OpLoad %46 
					                                        f32_2 %48 = OpLoad %9 
					                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
					                                        f32_4 %50 = OpFMul %47 %49 
					                                        f32_4 %51 = OpLoad %36 
					                                        f32_4 %52 = OpFAdd %50 %51 
					                                                      OpStore %36 %52 
					                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
					                                        f32_4 %54 = OpLoad %53 
					                                        f32_4 %55 = OpLoad %12 
					                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
					                                        f32_4 %57 = OpFMul %54 %56 
					                                        f32_4 %58 = OpLoad %36 
					                                        f32_4 %59 = OpFAdd %57 %58 
					                                                      OpStore %36 %59 
					                                        f32_4 %61 = OpLoad %36 
					                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
					                                        f32_4 %64 = OpLoad %63 
					                                        f32_4 %65 = OpFAdd %61 %64 
					                                                      OpStore %60 %65 
					                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
					                                        f32_4 %67 = OpLoad %66 
					                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
					                                        f32_4 %69 = OpLoad %12 
					                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
					                                        f32_3 %71 = OpFMul %68 %70 
					                                        f32_4 %72 = OpLoad %36 
					                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
					                                        f32_3 %74 = OpFAdd %71 %73 
					                                        f32_4 %75 = OpLoad %36 
					                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
					                                                      OpStore %36 %76 
					                                        f32_4 %77 = OpLoad %36 
					                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
					                                        f32_3 %79 = OpFNegate %78 
					                               Uniform f32_3* %81 = OpAccessChain %24 %45 
					                                        f32_3 %82 = OpLoad %81 
					                                        f32_3 %83 = OpFAdd %79 %82 
					                                        f32_4 %84 = OpLoad %36 
					                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
					                                                      OpStore %36 %85 
					                                        f32_4 %87 = OpLoad %60 
					                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
					                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
					                                        f32_4 %91 = OpLoad %90 
					                                        f32_4 %92 = OpFMul %88 %91 
					                                                      OpStore %86 %92 
					                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
					                                        f32_4 %94 = OpLoad %93 
					                                        f32_4 %95 = OpLoad %60 
					                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
					                                        f32_4 %97 = OpFMul %94 %96 
					                                        f32_4 %98 = OpLoad %86 
					                                        f32_4 %99 = OpFAdd %97 %98 
					                                                      OpStore %86 %99 
					                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
					                                       f32_4 %101 = OpLoad %100 
					                                       f32_4 %102 = OpLoad %60 
					                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
					                                       f32_4 %104 = OpFMul %101 %103 
					                                       f32_4 %105 = OpLoad %86 
					                                       f32_4 %106 = OpFAdd %104 %105 
					                                                      OpStore %86 %106 
					                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
					                                       f32_4 %108 = OpLoad %107 
					                                       f32_4 %109 = OpLoad %60 
					                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
					                                       f32_4 %111 = OpFMul %108 %110 
					                                       f32_4 %112 = OpLoad %86 
					                                       f32_4 %113 = OpFAdd %111 %112 
					                                                      OpStore %60 %113 
					                                       f32_4 %119 = OpLoad %60 
					                               Output f32_4* %121 = OpAccessChain %118 %45 
					                                                      OpStore %121 %119 
					                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
					                                         f32 %126 = OpLoad %125 
					                                 Output f32* %128 = OpAccessChain %122 %124 
					                                                      OpStore %128 %126 
					                                       f32_4 %131 = OpLoad %130 
					                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
					                                       f32_4 %133 = OpLoad %129 
					                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
					                                                      OpStore %129 %134 
					                                Private f32* %137 = OpAccessChain %129 %124 
					                                                      OpStore %137 %135 
					                                       f32_4 %139 = OpLoad %129 
					                              Uniform f32_4* %140 = OpAccessChain %24 %123 
					                                       f32_4 %141 = OpLoad %140 
					                                       f32_4 %142 = OpFMul %139 %141 
					                                                      OpStore %138 %142 
					                                       f32_4 %145 = OpLoad %138 
					                                       f32_3 %146 = OpVectorShuffle %145 %145 3 3 3 
					                                       f32_4 %147 = OpLoad %138 
					                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
					                                       f32_3 %149 = OpFMul %146 %148 
					                                                      OpStore %144 %149 
					                                       f32_3 %150 = OpLoad %144 
					                                       f32_4 %151 = OpLoad %122 
					                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
					                                                      OpStore %122 %152 
					                                       f32_3 %154 = OpLoad %144 
					                                       f32_3 %155 = OpFNegate %154 
					                                       f32_4 %156 = OpLoad %153 
					                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
					                                                      OpStore %153 %157 
					                                Private f32* %158 = OpAccessChain %138 %124 
					                                         f32 %159 = OpLoad %158 
					                                         f32 %160 = OpFNegate %159 
					                                Private f32* %161 = OpAccessChain %153 %124 
					                                                      OpStore %161 %160 
					                              Uniform f32_4* %164 = OpAccessChain %24 %163 
					                                       f32_4 %165 = OpLoad %164 
					                                       f32_3 %166 = OpVectorShuffle %165 %165 3 3 3 
					                              Uniform f32_4* %167 = OpAccessChain %24 %163 
					                                       f32_4 %168 = OpLoad %167 
					                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
					                                       f32_3 %170 = OpFMul %166 %169 
					                                       f32_4 %171 = OpLoad %162 
					                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
					                                                      OpStore %162 %172 
					                                Uniform f32* %173 = OpAccessChain %24 %163 %124 
					                                         f32 %174 = OpLoad %173 
					                                Private f32* %175 = OpAccessChain %162 %124 
					                                                      OpStore %175 %174 
					                                       f32_4 %176 = OpLoad %153 
					                                       f32_4 %177 = OpLoad %162 
					                                       f32_4 %178 = OpFAdd %176 %177 
					                                                      OpStore %153 %178 
					                                       f32_4 %180 = OpLoad %36 
					                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
					                                       f32_4 %182 = OpLoad %36 
					                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
					                                         f32 %184 = OpDot %181 %183 
					                                                      OpStore %179 %184 
					                                         f32 %185 = OpLoad %179 
					                                         f32 %186 = OpExtInst %1 32 %185 
					                                                      OpStore %179 %186 
					                                         f32 %187 = OpLoad %179 
					                                       f32_3 %188 = OpCompositeConstruct %187 %187 %187 
					                                       f32_4 %189 = OpLoad %36 
					                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
					                                       f32_3 %191 = OpFMul %188 %190 
					                                       f32_4 %192 = OpLoad %36 
					                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
					                                                      OpStore %36 %193 
					                                       f32_3 %196 = OpLoad %195 
					                              Uniform f32_4* %197 = OpAccessChain %24 %62 %45 
					                                       f32_4 %198 = OpLoad %197 
					                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
					                                         f32 %200 = OpDot %196 %199 
					                                Private f32* %202 = OpAccessChain %60 %201 
					                                                      OpStore %202 %200 
					                                       f32_3 %203 = OpLoad %195 
					                              Uniform f32_4* %204 = OpAccessChain %24 %62 %40 
					                                       f32_4 %205 = OpLoad %204 
					                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
					                                         f32 %207 = OpDot %203 %206 
					                                Private f32* %208 = OpAccessChain %60 %114 
					                                                      OpStore %208 %207 
					                                       f32_3 %209 = OpLoad %195 
					                              Uniform f32_4* %210 = OpAccessChain %24 %62 %39 
					                                       f32_4 %211 = OpLoad %210 
					                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
					                                         f32 %213 = OpDot %209 %212 
					                                Private f32* %215 = OpAccessChain %60 %214 
					                                                      OpStore %215 %213 
					                                       f32_4 %216 = OpLoad %60 
					                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
					                                       f32_4 %218 = OpLoad %60 
					                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
					                                         f32 %220 = OpDot %217 %219 
					                                                      OpStore %179 %220 
					                                         f32 %221 = OpLoad %179 
					                                         f32 %222 = OpExtInst %1 32 %221 
					                                                      OpStore %179 %222 
					                                         f32 %223 = OpLoad %179 
					                                       f32_3 %224 = OpCompositeConstruct %223 %223 %223 
					                                       f32_4 %225 = OpLoad %60 
					                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
					                                       f32_3 %227 = OpFMul %224 %226 
					                                       f32_4 %228 = OpLoad %60 
					                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
					                                                      OpStore %60 %229 
					                                       f32_4 %230 = OpLoad %60 
					                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
					                                       f32_4 %232 = OpLoad %36 
					                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
					                                         f32 %234 = OpDot %231 %233 
					                                                      OpStore %179 %234 
					                              Uniform f32_4* %235 = OpAccessChain %24 %40 
					                                       f32_4 %236 = OpLoad %235 
					                                       f32_2 %237 = OpVectorShuffle %236 %236 1 1 
					                              Uniform f32_4* %239 = OpAccessChain %24 %238 %40 
					                                       f32_4 %240 = OpLoad %239 
					                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
					                                       f32_2 %242 = OpFMul %237 %241 
					                                       f32_4 %243 = OpLoad %36 
					                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 2 3 
					                                                      OpStore %36 %244 
					                              Uniform f32_4* %245 = OpAccessChain %24 %238 %45 
					                                       f32_4 %246 = OpLoad %245 
					                                       f32_2 %247 = OpVectorShuffle %246 %246 0 1 
					                              Uniform f32_4* %248 = OpAccessChain %24 %40 
					                                       f32_4 %249 = OpLoad %248 
					                                       f32_2 %250 = OpVectorShuffle %249 %249 0 0 
					                                       f32_2 %251 = OpFMul %247 %250 
					                                       f32_4 %252 = OpLoad %36 
					                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
					                                       f32_2 %254 = OpFAdd %251 %253 
					                                       f32_4 %255 = OpLoad %36 
					                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
					                                                      OpStore %36 %256 
					                                       f32_4 %257 = OpLoad %36 
					                                       f32_2 %258 = OpVectorShuffle %257 %257 0 1 
					                                       f32_2 %259 = OpExtInst %1 4 %258 
					                                Uniform f32* %261 = OpAccessChain %24 %260 
					                                         f32 %262 = OpLoad %261 
					                                Uniform f32* %264 = OpAccessChain %24 %263 
					                                         f32 %265 = OpLoad %264 
					                                       f32_2 %266 = OpCompositeConstruct %262 %265 
					                                       f32_2 %267 = OpFMul %259 %266 
					                                       f32_4 %268 = OpLoad %36 
					                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 2 3 
					                                                      OpStore %36 %269 
					                                       f32_4 %270 = OpLoad %60 
					                                       f32_2 %271 = OpVectorShuffle %270 %270 3 3 
					                                       f32_4 %272 = OpLoad %36 
					                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
					                                       f32_2 %274 = OpFDiv %271 %273 
					                                       f32_4 %275 = OpLoad %36 
					                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
					                                                      OpStore %36 %276 
					                                       f32_4 %278 = OpLoad %36 
					                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
					                                       f32_4 %280 = OpLoad %36 
					                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
					                                         f32 %282 = OpDot %279 %281 
					                                                      OpStore %277 %282 
					                                Uniform f32* %284 = OpAccessChain %24 %283 
					                                         f32 %285 = OpLoad %284 
					                                Uniform f32* %287 = OpAccessChain %24 %286 
					                                         f32 %288 = OpLoad %287 
					                                       f32_2 %289 = OpCompositeConstruct %285 %288 
					                                       f32_2 %292 = OpFMul %289 %291 
					                                       f32_4 %293 = OpLoad %36 
					                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
					                                       f32_2 %295 = OpFAdd %292 %294 
					                                       f32_4 %296 = OpLoad %36 
					                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 2 3 
					                                                      OpStore %36 %297 
					                                       f32_4 %298 = OpLoad %36 
					                                       f32_2 %299 = OpVectorShuffle %298 %298 0 1 
					                                       f32_2 %300 = OpFDiv %291 %299 
					                                       f32_4 %301 = OpLoad %36 
					                                       f32_4 %302 = OpVectorShuffle %301 %300 0 1 4 5 
					                                                      OpStore %36 %302 
					                                         f32 %303 = OpLoad %277 
					                                         f32 %304 = OpExtInst %1 32 %303 
					                                                      OpStore %277 %304 
					                                  Input f32* %308 = OpAccessChain %306 %114 
					                                         f32 %309 = OpLoad %308 
					                                         f32 %310 = OpExtInst %1 4 %309 
					                                Uniform f32* %312 = OpAccessChain %24 %311 
					                                         f32 %313 = OpLoad %312 
					                                         f32 %314 = OpFMul %310 %313 
					                                Private f32* %315 = OpAccessChain %60 %201 
					                                                      OpStore %315 %314 
					                                         f32 %316 = OpLoad %277 
					                                Private f32* %317 = OpAccessChain %60 %201 
					                                         f32 %318 = OpLoad %317 
					                                         f32 %319 = OpFMul %316 %318 
					                                                      OpStore %277 %319 
					                                         f32 %320 = OpLoad %277 
					                                         f32 %322 = OpFMul %320 %321 
					                                Private f32* %323 = OpAccessChain %60 %201 
					                                                      OpStore %323 %322 
					                                Uniform f32* %326 = OpAccessChain %24 %325 
					                                         f32 %327 = OpLoad %326 
					                                         f32 %328 = OpFNegate %327 
					                                         f32 %329 = OpFAdd %328 %135 
					                                                      OpStore %324 %329 
					                                         f32 %330 = OpLoad %324 
					                                Private f32* %331 = OpAccessChain %60 %201 
					                                         f32 %332 = OpLoad %331 
					                                         f32 %333 = OpExtInst %1 4 %332 
					                                         f32 %334 = OpFMul %330 %333 
					                                                      OpStore %324 %334 
					                                         f32 %335 = OpLoad %277 
					                                         f32 %336 = OpFMul %335 %321 
					                                         f32 %337 = OpLoad %324 
					                                         f32 %338 = OpFNegate %337 
					                                         f32 %339 = OpFAdd %336 %338 
					                                                      OpStore %277 %339 
					                                         f32 %340 = OpLoad %179 
					                                         f32 %341 = OpExtInst %1 4 %340 
					                                         f32 %342 = OpLoad %277 
					                                         f32 %343 = OpFMul %341 %342 
					                                         f32 %344 = OpLoad %324 
					                                         f32 %345 = OpFAdd %343 %344 
					                                                      OpStore %179 %345 
					                                Uniform f32* %349 = OpAccessChain %24 %238 %62 %124 
					                                         f32 %350 = OpLoad %349 
					                                        bool %352 = OpFOrdEqual %350 %351 
					                                                      OpStore %348 %352 
					                                        bool %353 = OpLoad %348 
					                                                      OpSelectionMerge %357 None 
					                                                      OpBranchConditional %353 %356 %359 
					                                             %356 = OpLabel 
					                                         f32 %358 = OpLoad %179 
					                                                      OpStore %355 %358 
					                                                      OpBranch %357 
					                                             %359 = OpLabel 
					                                Private f32* %360 = OpAccessChain %60 %201 
					                                         f32 %361 = OpLoad %360 
					                                                      OpStore %355 %361 
					                                                      OpBranch %357 
					                                             %357 = OpLabel 
					                                         f32 %362 = OpLoad %355 
					                                                      OpStore %179 %362 
					                                Uniform f32* %364 = OpAccessChain %24 %363 
					                                         f32 %365 = OpLoad %364 
					                                Uniform f32* %367 = OpAccessChain %24 %366 
					                                         f32 %368 = OpLoad %367 
					                                         f32 %369 = OpFMul %365 %368 
					                                                      OpStore %277 %369 
					                                         f32 %370 = OpLoad %277 
					                                         f32 %371 = OpLoad %179 
					                                         f32 %372 = OpFMul %370 %371 
					                                         f32 %373 = OpFAdd %372 %135 
					                                                      OpStore %277 %373 
					                                         f32 %374 = OpLoad %179 
					                                         f32 %375 = OpLoad %277 
					                                         f32 %376 = OpFDiv %374 %375 
					                                Private f32* %377 = OpAccessChain %60 %201 
					                                                      OpStore %377 %376 
					                                Uniform f32* %379 = OpAccessChain %24 %378 
					                                         f32 %380 = OpLoad %379 
					                                Uniform f32* %381 = OpAccessChain %24 %366 
					                                         f32 %382 = OpLoad %381 
					                                         f32 %383 = OpFMul %380 %382 
					                                                      OpStore %277 %383 
					                                Private f32* %384 = OpAccessChain %60 %201 
					                                         f32 %385 = OpLoad %384 
					                                         f32 %386 = OpLoad %277 
					                                         f32 %387 = OpFMul %385 %386 
					                                                      OpStore %277 %387 
					                                         f32 %389 = OpLoad %277 
					                                         f32 %390 = OpExtInst %1 37 %389 %135 
					                                Private f32* %391 = OpAccessChain %388 %201 
					                                                      OpStore %391 %390 
					                                Private f32* %392 = OpAccessChain %388 %201 
					                                         f32 %393 = OpLoad %392 
					                                         f32 %394 = OpExtInst %1 31 %393 
					                                Private f32* %395 = OpAccessChain %388 %201 
					                                                      OpStore %395 %394 
					                                       f32_4 %396 = OpLoad %153 
					                                       f32_2 %397 = OpLoad %388 
					                                       f32_4 %398 = OpVectorShuffle %397 %397 0 0 0 0 
					                                       f32_4 %399 = OpFMul %396 %398 
					                                                      OpStore %153 %399 
					                                       f32_4 %401 = OpLoad %138 
					                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
					                                       f32_4 %403 = OpLoad %138 
					                                       f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
					                                       f32_3 %405 = OpFMul %402 %404 
					                                       f32_4 %406 = OpLoad %153 
					                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
					                                       f32_3 %408 = OpFAdd %405 %407 
					                                       f32_4 %409 = OpLoad %400 
					                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
					                                                      OpStore %400 %410 
					                                Private f32* %411 = OpAccessChain %129 %124 
					                                         f32 %412 = OpLoad %411 
					                                Uniform f32* %413 = OpAccessChain %24 %123 %124 
					                                         f32 %414 = OpLoad %413 
					                                         f32 %415 = OpFMul %412 %414 
					                                Private f32* %416 = OpAccessChain %153 %124 
					                                         f32 %417 = OpLoad %416 
					                                         f32 %418 = OpFAdd %415 %417 
					                                Private f32* %419 = OpAccessChain %400 %124 
					                                                      OpStore %419 %418 
					                                       f32_4 %421 = OpLoad %400 
					                                                      OpStore %420 %421 
					                              Uniform f32_4* %423 = OpAccessChain %24 %422 
					                                       f32_4 %424 = OpLoad %423 
					                                       f32_4 %427 = OpExtInst %1 40 %424 %426 
					                                                      OpStore %86 %427 
					                                       f32_4 %428 = OpLoad %86 
					                                       f32_4 %431 = OpExtInst %1 37 %428 %430 
					                                                      OpStore %86 %431 
					                                       f32_2 %432 = OpLoad %9 
					                                       f32_4 %433 = OpLoad %86 
					                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
					                                       f32_2 %435 = OpFNegate %434 
					                                       f32_2 %436 = OpFAdd %432 %435 
					                                                      OpStore %388 %436 
					                                       f32_2 %437 = OpLoad %9 
					                                       f32_2 %440 = OpFMul %437 %439 
					                                       f32_4 %441 = OpLoad %86 
					                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
					                                       f32_2 %443 = OpFNegate %442 
					                                       f32_2 %444 = OpFAdd %440 %443 
					                                                      OpStore %9 %444 
					                                       f32_4 %445 = OpLoad %86 
					                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
					                                       f32_2 %447 = OpFNegate %446 
					                                       f32_2 %448 = OpLoad %9 
					                                       f32_2 %449 = OpFAdd %447 %448 
					                                       f32_4 %450 = OpLoad %36 
					                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 2 3 
					                                                      OpStore %36 %451 
					                                       f32_4 %452 = OpLoad %86 
					                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
					                                       f32_2 %454 = OpFNegate %453 
					                                       f32_4 %455 = OpLoad %86 
					                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
					                                       f32_2 %457 = OpFAdd %454 %456 
					                                                      OpStore %9 %457 
					                                       f32_2 %459 = OpLoad %388 
					                                       f32_2 %460 = OpLoad %9 
					                                       f32_2 %461 = OpFDiv %459 %460 
					                                       f32_4 %462 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %463 = OpVectorShuffle %462 %461 0 1 4 5 
					                                                      OpStore vs_TEXCOORD0 %463 
					                                       f32_4 %465 = OpLoad %36 
					                                                      OpStore vs_TEXCOORD2 %465 
					                                       f32_2 %467 = OpLoad %466 
					                                       f32_4 %468 = OpLoad vs_TEXCOORD0 
					                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
					                                                      OpStore vs_TEXCOORD0 %469 
					                                  Input f32* %471 = OpAccessChain %306 %114 
					                                         f32 %472 = OpLoad %471 
					                                        bool %473 = OpFOrdGreaterThanEqual %351 %472 
					                                                      OpStore %470 %473 
					                                        bool %474 = OpLoad %470 
					                                         f32 %475 = OpSelect %474 %135 %351 
					                                Private f32* %476 = OpAccessChain %9 %201 
					                                                      OpStore %476 %475 
					                                Uniform f32* %479 = OpAccessChain %24 %478 
					                                         f32 %480 = OpLoad %479 
					                                         f32 %481 = OpFNegate %480 
					                                Uniform f32* %483 = OpAccessChain %24 %482 
					                                         f32 %484 = OpLoad %483 
					                                         f32 %485 = OpFAdd %481 %484 
					                                Private f32* %486 = OpAccessChain %477 %201 
					                                                      OpStore %486 %485 
					                                Private f32* %487 = OpAccessChain %9 %201 
					                                         f32 %488 = OpLoad %487 
					                                Private f32* %489 = OpAccessChain %477 %201 
					                                         f32 %490 = OpLoad %489 
					                                         f32 %491 = OpFMul %488 %490 
					                                Uniform f32* %492 = OpAccessChain %24 %478 
					                                         f32 %493 = OpLoad %492 
					                                         f32 %494 = OpFAdd %491 %493 
					                                Private f32* %495 = OpAccessChain %9 %201 
					                                                      OpStore %495 %494 
					                                Private f32* %496 = OpAccessChain %9 %201 
					                                         f32 %497 = OpLoad %496 
					                                         f32 %498 = OpFMul %497 %290 
					                                Uniform f32* %500 = OpAccessChain %24 %499 
					                                         f32 %501 = OpLoad %500 
					                                         f32 %502 = OpFAdd %498 %501 
					                                Private f32* %503 = OpAccessChain %9 %201 
					                                                      OpStore %503 %502 
					                                Private f32* %504 = OpAccessChain %9 %201 
					                                         f32 %505 = OpLoad %504 
					                                Uniform f32* %506 = OpAccessChain %24 %366 
					                                         f32 %507 = OpLoad %506 
					                                         f32 %508 = OpFMul %505 %507 
					                                Private f32* %509 = OpAccessChain %9 %201 
					                                                      OpStore %509 %508 
					                                Private f32* %510 = OpAccessChain %9 %201 
					                                         f32 %511 = OpLoad %510 
					                                         f32 %512 = OpFNegate %511 
					                                         f32 %514 = OpFMul %512 %513 
					                                         f32 %515 = OpFAdd %514 %513 
					                                Private f32* %516 = OpAccessChain %9 %201 
					                                                      OpStore %516 %515 
					                                Private f32* %517 = OpAccessChain %9 %201 
					                                         f32 %518 = OpLoad %517 
					                                Private f32* %519 = OpAccessChain %60 %201 
					                                         f32 %520 = OpLoad %519 
					                                         f32 %521 = OpFMul %518 %520 
					                                         f32 %523 = OpFAdd %521 %522 
					                                Private f32* %524 = OpAccessChain %60 %124 
					                                                      OpStore %524 %523 
					                                         f32 %525 = OpLoad %277 
					                                         f32 %526 = OpFNegate %525 
					                                         f32 %527 = OpFMul %526 %513 
					                                Private f32* %528 = OpAccessChain %60 %124 
					                                         f32 %529 = OpLoad %528 
					                                         f32 %530 = OpFAdd %527 %529 
					                                Private f32* %531 = OpAccessChain %60 %114 
					                                                      OpStore %531 %530 
					                                         f32 %532 = OpLoad %277 
					                                         f32 %533 = OpFMul %532 %513 
					                                Private f32* %534 = OpAccessChain %60 %124 
					                                         f32 %535 = OpLoad %534 
					                                         f32 %536 = OpFAdd %533 %535 
					                                Private f32* %537 = OpAccessChain %60 %214 
					                                                      OpStore %537 %536 
					                                       f32_4 %539 = OpLoad %60 
					                                                      OpStore vs_TEXCOORD1 %539 
					                                  Input f32* %541 = OpAccessChain %130 %124 
					                                         f32 %542 = OpLoad %541 
					                                 Output f32* %543 = OpAccessChain vs_TEXCOORD3 %214 
					                                                      OpStore %543 %542 
					                                 Output f32* %544 = OpAccessChain vs_TEXCOORD3 %124 
					                                                      OpStore %544 %351 
					                                Uniform f32* %546 = OpAccessChain %24 %545 
					                                         f32 %547 = OpLoad %546 
					                                Uniform f32* %549 = OpAccessChain %24 %548 
					                                         f32 %550 = OpLoad %549 
					                                Uniform f32* %552 = OpAccessChain %24 %551 
					                                         f32 %553 = OpLoad %552 
					                                Uniform f32* %555 = OpAccessChain %24 %554 
					                                         f32 %556 = OpLoad %555 
					                                       f32_4 %557 = OpCompositeConstruct %547 %550 %553 %556 
					                                Uniform f32* %559 = OpAccessChain %24 %558 
					                                         f32 %560 = OpLoad %559 
					                                Uniform f32* %561 = OpAccessChain %24 %558 
					                                         f32 %562 = OpLoad %561 
					                                Uniform f32* %563 = OpAccessChain %24 %558 
					                                         f32 %564 = OpLoad %563 
					                                Uniform f32* %565 = OpAccessChain %24 %558 
					                                         f32 %566 = OpLoad %565 
					                                       f32_4 %567 = OpCompositeConstruct %560 %562 %564 %566 
					                                         f32 %568 = OpCompositeExtract %567 0 
					                                         f32 %569 = OpCompositeExtract %567 1 
					                                         f32 %570 = OpCompositeExtract %567 2 
					                                         f32 %571 = OpCompositeExtract %567 3 
					                                       f32_4 %572 = OpCompositeConstruct %568 %569 %570 %571 
					                                       f32_4 %573 = OpFMul %557 %572 
					                                                      OpStore %36 %573 
					                                       f32_4 %574 = OpLoad %36 
					                                       f32_2 %575 = OpVectorShuffle %574 %574 2 3 
					                                       f32_2 %576 = OpFNegate %575 
					                                Uniform f32* %577 = OpAccessChain %24 %311 
					                                         f32 %578 = OpLoad %577 
					                                       f32_2 %579 = OpCompositeConstruct %578 %578 
					                                       f32_2 %580 = OpFMul %576 %579 
					                                       f32_3 %581 = OpLoad %477 
					                                       f32_3 %582 = OpVectorShuffle %581 %580 3 1 4 
					                                                      OpStore %477 %582 
					                                       f32_3 %583 = OpLoad %477 
					                                       f32_2 %584 = OpVectorShuffle %583 %583 0 2 
					                                Uniform f32* %586 = OpAccessChain %24 %585 
					                                         f32 %587 = OpLoad %586 
					                                Uniform f32* %589 = OpAccessChain %24 %588 
					                                         f32 %590 = OpLoad %589 
					                                       f32_2 %591 = OpCompositeConstruct %587 %590 
					                                       f32_2 %592 = OpFDiv %584 %591 
					                                       f32_3 %593 = OpLoad %477 
					                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
					                                                      OpStore %477 %594 
					                                       f32_3 %595 = OpLoad %477 
					                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
					                                       f32_2 %597 = OpLoad %466 
					                                       f32_2 %598 = OpFAdd %596 %597 
					                                       f32_4 %599 = OpLoad vs_TEXCOORD3 
					                                       f32_4 %600 = OpVectorShuffle %599 %598 4 5 2 3 
					                                                      OpStore vs_TEXCOORD3 %600 
					                                Private f32* %601 = OpAccessChain %36 %201 
					                                         f32 %602 = OpLoad %601 
					                                         f32 %603 = OpLoad %179 
					                                         f32 %604 = OpFMul %602 %603 
					                                         f32 %605 = OpFAdd %604 %135 
					                                Private f32* %606 = OpAccessChain %477 %201 
					                                                      OpStore %606 %605 
					                                         f32 %607 = OpLoad %179 
					                                Private f32* %608 = OpAccessChain %477 %201 
					                                         f32 %609 = OpLoad %608 
					                                         f32 %610 = OpFDiv %607 %609 
					                                Private f32* %611 = OpAccessChain %60 %201 
					                                                      OpStore %611 %610 
					                                Private f32* %612 = OpAccessChain %36 %114 
					                                         f32 %613 = OpLoad %612 
					                                Private f32* %614 = OpAccessChain %60 %201 
					                                         f32 %615 = OpLoad %614 
					                                         f32 %616 = OpFMul %613 %615 
					                                Private f32* %617 = OpAccessChain %477 %201 
					                                                      OpStore %617 %616 
					                                Private f32* %618 = OpAccessChain %9 %201 
					                                         f32 %619 = OpLoad %618 
					                                Private f32* %620 = OpAccessChain %60 %201 
					                                         f32 %621 = OpLoad %620 
					                                         f32 %622 = OpFMul %619 %621 
					                                         f32 %623 = OpFAdd %622 %522 
					                                Private f32* %624 = OpAccessChain %9 %201 
					                                                      OpStore %624 %623 
					                                Private f32* %625 = OpAccessChain %477 %201 
					                                         f32 %626 = OpLoad %625 
					                                         f32 %627 = OpFNegate %626 
					                                         f32 %628 = OpFMul %627 %513 
					                                Private f32* %629 = OpAccessChain %9 %201 
					                                         f32 %630 = OpLoad %629 
					                                         f32 %631 = OpFAdd %628 %630 
					                                Private f32* %632 = OpAccessChain %60 %114 
					                                                      OpStore %632 %631 
					                                       f32_4 %635 = OpLoad %60 
					                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
					                                                      OpStore vs_TEXCOORD4 %636 
					                                 Output f32* %637 = OpAccessChain %118 %45 %114 
					                                         f32 %638 = OpLoad %637 
					                                         f32 %639 = OpFNegate %638 
					                                 Output f32* %640 = OpAccessChain %118 %45 %114 
					                                                      OpStore %640 %639 
					                                                      OpReturn
					                                                      OpFunctionEnd
					; SPIR-V
					; Version: 1.0
					; Generator: Khronos Glslang Reference Front End; 6
					; Bound: 199
					; Schema: 0
					                                             OpCapability Shader 
					                                      %1 = OpExtInstImport "GLSL.std.450" 
					                                             OpMemoryModel Logical GLSL450 
					                                             OpEntryPoint Fragment %4 "main" %21 %33 %76 %78 %86 %95 %143 %182 
					                                             OpExecutionMode %4 OriginUpperLeft 
					                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
					                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
					                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
					                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
					                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
					                                             OpDecorate %8 RelaxedPrecision 
					                                             OpDecorate %11 RelaxedPrecision 
					                                             OpDecorate %11 DescriptorSet 11 
					                                             OpDecorate %11 Binding 11 
					                                             OpDecorate %12 RelaxedPrecision 
					                                             OpDecorate %15 RelaxedPrecision 
					                                             OpDecorate %15 DescriptorSet 15 
					                                             OpDecorate %15 Binding 15 
					                                             OpDecorate %16 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD3 Location 21 
					                                             OpDecorate %28 RelaxedPrecision 
					                                             OpDecorate %30 RelaxedPrecision 
					                                             OpDecorate %31 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD4 Location 33 
					                                             OpDecorate %37 RelaxedPrecision 
					                                             OpDecorate %38 RelaxedPrecision 
					                                             OpDecorate %41 RelaxedPrecision 
					                                             OpDecorate %42 RelaxedPrecision 
					                                             OpDecorate %43 RelaxedPrecision 
					                                             OpDecorate %46 RelaxedPrecision 
					                                             OpDecorate %49 RelaxedPrecision 
					                                             OpDecorate %51 RelaxedPrecision 
					                                             OpMemberDecorate %52 0 RelaxedPrecision 
					                                             OpMemberDecorate %52 0 Offset 52 
					                                             OpMemberDecorate %52 1 Offset 52 
					                                             OpDecorate %52 Block 
					                                             OpDecorate %54 DescriptorSet 54 
					                                             OpDecorate %54 Binding 54 
					                                             OpDecorate %60 RelaxedPrecision 
					                                             OpDecorate %61 RelaxedPrecision 
					                                             OpDecorate %63 RelaxedPrecision 
					                                             OpDecorate %64 RelaxedPrecision 
					                                             OpDecorate %65 RelaxedPrecision 
					                                             OpDecorate %70 RelaxedPrecision 
					                                             OpDecorate %72 RelaxedPrecision 
					                                             OpDecorate %73 RelaxedPrecision 
					                                             OpDecorate %74 RelaxedPrecision 
					                                             OpDecorate %75 RelaxedPrecision 
					                                             OpDecorate %76 RelaxedPrecision 
					                                             OpDecorate %76 Location 76 
					                                             OpDecorate %77 RelaxedPrecision 
					                                             OpDecorate %78 RelaxedPrecision 
					                                             OpDecorate %78 Location 78 
					                                             OpDecorate %79 RelaxedPrecision 
					                                             OpDecorate %80 RelaxedPrecision 
					                                             OpDecorate %81 RelaxedPrecision 
					                                             OpDecorate %82 RelaxedPrecision 
					                                             OpDecorate %83 RelaxedPrecision 
					                                             OpDecorate %84 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD0 Location 86 
					                                             OpDecorate %90 RelaxedPrecision 
					                                             OpDecorate %92 RelaxedPrecision 
					                                             OpDecorate %93 RelaxedPrecision 
					                                             OpDecorate %94 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD1 Location 95 
					                                             OpDecorate %96 RelaxedPrecision 
					                                             OpDecorate %97 RelaxedPrecision 
					                                             OpDecorate %98 RelaxedPrecision 
					                                             OpDecorate %99 RelaxedPrecision 
					                                             OpDecorate %100 RelaxedPrecision 
					                                             OpDecorate %101 RelaxedPrecision 
					                                             OpDecorate %102 RelaxedPrecision 
					                                             OpDecorate %103 RelaxedPrecision 
					                                             OpDecorate %104 RelaxedPrecision 
					                                             OpDecorate %105 RelaxedPrecision 
					                                             OpDecorate %106 RelaxedPrecision 
					                                             OpDecorate %107 RelaxedPrecision 
					                                             OpDecorate %108 RelaxedPrecision 
					                                             OpDecorate %109 RelaxedPrecision 
					                                             OpDecorate %110 RelaxedPrecision 
					                                             OpDecorate %111 RelaxedPrecision 
					                                             OpDecorate %112 RelaxedPrecision 
					                                             OpDecorate %113 RelaxedPrecision 
					                                             OpDecorate %114 RelaxedPrecision 
					                                             OpDecorate %115 RelaxedPrecision 
					                                             OpDecorate %116 RelaxedPrecision 
					                                             OpDecorate %117 RelaxedPrecision 
					                                             OpDecorate %119 RelaxedPrecision 
					                                             OpDecorate %120 RelaxedPrecision 
					                                             OpDecorate %122 RelaxedPrecision 
					                                             OpDecorate %123 RelaxedPrecision 
					                                             OpDecorate %124 RelaxedPrecision 
					                                             OpDecorate %126 RelaxedPrecision 
					                                             OpDecorate %127 RelaxedPrecision 
					                                             OpDecorate %128 RelaxedPrecision 
					                                             OpDecorate %129 RelaxedPrecision 
					                                             OpDecorate %130 RelaxedPrecision 
					                                             OpDecorate %131 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 RelaxedPrecision 
					                                             OpDecorate vs_TEXCOORD2 Location 143 
					                                             OpDecorate %144 RelaxedPrecision 
					                                             OpDecorate %145 RelaxedPrecision 
					                                             OpDecorate %146 RelaxedPrecision 
					                                             OpDecorate %147 RelaxedPrecision 
					                                             OpDecorate %150 RelaxedPrecision 
					                                             OpDecorate %151 RelaxedPrecision 
					                                             OpDecorate %163 RelaxedPrecision 
					                                             OpDecorate %164 RelaxedPrecision 
					                                             OpDecorate %165 RelaxedPrecision 
					                                             OpDecorate %166 RelaxedPrecision 
					                                             OpDecorate %168 RelaxedPrecision 
					                                             OpDecorate %177 RelaxedPrecision 
					                                             OpDecorate %182 RelaxedPrecision 
					                                             OpDecorate %182 Location 182 
					                                             OpDecorate %188 RelaxedPrecision 
					                                      %2 = OpTypeVoid 
					                                      %3 = OpTypeFunction %2 
					                                      %6 = OpTypeFloat 32 
					                                      %7 = OpTypePointer Private %6 
					                         Private f32* %8 = OpVariable Private 
					                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
					                                     %10 = OpTypePointer UniformConstant %9 
					UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
					                                     %13 = OpTypeSampler 
					                                     %14 = OpTypePointer UniformConstant %13 
					            UniformConstant sampler* %15 = OpVariable UniformConstant 
					                                     %17 = OpTypeSampledImage %9 
					                                     %19 = OpTypeVector %6 4 
					                                     %20 = OpTypePointer Input %19 
					               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
					                                     %22 = OpTypeVector %6 2 
					                                     %26 = OpTypeInt 32 0 
					                                 u32 %27 = OpConstant 3 
					                                     %29 = OpTypePointer Private %19 
					                      Private f32_4* %30 = OpVariable Private 
					                                     %32 = OpTypePointer Input %22 
					               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
					                                 u32 %34 = OpConstant 0 
					                                     %35 = OpTypePointer Input %6 
					                                 u32 %39 = OpConstant 1 
					                                 f32 %47 = OpConstant 3,674022E-40 
					                                 f32 %48 = OpConstant 3,674022E-40 
					                      Private f32_4* %51 = OpVariable Private 
					                                     %52 = OpTypeStruct %19 %19 
					                                     %53 = OpTypePointer Uniform %52 
					     Uniform struct {f32_4; f32_4;}* %54 = OpVariable Uniform 
					                                     %55 = OpTypeInt 32 1 
					                                 i32 %56 = OpConstant 0 
					                                     %57 = OpTypeVector %6 3 
					                                     %58 = OpTypePointer Uniform %19 
					                                     %68 = OpTypePointer Uniform %6 
					                        Input f32_4* %76 = OpVariable Input 
					                        Input f32_4* %78 = OpVariable Input 
					                        Private f32* %82 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
					                                     %91 = OpTypePointer Private %22 
					                      Private f32_2* %92 = OpVariable Private 
					               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
					                     Private f32_4* %113 = OpVariable Private 
					                     Private f32_2* %132 = OpVariable Private 
					                                i32 %133 = OpConstant 1 
					               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
					                                u32 %169 = OpConstant 2 
					                                f32 %173 = OpConstant 3,674022E-40 
					                     Private f32_4* %176 = OpVariable Private 
					                                    %181 = OpTypePointer Output %19 
					                      Output f32_4* %182 = OpVariable Output 
					                                    %184 = OpTypeBool 
					                                    %185 = OpTypePointer Private %184 
					                      Private bool* %186 = OpVariable Private 
					                                i32 %192 = OpConstant -1 
					                                 void %4 = OpFunction None %3 
					                                      %5 = OpLabel 
					                 read_only Texture2D %12 = OpLoad %11 
					                             sampler %16 = OpLoad %15 
					          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
					                               f32_4 %23 = OpLoad vs_TEXCOORD3 
					                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
					                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
					                                 f32 %28 = OpCompositeExtract %25 3 
					                                             OpStore %8 %28 
					                                 f32 %31 = OpLoad %8 
					                          Input f32* %36 = OpAccessChain vs_TEXCOORD4 %34 
					                                 f32 %37 = OpLoad %36 
					                                 f32 %38 = OpFMul %31 %37 
					                          Input f32* %40 = OpAccessChain vs_TEXCOORD4 %39 
					                                 f32 %41 = OpLoad %40 
					                                 f32 %42 = OpFNegate %41 
					                                 f32 %43 = OpFAdd %38 %42 
					                        Private f32* %44 = OpAccessChain %30 %34 
					                                             OpStore %44 %43 
					                        Private f32* %45 = OpAccessChain %30 %34 
					                                 f32 %46 = OpLoad %45 
					                                 f32 %49 = OpExtInst %1 43 %46 %47 %48 
					                        Private f32* %50 = OpAccessChain %30 %34 
					                                             OpStore %50 %49 
					                      Uniform f32_4* %59 = OpAccessChain %54 %56 
					                               f32_4 %60 = OpLoad %59 
					                               f32_3 %61 = OpVectorShuffle %60 %60 3 3 3 
					                      Uniform f32_4* %62 = OpAccessChain %54 %56 
					                               f32_4 %63 = OpLoad %62 
					                               f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
					                               f32_3 %65 = OpFMul %61 %64 
					                               f32_4 %66 = OpLoad %51 
					                               f32_4 %67 = OpVectorShuffle %66 %65 4 5 6 3 
					                                             OpStore %51 %67 
					                        Uniform f32* %69 = OpAccessChain %54 %56 %27 
					                                 f32 %70 = OpLoad %69 
					                        Private f32* %71 = OpAccessChain %51 %27 
					                                             OpStore %71 %70 
					                               f32_4 %72 = OpLoad %30 
					                               f32_4 %73 = OpVectorShuffle %72 %72 0 0 0 0 
					                               f32_4 %74 = OpLoad %51 
					                               f32_4 %75 = OpFMul %73 %74 
					                                             OpStore %51 %75 
					                               f32_4 %77 = OpLoad %76 
					                               f32_4 %79 = OpLoad %78 
					                               f32_4 %80 = OpFNegate %79 
					                               f32_4 %81 = OpFAdd %77 %80 
					                                             OpStore %30 %81 
					                 read_only Texture2D %83 = OpLoad %11 
					                             sampler %84 = OpLoad %15 
					          read_only Texture2DSampled %85 = OpSampledImage %83 %84 
					                               f32_4 %87 = OpLoad vs_TEXCOORD0 
					                               f32_2 %88 = OpVectorShuffle %87 %87 0 1 
					                               f32_4 %89 = OpImageSampleImplicitLod %85 %88 
					                                 f32 %90 = OpCompositeExtract %89 3 
					                                             OpStore %82 %90 
					                                 f32 %93 = OpLoad %82 
					                               f32_2 %94 = OpCompositeConstruct %93 %93 
					                               f32_4 %96 = OpLoad vs_TEXCOORD1 
					                               f32_2 %97 = OpVectorShuffle %96 %96 0 0 
					                               f32_2 %98 = OpFMul %94 %97 
					                               f32_4 %99 = OpLoad vs_TEXCOORD1 
					                              f32_2 %100 = OpVectorShuffle %99 %99 2 1 
					                              f32_2 %101 = OpFNegate %100 
					                              f32_2 %102 = OpFAdd %98 %101 
					                                             OpStore %92 %102 
					                              f32_2 %103 = OpLoad %92 
					                              f32_2 %104 = OpCompositeConstruct %47 %47 
					                              f32_2 %105 = OpCompositeConstruct %48 %48 
					                              f32_2 %106 = OpExtInst %1 43 %103 %104 %105 
					                                             OpStore %92 %106 
					                              f32_2 %107 = OpLoad %92 
					                              f32_4 %108 = OpVectorShuffle %107 %107 0 0 0 0 
					                              f32_4 %109 = OpLoad %30 
					                              f32_4 %110 = OpFMul %108 %109 
					                              f32_4 %111 = OpLoad %78 
					                              f32_4 %112 = OpFAdd %110 %111 
					                                             OpStore %30 %112 
					                              f32_2 %114 = OpLoad %92 
					                              f32_4 %115 = OpVectorShuffle %114 %114 1 1 1 1 
					                              f32_4 %116 = OpLoad %30 
					                              f32_4 %117 = OpFMul %115 %116 
					                                             OpStore %113 %117 
					                       Private f32* %118 = OpAccessChain %30 %27 
					                                f32 %119 = OpLoad %118 
					                                f32 %120 = OpFNegate %119 
					                       Private f32* %121 = OpAccessChain %92 %39 
					                                f32 %122 = OpLoad %121 
					                                f32 %123 = OpFMul %120 %122 
					                                f32 %124 = OpFAdd %123 %48 
					                       Private f32* %125 = OpAccessChain %30 %34 
					                                             OpStore %125 %124 
					                              f32_4 %126 = OpLoad %51 
					                              f32_4 %127 = OpLoad %30 
					                              f32_4 %128 = OpVectorShuffle %127 %127 0 0 0 0 
					                              f32_4 %129 = OpFMul %126 %128 
					                              f32_4 %130 = OpLoad %113 
					                              f32_4 %131 = OpFAdd %129 %130 
					                                             OpStore %51 %131 
					                     Uniform f32_4* %134 = OpAccessChain %54 %133 
					                              f32_4 %135 = OpLoad %134 
					                              f32_2 %136 = OpVectorShuffle %135 %135 0 1 
					                              f32_2 %137 = OpFNegate %136 
					                     Uniform f32_4* %138 = OpAccessChain %54 %133 
					                              f32_4 %139 = OpLoad %138 
					                              f32_2 %140 = OpVectorShuffle %139 %139 2 3 
					                              f32_2 %141 = OpFAdd %137 %140 
					                                             OpStore %132 %141 
					                              f32_2 %142 = OpLoad %132 
					                              f32_4 %144 = OpLoad vs_TEXCOORD2 
					                              f32_2 %145 = OpVectorShuffle %144 %144 0 1 
					                              f32_2 %146 = OpExtInst %1 4 %145 
					                              f32_2 %147 = OpFNegate %146 
					                              f32_2 %148 = OpFAdd %142 %147 
					                                             OpStore %132 %148 
					                              f32_2 %149 = OpLoad %132 
					                              f32_4 %150 = OpLoad vs_TEXCOORD2 
					                              f32_2 %151 = OpVectorShuffle %150 %150 2 3 
					                              f32_2 %152 = OpFMul %149 %151 
					                                             OpStore %132 %152 
					                              f32_2 %153 = OpLoad %132 
					                              f32_2 %154 = OpCompositeConstruct %47 %47 
					                              f32_2 %155 = OpCompositeConstruct %48 %48 
					                              f32_2 %156 = OpExtInst %1 43 %153 %154 %155 
					                                             OpStore %132 %156 
					                       Private f32* %157 = OpAccessChain %132 %39 
					                                f32 %158 = OpLoad %157 
					                       Private f32* %159 = OpAccessChain %132 %34 
					                                f32 %160 = OpLoad %159 
					                                f32 %161 = OpFMul %158 %160 
					                       Private f32* %162 = OpAccessChain %30 %34 
					                                             OpStore %162 %161 
					                              f32_4 %163 = OpLoad %51 
					                              f32_4 %164 = OpLoad %30 
					                              f32_4 %165 = OpVectorShuffle %164 %164 0 0 0 0 
					                              f32_4 %166 = OpFMul %163 %165 
					                                             OpStore %51 %166 
					                       Private f32* %167 = OpAccessChain %51 %27 
					                                f32 %168 = OpLoad %167 
					                         Input f32* %170 = OpAccessChain vs_TEXCOORD3 %169 
					                                f32 %171 = OpLoad %170 
					                                f32 %172 = OpFMul %168 %171 
					                                f32 %174 = OpFAdd %172 %173 
					                       Private f32* %175 = OpAccessChain %30 %34 
					                                             OpStore %175 %174 
					                              f32_4 %177 = OpLoad %51 
					                              f32_4 %178 = OpLoad vs_TEXCOORD3 
					                              f32_4 %179 = OpVectorShuffle %178 %178 2 2 2 2 
					                              f32_4 %180 = OpFMul %177 %179 
					                                             OpStore %176 %180 
					                              f32_4 %183 = OpLoad %176 
					                                             OpStore %182 %183 
					                       Private f32* %187 = OpAccessChain %30 %34 
					                                f32 %188 = OpLoad %187 
					                               bool %189 = OpFOrdLessThan %188 %47 
					                                             OpStore %186 %189 
					                               bool %190 = OpLoad %186 
					                                i32 %191 = OpSelect %190 %133 %56 
					                                i32 %193 = OpIMul %191 %192 
					                               bool %194 = OpINotEqual %193 %56 
					                                             OpSelectionMerge %196 None 
					                                             OpBranchConditional %194 %195 %196 
					                                    %195 = OpLabel 
					                                             OpKill
					                                    %196 = OpLabel 
					                                             OpReturn
					                                             OpFunctionEnd"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat10_0.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    SV_Target0 = vec4(u_xlat0) * vs_COLOR0;
					    return;
					}"
				}
				SubProgram "glcore " {
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					void main()
					{
					    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = u_xlat10_1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
					    SV_Target0 = u_xlat1.yyyy * u_xlat0;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[18];
						vec4 _UnderlayColor;
						vec4 unused_0_2[10];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
					    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
					    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNDERLAY_ON" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "UNDERLAY_ON" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[18];
						vec4 _UnderlayColor;
						vec4 unused_0_2[10];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
					    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat10_0.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = vs_COLOR0.w * u_xlat0 + -0.00100000005;
					    u_xlat1 = vec4(u_xlat0) * vs_COLOR0;
					    SV_Target0 = u_xlat1;
					    u_xlatb0 = u_xlat2<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					void main()
					{
					    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = u_xlat10_1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
					    u_xlat1.x = u_xlat0.w * u_xlat1.y + -0.00100000005;
					    u_xlat0 = u_xlat1.yyyy * u_xlat0;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[18];
						vec4 _UnderlayColor;
						vec4 unused_0_2[10];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
					    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
					    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
					    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[18];
						vec4 _UnderlayColor;
						vec4 unused_0_2[10];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
					    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_UI_CLIP_RECT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[26];
						vec4 _ClipRect;
						vec4 unused_0_2[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					void main()
					{
					    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat1 = vec4(u_xlat2) * vs_COLOR0;
					    SV_Target0 = u_xlat0.xxxx * u_xlat1;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_UI_CLIP_RECT" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[26];
						vec4 _ClipRect;
						vec4 unused_0_2[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					void main()
					{
					    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = u_xlat10_1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
					    u_xlat0 = u_xlat1.yyyy * u_xlat0;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[18];
						vec4 _UnderlayColor;
						vec4 unused_0_2[7];
						vec4 _ClipRect;
						vec4 unused_0_4[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
					    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[18];
						vec4 _UnderlayColor;
						vec4 unused_0_2[7];
						vec4 _ClipRect;
						vec4 unused_0_4[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[26];
						vec4 _ClipRect;
						vec4 unused_0_2[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					void main()
					{
					    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat1 = vec4(u_xlat2) * vs_COLOR0;
					    u_xlat2 = u_xlat1.w * u_xlat0.x + -0.00100000005;
					    u_xlat1 = u_xlat0.xxxx * u_xlat1;
					    SV_Target0 = u_xlat1;
					    u_xlatb0 = u_xlat2<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[26];
						vec4 _ClipRect;
						vec4 unused_0_2[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = u_xlat10_1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
					    u_xlat0 = u_xlat1.yyyy * u_xlat0;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat3 = u_xlat0.w * u_xlat1.x + -0.00100000005;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat3<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[18];
						vec4 _UnderlayColor;
						vec4 unused_0_2[7];
						vec4 _ClipRect;
						vec4 unused_0_4[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
					    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
					    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vulkan"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[18];
						vec4 _UnderlayColor;
						vec4 unused_0_2[7];
						vec4 _ClipRect;
						vec4 unused_0_4[2];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat0.x = u_xlat10_0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    u_xlat1.w = _UnderlayColor.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
					    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}"
				}
				SubProgram "glcore " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!!!GL3x"
				}
				SubProgram "vulkan " {
					Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
					"!!vulkan"
				}
			}
		}
	}
	CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
}